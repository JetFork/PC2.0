/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef uc_TYPES_H
#define uc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace uc {

struct PresenceMessageType {
  enum type {
    DefaultType = 1
  };
};

extern const std::map<int, const char*> _PresenceMessageType_VALUES_TO_NAMES;

struct PresenceMessageID {
  enum type {
    DefaultId = 1
  };
};

extern const std::map<int, const char*> _PresenceMessageID_VALUES_TO_NAMES;

struct PresenceType {
  enum type {
    Online = 1,
    Busy = 2,
    Away = 3,
    Meeting = 4,
    Offline = 5,
    Call = 6,
    Meeting_Phone = 7,
    Meeting_Ctrl = 8
  };
};

extern const std::map<int, const char*> _PresenceType_VALUES_TO_NAMES;

struct DeviceType {
  enum type {
    Iphone = 1,
    Android = 2,
    PC = 3,
    Background = 4,
    Ipad = 5,
    Web = 6
  };
};

extern const std::map<int, const char*> _DeviceType_VALUES_TO_NAMES;

struct PingMessageType {
  enum type {
    DefaultType = 1
  };
};

extern const std::map<int, const char*> _PingMessageType_VALUES_TO_NAMES;

struct PingMessageID {
  enum type {
    DefaultId = 1
  };
};

extern const std::map<int, const char*> _PingMessageID_VALUES_TO_NAMES;

struct AckMessageID {
  enum type {
    AckSent = 1,
    AckReceived = 2,
    AckRead = 3,
    AckPlay = 4
  };
};

extern const std::map<int, const char*> _AckMessageID_VALUES_TO_NAMES;

struct AckMessageType {
  enum type {
    DefaultType = 1,
    BatchAckType = 2
  };
};

extern const std::map<int, const char*> _AckMessageType_VALUES_TO_NAMES;

struct SessionType {
  enum type {
    SingleChat = 1,
    DiscussionChat = 2,
    GroupChat = 3,
    CloudFileChat = 4,
    ConferenceType = 5,
    OrganizationType = 6,
    SystemType = 7,
    APIType = 8
  };
};

extern const std::map<int, const char*> _SessionType_VALUES_TO_NAMES;

struct SleepMessageType {
  enum type {
    DefaultType = 1
  };
};

extern const std::map<int, const char*> _SleepMessageType_VALUES_TO_NAMES;

struct SleepMessageId {
  enum type {
    IQRequest = 1,
    IQConfirm = 2
  };
};

extern const std::map<int, const char*> _SleepMessageId_VALUES_TO_NAMES;

struct SleepMode {
  enum type {
    light = 1,
    deep = 2,
    wakeup = 3
  };
};

extern const std::map<int, const char*> _SleepMode_VALUES_TO_NAMES;

struct GroupType {
  enum type {
    to_person = 0,
    to_group = 16
  };
};

extern const std::map<int, const char*> _GroupType_VALUES_TO_NAMES;

struct ContentType {
  enum type {
    thrift_type = 1,
    mime_type = 2
  };
};

extern const std::map<int, const char*> _ContentType_VALUES_TO_NAMES;

struct PriType {
  enum type {
    thrift_type = 1,
    mime_type = 2,
    audio_type = 4,
    control_type = 8,
    group_type = 16,
    direct_type = 32
  };
};

extern const std::map<int, const char*> _PriType_VALUES_TO_NAMES;

struct ControlPriType {
  enum type {
    unread_count_type = 1,
    display_type = 2,
    webpush_send_type = 4,
    webpush_count_type = 8
  };
};

extern const std::map<int, const char*> _ControlPriType_VALUES_TO_NAMES;

struct ChannelPriType {
  enum type {
    channel0 = 1,
    channel1 = 2,
    channel2 = 4,
    channel3 = 8,
    channel4 = 16
  };
};

extern const std::map<int, const char*> _ChannelPriType_VALUES_TO_NAMES;

struct ChatMessageType {
  enum type {
    NormalChat = 1,
    DiscussionChat = 2,
    GroupChat = 3,
    CloudFileChat = 4
  };
};

extern const std::map<int, const char*> _ChatMessageType_VALUES_TO_NAMES;

struct ChatMessageId {
  enum type {
    TextContent = 1,
    MediaContent = 2,
    DocumentSend = 3,
    DocumentForward = 4,
    DocumentDel = 5,
    CodeCreate = 6,
    CodeForward = 7,
    CodeDel = 8,
    CloudFileCreate = 9,
    ReportContent = 10,
    RevocationMsg = 11
  };
};

extern const std::map<int, const char*> _ChatMessageId_VALUES_TO_NAMES;

struct GroupMessageId {
  enum type {
    TextContent = 1,
    MediaContent = 2,
    DisMemberAdd = 3,
    DisMemberDel = 4,
    DisNameUpdate = 5,
    DiscussionCreate = 6,
    DiscussionTop = 7,
    SummaryCreate = 8,
    DocumentForward = 9,
    AlertRuleUpdate = 10,
    DiscussionClose = 11,
    MsgNotifyUpdate = 12,
    DisMemberKick = 13,
    DocumentDel = 14,
    CodeCreate = 15,
    CodeForward = 16,
    CodeDel = 17,
    CommentCreate = 18,
    CommentDel = 19,
    DisAvatarUpdate = 20,
    DisStateUpdate = 21,
    CloudFileCreate = 22,
    MemberRoleUpdate = 27,
    ReportContent = 28,
    RevocationMsg = 29,
    DiscussionScope = 30
  };
};

extern const std::map<int, const char*> _GroupMessageId_VALUES_TO_NAMES;

struct ClusterMessageId {
  enum type {
    TextContent = 1,
    MediaContent = 2,
    DisMemberAdd = 3,
    DisMemberDel = 4,
    DisNameUpdate = 5,
    DiscussionCreate = 6,
    DiscussionTop = 7,
    SummaryCreate = 8,
    DocumentForward = 9,
    DiscussionClose = 11,
    MsgNotifyUpdate = 12,
    DisMemberKick = 13,
    DocumentDel = 14,
    CodeCreate = 15,
    CodeForward = 16,
    CodeDel = 17,
    CommentCreate = 18,
    CommentDel = 19,
    DisAvatarUpdate = 20,
    DisStateUpdate = 21,
    CloudFileCreate = 22,
    MemberRoleUpdate = 27,
    ReportContent = 28,
    RevocationMsg = 29,
    DiscussionScope = 30
  };
};

extern const std::map<int, const char*> _ClusterMessageId_VALUES_TO_NAMES;

struct CloudFileMessageId {
  enum type {
    TextContent = 1,
    MediaContent = 2,
    DisMemberAdd = 3,
    DisMemberDel = 4,
    DisNameUpdate = 5,
    DiscussionCreate = 6,
    DiscussionClose = 11,
    MsgNotifyUpdate = 12,
    DisMemberKick = 13,
    CommentCreate = 18,
    CommentDel = 19,
    DisAvatarUpdate = 20,
    CloudFileCreate = 22,
    CloudFileUpdate = 23,
    CloudFileDel = 24,
    CloudFileMove = 25,
    CloudFileRename = 26,
    MemberRoleUpdate = 27,
    ReportContent = 28,
    RevocationMsg = 29
  };
};

extern const std::map<int, const char*> _CloudFileMessageId_VALUES_TO_NAMES;

struct ChatMediaType {
  enum type {
    MediaTypeAudio = 1,
    MediaTypeImage = 2,
    MediaTypeVideo = 3,
    MediaTypeEmotion = 4,
    MediaTypeMeetingRecord = 5
  };
};

extern const std::map<int, const char*> _ChatMediaType_VALUES_TO_NAMES;

struct TextContentType {
  enum type {
    PlainText = 1,
    MimeText = 2
  };
};

extern const std::map<int, const char*> _TextContentType_VALUES_TO_NAMES;

struct AlertRuleType {
  enum type {
    NoDay = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 4,
    Thursday = 8,
    Friday = 16,
    Saturday = 32,
    Sunday = 64
  };
};

extern const std::map<int, const char*> _AlertRuleType_VALUES_TO_NAMES;

struct CloudType {
  enum type {
    FS = 0,
    GoKuai = 1,
    AnZhen = 2
  };
};

extern const std::map<int, const char*> _CloudType_VALUES_TO_NAMES;

struct FSDetailType {
  enum type {
    Document = 0,
    Code = 1
  };
};

extern const std::map<int, const char*> _FSDetailType_VALUES_TO_NAMES;

struct GoKuaiDetailType {
  enum type {
    FileOperate = 1
  };
};

extern const std::map<int, const char*> _GoKuaiDetailType_VALUES_TO_NAMES;

struct AnZhenDetailType {
  enum type {
    FileURL = 1
  };
};

extern const std::map<int, const char*> _AnZhenDetailType_VALUES_TO_NAMES;

struct MemberRoleType {
  enum type {
    Member = 0,
    Admin = 1
  };
};

extern const std::map<int, const char*> _MemberRoleType_VALUES_TO_NAMES;

struct SystemProtoMessageType {
  enum type {
    SystemWelcome = 1,
    ClientUpdate = 2,
    CompleteInfoType = 3,
    PwdRuleUpdate = 4,
    clientInstallGuide = 5,
    PasswordModify = 6,
    SensitiveWordDelete = 7,
    GroupRemind = 8
  };
};

extern const std::map<int, const char*> _SystemProtoMessageType_VALUES_TO_NAMES;

struct SystemMessageId {
  enum type {
    DefaultId = 1
  };
};

extern const std::map<int, const char*> _SystemMessageId_VALUES_TO_NAMES;

struct ClientUpdateProtoMessageId {
  enum type {
    IphoneType = 1,
    AndroidType = 2,
    PCType = 3
  };
};

extern const std::map<int, const char*> _ClientUpdateProtoMessageId_VALUES_TO_NAMES;

struct CompleteInfoMessageId {
  enum type {
    tagAdd = 1,
    tagUpdate = 2,
    tagDel = 3
  };
};

extern const std::map<int, const char*> _CompleteInfoMessageId_VALUES_TO_NAMES;

struct InputType {
  enum type {
    SingleLine = 1,
    MultiLine = 2,
    Number = 3,
    Date = 4
  };
};

extern const std::map<int, const char*> _InputType_VALUES_TO_NAMES;

struct PwdRuleUpdateMessageId {
  enum type {
    OutOfDateType = 1,
    ComplexType = 2
  };
};

extern const std::map<int, const char*> _PwdRuleUpdateMessageId_VALUES_TO_NAMES;

struct PwdComplexType {
  enum type {
    type_1 = 1,
    type_2 = 2,
    type_3 = 3
  };
};

extern const std::map<int, const char*> _PwdComplexType_VALUES_TO_NAMES;

struct ClientGuideMessageId {
  enum type {
    MobileClientGuide = 1,
    PCClientGuide = 2
  };
};

extern const std::map<int, const char*> _ClientGuideMessageId_VALUES_TO_NAMES;

struct FileTransmissionMessageType {
  enum type {
    DefaultType = 1
  };
};

extern const std::map<int, const char*> _FileTransmissionMessageType_VALUES_TO_NAMES;

struct FileTransmissionMessageId {
  enum type {
    TransInvite = 1,
    TransReceive = 2,
    TransReject = 3,
    TransStop = 4
  };
};

extern const std::map<int, const char*> _FileTransmissionMessageId_VALUES_TO_NAMES;

struct OrganizeProtoMessageType {
  enum type {
    OrganizeType = 1
  };
};

extern const std::map<int, const char*> _OrganizeProtoMessageType_VALUES_TO_NAMES;

struct OrganizeProtoMessageId {
  enum type {
    DeptUpdate = 1,
    DeptTransfer = 2,
    PositionUpdate = 3,
    EmployeeEntry = 4,
    EmployeeLeave = 5,
    EmployeeRightsUpdate = 6,
    EmployeeJoin = 7,
    DeptParentChange = 8,
    CompanyJoin = 9,
    DeptDelete = 10,
    EmployeeEntryConfirm = 11,
    EmployeeLeaveConfirm = 12,
    DeptTransferConfirm = 13,
    EmployeeEntryReject = 14,
    EmployeeLeaveReject = 15,
    DeptTransferReject = 16
  };
};

extern const std::map<int, const char*> _OrganizeProtoMessageId_VALUES_TO_NAMES;

struct ConfMessageType {
  enum type {
    NormalInstantConfInviteMsg = 1,
    ConfInviteMsg = 2,
    ConfUpdateMsg = 3,
    ConfCancelMsg = 4,
    ConfForwardMsg = 5,
    ConfAlertMsg = 6,
    ConfShareMsg = 7,
    DiscussionInstantConfInviteMsg = 8,
    ConfChatMsg = 9,
    ConfSummaryMsg = 10,
    ConfStateMsg = 11,
    ConfUploadMsg = 12,
    ConfDelDocMsg = 13,
    ConfReportMsg = 14
  };
};

extern const std::map<int, const char*> _ConfMessageType_VALUES_TO_NAMES;

struct InstantConfInviteMessageId {
  enum type {
    IQInvite = 1,
    IQReceive = 2,
    IQReject = 3
  };
};

extern const std::map<int, const char*> _InstantConfInviteMessageId_VALUES_TO_NAMES;

struct ConfInviteMessageId {
  enum type {
    IQInvite = 1,
    IQReceive = 2,
    IQReject = 3
  };
};

extern const std::map<int, const char*> _ConfInviteMessageId_VALUES_TO_NAMES;

struct ConfUpdateMessageId {
  enum type {
    IQInvite = 1,
    IQReceive = 2,
    IQReject = 3
  };
};

extern const std::map<int, const char*> _ConfUpdateMessageId_VALUES_TO_NAMES;

struct ConfCancelMessageId {
  enum type {
    DefaultId = 1,
    RecurrentConfCancel = 2
  };
};

extern const std::map<int, const char*> _ConfCancelMessageId_VALUES_TO_NAMES;

struct ConfAlertMessageId {
  enum type {
    FifteenMinutesAlert = 1,
    ZeroMinutesAlert = 2,
    ConfStartAlert = 3,
    ConfEndAlert = 4,
    PartJoinAlert = 5,
    PartQuitAlert = 6
  };
};

extern const std::map<int, const char*> _ConfAlertMessageId_VALUES_TO_NAMES;

struct RoleType {
  enum type {
    Host = 4,
    Speaker = 5,
    Part = 0
  };
};

extern const std::map<int, const char*> _RoleType_VALUES_TO_NAMES;

struct ConfChatMessageId {
  enum type {
    TextType = 1,
    MediaType = 2,
    RevocationMsg = 3
  };
};

extern const std::map<int, const char*> _ConfChatMessageId_VALUES_TO_NAMES;

struct ConfSummaryMessageId {
  enum type {
    SummaryCreate = 1,
    SummaryUpdate = 2,
    SummaryForward = 3
  };
};

extern const std::map<int, const char*> _ConfSummaryMessageId_VALUES_TO_NAMES;

struct ConfSummaryState {
  enum type {
    StateNew = 1,
    StatePublish = 2,
    StateDelete = 3
  };
};

extern const std::map<int, const char*> _ConfSummaryState_VALUES_TO_NAMES;

struct ConfStateMessageId {
  enum type {
    callState = 1
  };
};

extern const std::map<int, const char*> _ConfStateMessageId_VALUES_TO_NAMES;

struct ConfFileMessageId {
  enum type {
    ConfFileUpload = 1
  };
};

extern const std::map<int, const char*> _ConfFileMessageId_VALUES_TO_NAMES;

struct CalendarMessageType {
  enum type {
    CalendarShareType = 7
  };
};

extern const std::map<int, const char*> _CalendarMessageType_VALUES_TO_NAMES;

struct ConfShareMessageId {
  enum type {
    ConfShareCreate = 1,
    ConfShareCancel = 2,
    ConfShareGrantorDisable = 3,
    ConfShareGranteeDisable = 4,
    ConfShareGranteeTransfer = 5,
    ConfShareGrantorLeave = 6,
    ConfShareGranteeLeave = 7
  };
};

extern const std::map<int, const char*> _ConfShareMessageId_VALUES_TO_NAMES;

struct AudioChatMessageType {
  enum type {
    DefaultType = 1,
    AudioCallRecord = 2,
    AudioUnfamiliarCallRecord = 3,
    DiscussionType = 4,
    GroupType = 5
  };
};

extern const std::map<int, const char*> _AudioChatMessageType_VALUES_TO_NAMES;

struct AudioChatMessageId {
  enum type {
    AudioInvite = 1,
    AudioReceive = 2,
    AudioReject = 3,
    AudioStop = 4,
    AudioCancelCall = 5,
    AudioBlockCall = 6,
    AudioRejectCall = 7,
    AudioRecentCall = 8
  };
};

extern const std::map<int, const char*> _AudioChatMessageId_VALUES_TO_NAMES;

struct AudioCallMessageId {
  enum type {
    AudioBlockCall = 1,
    AudioRejectCall = 2,
    AudioRecentCall = 3
  };
};

extern const std::map<int, const char*> _AudioCallMessageId_VALUES_TO_NAMES;

struct AddressBookMessageType {
  enum type {
    CardUpdateMsg = 1,
    ContacterRelationUpdateMsg = 2,
    AttentionUpdate = 3
  };
};

extern const std::map<int, const char*> _AddressBookMessageType_VALUES_TO_NAMES;

struct CardUpdateMessageId {
  enum type {
    DefaultId = 1
  };
};

extern const std::map<int, const char*> _CardUpdateMessageId_VALUES_TO_NAMES;

struct ContacterRelationUpdateMessageId {
  enum type {
    ContacterAdd = 1,
    ContacterDel = 2
  };
};

extern const std::map<int, const char*> _ContacterRelationUpdateMessageId_VALUES_TO_NAMES;

struct AttentionUpdateMessageId {
  enum type {
    AttentionCreate = 1,
    AttentionCancel = 2
  };
};

extern const std::map<int, const char*> _AttentionUpdateMessageId_VALUES_TO_NAMES;

struct TimeNewsMessageType {
  enum type {
    DefaultType = 1
  };
};

extern const std::map<int, const char*> _TimeNewsMessageType_VALUES_TO_NAMES;

struct TimeNewsMessageId {
  enum type {
    WB_ATTENTION = 1,
    WB_TIMENEWS_PUBLISH = 2,
    WB_TIMENEWS_COMMENT = 3,
    WB_TIMENEWS_FORWARD = 4,
    WB_TIMENEWS_PRAISE = 5
  };
};

extern const std::map<int, const char*> _TimeNewsMessageId_VALUES_TO_NAMES;

struct CaseMessageType {
  enum type {
    DefaultType = 1
  };
};

extern const std::map<int, const char*> _CaseMessageType_VALUES_TO_NAMES;

struct CaseMessageId {
  enum type {
    WB_CASE_PUBLISH = 1,
    WB_CASE_COMMENT = 2,
    WB_CASE_FORWARD = 3,
    WB_CASE_PRAISE = 4
  };
};

extern const std::map<int, const char*> _CaseMessageId_VALUES_TO_NAMES;

struct PollMessageType {
  enum type {
    DefaultType = 1
  };
};

extern const std::map<int, const char*> _PollMessageType_VALUES_TO_NAMES;

struct PollMessageId {
  enum type {
    WB_POLL_PUBLISH = 1,
    WB_POLL_COMMENT = 2,
    WB_POLL_FORWARD = 3,
    WB_POLL_RESPONSE = 4,
    WB_POLL_PRAISE = 5
  };
};

extern const std::map<int, const char*> _PollMessageId_VALUES_TO_NAMES;

struct RemoteAssistanceMessageType {
  enum type {
    DefaultType = 1
  };
};

extern const std::map<int, const char*> _RemoteAssistanceMessageType_VALUES_TO_NAMES;

struct RemoteAssistanceMessageId {
  enum type {
    RemoteAssistanceInvite = 1,
    RemoteAssistanceAccept = 2,
    RemoteAssistanceReject = 3,
    RemoteAssistanceEnd = 4
  };
};

extern const std::map<int, const char*> _RemoteAssistanceMessageId_VALUES_TO_NAMES;

struct SyncMessageType {
  enum type {
    SessionTopType = 1,
    AtMessageType = 2,
    UserLoginType = 3
  };
};

extern const std::map<int, const char*> _SyncMessageType_VALUES_TO_NAMES;

struct SyncMessageId {
  enum type {
    SessionTopSet = 1,
    SessionTopUnset = 2,
    AtMessageReaded = 16,
    UserLoginNotify = 32
  };
};

extern const std::map<int, const char*> _SyncMessageId_VALUES_TO_NAMES;

struct APIMessageType {
  enum type {
    AppMsg = 1,
    AppAck = 2,
    AppControl = 3
  };
};

extern const std::map<int, const char*> _APIMessageType_VALUES_TO_NAMES;

struct APIMessageId {
  enum type {
    Text = 1,
    Image = 2,
    File = 3,
    OA = 4,
    Customized = 5
  };
};

extern const std::map<int, const char*> _APIMessageId_VALUES_TO_NAMES;

struct APITextDetailType {
  enum type {
    TextType = 0,
    URLType = 1
  };
};

extern const std::map<int, const char*> _APITextDetailType_VALUES_TO_NAMES;

struct APIFileDetailType {
  enum type {
    FSType = 1,
    URLType = 2
  };
};

extern const std::map<int, const char*> _APIFileDetailType_VALUES_TO_NAMES;

struct APIAckMessageId {
  enum type {
    AckSent = 1
  };
};

extern const std::map<int, const char*> _APIAckMessageId_VALUES_TO_NAMES;

struct APIControlMessageId {
  enum type {
    OAStatusChange = 1,
    AppChangeNotify = 2,
    AppEventChangeNotify = 3
  };
};

extern const std::map<int, const char*> _APIControlMessageId_VALUES_TO_NAMES;

struct APIAppChangeEventType {
  enum type {
    AppChangeEventAdd = 1,
    AppChangeEventDisable = 2,
    AppChangeEventModify = 3
  };
};

extern const std::map<int, const char*> _APIAppChangeEventType_VALUES_TO_NAMES;

struct AppId {
  enum type {
    AppChat = 1,
    AppHeartbeat = 2,
    AppPresence = 3,
    AppNotify = 4,
    AppFiletransfer = 5,
    AppCalendar = 6,
    AppMeeting = 7,
    AppOrganization = 8,
    AppCommon_notify = 9,
    AppAck = 10,
    AppAudio = 11,
    AppAddressBook = 12,
    AppSleep = 13,
    AppTimeNews = 14,
    AppCase = 15,
    AppPoll = 16,
    AppRemoteAssistance = 17,
    AppSync = 18,
    AppAPI = 256
  };
};

extern const std::map<int, const char*> _AppId_VALUES_TO_NAMES;

class JID;

class MessagePresence;

class MessagePing;

class AckSent;

class AckReceived;

class AckRead;

class AckPlay;

class BatchAckRead;

class SleepSet;

class WakeupResult;

class TextContent;

class MediaContent;

class ReportContent;

class GroupMemberInfo;

class GroupMemberAddContent;

class GroupMemberDelContent;

class GroupNameUpdateContent;

class GroupCreateContent;

class GroupMemberKickContent;

class GroupAvatarUpdateContent;

class GroupStateUpdateContent;

class GroupTopContent;

class GroupScopeContent;

class SummaryCreateContent;

class DocumentContent;

class DocumentDelContent;

class CodeCreateContent;

class CodeDelContent;

class CommentCreateContent;

class CommentDelContent;

class AlertRuleContent;

class DiscussionClose;

class MsgNotifyContent;

class CloudFileContent;

class MemberRoleUpdateContent;

class RevocationContent;

class PasswordModifyContent;

class SystemWelcomeContent;

class ClientUpdateContent;

class InfoCell;

class CompleteInfoContent;

class TagDelContent;

class PwdComplexUpdateContent;

class PwdExpireContent;

class PCClientGuide;

class MobileClientGuide;

class GroupRemindContent;

class FileTransmissionInviteContent;

class FileTransmissionReceiveContent;

class FileTransmissionRejectContent;

class FileTransmissionStopContent;

class DeptTransferConfirmContent;

class EmployeeLeaveConfirmContent;

class EmployeeEntryConfirmContent;

class CompanyJoinContent;

class DeptDeleteContent;

class DeptParentChangeContent;

class DeptUpdateContent;

class DeptTransferContent;

class PositionUpdateContent;

class EmployeeEntryContent;

class EmployeeLeaveContent;

class EmployeeRightsChangeContent;

class InstantIQInviteContent;

class InstantIQReceiveContent;

class InstantIQRejectContent;

class IQInviteContent;

class IQReceiveContent;

class IQRejectContent;

class ConfCancelContent;

class ConfAlertContent;

class ConfChatContent;

class ConfSummaryContent;

class CallStateContent;

class ConfUploadContent;

class ConfDelDocContent;

class ConfShareContent;

class AudioInviteContent;

class AudioReceiveContent;

class AudioRejectContent;

class AudioStopContent;

class AudioBlockCallContent;

class AudioRejectCallContent;

class AudioRecentCallContent;

class AudioCancelCallContent;

class CardUpdateContent;

class ContacterAddContent;

class ContacterDelContent;

class AttentionCreateContent;

class AttentionCancelContent;

class WBMessageContent;

class RemoteAssistanceInviteContent;

class RemoteAssistanceAcceptContent;

class RemoteAssistanceRejectContent;

class RemoteAssistanceEndContent;

class UserLoginNotifyContent;

class SessionTopContent;

class AtMessageReadedContent;

class APITextContent;

class APIImageContent;

class APIFileContent;

class APIOAContent;

class APICustomizedContent;

class APIAckSentContent;

class APIOAStatusChangeContent;

class APIAppEventChangeNotify;

class APIAppChangeNotifyContent;

class UcMessageHead;

class UcMessageBody;


class JID {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  JID(const JID&);
  JID& operator=(const JID&);
  JID() : userID(0), siteID(0), resID(0) {
  }

  virtual ~JID() throw();
  int32_t userID;
  int32_t siteID;
  int32_t resID;

  void __set_userID(const int32_t val);

  void __set_siteID(const int32_t val);

  void __set_resID(const int32_t val);

  bool operator == (const JID & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(siteID == rhs.siteID))
      return false;
    if (!(resID == rhs.resID))
      return false;
    return true;
  }
  bool operator != (const JID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const JID& obj);
};

void swap(JID &a, JID &b);

typedef struct _MessagePresence__isset {
  _MessagePresence__isset() : pri(false), show(false), status(false), deviceType(false), oldStatus(false) {}
  bool pri :1;
  bool show :1;
  bool status :1;
  bool deviceType :1;
  bool oldStatus :1;
} _MessagePresence__isset;

class MessagePresence {
 public:

  static const char* ascii_fingerprint; // = "CF9E5E4D5EFE26418F209173A2DAE743";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x9E,0x5E,0x4D,0x5E,0xFE,0x26,0x41,0x8F,0x20,0x91,0x73,0xA2,0xDA,0xE7,0x43};

  MessagePresence(const MessagePresence&);
  MessagePresence& operator=(const MessagePresence&);
  MessagePresence() : pri(0), show(), status((PresenceType::type)0), deviceType((DeviceType::type)0), oldStatus((PresenceType::type)0) {
  }

  virtual ~MessagePresence() throw();
  int32_t pri;
  std::string show;
  PresenceType::type status;
  DeviceType::type deviceType;
  PresenceType::type oldStatus;

  _MessagePresence__isset __isset;

  void __set_pri(const int32_t val);

  void __set_show(const std::string& val);

  void __set_status(const PresenceType::type val);

  void __set_deviceType(const DeviceType::type val);

  void __set_oldStatus(const PresenceType::type val);

  bool operator == (const MessagePresence & rhs) const
  {
    if (!(pri == rhs.pri))
      return false;
    if (!(show == rhs.show))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(deviceType == rhs.deviceType))
      return false;
    if (__isset.oldStatus != rhs.__isset.oldStatus)
      return false;
    else if (__isset.oldStatus && !(oldStatus == rhs.oldStatus))
      return false;
    return true;
  }
  bool operator != (const MessagePresence &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePresence & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessagePresence& obj);
};

void swap(MessagePresence &a, MessagePresence &b);


class MessagePing {
 public:

  static const char* ascii_fingerprint; // = "20FDD15CF009C5B6C703B6F2C65DFE88";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xFD,0xD1,0x5C,0xF0,0x09,0xC5,0xB6,0xC7,0x03,0xB6,0xF2,0xC6,0x5D,0xFE,0x88};

  MessagePing(const MessagePing&);
  MessagePing& operator=(const MessagePing&);
  MessagePing() : interval(0), deviceType((DeviceType::type)0) {
  }

  virtual ~MessagePing() throw();
  int32_t interval;
  DeviceType::type deviceType;

  void __set_interval(const int32_t val);

  void __set_deviceType(const DeviceType::type val);

  bool operator == (const MessagePing & rhs) const
  {
    if (!(interval == rhs.interval))
      return false;
    if (!(deviceType == rhs.deviceType))
      return false;
    return true;
  }
  bool operator != (const MessagePing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessagePing& obj);
};

void swap(MessagePing &a, MessagePing &b);

typedef struct _AckSent__isset {
  _AckSent__isset() : id(false), seq(false), topicId(false), sessionType(false) {}
  bool id :1;
  bool seq :1;
  bool topicId :1;
  bool sessionType :1;
} _AckSent__isset;

class AckSent {
 public:

  static const char* ascii_fingerprint; // = "BB8A911441DE6005531A6C09C5C25519";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x8A,0x91,0x14,0x41,0xDE,0x60,0x05,0x53,0x1A,0x6C,0x09,0xC5,0xC2,0x55,0x19};

  AckSent(const AckSent&);
  AckSent& operator=(const AckSent&);
  AckSent() : id(0), seq(0), topicId(0), sessionType(0) {
  }

  virtual ~AckSent() throw();
  int32_t id;
  int64_t seq;
  int32_t topicId;
  int8_t sessionType;

  _AckSent__isset __isset;

  void __set_id(const int32_t val);

  void __set_seq(const int64_t val);

  void __set_topicId(const int32_t val);

  void __set_sessionType(const int8_t val);

  bool operator == (const AckSent & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(seq == rhs.seq))
      return false;
    if (!(topicId == rhs.topicId))
      return false;
    if (__isset.sessionType != rhs.__isset.sessionType)
      return false;
    else if (__isset.sessionType && !(sessionType == rhs.sessionType))
      return false;
    return true;
  }
  bool operator != (const AckSent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AckSent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AckSent& obj);
};

void swap(AckSent &a, AckSent &b);

typedef struct _AckReceived__isset {
  _AckReceived__isset() : id(false), seq(false), sessionType(false) {}
  bool id :1;
  bool seq :1;
  bool sessionType :1;
} _AckReceived__isset;

class AckReceived {
 public:

  static const char* ascii_fingerprint; // = "99F1A051E5A8F08662D0DD2C8654EEDE";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0xF1,0xA0,0x51,0xE5,0xA8,0xF0,0x86,0x62,0xD0,0xDD,0x2C,0x86,0x54,0xEE,0xDE};

  AckReceived(const AckReceived&);
  AckReceived& operator=(const AckReceived&);
  AckReceived() : id(0), seq(0), sessionType(0) {
  }

  virtual ~AckReceived() throw();
  int32_t id;
  int64_t seq;
  int8_t sessionType;

  _AckReceived__isset __isset;

  void __set_id(const int32_t val);

  void __set_seq(const int64_t val);

  void __set_sessionType(const int8_t val);

  bool operator == (const AckReceived & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(seq == rhs.seq))
      return false;
    if (__isset.sessionType != rhs.__isset.sessionType)
      return false;
    else if (__isset.sessionType && !(sessionType == rhs.sessionType))
      return false;
    return true;
  }
  bool operator != (const AckReceived &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AckReceived & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AckReceived& obj);
};

void swap(AckReceived &a, AckReceived &b);

typedef struct _AckRead__isset {
  _AckRead__isset() : id(false), seq(false), sessionType(false), ackedUser(false) {}
  bool id :1;
  bool seq :1;
  bool sessionType :1;
  bool ackedUser :1;
} _AckRead__isset;

class AckRead {
 public:

  static const char* ascii_fingerprint; // = "C8E03121755B582E120E43C877BC564B";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0xE0,0x31,0x21,0x75,0x5B,0x58,0x2E,0x12,0x0E,0x43,0xC8,0x77,0xBC,0x56,0x4B};

  AckRead(const AckRead&);
  AckRead& operator=(const AckRead&);
  AckRead() : id(0), seq(0), sessionType(0) {
  }

  virtual ~AckRead() throw();
  int32_t id;
  int64_t seq;
  int8_t sessionType;
  JID ackedUser;

  _AckRead__isset __isset;

  void __set_id(const int32_t val);

  void __set_seq(const int64_t val);

  void __set_sessionType(const int8_t val);

  void __set_ackedUser(const JID& val);

  bool operator == (const AckRead & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(seq == rhs.seq))
      return false;
    if (__isset.sessionType != rhs.__isset.sessionType)
      return false;
    else if (__isset.sessionType && !(sessionType == rhs.sessionType))
      return false;
    if (__isset.ackedUser != rhs.__isset.ackedUser)
      return false;
    else if (__isset.ackedUser && !(ackedUser == rhs.ackedUser))
      return false;
    return true;
  }
  bool operator != (const AckRead &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AckRead & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AckRead& obj);
};

void swap(AckRead &a, AckRead &b);

typedef struct _AckPlay__isset {
  _AckPlay__isset() : id(false), seq(false), sessionType(false) {}
  bool id :1;
  bool seq :1;
  bool sessionType :1;
} _AckPlay__isset;

class AckPlay {
 public:

  static const char* ascii_fingerprint; // = "99F1A051E5A8F08662D0DD2C8654EEDE";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0xF1,0xA0,0x51,0xE5,0xA8,0xF0,0x86,0x62,0xD0,0xDD,0x2C,0x86,0x54,0xEE,0xDE};

  AckPlay(const AckPlay&);
  AckPlay& operator=(const AckPlay&);
  AckPlay() : id(0), seq(0), sessionType(0) {
  }

  virtual ~AckPlay() throw();
  int32_t id;
  int64_t seq;
  int8_t sessionType;

  _AckPlay__isset __isset;

  void __set_id(const int32_t val);

  void __set_seq(const int64_t val);

  void __set_sessionType(const int8_t val);

  bool operator == (const AckPlay & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(seq == rhs.seq))
      return false;
    if (__isset.sessionType != rhs.__isset.sessionType)
      return false;
    else if (__isset.sessionType && !(sessionType == rhs.sessionType))
      return false;
    return true;
  }
  bool operator != (const AckPlay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AckPlay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AckPlay& obj);
};

void swap(AckPlay &a, AckPlay &b);

typedef struct _BatchAckRead__isset {
  _BatchAckRead__isset() : seqList(false), ackedUser(false) {}
  bool seqList :1;
  bool ackedUser :1;
} _BatchAckRead__isset;

class BatchAckRead {
 public:

  static const char* ascii_fingerprint; // = "B640E40DA259FE46BEB7F884B0899275";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x40,0xE4,0x0D,0xA2,0x59,0xFE,0x46,0xBE,0xB7,0xF8,0x84,0xB0,0x89,0x92,0x75};

  BatchAckRead(const BatchAckRead&);
  BatchAckRead& operator=(const BatchAckRead&);
  BatchAckRead() : sessionType(0) {
  }

  virtual ~BatchAckRead() throw();
  int8_t sessionType;
  std::vector<int64_t>  seqList;
  JID ackedUser;

  _BatchAckRead__isset __isset;

  void __set_sessionType(const int8_t val);

  void __set_seqList(const std::vector<int64_t> & val);

  void __set_ackedUser(const JID& val);

  bool operator == (const BatchAckRead & rhs) const
  {
    if (!(sessionType == rhs.sessionType))
      return false;
    if (__isset.seqList != rhs.__isset.seqList)
      return false;
    else if (__isset.seqList && !(seqList == rhs.seqList))
      return false;
    if (__isset.ackedUser != rhs.__isset.ackedUser)
      return false;
    else if (__isset.ackedUser && !(ackedUser == rhs.ackedUser))
      return false;
    return true;
  }
  bool operator != (const BatchAckRead &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchAckRead & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchAckRead& obj);
};

void swap(BatchAckRead &a, BatchAckRead &b);

typedef struct _SleepSet__isset {
  _SleepSet__isset() : unreadCount(false) {}
  bool unreadCount :1;
} _SleepSet__isset;

class SleepSet {
 public:

  static const char* ascii_fingerprint; // = "15D34740303C4E50CFFA807ABA20C3EF";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xD3,0x47,0x40,0x30,0x3C,0x4E,0x50,0xCF,0xFA,0x80,0x7A,0xBA,0x20,0xC3,0xEF};

  SleepSet(const SleepSet&);
  SleepSet& operator=(const SleepSet&);
  SleepSet() : mode((SleepMode::type)0), unreadCount(0) {
  }

  virtual ~SleepSet() throw();
  SleepMode::type mode;
  int32_t unreadCount;

  _SleepSet__isset __isset;

  void __set_mode(const SleepMode::type val);

  void __set_unreadCount(const int32_t val);

  bool operator == (const SleepSet & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    if (__isset.unreadCount != rhs.__isset.unreadCount)
      return false;
    else if (__isset.unreadCount && !(unreadCount == rhs.unreadCount))
      return false;
    return true;
  }
  bool operator != (const SleepSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SleepSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SleepSet& obj);
};

void swap(SleepSet &a, SleepSet &b);


class WakeupResult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WakeupResult(const WakeupResult&);
  WakeupResult& operator=(const WakeupResult&);
  WakeupResult() {
  }

  virtual ~WakeupResult() throw();

  bool operator == (const WakeupResult & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WakeupResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WakeupResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WakeupResult& obj);
};

void swap(WakeupResult &a, WakeupResult &b);

typedef struct _TextContent__isset {
  _TextContent__isset() : text_style(false) {}
  bool text_style :1;
} _TextContent__isset;

class TextContent {
 public:

  static const char* ascii_fingerprint; // = "99D2C06913B8B06B49EC2862CC8C2FD1";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0xD2,0xC0,0x69,0x13,0xB8,0xB0,0x6B,0x49,0xEC,0x28,0x62,0xCC,0x8C,0x2F,0xD1};

  TextContent(const TextContent&);
  TextContent& operator=(const TextContent&);
  TextContent() : type(0), text(), text_style() {
  }

  virtual ~TextContent() throw();
  int8_t type;
  std::string text;
  std::string text_style;

  _TextContent__isset __isset;

  void __set_type(const int8_t val);

  void __set_text(const std::string& val);

  void __set_text_style(const std::string& val);

  bool operator == (const TextContent & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(text == rhs.text))
      return false;
    if (__isset.text_style != rhs.__isset.text_style)
      return false;
    else if (__isset.text_style && !(text_style == rhs.text_style))
      return false;
    return true;
  }
  bool operator != (const TextContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TextContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TextContent& obj);
};

void swap(TextContent &a, TextContent &b);

typedef struct _MediaContent__isset {
  _MediaContent__isset() : media_filename(false), media_thumb(false), media_duration(false), operatorId(false), operatorName(false), operatorAvatar(false), media_thumb_url(false) {}
  bool media_filename :1;
  bool media_thumb :1;
  bool media_duration :1;
  bool operatorId :1;
  bool operatorName :1;
  bool operatorAvatar :1;
  bool media_thumb_url :1;
} _MediaContent__isset;

class MediaContent {
 public:

  static const char* ascii_fingerprint; // = "8FEB58F40B30E798565A633BE8BE296D";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0xEB,0x58,0xF4,0x0B,0x30,0xE7,0x98,0x56,0x5A,0x63,0x3B,0xE8,0xBE,0x29,0x6D};

  MediaContent(const MediaContent&);
  MediaContent& operator=(const MediaContent&);
  MediaContent() : media_filename(), media_filesize(0), media_type((ChatMediaType::type)0), media_down_url(), media_thumb(), media_duration(0), operatorId(0), operatorName(), operatorAvatar(), media_thumb_url() {
  }

  virtual ~MediaContent() throw();
  std::string media_filename;
  int32_t media_filesize;
  ChatMediaType::type media_type;
  std::string media_down_url;
  std::string media_thumb;
  int32_t media_duration;
  int32_t operatorId;
  std::string operatorName;
  std::string operatorAvatar;
  std::string media_thumb_url;

  _MediaContent__isset __isset;

  void __set_media_filename(const std::string& val);

  void __set_media_filesize(const int32_t val);

  void __set_media_type(const ChatMediaType::type val);

  void __set_media_down_url(const std::string& val);

  void __set_media_thumb(const std::string& val);

  void __set_media_duration(const int32_t val);

  void __set_operatorId(const int32_t val);

  void __set_operatorName(const std::string& val);

  void __set_operatorAvatar(const std::string& val);

  void __set_media_thumb_url(const std::string& val);

  bool operator == (const MediaContent & rhs) const
  {
    if (__isset.media_filename != rhs.__isset.media_filename)
      return false;
    else if (__isset.media_filename && !(media_filename == rhs.media_filename))
      return false;
    if (!(media_filesize == rhs.media_filesize))
      return false;
    if (!(media_type == rhs.media_type))
      return false;
    if (!(media_down_url == rhs.media_down_url))
      return false;
    if (__isset.media_thumb != rhs.__isset.media_thumb)
      return false;
    else if (__isset.media_thumb && !(media_thumb == rhs.media_thumb))
      return false;
    if (__isset.media_duration != rhs.__isset.media_duration)
      return false;
    else if (__isset.media_duration && !(media_duration == rhs.media_duration))
      return false;
    if (__isset.operatorId != rhs.__isset.operatorId)
      return false;
    else if (__isset.operatorId && !(operatorId == rhs.operatorId))
      return false;
    if (__isset.operatorName != rhs.__isset.operatorName)
      return false;
    else if (__isset.operatorName && !(operatorName == rhs.operatorName))
      return false;
    if (__isset.operatorAvatar != rhs.__isset.operatorAvatar)
      return false;
    else if (__isset.operatorAvatar && !(operatorAvatar == rhs.operatorAvatar))
      return false;
    if (__isset.media_thumb_url != rhs.__isset.media_thumb_url)
      return false;
    else if (__isset.media_thumb_url && !(media_thumb_url == rhs.media_thumb_url))
      return false;
    return true;
  }
  bool operator != (const MediaContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MediaContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MediaContent& obj);
};

void swap(MediaContent &a, MediaContent &b);

typedef struct _ReportContent__isset {
  _ReportContent__isset() : eventId(false), externalData(false) {}
  bool eventId :1;
  bool externalData :1;
} _ReportContent__isset;

class ReportContent {
 public:

  static const char* ascii_fingerprint; // = "A9B917F98C7E17162035AC5125D079E1";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0xB9,0x17,0xF9,0x8C,0x7E,0x17,0x16,0x20,0x35,0xAC,0x51,0x25,0xD0,0x79,0xE1};

  ReportContent(const ReportContent&);
  ReportContent& operator=(const ReportContent&);
  ReportContent() : eventId(0), reportTitle(), reportUrl(), externalData() {
  }

  virtual ~ReportContent() throw();
  int64_t eventId;
  std::string reportTitle;
  std::string reportUrl;
  std::string externalData;

  _ReportContent__isset __isset;

  void __set_eventId(const int64_t val);

  void __set_reportTitle(const std::string& val);

  void __set_reportUrl(const std::string& val);

  void __set_externalData(const std::string& val);

  bool operator == (const ReportContent & rhs) const
  {
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    if (!(reportTitle == rhs.reportTitle))
      return false;
    if (!(reportUrl == rhs.reportUrl))
      return false;
    if (__isset.externalData != rhs.__isset.externalData)
      return false;
    else if (__isset.externalData && !(externalData == rhs.externalData))
      return false;
    return true;
  }
  bool operator != (const ReportContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReportContent& obj);
};

void swap(ReportContent &a, ReportContent &b);

typedef struct _GroupMemberInfo__isset {
  _GroupMemberInfo__isset() : join_state(false), role(false) {}
  bool join_state :1;
  bool role :1;
} _GroupMemberInfo__isset;

class GroupMemberInfo {
 public:

  static const char* ascii_fingerprint; // = "56F395EEC2B58D28586316ECAB04D7E5";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xF3,0x95,0xEE,0xC2,0xB5,0x8D,0x28,0x58,0x63,0x16,0xEC,0xAB,0x04,0xD7,0xE5};

  GroupMemberInfo(const GroupMemberInfo&);
  GroupMemberInfo& operator=(const GroupMemberInfo&);
  GroupMemberInfo() : memberId(0), join_time(0), join_state(0), role(0) {
  }

  virtual ~GroupMemberInfo() throw();
  int32_t memberId;
  int32_t join_time;
  int8_t join_state;
  int8_t role;

  _GroupMemberInfo__isset __isset;

  void __set_memberId(const int32_t val);

  void __set_join_time(const int32_t val);

  void __set_join_state(const int8_t val);

  void __set_role(const int8_t val);

  bool operator == (const GroupMemberInfo & rhs) const
  {
    if (!(memberId == rhs.memberId))
      return false;
    if (!(join_time == rhs.join_time))
      return false;
    if (__isset.join_state != rhs.__isset.join_state)
      return false;
    else if (__isset.join_state && !(join_state == rhs.join_state))
      return false;
    if (__isset.role != rhs.__isset.role)
      return false;
    else if (__isset.role && !(role == rhs.role))
      return false;
    return true;
  }
  bool operator != (const GroupMemberInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupMemberInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupMemberInfo& obj);
};

void swap(GroupMemberInfo &a, GroupMemberInfo &b);

typedef struct _GroupMemberAddContent__isset {
  _GroupMemberAddContent__isset() : avatar(false), group_name(false), name_pinyin(false), name_flag(false) {}
  bool avatar :1;
  bool group_name :1;
  bool name_pinyin :1;
  bool name_flag :1;
} _GroupMemberAddContent__isset;

class GroupMemberAddContent {
 public:

  static const char* ascii_fingerprint; // = "60C9ECF73060D44823B5EB306F803DAF";
  static const uint8_t binary_fingerprint[16]; // = {0x60,0xC9,0xEC,0xF7,0x30,0x60,0xD4,0x48,0x23,0xB5,0xEB,0x30,0x6F,0x80,0x3D,0xAF};

  GroupMemberAddContent(const GroupMemberAddContent&);
  GroupMemberAddContent& operator=(const GroupMemberAddContent&);
  GroupMemberAddContent() : operatorid(0), groupid(0), avatar(), group_name(), name_pinyin(), name_flag(0) {
  }

  virtual ~GroupMemberAddContent() throw();
  int32_t operatorid;
  int32_t groupid;
  std::vector<GroupMemberInfo>  memberList;
  std::string avatar;
  std::string group_name;
  std::string name_pinyin;
  int8_t name_flag;

  _GroupMemberAddContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_memberList(const std::vector<GroupMemberInfo> & val);

  void __set_avatar(const std::string& val);

  void __set_group_name(const std::string& val);

  void __set_name_pinyin(const std::string& val);

  void __set_name_flag(const int8_t val);

  bool operator == (const GroupMemberAddContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(memberList == rhs.memberList))
      return false;
    if (__isset.avatar != rhs.__isset.avatar)
      return false;
    else if (__isset.avatar && !(avatar == rhs.avatar))
      return false;
    if (__isset.group_name != rhs.__isset.group_name)
      return false;
    else if (__isset.group_name && !(group_name == rhs.group_name))
      return false;
    if (__isset.name_pinyin != rhs.__isset.name_pinyin)
      return false;
    else if (__isset.name_pinyin && !(name_pinyin == rhs.name_pinyin))
      return false;
    if (__isset.name_flag != rhs.__isset.name_flag)
      return false;
    else if (__isset.name_flag && !(name_flag == rhs.name_flag))
      return false;
    return true;
  }
  bool operator != (const GroupMemberAddContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupMemberAddContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupMemberAddContent& obj);
};

void swap(GroupMemberAddContent &a, GroupMemberAddContent &b);

typedef struct _GroupMemberDelContent__isset {
  _GroupMemberDelContent__isset() : avatar(false), group_name(false), name_pinyin(false), name_flag(false) {}
  bool avatar :1;
  bool group_name :1;
  bool name_pinyin :1;
  bool name_flag :1;
} _GroupMemberDelContent__isset;

class GroupMemberDelContent {
 public:

  static const char* ascii_fingerprint; // = "15AFBAC64FB888980F5FB466D75C6E62";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xAF,0xBA,0xC6,0x4F,0xB8,0x88,0x98,0x0F,0x5F,0xB4,0x66,0xD7,0x5C,0x6E,0x62};

  GroupMemberDelContent(const GroupMemberDelContent&);
  GroupMemberDelContent& operator=(const GroupMemberDelContent&);
  GroupMemberDelContent() : operatorid(0), groupid(0), memberId(0), avatar(), group_name(), name_pinyin(), name_flag(0) {
  }

  virtual ~GroupMemberDelContent() throw();
  int32_t operatorid;
  int32_t groupid;
  int32_t memberId;
  std::string avatar;
  std::string group_name;
  std::string name_pinyin;
  int8_t name_flag;

  _GroupMemberDelContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_memberId(const int32_t val);

  void __set_avatar(const std::string& val);

  void __set_group_name(const std::string& val);

  void __set_name_pinyin(const std::string& val);

  void __set_name_flag(const int8_t val);

  bool operator == (const GroupMemberDelContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(memberId == rhs.memberId))
      return false;
    if (__isset.avatar != rhs.__isset.avatar)
      return false;
    else if (__isset.avatar && !(avatar == rhs.avatar))
      return false;
    if (__isset.group_name != rhs.__isset.group_name)
      return false;
    else if (__isset.group_name && !(group_name == rhs.group_name))
      return false;
    if (__isset.name_pinyin != rhs.__isset.name_pinyin)
      return false;
    else if (__isset.name_pinyin && !(name_pinyin == rhs.name_pinyin))
      return false;
    if (__isset.name_flag != rhs.__isset.name_flag)
      return false;
    else if (__isset.name_flag && !(name_flag == rhs.name_flag))
      return false;
    return true;
  }
  bool operator != (const GroupMemberDelContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupMemberDelContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupMemberDelContent& obj);
};

void swap(GroupMemberDelContent &a, GroupMemberDelContent &b);


class GroupNameUpdateContent {
 public:

  static const char* ascii_fingerprint; // = "CCAAFC10DC3C0859CBBCF4BBFE49DA1B";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0xAA,0xFC,0x10,0xDC,0x3C,0x08,0x59,0xCB,0xBC,0xF4,0xBB,0xFE,0x49,0xDA,0x1B};

  GroupNameUpdateContent(const GroupNameUpdateContent&);
  GroupNameUpdateContent& operator=(const GroupNameUpdateContent&);
  GroupNameUpdateContent() : operatorid(0), groupid(0), group_name(), name_pinyin(), name_flag(0) {
  }

  virtual ~GroupNameUpdateContent() throw();
  int32_t operatorid;
  int32_t groupid;
  std::string group_name;
  std::string name_pinyin;
  int8_t name_flag;

  void __set_operatorid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_group_name(const std::string& val);

  void __set_name_pinyin(const std::string& val);

  void __set_name_flag(const int8_t val);

  bool operator == (const GroupNameUpdateContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(group_name == rhs.group_name))
      return false;
    if (!(name_pinyin == rhs.name_pinyin))
      return false;
    if (!(name_flag == rhs.name_flag))
      return false;
    return true;
  }
  bool operator != (const GroupNameUpdateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupNameUpdateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupNameUpdateContent& obj);
};

void swap(GroupNameUpdateContent &a, GroupNameUpdateContent &b);

typedef struct _GroupCreateContent__isset {
  _GroupCreateContent__isset() : avatar(false), group_name(false), name_pinyin(false), group_type(false), memberCount(false), group_status(false), status_info(false), cloud_library_info(false), display_scope(false) {}
  bool avatar :1;
  bool group_name :1;
  bool name_pinyin :1;
  bool group_type :1;
  bool memberCount :1;
  bool group_status :1;
  bool status_info :1;
  bool cloud_library_info :1;
  bool display_scope :1;
} _GroupCreateContent__isset;

class GroupCreateContent {
 public:

  static const char* ascii_fingerprint; // = "4CFF539C9B6120C54253046AEFE02124";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0xFF,0x53,0x9C,0x9B,0x61,0x20,0xC5,0x42,0x53,0x04,0x6A,0xEF,0xE0,0x21,0x24};

  GroupCreateContent(const GroupCreateContent&);
  GroupCreateContent& operator=(const GroupCreateContent&);
  GroupCreateContent() : operatorid(0), groupid(0), avatar(), group_name(), name_pinyin(), create_time(0), siteID(0), name_flag(0), group_type(0), memberCount(0), group_status(0), status_info(), cloud_library_info(), display_scope(0) {
  }

  virtual ~GroupCreateContent() throw();
  int32_t operatorid;
  int32_t groupid;
  std::vector<GroupMemberInfo>  memberList;
  std::string avatar;
  std::string group_name;
  std::string name_pinyin;
  int32_t create_time;
  int32_t siteID;
  int8_t name_flag;
  int8_t group_type;
  int32_t memberCount;
  int32_t group_status;
  std::string status_info;
  std::string cloud_library_info;
  int32_t display_scope;

  _GroupCreateContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_memberList(const std::vector<GroupMemberInfo> & val);

  void __set_avatar(const std::string& val);

  void __set_group_name(const std::string& val);

  void __set_name_pinyin(const std::string& val);

  void __set_create_time(const int32_t val);

  void __set_siteID(const int32_t val);

  void __set_name_flag(const int8_t val);

  void __set_group_type(const int8_t val);

  void __set_memberCount(const int32_t val);

  void __set_group_status(const int32_t val);

  void __set_status_info(const std::string& val);

  void __set_cloud_library_info(const std::string& val);

  void __set_display_scope(const int32_t val);

  bool operator == (const GroupCreateContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(memberList == rhs.memberList))
      return false;
    if (__isset.avatar != rhs.__isset.avatar)
      return false;
    else if (__isset.avatar && !(avatar == rhs.avatar))
      return false;
    if (__isset.group_name != rhs.__isset.group_name)
      return false;
    else if (__isset.group_name && !(group_name == rhs.group_name))
      return false;
    if (__isset.name_pinyin != rhs.__isset.name_pinyin)
      return false;
    else if (__isset.name_pinyin && !(name_pinyin == rhs.name_pinyin))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(siteID == rhs.siteID))
      return false;
    if (!(name_flag == rhs.name_flag))
      return false;
    if (__isset.group_type != rhs.__isset.group_type)
      return false;
    else if (__isset.group_type && !(group_type == rhs.group_type))
      return false;
    if (__isset.memberCount != rhs.__isset.memberCount)
      return false;
    else if (__isset.memberCount && !(memberCount == rhs.memberCount))
      return false;
    if (__isset.group_status != rhs.__isset.group_status)
      return false;
    else if (__isset.group_status && !(group_status == rhs.group_status))
      return false;
    if (__isset.status_info != rhs.__isset.status_info)
      return false;
    else if (__isset.status_info && !(status_info == rhs.status_info))
      return false;
    if (__isset.cloud_library_info != rhs.__isset.cloud_library_info)
      return false;
    else if (__isset.cloud_library_info && !(cloud_library_info == rhs.cloud_library_info))
      return false;
    if (__isset.display_scope != rhs.__isset.display_scope)
      return false;
    else if (__isset.display_scope && !(display_scope == rhs.display_scope))
      return false;
    return true;
  }
  bool operator != (const GroupCreateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupCreateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupCreateContent& obj);
};

void swap(GroupCreateContent &a, GroupCreateContent &b);

typedef struct _GroupMemberKickContent__isset {
  _GroupMemberKickContent__isset() : avatar(false), group_name(false), name_pinyin(false), name_flag(false) {}
  bool avatar :1;
  bool group_name :1;
  bool name_pinyin :1;
  bool name_flag :1;
} _GroupMemberKickContent__isset;

class GroupMemberKickContent {
 public:

  static const char* ascii_fingerprint; // = "27020854A47AD185BBE288F5433E61F0";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x02,0x08,0x54,0xA4,0x7A,0xD1,0x85,0xBB,0xE2,0x88,0xF5,0x43,0x3E,0x61,0xF0};

  GroupMemberKickContent(const GroupMemberKickContent&);
  GroupMemberKickContent& operator=(const GroupMemberKickContent&);
  GroupMemberKickContent() : operatorid(0), groupid(0), avatar(), group_name(), name_pinyin(), name_flag(0) {
  }

  virtual ~GroupMemberKickContent() throw();
  int32_t operatorid;
  int32_t groupid;
  std::vector<int32_t>  memberList;
  std::string avatar;
  std::string group_name;
  std::string name_pinyin;
  int8_t name_flag;

  _GroupMemberKickContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_memberList(const std::vector<int32_t> & val);

  void __set_avatar(const std::string& val);

  void __set_group_name(const std::string& val);

  void __set_name_pinyin(const std::string& val);

  void __set_name_flag(const int8_t val);

  bool operator == (const GroupMemberKickContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(memberList == rhs.memberList))
      return false;
    if (__isset.avatar != rhs.__isset.avatar)
      return false;
    else if (__isset.avatar && !(avatar == rhs.avatar))
      return false;
    if (__isset.group_name != rhs.__isset.group_name)
      return false;
    else if (__isset.group_name && !(group_name == rhs.group_name))
      return false;
    if (__isset.name_pinyin != rhs.__isset.name_pinyin)
      return false;
    else if (__isset.name_pinyin && !(name_pinyin == rhs.name_pinyin))
      return false;
    if (__isset.name_flag != rhs.__isset.name_flag)
      return false;
    else if (__isset.name_flag && !(name_flag == rhs.name_flag))
      return false;
    return true;
  }
  bool operator != (const GroupMemberKickContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupMemberKickContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupMemberKickContent& obj);
};

void swap(GroupMemberKickContent &a, GroupMemberKickContent &b);


class GroupAvatarUpdateContent {
 public:

  static const char* ascii_fingerprint; // = "52C6DAB6CF51AF617111F6D3964C6503";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};

  GroupAvatarUpdateContent(const GroupAvatarUpdateContent&);
  GroupAvatarUpdateContent& operator=(const GroupAvatarUpdateContent&);
  GroupAvatarUpdateContent() : operatorid(0), avatar(), groupid(0) {
  }

  virtual ~GroupAvatarUpdateContent() throw();
  int32_t operatorid;
  std::string avatar;
  int32_t groupid;

  void __set_operatorid(const int32_t val);

  void __set_avatar(const std::string& val);

  void __set_groupid(const int32_t val);

  bool operator == (const GroupAvatarUpdateContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(avatar == rhs.avatar))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    return true;
  }
  bool operator != (const GroupAvatarUpdateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupAvatarUpdateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupAvatarUpdateContent& obj);
};

void swap(GroupAvatarUpdateContent &a, GroupAvatarUpdateContent &b);

typedef struct _GroupStateUpdateContent__isset {
  _GroupStateUpdateContent__isset() : status_info(false) {}
  bool status_info :1;
} _GroupStateUpdateContent__isset;

class GroupStateUpdateContent {
 public:

  static const char* ascii_fingerprint; // = "96705E9A3FD7B072319C71653E0DBB90";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

  GroupStateUpdateContent(const GroupStateUpdateContent&);
  GroupStateUpdateContent& operator=(const GroupStateUpdateContent&);
  GroupStateUpdateContent() : group_status(0), status_info() {
  }

  virtual ~GroupStateUpdateContent() throw();
  int32_t group_status;
  std::string status_info;

  _GroupStateUpdateContent__isset __isset;

  void __set_group_status(const int32_t val);

  void __set_status_info(const std::string& val);

  bool operator == (const GroupStateUpdateContent & rhs) const
  {
    if (!(group_status == rhs.group_status))
      return false;
    if (__isset.status_info != rhs.__isset.status_info)
      return false;
    else if (__isset.status_info && !(status_info == rhs.status_info))
      return false;
    return true;
  }
  bool operator != (const GroupStateUpdateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupStateUpdateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupStateUpdateContent& obj);
};

void swap(GroupStateUpdateContent &a, GroupStateUpdateContent &b);


class GroupTopContent {
 public:

  static const char* ascii_fingerprint; // = "7F794FC8247C6D0546A5F3441CCCD6B1";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x79,0x4F,0xC8,0x24,0x7C,0x6D,0x05,0x46,0xA5,0xF3,0x44,0x1C,0xCC,0xD6,0xB1};

  GroupTopContent(const GroupTopContent&);
  GroupTopContent& operator=(const GroupTopContent&);
  GroupTopContent() : operatorid(0), groupid(0), isTop(0) {
  }

  virtual ~GroupTopContent() throw();
  int32_t operatorid;
  int32_t groupid;
  int8_t isTop;

  void __set_operatorid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_isTop(const int8_t val);

  bool operator == (const GroupTopContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(isTop == rhs.isTop))
      return false;
    return true;
  }
  bool operator != (const GroupTopContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupTopContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupTopContent& obj);
};

void swap(GroupTopContent &a, GroupTopContent &b);


class GroupScopeContent {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  GroupScopeContent(const GroupScopeContent&);
  GroupScopeContent& operator=(const GroupScopeContent&);
  GroupScopeContent() : operatorid(0), groupid(0), display_scope(0) {
  }

  virtual ~GroupScopeContent() throw();
  int32_t operatorid;
  int32_t groupid;
  int32_t display_scope;

  void __set_operatorid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_display_scope(const int32_t val);

  bool operator == (const GroupScopeContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(display_scope == rhs.display_scope))
      return false;
    return true;
  }
  bool operator != (const GroupScopeContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupScopeContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupScopeContent& obj);
};

void swap(GroupScopeContent &a, GroupScopeContent &b);

typedef struct _SummaryCreateContent__isset {
  _SummaryCreateContent__isset() : down_url(false), size(false), contentId(false) {}
  bool down_url :1;
  bool size :1;
  bool contentId :1;
} _SummaryCreateContent__isset;

class SummaryCreateContent {
 public:

  static const char* ascii_fingerprint; // = "01895D5D829E0F7E2747FE573FBF99F9";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0x89,0x5D,0x5D,0x82,0x9E,0x0F,0x7E,0x27,0x47,0xFE,0x57,0x3F,0xBF,0x99,0xF9};

  SummaryCreateContent(const SummaryCreateContent&);
  SummaryCreateContent& operator=(const SummaryCreateContent&);
  SummaryCreateContent() : operatorid(0), summary_name(), down_url(), size(0), contentId(0) {
  }

  virtual ~SummaryCreateContent() throw();
  int32_t operatorid;
  std::string summary_name;
  std::string down_url;
  int32_t size;
  int64_t contentId;

  _SummaryCreateContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_summary_name(const std::string& val);

  void __set_down_url(const std::string& val);

  void __set_size(const int32_t val);

  void __set_contentId(const int64_t val);

  bool operator == (const SummaryCreateContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(summary_name == rhs.summary_name))
      return false;
    if (__isset.down_url != rhs.__isset.down_url)
      return false;
    else if (__isset.down_url && !(down_url == rhs.down_url))
      return false;
    if (__isset.size != rhs.__isset.size)
      return false;
    else if (__isset.size && !(size == rhs.size))
      return false;
    if (__isset.contentId != rhs.__isset.contentId)
      return false;
    else if (__isset.contentId && !(contentId == rhs.contentId))
      return false;
    return true;
  }
  bool operator != (const SummaryCreateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SummaryCreateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SummaryCreateContent& obj);
};

void swap(SummaryCreateContent &a, SummaryCreateContent &b);

typedef struct _DocumentContent__isset {
  _DocumentContent__isset() : size(false), contentId(false) {}
  bool size :1;
  bool contentId :1;
} _DocumentContent__isset;

class DocumentContent {
 public:

  static const char* ascii_fingerprint; // = "FFA096E8E6E39CC8770860B35E8F3AA7";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0xA0,0x96,0xE8,0xE6,0xE3,0x9C,0xC8,0x77,0x08,0x60,0xB3,0x5E,0x8F,0x3A,0xA7};

  DocumentContent(const DocumentContent&);
  DocumentContent& operator=(const DocumentContent&);
  DocumentContent() : operatorid(0), doc_name(), down_url(), size(0), contentId(0) {
  }

  virtual ~DocumentContent() throw();
  int32_t operatorid;
  std::string doc_name;
  std::string down_url;
  int32_t size;
  int64_t contentId;

  _DocumentContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_doc_name(const std::string& val);

  void __set_down_url(const std::string& val);

  void __set_size(const int32_t val);

  void __set_contentId(const int64_t val);

  bool operator == (const DocumentContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(doc_name == rhs.doc_name))
      return false;
    if (!(down_url == rhs.down_url))
      return false;
    if (__isset.size != rhs.__isset.size)
      return false;
    else if (__isset.size && !(size == rhs.size))
      return false;
    if (__isset.contentId != rhs.__isset.contentId)
      return false;
    else if (__isset.contentId && !(contentId == rhs.contentId))
      return false;
    return true;
  }
  bool operator != (const DocumentContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DocumentContent& obj);
};

void swap(DocumentContent &a, DocumentContent &b);

typedef struct _DocumentDelContent__isset {
  _DocumentDelContent__isset() : doc_name(false) {}
  bool doc_name :1;
} _DocumentDelContent__isset;

class DocumentDelContent {
 public:

  static const char* ascii_fingerprint; // = "F51617F135B1C1CF4FD15F6ACC93B2A8";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x16,0x17,0xF1,0x35,0xB1,0xC1,0xCF,0x4F,0xD1,0x5F,0x6A,0xCC,0x93,0xB2,0xA8};

  DocumentDelContent(const DocumentDelContent&);
  DocumentDelContent& operator=(const DocumentDelContent&);
  DocumentDelContent() : operatorid(0), contentId(0), doc_name() {
  }

  virtual ~DocumentDelContent() throw();
  int32_t operatorid;
  int64_t contentId;
  std::string doc_name;

  _DocumentDelContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_contentId(const int64_t val);

  void __set_doc_name(const std::string& val);

  bool operator == (const DocumentDelContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(contentId == rhs.contentId))
      return false;
    if (__isset.doc_name != rhs.__isset.doc_name)
      return false;
    else if (__isset.doc_name && !(doc_name == rhs.doc_name))
      return false;
    return true;
  }
  bool operator != (const DocumentDelContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentDelContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DocumentDelContent& obj);
};

void swap(DocumentDelContent &a, DocumentDelContent &b);

typedef struct _CodeCreateContent__isset {
  _CodeCreateContent__isset() : desc(false), operatorName(false) {}
  bool desc :1;
  bool operatorName :1;
} _CodeCreateContent__isset;

class CodeCreateContent {
 public:

  static const char* ascii_fingerprint; // = "2E04C0C90A0D5CC642DC20D59BBF591C";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0x04,0xC0,0xC9,0x0A,0x0D,0x5C,0xC6,0x42,0xDC,0x20,0xD5,0x9B,0xBF,0x59,0x1C};

  CodeCreateContent(const CodeCreateContent&);
  CodeCreateContent& operator=(const CodeCreateContent&);
  CodeCreateContent() : contentId(0), title(), langType(), contentHead(), desc(), size(0), operatorid(0), operatorName(), downUrl(), totalLines(0), createTime(0) {
  }

  virtual ~CodeCreateContent() throw();
  int64_t contentId;
  std::string title;
  std::string langType;
  std::string contentHead;
  std::string desc;
  int32_t size;
  int32_t operatorid;
  std::string operatorName;
  std::string downUrl;
  int32_t totalLines;
  int64_t createTime;

  _CodeCreateContent__isset __isset;

  void __set_contentId(const int64_t val);

  void __set_title(const std::string& val);

  void __set_langType(const std::string& val);

  void __set_contentHead(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_size(const int32_t val);

  void __set_operatorid(const int32_t val);

  void __set_operatorName(const std::string& val);

  void __set_downUrl(const std::string& val);

  void __set_totalLines(const int32_t val);

  void __set_createTime(const int64_t val);

  bool operator == (const CodeCreateContent & rhs) const
  {
    if (!(contentId == rhs.contentId))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(langType == rhs.langType))
      return false;
    if (!(contentHead == rhs.contentHead))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(operatorid == rhs.operatorid))
      return false;
    if (__isset.operatorName != rhs.__isset.operatorName)
      return false;
    else if (__isset.operatorName && !(operatorName == rhs.operatorName))
      return false;
    if (!(downUrl == rhs.downUrl))
      return false;
    if (!(totalLines == rhs.totalLines))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    return true;
  }
  bool operator != (const CodeCreateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CodeCreateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CodeCreateContent& obj);
};

void swap(CodeCreateContent &a, CodeCreateContent &b);

typedef struct _CodeDelContent__isset {
  _CodeDelContent__isset() : title(false) {}
  bool title :1;
} _CodeDelContent__isset;

class CodeDelContent {
 public:

  static const char* ascii_fingerprint; // = "F51617F135B1C1CF4FD15F6ACC93B2A8";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x16,0x17,0xF1,0x35,0xB1,0xC1,0xCF,0x4F,0xD1,0x5F,0x6A,0xCC,0x93,0xB2,0xA8};

  CodeDelContent(const CodeDelContent&);
  CodeDelContent& operator=(const CodeDelContent&);
  CodeDelContent() : operatorid(0), contentId(0), title() {
  }

  virtual ~CodeDelContent() throw();
  int32_t operatorid;
  int64_t contentId;
  std::string title;

  _CodeDelContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_contentId(const int64_t val);

  void __set_title(const std::string& val);

  bool operator == (const CodeDelContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(contentId == rhs.contentId))
      return false;
    if (__isset.title != rhs.__isset.title)
      return false;
    else if (__isset.title && !(title == rhs.title))
      return false;
    return true;
  }
  bool operator != (const CodeDelContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CodeDelContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CodeDelContent& obj);
};

void swap(CodeDelContent &a, CodeDelContent &b);

typedef struct _CommentCreateContent__isset {
  _CommentCreateContent__isset() : operatorName(false), cloudType(false) {}
  bool operatorName :1;
  bool cloudType :1;
} _CommentCreateContent__isset;

class CommentCreateContent {
 public:

  static const char* ascii_fingerprint; // = "FA2035E601D803A0C0E574441AEB5065";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x20,0x35,0xE6,0x01,0xD8,0x03,0xA0,0xC0,0xE5,0x74,0x44,0x1A,0xEB,0x50,0x65};

  CommentCreateContent(const CommentCreateContent&);
  CommentCreateContent& operator=(const CommentCreateContent&);
  CommentCreateContent() : operatorid(0), operatorName(), commentId(0), commentDesc(), contentId(0), contentName(), contentType(0), createTime(0), cloudType(0) {
  }

  virtual ~CommentCreateContent() throw();
  int32_t operatorid;
  std::string operatorName;
  int64_t commentId;
  std::string commentDesc;
  int64_t contentId;
  std::string contentName;
  int8_t contentType;
  int64_t createTime;
  int16_t cloudType;

  _CommentCreateContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_operatorName(const std::string& val);

  void __set_commentId(const int64_t val);

  void __set_commentDesc(const std::string& val);

  void __set_contentId(const int64_t val);

  void __set_contentName(const std::string& val);

  void __set_contentType(const int8_t val);

  void __set_createTime(const int64_t val);

  void __set_cloudType(const int16_t val);

  bool operator == (const CommentCreateContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (__isset.operatorName != rhs.__isset.operatorName)
      return false;
    else if (__isset.operatorName && !(operatorName == rhs.operatorName))
      return false;
    if (!(commentId == rhs.commentId))
      return false;
    if (!(commentDesc == rhs.commentDesc))
      return false;
    if (!(contentId == rhs.contentId))
      return false;
    if (!(contentName == rhs.contentName))
      return false;
    if (!(contentType == rhs.contentType))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (__isset.cloudType != rhs.__isset.cloudType)
      return false;
    else if (__isset.cloudType && !(cloudType == rhs.cloudType))
      return false;
    return true;
  }
  bool operator != (const CommentCreateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommentCreateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CommentCreateContent& obj);
};

void swap(CommentCreateContent &a, CommentCreateContent &b);

typedef struct _CommentDelContent__isset {
  _CommentDelContent__isset() : contentId(false), contentName(false) {}
  bool contentId :1;
  bool contentName :1;
} _CommentDelContent__isset;

class CommentDelContent {
 public:

  static const char* ascii_fingerprint; // = "F03D6DDC846223BC27471997C966A9A8";
  static const uint8_t binary_fingerprint[16]; // = {0xF0,0x3D,0x6D,0xDC,0x84,0x62,0x23,0xBC,0x27,0x47,0x19,0x97,0xC9,0x66,0xA9,0xA8};

  CommentDelContent(const CommentDelContent&);
  CommentDelContent& operator=(const CommentDelContent&);
  CommentDelContent() : operatorid(0), commentId(0), contentId(0), contentName() {
  }

  virtual ~CommentDelContent() throw();
  int32_t operatorid;
  int64_t commentId;
  int64_t contentId;
  std::string contentName;

  _CommentDelContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_commentId(const int64_t val);

  void __set_contentId(const int64_t val);

  void __set_contentName(const std::string& val);

  bool operator == (const CommentDelContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(commentId == rhs.commentId))
      return false;
    if (__isset.contentId != rhs.__isset.contentId)
      return false;
    else if (__isset.contentId && !(contentId == rhs.contentId))
      return false;
    if (__isset.contentName != rhs.__isset.contentName)
      return false;
    else if (__isset.contentName && !(contentName == rhs.contentName))
      return false;
    return true;
  }
  bool operator != (const CommentDelContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommentDelContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CommentDelContent& obj);
};

void swap(CommentDelContent &a, CommentDelContent &b);


class AlertRuleContent {
 public:

  static const char* ascii_fingerprint; // = "4A2AC987E20CE9C8A713ADB492E990A0";
  static const uint8_t binary_fingerprint[16]; // = {0x4A,0x2A,0xC9,0x87,0xE2,0x0C,0xE9,0xC8,0xA7,0x13,0xAD,0xB4,0x92,0xE9,0x90,0xA0};

  AlertRuleContent(const AlertRuleContent&);
  AlertRuleContent& operator=(const AlertRuleContent&);
  AlertRuleContent() : groupid(0), state(0), rule(0), time(0) {
  }

  virtual ~AlertRuleContent() throw();
  int32_t groupid;
  int8_t state;
  int32_t rule;
  int32_t time;

  void __set_groupid(const int32_t val);

  void __set_state(const int8_t val);

  void __set_rule(const int32_t val);

  void __set_time(const int32_t val);

  bool operator == (const AlertRuleContent & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(rule == rhs.rule))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const AlertRuleContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlertRuleContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AlertRuleContent& obj);
};

void swap(AlertRuleContent &a, AlertRuleContent &b);


class DiscussionClose {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  DiscussionClose(const DiscussionClose&);
  DiscussionClose& operator=(const DiscussionClose&);
  DiscussionClose() : operatorId(0) {
  }

  virtual ~DiscussionClose() throw();
  int32_t operatorId;

  void __set_operatorId(const int32_t val);

  bool operator == (const DiscussionClose & rhs) const
  {
    if (!(operatorId == rhs.operatorId))
      return false;
    return true;
  }
  bool operator != (const DiscussionClose &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscussionClose & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DiscussionClose& obj);
};

void swap(DiscussionClose &a, DiscussionClose &b);


class MsgNotifyContent {
 public:

  static const char* ascii_fingerprint; // = "C4007E46EFE548F8B4E100931498BEF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x00,0x7E,0x46,0xEF,0xE5,0x48,0xF8,0xB4,0xE1,0x00,0x93,0x14,0x98,0xBE,0xF8};

  MsgNotifyContent(const MsgNotifyContent&);
  MsgNotifyContent& operator=(const MsgNotifyContent&);
  MsgNotifyContent() : groupid(0), state(0) {
  }

  virtual ~MsgNotifyContent() throw();
  int32_t groupid;
  int8_t state;

  void __set_groupid(const int32_t val);

  void __set_state(const int8_t val);

  bool operator == (const MsgNotifyContent & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const MsgNotifyContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgNotifyContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MsgNotifyContent& obj);
};

void swap(MsgNotifyContent &a, MsgNotifyContent &b);

typedef struct _CloudFileContent__isset {
  _CloudFileContent__isset() : fileNameTo(false), fileCounts(false) {}
  bool fileNameTo :1;
  bool fileCounts :1;
} _CloudFileContent__isset;

class CloudFileContent {
 public:

  static const char* ascii_fingerprint; // = "A54A5E80B5EB9D73BE47821C542A3B4F";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0x4A,0x5E,0x80,0xB5,0xEB,0x9D,0x73,0xBE,0x47,0x82,0x1C,0x54,0x2A,0x3B,0x4F};

  CloudFileContent(const CloudFileContent&);
  CloudFileContent& operator=(const CloudFileContent&);
  CloudFileContent() : operatorId(0), operatorName(), fileName(), fileNameTo(), size(0), fileCounts(0), isDir(0), cloudType(0), detailType(0), detailContent(), createTime(0), contentId(0) {
  }

  virtual ~CloudFileContent() throw();
  int32_t operatorId;
  std::string operatorName;
  std::string fileName;
  std::string fileNameTo;
  int64_t size;
  int32_t fileCounts;
  int8_t isDir;
  int16_t cloudType;
  int8_t detailType;
  std::string detailContent;
  int64_t createTime;
  int64_t contentId;

  _CloudFileContent__isset __isset;

  void __set_operatorId(const int32_t val);

  void __set_operatorName(const std::string& val);

  void __set_fileName(const std::string& val);

  void __set_fileNameTo(const std::string& val);

  void __set_size(const int64_t val);

  void __set_fileCounts(const int32_t val);

  void __set_isDir(const int8_t val);

  void __set_cloudType(const int16_t val);

  void __set_detailType(const int8_t val);

  void __set_detailContent(const std::string& val);

  void __set_createTime(const int64_t val);

  void __set_contentId(const int64_t val);

  bool operator == (const CloudFileContent & rhs) const
  {
    if (!(operatorId == rhs.operatorId))
      return false;
    if (!(operatorName == rhs.operatorName))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    if (__isset.fileNameTo != rhs.__isset.fileNameTo)
      return false;
    else if (__isset.fileNameTo && !(fileNameTo == rhs.fileNameTo))
      return false;
    if (!(size == rhs.size))
      return false;
    if (__isset.fileCounts != rhs.__isset.fileCounts)
      return false;
    else if (__isset.fileCounts && !(fileCounts == rhs.fileCounts))
      return false;
    if (!(isDir == rhs.isDir))
      return false;
    if (!(cloudType == rhs.cloudType))
      return false;
    if (!(detailType == rhs.detailType))
      return false;
    if (!(detailContent == rhs.detailContent))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(contentId == rhs.contentId))
      return false;
    return true;
  }
  bool operator != (const CloudFileContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CloudFileContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CloudFileContent& obj);
};

void swap(CloudFileContent &a, CloudFileContent &b);


class MemberRoleUpdateContent {
 public:

  static const char* ascii_fingerprint; // = "A67B8D241F2CDBF89BFD4C0C33D44EFC";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x7B,0x8D,0x24,0x1F,0x2C,0xDB,0xF8,0x9B,0xFD,0x4C,0x0C,0x33,0xD4,0x4E,0xFC};

  MemberRoleUpdateContent(const MemberRoleUpdateContent&);
  MemberRoleUpdateContent& operator=(const MemberRoleUpdateContent&);
  MemberRoleUpdateContent() {
  }

  virtual ~MemberRoleUpdateContent() throw();
  std::map<int32_t, int8_t>  roleMap;

  void __set_roleMap(const std::map<int32_t, int8_t> & val);

  bool operator == (const MemberRoleUpdateContent & rhs) const
  {
    if (!(roleMap == rhs.roleMap))
      return false;
    return true;
  }
  bool operator != (const MemberRoleUpdateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MemberRoleUpdateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MemberRoleUpdateContent& obj);
};

void swap(MemberRoleUpdateContent &a, MemberRoleUpdateContent &b);

typedef struct _RevocationContent__isset {
  _RevocationContent__isset() : type(false) {}
  bool type :1;
} _RevocationContent__isset;

class RevocationContent {
 public:

  static const char* ascii_fingerprint; // = "7382E68BFD7B318A844F38E0B57A07A4";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x82,0xE6,0x8B,0xFD,0x7B,0x31,0x8A,0x84,0x4F,0x38,0xE0,0xB5,0x7A,0x07,0xA4};

  RevocationContent(const RevocationContent&);
  RevocationContent& operator=(const RevocationContent&);
  RevocationContent() : seq(0), type(0) {
  }

  virtual ~RevocationContent() throw();
  int64_t seq;
  int16_t type;

  _RevocationContent__isset __isset;

  void __set_seq(const int64_t val);

  void __set_type(const int16_t val);

  bool operator == (const RevocationContent & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const RevocationContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RevocationContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RevocationContent& obj);
};

void swap(RevocationContent &a, RevocationContent &b);

typedef struct _PasswordModifyContent__isset {
  _PasswordModifyContent__isset() : password(false) {}
  bool password :1;
} _PasswordModifyContent__isset;

class PasswordModifyContent {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  PasswordModifyContent(const PasswordModifyContent&);
  PasswordModifyContent& operator=(const PasswordModifyContent&);
  PasswordModifyContent() : password() {
  }

  virtual ~PasswordModifyContent() throw();
  std::string password;

  _PasswordModifyContent__isset __isset;

  void __set_password(const std::string& val);

  bool operator == (const PasswordModifyContent & rhs) const
  {
    if (__isset.password != rhs.__isset.password)
      return false;
    else if (__isset.password && !(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const PasswordModifyContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PasswordModifyContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PasswordModifyContent& obj);
};

void swap(PasswordModifyContent &a, PasswordModifyContent &b);

typedef struct _SystemWelcomeContent__isset {
  _SystemWelcomeContent__isset() : desc(false), target_link(false) {}
  bool desc :1;
  bool target_link :1;
} _SystemWelcomeContent__isset;

class SystemWelcomeContent {
 public:

  static const char* ascii_fingerprint; // = "FED0FBEAA0C90D1589E8B650561B7675";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0xD0,0xFB,0xEA,0xA0,0xC9,0x0D,0x15,0x89,0xE8,0xB6,0x50,0x56,0x1B,0x76,0x75};

  SystemWelcomeContent(const SystemWelcomeContent&);
  SystemWelcomeContent& operator=(const SystemWelcomeContent&);
  SystemWelcomeContent() : title(), image_url(), desc(), target_link() {
  }

  virtual ~SystemWelcomeContent() throw();
  std::string title;
  std::string image_url;
  std::string desc;
  std::string target_link;

  _SystemWelcomeContent__isset __isset;

  void __set_title(const std::string& val);

  void __set_image_url(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_target_link(const std::string& val);

  bool operator == (const SystemWelcomeContent & rhs) const
  {
    if (!(title == rhs.title))
      return false;
    if (!(image_url == rhs.image_url))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    if (__isset.target_link != rhs.__isset.target_link)
      return false;
    else if (__isset.target_link && !(target_link == rhs.target_link))
      return false;
    return true;
  }
  bool operator != (const SystemWelcomeContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemWelcomeContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SystemWelcomeContent& obj);
};

void swap(SystemWelcomeContent &a, SystemWelcomeContent &b);

typedef struct _ClientUpdateContent__isset {
  _ClientUpdateContent__isset() : max_sdk_version(false) {}
  bool max_sdk_version :1;
} _ClientUpdateContent__isset;

class ClientUpdateContent {
 public:

  static const char* ascii_fingerprint; // = "F6CE1DE81BDB961B855BD0A5FC12F584";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0xCE,0x1D,0xE8,0x1B,0xDB,0x96,0x1B,0x85,0x5B,0xD0,0xA5,0xFC,0x12,0xF5,0x84};

  ClientUpdateContent(const ClientUpdateContent&);
  ClientUpdateContent& operator=(const ClientUpdateContent&);
  ClientUpdateContent() : version_code(0), is_force_upgrade(0), max_sdk_version(0), min_sdk_version(0), version_name(), desc(), url() {
  }

  virtual ~ClientUpdateContent() throw();
  int32_t version_code;
  int8_t is_force_upgrade;
  int16_t max_sdk_version;
  int16_t min_sdk_version;
  std::string version_name;
  std::string desc;
  std::string url;

  _ClientUpdateContent__isset __isset;

  void __set_version_code(const int32_t val);

  void __set_is_force_upgrade(const int8_t val);

  void __set_max_sdk_version(const int16_t val);

  void __set_min_sdk_version(const int16_t val);

  void __set_version_name(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_url(const std::string& val);

  bool operator == (const ClientUpdateContent & rhs) const
  {
    if (!(version_code == rhs.version_code))
      return false;
    if (!(is_force_upgrade == rhs.is_force_upgrade))
      return false;
    if (__isset.max_sdk_version != rhs.__isset.max_sdk_version)
      return false;
    else if (__isset.max_sdk_version && !(max_sdk_version == rhs.max_sdk_version))
      return false;
    if (!(min_sdk_version == rhs.min_sdk_version))
      return false;
    if (!(version_name == rhs.version_name))
      return false;
    if (!(desc == rhs.desc))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const ClientUpdateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientUpdateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientUpdateContent& obj);
};

void swap(ClientUpdateContent &a, ClientUpdateContent &b);

typedef struct _InfoCell__isset {
  _InfoCell__isset() : inputType(false), value(false) {}
  bool inputType :1;
  bool value :1;
} _InfoCell__isset;

class InfoCell {
 public:

  static const char* ascii_fingerprint; // = "990E23FA38BCFCCCD6874CF4A2C48152";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x0E,0x23,0xFA,0x38,0xBC,0xFC,0xCC,0xD6,0x87,0x4C,0xF4,0xA2,0xC4,0x81,0x52};

  InfoCell(const InfoCell&);
  InfoCell& operator=(const InfoCell&);
  InfoCell() : tagId(0), label(), inputType(0), scope(0), type(0), state(0), value() {
  }

  virtual ~InfoCell() throw();
  int32_t tagId;
  std::string label;
  int16_t inputType;
  int16_t scope;
  int16_t type;
  int16_t state;
  std::string value;

  _InfoCell__isset __isset;

  void __set_tagId(const int32_t val);

  void __set_label(const std::string& val);

  void __set_inputType(const int16_t val);

  void __set_scope(const int16_t val);

  void __set_type(const int16_t val);

  void __set_state(const int16_t val);

  void __set_value(const std::string& val);

  bool operator == (const InfoCell & rhs) const
  {
    if (!(tagId == rhs.tagId))
      return false;
    if (!(label == rhs.label))
      return false;
    if (__isset.inputType != rhs.__isset.inputType)
      return false;
    else if (__isset.inputType && !(inputType == rhs.inputType))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(state == rhs.state))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const InfoCell &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfoCell & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InfoCell& obj);
};

void swap(InfoCell &a, InfoCell &b);

typedef struct _CompleteInfoContent__isset {
  _CompleteInfoContent__isset() : desc(false) {}
  bool desc :1;
} _CompleteInfoContent__isset;

class CompleteInfoContent {
 public:

  static const char* ascii_fingerprint; // = "0806D77A915A2E91FDD024FE4D2F40DB";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0x06,0xD7,0x7A,0x91,0x5A,0x2E,0x91,0xFD,0xD0,0x24,0xFE,0x4D,0x2F,0x40,0xDB};

  CompleteInfoContent(const CompleteInfoContent&);
  CompleteInfoContent& operator=(const CompleteInfoContent&);
  CompleteInfoContent() : desc() {
  }

  virtual ~CompleteInfoContent() throw();
  std::vector<InfoCell>  info_cell_list;
  std::string desc;

  _CompleteInfoContent__isset __isset;

  void __set_info_cell_list(const std::vector<InfoCell> & val);

  void __set_desc(const std::string& val);

  bool operator == (const CompleteInfoContent & rhs) const
  {
    if (!(info_cell_list == rhs.info_cell_list))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const CompleteInfoContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CompleteInfoContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CompleteInfoContent& obj);
};

void swap(CompleteInfoContent &a, CompleteInfoContent &b);


class TagDelContent {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

  TagDelContent(const TagDelContent&);
  TagDelContent& operator=(const TagDelContent&);
  TagDelContent() {
  }

  virtual ~TagDelContent() throw();
  std::vector<int32_t>  delTagIds;

  void __set_delTagIds(const std::vector<int32_t> & val);

  bool operator == (const TagDelContent & rhs) const
  {
    if (!(delTagIds == rhs.delTagIds))
      return false;
    return true;
  }
  bool operator != (const TagDelContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TagDelContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TagDelContent& obj);
};

void swap(TagDelContent &a, TagDelContent &b);


class PwdComplexUpdateContent {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  PwdComplexUpdateContent(const PwdComplexUpdateContent&);
  PwdComplexUpdateContent& operator=(const PwdComplexUpdateContent&);
  PwdComplexUpdateContent() : type((PwdComplexType::type)0) {
  }

  virtual ~PwdComplexUpdateContent() throw();
  PwdComplexType::type type;

  void __set_type(const PwdComplexType::type val);

  bool operator == (const PwdComplexUpdateContent & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const PwdComplexUpdateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PwdComplexUpdateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PwdComplexUpdateContent& obj);
};

void swap(PwdComplexUpdateContent &a, PwdComplexUpdateContent &b);


class PwdExpireContent {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  PwdExpireContent(const PwdExpireContent&);
  PwdExpireContent& operator=(const PwdExpireContent&);
  PwdExpireContent() : dueDays(0) {
  }

  virtual ~PwdExpireContent() throw();
  int32_t dueDays;

  void __set_dueDays(const int32_t val);

  bool operator == (const PwdExpireContent & rhs) const
  {
    if (!(dueDays == rhs.dueDays))
      return false;
    return true;
  }
  bool operator != (const PwdExpireContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PwdExpireContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PwdExpireContent& obj);
};

void swap(PwdExpireContent &a, PwdExpireContent &b);


class PCClientGuide {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  PCClientGuide(const PCClientGuide&);
  PCClientGuide& operator=(const PCClientGuide&);
  PCClientGuide() : downUrl() {
  }

  virtual ~PCClientGuide() throw();
  std::string downUrl;

  void __set_downUrl(const std::string& val);

  bool operator == (const PCClientGuide & rhs) const
  {
    if (!(downUrl == rhs.downUrl))
      return false;
    return true;
  }
  bool operator != (const PCClientGuide &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PCClientGuide & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PCClientGuide& obj);
};

void swap(PCClientGuide &a, PCClientGuide &b);


class MobileClientGuide {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  MobileClientGuide(const MobileClientGuide&);
  MobileClientGuide& operator=(const MobileClientGuide&);
  MobileClientGuide() : androidMarketUrl(), iphoneMarketUrl() {
  }

  virtual ~MobileClientGuide() throw();
  std::string androidMarketUrl;
  std::string iphoneMarketUrl;

  void __set_androidMarketUrl(const std::string& val);

  void __set_iphoneMarketUrl(const std::string& val);

  bool operator == (const MobileClientGuide & rhs) const
  {
    if (!(androidMarketUrl == rhs.androidMarketUrl))
      return false;
    if (!(iphoneMarketUrl == rhs.iphoneMarketUrl))
      return false;
    return true;
  }
  bool operator != (const MobileClientGuide &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileClientGuide & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileClientGuide& obj);
};

void swap(MobileClientGuide &a, MobileClientGuide &b);


class GroupRemindContent {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

  GroupRemindContent(const GroupRemindContent&);
  GroupRemindContent& operator=(const GroupRemindContent&);
  GroupRemindContent() {
  }

  virtual ~GroupRemindContent() throw();
  std::vector<int32_t>  groupIdList;

  void __set_groupIdList(const std::vector<int32_t> & val);

  bool operator == (const GroupRemindContent & rhs) const
  {
    if (!(groupIdList == rhs.groupIdList))
      return false;
    return true;
  }
  bool operator != (const GroupRemindContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupRemindContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GroupRemindContent& obj);
};

void swap(GroupRemindContent &a, GroupRemindContent &b);


class FileTransmissionInviteContent {
 public:

  static const char* ascii_fingerprint; // = "95BED25B4D6D53716ECD8B38E15794C5";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0xBE,0xD2,0x5B,0x4D,0x6D,0x53,0x71,0x6E,0xCD,0x8B,0x38,0xE1,0x57,0x94,0xC5};

  FileTransmissionInviteContent(const FileTransmissionInviteContent&);
  FileTransmissionInviteContent& operator=(const FileTransmissionInviteContent&);
  FileTransmissionInviteContent() : fileMD5(), fileName(), fileSize(0), blockSize(0), nZip(0), taskId(0) {
  }

  virtual ~FileTransmissionInviteContent() throw();
  std::string fileMD5;
  std::string fileName;
  int64_t fileSize;
  int64_t blockSize;
  int8_t nZip;
  int64_t taskId;

  void __set_fileMD5(const std::string& val);

  void __set_fileName(const std::string& val);

  void __set_fileSize(const int64_t val);

  void __set_blockSize(const int64_t val);

  void __set_nZip(const int8_t val);

  void __set_taskId(const int64_t val);

  bool operator == (const FileTransmissionInviteContent & rhs) const
  {
    if (!(fileMD5 == rhs.fileMD5))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    if (!(fileSize == rhs.fileSize))
      return false;
    if (!(blockSize == rhs.blockSize))
      return false;
    if (!(nZip == rhs.nZip))
      return false;
    if (!(taskId == rhs.taskId))
      return false;
    return true;
  }
  bool operator != (const FileTransmissionInviteContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileTransmissionInviteContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileTransmissionInviteContent& obj);
};

void swap(FileTransmissionInviteContent &a, FileTransmissionInviteContent &b);


class FileTransmissionReceiveContent {
 public:

  static const char* ascii_fingerprint; // = "7093089C1F1E66F5F7165E6F8C15F1C4";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x93,0x08,0x9C,0x1F,0x1E,0x66,0xF5,0xF7,0x16,0x5E,0x6F,0x8C,0x15,0xF1,0xC4};

  FileTransmissionReceiveContent(const FileTransmissionReceiveContent&);
  FileTransmissionReceiveContent& operator=(const FileTransmissionReceiveContent&);
  FileTransmissionReceiveContent() : sendTaskId(0), receiveTaskId(0), ip(), port(0), serverList(), transType(0), transPoint(0) {
  }

  virtual ~FileTransmissionReceiveContent() throw();
  int64_t sendTaskId;
  int64_t receiveTaskId;
  std::string ip;
  int16_t port;
  std::string serverList;
  int8_t transType;
  int64_t transPoint;

  void __set_sendTaskId(const int64_t val);

  void __set_receiveTaskId(const int64_t val);

  void __set_ip(const std::string& val);

  void __set_port(const int16_t val);

  void __set_serverList(const std::string& val);

  void __set_transType(const int8_t val);

  void __set_transPoint(const int64_t val);

  bool operator == (const FileTransmissionReceiveContent & rhs) const
  {
    if (!(sendTaskId == rhs.sendTaskId))
      return false;
    if (!(receiveTaskId == rhs.receiveTaskId))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(serverList == rhs.serverList))
      return false;
    if (!(transType == rhs.transType))
      return false;
    if (!(transPoint == rhs.transPoint))
      return false;
    return true;
  }
  bool operator != (const FileTransmissionReceiveContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileTransmissionReceiveContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileTransmissionReceiveContent& obj);
};

void swap(FileTransmissionReceiveContent &a, FileTransmissionReceiveContent &b);


class FileTransmissionRejectContent {
 public:

  static const char* ascii_fingerprint; // = "FEBAC9C9DD701ABE5222D0CA33FDA432";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0xBA,0xC9,0xC9,0xDD,0x70,0x1A,0xBE,0x52,0x22,0xD0,0xCA,0x33,0xFD,0xA4,0x32};

  FileTransmissionRejectContent(const FileTransmissionRejectContent&);
  FileTransmissionRejectContent& operator=(const FileTransmissionRejectContent&);
  FileTransmissionRejectContent() : taskId(0), fileName(), fileSize(0) {
  }

  virtual ~FileTransmissionRejectContent() throw();
  int64_t taskId;
  std::string fileName;
  int64_t fileSize;

  void __set_taskId(const int64_t val);

  void __set_fileName(const std::string& val);

  void __set_fileSize(const int64_t val);

  bool operator == (const FileTransmissionRejectContent & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    if (!(fileSize == rhs.fileSize))
      return false;
    return true;
  }
  bool operator != (const FileTransmissionRejectContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileTransmissionRejectContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileTransmissionRejectContent& obj);
};

void swap(FileTransmissionRejectContent &a, FileTransmissionRejectContent &b);


class FileTransmissionStopContent {
 public:

  static const char* ascii_fingerprint; // = "A1A6809CD4361F6DBC9990FF9DD0865D";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0xA6,0x80,0x9C,0xD4,0x36,0x1F,0x6D,0xBC,0x99,0x90,0xFF,0x9D,0xD0,0x86,0x5D};

  FileTransmissionStopContent(const FileTransmissionStopContent&);
  FileTransmissionStopContent& operator=(const FileTransmissionStopContent&);
  FileTransmissionStopContent() : sendTaskId(0), receiveTaskId(0), fileName(), fileSize(0), flag(0) {
  }

  virtual ~FileTransmissionStopContent() throw();
  int64_t sendTaskId;
  int64_t receiveTaskId;
  std::string fileName;
  int64_t fileSize;
  int8_t flag;

  void __set_sendTaskId(const int64_t val);

  void __set_receiveTaskId(const int64_t val);

  void __set_fileName(const std::string& val);

  void __set_fileSize(const int64_t val);

  void __set_flag(const int8_t val);

  bool operator == (const FileTransmissionStopContent & rhs) const
  {
    if (!(sendTaskId == rhs.sendTaskId))
      return false;
    if (!(receiveTaskId == rhs.receiveTaskId))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    if (!(fileSize == rhs.fileSize))
      return false;
    if (!(flag == rhs.flag))
      return false;
    return true;
  }
  bool operator != (const FileTransmissionStopContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileTransmissionStopContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileTransmissionStopContent& obj);
};

void swap(FileTransmissionStopContent &a, FileTransmissionStopContent &b);

typedef struct _DeptTransferConfirmContent__isset {
  _DeptTransferConfirmContent__isset() : dept_id(false), desc(false) {}
  bool dept_id :1;
  bool desc :1;
} _DeptTransferConfirmContent__isset;

class DeptTransferConfirmContent {
 public:

  static const char* ascii_fingerprint; // = "276DBD1044C1B368CCA6818A63010483";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x6D,0xBD,0x10,0x44,0xC1,0xB3,0x68,0xCC,0xA6,0x81,0x8A,0x63,0x01,0x04,0x83};

  DeptTransferConfirmContent(const DeptTransferConfirmContent&);
  DeptTransferConfirmContent& operator=(const DeptTransferConfirmContent&);
  DeptTransferConfirmContent() : operator_id(0), user_name(), dept_id(0), dept_name(), user_id(0), desc() {
  }

  virtual ~DeptTransferConfirmContent() throw();
  int32_t operator_id;
  std::string user_name;
  int32_t dept_id;
  std::string dept_name;
  int32_t user_id;
  std::string desc;

  _DeptTransferConfirmContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_user_name(const std::string& val);

  void __set_dept_id(const int32_t val);

  void __set_dept_name(const std::string& val);

  void __set_user_id(const int32_t val);

  void __set_desc(const std::string& val);

  bool operator == (const DeptTransferConfirmContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (__isset.dept_id != rhs.__isset.dept_id)
      return false;
    else if (__isset.dept_id && !(dept_id == rhs.dept_id))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const DeptTransferConfirmContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeptTransferConfirmContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeptTransferConfirmContent& obj);
};

void swap(DeptTransferConfirmContent &a, DeptTransferConfirmContent &b);

typedef struct _EmployeeLeaveConfirmContent__isset {
  _EmployeeLeaveConfirmContent__isset() : dept_id(false), desc(false) {}
  bool dept_id :1;
  bool desc :1;
} _EmployeeLeaveConfirmContent__isset;

class EmployeeLeaveConfirmContent {
 public:

  static const char* ascii_fingerprint; // = "276DBD1044C1B368CCA6818A63010483";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x6D,0xBD,0x10,0x44,0xC1,0xB3,0x68,0xCC,0xA6,0x81,0x8A,0x63,0x01,0x04,0x83};

  EmployeeLeaveConfirmContent(const EmployeeLeaveConfirmContent&);
  EmployeeLeaveConfirmContent& operator=(const EmployeeLeaveConfirmContent&);
  EmployeeLeaveConfirmContent() : operator_id(0), user_name(), dept_id(0), dept_name(), user_id(0), desc() {
  }

  virtual ~EmployeeLeaveConfirmContent() throw();
  int32_t operator_id;
  std::string user_name;
  int32_t dept_id;
  std::string dept_name;
  int32_t user_id;
  std::string desc;

  _EmployeeLeaveConfirmContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_user_name(const std::string& val);

  void __set_dept_id(const int32_t val);

  void __set_dept_name(const std::string& val);

  void __set_user_id(const int32_t val);

  void __set_desc(const std::string& val);

  bool operator == (const EmployeeLeaveConfirmContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (__isset.dept_id != rhs.__isset.dept_id)
      return false;
    else if (__isset.dept_id && !(dept_id == rhs.dept_id))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const EmployeeLeaveConfirmContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmployeeLeaveConfirmContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EmployeeLeaveConfirmContent& obj);
};

void swap(EmployeeLeaveConfirmContent &a, EmployeeLeaveConfirmContent &b);

typedef struct _EmployeeEntryConfirmContent__isset {
  _EmployeeEntryConfirmContent__isset() : dept_id(false), desc(false) {}
  bool dept_id :1;
  bool desc :1;
} _EmployeeEntryConfirmContent__isset;

class EmployeeEntryConfirmContent {
 public:

  static const char* ascii_fingerprint; // = "276DBD1044C1B368CCA6818A63010483";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x6D,0xBD,0x10,0x44,0xC1,0xB3,0x68,0xCC,0xA6,0x81,0x8A,0x63,0x01,0x04,0x83};

  EmployeeEntryConfirmContent(const EmployeeEntryConfirmContent&);
  EmployeeEntryConfirmContent& operator=(const EmployeeEntryConfirmContent&);
  EmployeeEntryConfirmContent() : operator_id(0), user_name(), dept_id(0), dept_name(), user_id(0), desc() {
  }

  virtual ~EmployeeEntryConfirmContent() throw();
  int32_t operator_id;
  std::string user_name;
  int32_t dept_id;
  std::string dept_name;
  int32_t user_id;
  std::string desc;

  _EmployeeEntryConfirmContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_user_name(const std::string& val);

  void __set_dept_id(const int32_t val);

  void __set_dept_name(const std::string& val);

  void __set_user_id(const int32_t val);

  void __set_desc(const std::string& val);

  bool operator == (const EmployeeEntryConfirmContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (__isset.dept_id != rhs.__isset.dept_id)
      return false;
    else if (__isset.dept_id && !(dept_id == rhs.dept_id))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const EmployeeEntryConfirmContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmployeeEntryConfirmContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EmployeeEntryConfirmContent& obj);
};

void swap(EmployeeEntryConfirmContent &a, EmployeeEntryConfirmContent &b);

typedef struct _CompanyJoinContent__isset {
  _CompanyJoinContent__isset() : company_id(false), desc(false) {}
  bool company_id :1;
  bool desc :1;
} _CompanyJoinContent__isset;

class CompanyJoinContent {
 public:

  static const char* ascii_fingerprint; // = "DC6C26A07F670658C340C956437DF0B7";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x6C,0x26,0xA0,0x7F,0x67,0x06,0x58,0xC3,0x40,0xC9,0x56,0x43,0x7D,0xF0,0xB7};

  CompanyJoinContent(const CompanyJoinContent&);
  CompanyJoinContent& operator=(const CompanyJoinContent&);
  CompanyJoinContent() : operator_id(0), company_id(0), company_name(), user_id(0), user_name(), desc() {
  }

  virtual ~CompanyJoinContent() throw();
  int32_t operator_id;
  int32_t company_id;
  std::string company_name;
  int32_t user_id;
  std::string user_name;
  std::string desc;

  _CompanyJoinContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_company_id(const int32_t val);

  void __set_company_name(const std::string& val);

  void __set_user_id(const int32_t val);

  void __set_user_name(const std::string& val);

  void __set_desc(const std::string& val);

  bool operator == (const CompanyJoinContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (__isset.company_id != rhs.__isset.company_id)
      return false;
    else if (__isset.company_id && !(company_id == rhs.company_id))
      return false;
    if (!(company_name == rhs.company_name))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const CompanyJoinContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CompanyJoinContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CompanyJoinContent& obj);
};

void swap(CompanyJoinContent &a, CompanyJoinContent &b);

typedef struct _DeptDeleteContent__isset {
  _DeptDeleteContent__isset() : desc(false) {}
  bool desc :1;
} _DeptDeleteContent__isset;

class DeptDeleteContent {
 public:

  static const char* ascii_fingerprint; // = "AEEF8A47CB674B0E621F244F915D169A";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0xEF,0x8A,0x47,0xCB,0x67,0x4B,0x0E,0x62,0x1F,0x24,0x4F,0x91,0x5D,0x16,0x9A};

  DeptDeleteContent(const DeptDeleteContent&);
  DeptDeleteContent& operator=(const DeptDeleteContent&);
  DeptDeleteContent() : operator_id(0), dept_id(0), dept_name(), parent_dept_name(), desc() {
  }

  virtual ~DeptDeleteContent() throw();
  int32_t operator_id;
  int32_t dept_id;
  std::string dept_name;
  std::string parent_dept_name;
  std::string desc;

  _DeptDeleteContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_dept_id(const int32_t val);

  void __set_dept_name(const std::string& val);

  void __set_parent_dept_name(const std::string& val);

  void __set_desc(const std::string& val);

  bool operator == (const DeptDeleteContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(dept_id == rhs.dept_id))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (!(parent_dept_name == rhs.parent_dept_name))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const DeptDeleteContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeptDeleteContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeptDeleteContent& obj);
};

void swap(DeptDeleteContent &a, DeptDeleteContent &b);

typedef struct _DeptParentChangeContent__isset {
  _DeptParentChangeContent__isset() : desc(false) {}
  bool desc :1;
} _DeptParentChangeContent__isset;

class DeptParentChangeContent {
 public:

  static const char* ascii_fingerprint; // = "8055EEDFC3011F0FCA8AD622380D2D9B";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x55,0xEE,0xDF,0xC3,0x01,0x1F,0x0F,0xCA,0x8A,0xD6,0x22,0x38,0x0D,0x2D,0x9B};

  DeptParentChangeContent(const DeptParentChangeContent&);
  DeptParentChangeContent& operator=(const DeptParentChangeContent&);
  DeptParentChangeContent() : operator_id(0), dept_id(0), dept_name(), old_dept_name(), new_dept_name(), desc() {
  }

  virtual ~DeptParentChangeContent() throw();
  int32_t operator_id;
  int32_t dept_id;
  std::string dept_name;
  std::string old_dept_name;
  std::string new_dept_name;
  std::string desc;

  _DeptParentChangeContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_dept_id(const int32_t val);

  void __set_dept_name(const std::string& val);

  void __set_old_dept_name(const std::string& val);

  void __set_new_dept_name(const std::string& val);

  void __set_desc(const std::string& val);

  bool operator == (const DeptParentChangeContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(dept_id == rhs.dept_id))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (!(old_dept_name == rhs.old_dept_name))
      return false;
    if (!(new_dept_name == rhs.new_dept_name))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const DeptParentChangeContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeptParentChangeContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeptParentChangeContent& obj);
};

void swap(DeptParentChangeContent &a, DeptParentChangeContent &b);

typedef struct _DeptUpdateContent__isset {
  _DeptUpdateContent__isset() : desc(false) {}
  bool desc :1;
} _DeptUpdateContent__isset;

class DeptUpdateContent {
 public:

  static const char* ascii_fingerprint; // = "AEEF8A47CB674B0E621F244F915D169A";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0xEF,0x8A,0x47,0xCB,0x67,0x4B,0x0E,0x62,0x1F,0x24,0x4F,0x91,0x5D,0x16,0x9A};

  DeptUpdateContent(const DeptUpdateContent&);
  DeptUpdateContent& operator=(const DeptUpdateContent&);
  DeptUpdateContent() : operator_id(0), dept_id(0), old_dept_name(), new_dept_name(), desc() {
  }

  virtual ~DeptUpdateContent() throw();
  int32_t operator_id;
  int32_t dept_id;
  std::string old_dept_name;
  std::string new_dept_name;
  std::string desc;

  _DeptUpdateContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_dept_id(const int32_t val);

  void __set_old_dept_name(const std::string& val);

  void __set_new_dept_name(const std::string& val);

  void __set_desc(const std::string& val);

  bool operator == (const DeptUpdateContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(dept_id == rhs.dept_id))
      return false;
    if (!(old_dept_name == rhs.old_dept_name))
      return false;
    if (!(new_dept_name == rhs.new_dept_name))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const DeptUpdateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeptUpdateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeptUpdateContent& obj);
};

void swap(DeptUpdateContent &a, DeptUpdateContent &b);

typedef struct _DeptTransferContent__isset {
  _DeptTransferContent__isset() : old_dept_name(false), desc(false) {}
  bool old_dept_name :1;
  bool desc :1;
} _DeptTransferContent__isset;

class DeptTransferContent {
 public:

  static const char* ascii_fingerprint; // = "40EED2FDAEF7D842279C74ACE83AFE79";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0xEE,0xD2,0xFD,0xAE,0xF7,0xD8,0x42,0x27,0x9C,0x74,0xAC,0xE8,0x3A,0xFE,0x79};

  DeptTransferContent(const DeptTransferContent&);
  DeptTransferContent& operator=(const DeptTransferContent&);
  DeptTransferContent() : operator_id(0), user_id(0), user_name(), dept_id(0), old_dept_name(), dept_name(), desc() {
  }

  virtual ~DeptTransferContent() throw();
  int32_t operator_id;
  int32_t user_id;
  std::string user_name;
  int32_t dept_id;
  std::string old_dept_name;
  std::string dept_name;
  std::string desc;

  _DeptTransferContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_user_id(const int32_t val);

  void __set_user_name(const std::string& val);

  void __set_dept_id(const int32_t val);

  void __set_old_dept_name(const std::string& val);

  void __set_dept_name(const std::string& val);

  void __set_desc(const std::string& val);

  bool operator == (const DeptTransferContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(dept_id == rhs.dept_id))
      return false;
    if (__isset.old_dept_name != rhs.__isset.old_dept_name)
      return false;
    else if (__isset.old_dept_name && !(old_dept_name == rhs.old_dept_name))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const DeptTransferContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeptTransferContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeptTransferContent& obj);
};

void swap(DeptTransferContent &a, DeptTransferContent &b);

typedef struct _PositionUpdateContent__isset {
  _PositionUpdateContent__isset() : old_position(false), desc(false) {}
  bool old_position :1;
  bool desc :1;
} _PositionUpdateContent__isset;

class PositionUpdateContent {
 public:

  static const char* ascii_fingerprint; // = "9FCF77057A734BECF4EE0F222B47801B";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0xCF,0x77,0x05,0x7A,0x73,0x4B,0xEC,0xF4,0xEE,0x0F,0x22,0x2B,0x47,0x80,0x1B};

  PositionUpdateContent(const PositionUpdateContent&);
  PositionUpdateContent& operator=(const PositionUpdateContent&);
  PositionUpdateContent() : operator_id(0), user_id(0), user_name(), new_position(), old_position(), dept_name(), desc() {
  }

  virtual ~PositionUpdateContent() throw();
  int32_t operator_id;
  int32_t user_id;
  std::string user_name;
  std::string new_position;
  std::string old_position;
  std::string dept_name;
  std::string desc;

  _PositionUpdateContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_user_id(const int32_t val);

  void __set_user_name(const std::string& val);

  void __set_new_position(const std::string& val);

  void __set_old_position(const std::string& val);

  void __set_dept_name(const std::string& val);

  void __set_desc(const std::string& val);

  bool operator == (const PositionUpdateContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(new_position == rhs.new_position))
      return false;
    if (__isset.old_position != rhs.__isset.old_position)
      return false;
    else if (__isset.old_position && !(old_position == rhs.old_position))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const PositionUpdateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PositionUpdateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PositionUpdateContent& obj);
};

void swap(PositionUpdateContent &a, PositionUpdateContent &b);

typedef struct _EmployeeEntryContent__isset {
  _EmployeeEntryContent__isset() : desc(false) {}
  bool desc :1;
} _EmployeeEntryContent__isset;

class EmployeeEntryContent {
 public:

  static const char* ascii_fingerprint; // = "AF9711CAD17C108B86FF31EDDA46EC08";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0x97,0x11,0xCA,0xD1,0x7C,0x10,0x8B,0x86,0xFF,0x31,0xED,0xDA,0x46,0xEC,0x08};

  EmployeeEntryContent(const EmployeeEntryContent&);
  EmployeeEntryContent& operator=(const EmployeeEntryContent&);
  EmployeeEntryContent() : operator_id(0), dept_id(0), user_name(), dept_name(), position(), user_id(0), desc() {
  }

  virtual ~EmployeeEntryContent() throw();
  int32_t operator_id;
  int32_t dept_id;
  std::string user_name;
  std::string dept_name;
  std::string position;
  int32_t user_id;
  std::string desc;

  _EmployeeEntryContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_dept_id(const int32_t val);

  void __set_user_name(const std::string& val);

  void __set_dept_name(const std::string& val);

  void __set_position(const std::string& val);

  void __set_user_id(const int32_t val);

  void __set_desc(const std::string& val);

  bool operator == (const EmployeeEntryContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(dept_id == rhs.dept_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const EmployeeEntryContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmployeeEntryContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EmployeeEntryContent& obj);
};

void swap(EmployeeEntryContent &a, EmployeeEntryContent &b);

typedef struct _EmployeeLeaveContent__isset {
  _EmployeeLeaveContent__isset() : desc(false) {}
  bool desc :1;
} _EmployeeLeaveContent__isset;

class EmployeeLeaveContent {
 public:

  static const char* ascii_fingerprint; // = "AEEF8A47CB674B0E621F244F915D169A";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0xEF,0x8A,0x47,0xCB,0x67,0x4B,0x0E,0x62,0x1F,0x24,0x4F,0x91,0x5D,0x16,0x9A};

  EmployeeLeaveContent(const EmployeeLeaveContent&);
  EmployeeLeaveContent& operator=(const EmployeeLeaveContent&);
  EmployeeLeaveContent() : operator_id(0), user_id(0), user_name(), dept_name(), desc() {
  }

  virtual ~EmployeeLeaveContent() throw();
  int32_t operator_id;
  int32_t user_id;
  std::string user_name;
  std::string dept_name;
  std::string desc;

  _EmployeeLeaveContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_user_id(const int32_t val);

  void __set_user_name(const std::string& val);

  void __set_dept_name(const std::string& val);

  void __set_desc(const std::string& val);

  bool operator == (const EmployeeLeaveContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const EmployeeLeaveContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmployeeLeaveContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EmployeeLeaveContent& obj);
};

void swap(EmployeeLeaveContent &a, EmployeeLeaveContent &b);

typedef struct _EmployeeRightsChangeContent__isset {
  _EmployeeRightsChangeContent__isset() : desc(false) {}
  bool desc :1;
} _EmployeeRightsChangeContent__isset;

class EmployeeRightsChangeContent {
 public:

  static const char* ascii_fingerprint; // = "7E1F761F8AF9194C3206AA828C3FE5B6";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x1F,0x76,0x1F,0x8A,0xF9,0x19,0x4C,0x32,0x06,0xAA,0x82,0x8C,0x3F,0xE5,0xB6};

  EmployeeRightsChangeContent(const EmployeeRightsChangeContent&);
  EmployeeRightsChangeContent& operator=(const EmployeeRightsChangeContent&);
  EmployeeRightsChangeContent() : operator_id(0), user_id(0), user_name(), dept_name(), dept_id(0), desc() {
  }

  virtual ~EmployeeRightsChangeContent() throw();
  int32_t operator_id;
  int32_t user_id;
  std::string user_name;
  std::string dept_name;
  int32_t dept_id;
  std::string desc;

  _EmployeeRightsChangeContent__isset __isset;

  void __set_operator_id(const int32_t val);

  void __set_user_id(const int32_t val);

  void __set_user_name(const std::string& val);

  void __set_dept_name(const std::string& val);

  void __set_dept_id(const int32_t val);

  void __set_desc(const std::string& val);

  bool operator == (const EmployeeRightsChangeContent & rhs) const
  {
    if (!(operator_id == rhs.operator_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(dept_name == rhs.dept_name))
      return false;
    if (!(dept_id == rhs.dept_id))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const EmployeeRightsChangeContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmployeeRightsChangeContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EmployeeRightsChangeContent& obj);
};

void swap(EmployeeRightsChangeContent &a, EmployeeRightsChangeContent &b);

typedef struct _InstantIQInviteContent__isset {
  _InstantIQInviteContent__isset() : isReserve(false) {}
  bool isReserve :1;
} _InstantIQInviteContent__isset;

class InstantIQInviteContent {
 public:

  static const char* ascii_fingerprint; // = "7486976EF28C2F176D8B57834507D169";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0x86,0x97,0x6E,0xF2,0x8C,0x2F,0x17,0x6D,0x8B,0x57,0x83,0x45,0x07,0xD1,0x69};

  InstantIQInviteContent(const InstantIQInviteContent&);
  InstantIQInviteContent& operator=(const InstantIQInviteContent&);
  InstantIQInviteContent() : confId(0), hostId(0), confPwd(), isReserve(0) {
  }

  virtual ~InstantIQInviteContent() throw();
  int32_t confId;
  int32_t hostId;
  std::string confPwd;
  int8_t isReserve;

  _InstantIQInviteContent__isset __isset;

  void __set_confId(const int32_t val);

  void __set_hostId(const int32_t val);

  void __set_confPwd(const std::string& val);

  void __set_isReserve(const int8_t val);

  bool operator == (const InstantIQInviteContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (!(hostId == rhs.hostId))
      return false;
    if (!(confPwd == rhs.confPwd))
      return false;
    if (__isset.isReserve != rhs.__isset.isReserve)
      return false;
    else if (__isset.isReserve && !(isReserve == rhs.isReserve))
      return false;
    return true;
  }
  bool operator != (const InstantIQInviteContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstantIQInviteContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InstantIQInviteContent& obj);
};

void swap(InstantIQInviteContent &a, InstantIQInviteContent &b);

typedef struct _InstantIQReceiveContent__isset {
  _InstantIQReceiveContent__isset() : isReserve(false) {}
  bool isReserve :1;
} _InstantIQReceiveContent__isset;

class InstantIQReceiveContent {
 public:

  static const char* ascii_fingerprint; // = "1B4ACDFCA5439DAFFF71DD05FB13004E";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x4A,0xCD,0xFC,0xA5,0x43,0x9D,0xAF,0xFF,0x71,0xDD,0x05,0xFB,0x13,0x00,0x4E};

  InstantIQReceiveContent(const InstantIQReceiveContent&);
  InstantIQReceiveContent& operator=(const InstantIQReceiveContent&);
  InstantIQReceiveContent() : confId(0), isReserve(0) {
  }

  virtual ~InstantIQReceiveContent() throw();
  int32_t confId;
  int8_t isReserve;

  _InstantIQReceiveContent__isset __isset;

  void __set_confId(const int32_t val);

  void __set_isReserve(const int8_t val);

  bool operator == (const InstantIQReceiveContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (__isset.isReserve != rhs.__isset.isReserve)
      return false;
    else if (__isset.isReserve && !(isReserve == rhs.isReserve))
      return false;
    return true;
  }
  bool operator != (const InstantIQReceiveContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstantIQReceiveContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InstantIQReceiveContent& obj);
};

void swap(InstantIQReceiveContent &a, InstantIQReceiveContent &b);

typedef struct _InstantIQRejectContent__isset {
  _InstantIQRejectContent__isset() : isReserve(false) {}
  bool isReserve :1;
} _InstantIQRejectContent__isset;

class InstantIQRejectContent {
 public:

  static const char* ascii_fingerprint; // = "1B4ACDFCA5439DAFFF71DD05FB13004E";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x4A,0xCD,0xFC,0xA5,0x43,0x9D,0xAF,0xFF,0x71,0xDD,0x05,0xFB,0x13,0x00,0x4E};

  InstantIQRejectContent(const InstantIQRejectContent&);
  InstantIQRejectContent& operator=(const InstantIQRejectContent&);
  InstantIQRejectContent() : confId(0), isReserve(0) {
  }

  virtual ~InstantIQRejectContent() throw();
  int32_t confId;
  int8_t isReserve;

  _InstantIQRejectContent__isset __isset;

  void __set_confId(const int32_t val);

  void __set_isReserve(const int8_t val);

  bool operator == (const InstantIQRejectContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (__isset.isReserve != rhs.__isset.isReserve)
      return false;
    else if (__isset.isReserve && !(isReserve == rhs.isReserve))
      return false;
    return true;
  }
  bool operator != (const InstantIQRejectContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstantIQRejectContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InstantIQRejectContent& obj);
};

void swap(InstantIQRejectContent &a, InstantIQRejectContent &b);

typedef struct _IQInviteContent__isset {
  _IQInviteContent__isset() : shareUserID(false), startTime(false), eventId(false), parentEventId(false), oriStartTime(false) {}
  bool shareUserID :1;
  bool startTime :1;
  bool eventId :1;
  bool parentEventId :1;
  bool oriStartTime :1;
} _IQInviteContent__isset;

class IQInviteContent {
 public:

  static const char* ascii_fingerprint; // = "487CA912A3979A80E71A122778FB5F6F";
  static const uint8_t binary_fingerprint[16]; // = {0x48,0x7C,0xA9,0x12,0xA3,0x97,0x9A,0x80,0xE7,0x1A,0x12,0x27,0x78,0xFB,0x5F,0x6F};

  IQInviteContent(const IQInviteContent&);
  IQInviteContent& operator=(const IQInviteContent&);
  IQInviteContent() : confId(0), shareUserID(0), hostId(0), groupID(0), isRecurrent(0), startTime(0), eventId(0), parentEventId(0), oriStartTime(0), icalendar() {
  }

  virtual ~IQInviteContent() throw();
  int32_t confId;
  int32_t shareUserID;
  int32_t hostId;
  int32_t groupID;
  int8_t isRecurrent;
  int32_t startTime;
  int64_t eventId;
  int64_t parentEventId;
  int32_t oriStartTime;
  std::string icalendar;

  _IQInviteContent__isset __isset;

  void __set_confId(const int32_t val);

  void __set_shareUserID(const int32_t val);

  void __set_hostId(const int32_t val);

  void __set_groupID(const int32_t val);

  void __set_isRecurrent(const int8_t val);

  void __set_startTime(const int32_t val);

  void __set_eventId(const int64_t val);

  void __set_parentEventId(const int64_t val);

  void __set_oriStartTime(const int32_t val);

  void __set_icalendar(const std::string& val);

  bool operator == (const IQInviteContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (__isset.shareUserID != rhs.__isset.shareUserID)
      return false;
    else if (__isset.shareUserID && !(shareUserID == rhs.shareUserID))
      return false;
    if (!(hostId == rhs.hostId))
      return false;
    if (!(groupID == rhs.groupID))
      return false;
    if (!(isRecurrent == rhs.isRecurrent))
      return false;
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    if (__isset.parentEventId != rhs.__isset.parentEventId)
      return false;
    else if (__isset.parentEventId && !(parentEventId == rhs.parentEventId))
      return false;
    if (__isset.oriStartTime != rhs.__isset.oriStartTime)
      return false;
    else if (__isset.oriStartTime && !(oriStartTime == rhs.oriStartTime))
      return false;
    if (!(icalendar == rhs.icalendar))
      return false;
    return true;
  }
  bool operator != (const IQInviteContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IQInviteContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IQInviteContent& obj);
};

void swap(IQInviteContent &a, IQInviteContent &b);

typedef struct _IQReceiveContent__isset {
  _IQReceiveContent__isset() : shareUserID(false), forwardUserID(false), startTime(false), eventId(false), parentEventId(false), oriStartTime(false), icalendar(false) {}
  bool shareUserID :1;
  bool forwardUserID :1;
  bool startTime :1;
  bool eventId :1;
  bool parentEventId :1;
  bool oriStartTime :1;
  bool icalendar :1;
} _IQReceiveContent__isset;

class IQReceiveContent {
 public:

  static const char* ascii_fingerprint; // = "102A5C57681CF2D21771FAB431CB2C1B";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x2A,0x5C,0x57,0x68,0x1C,0xF2,0xD2,0x17,0x71,0xFA,0xB4,0x31,0xCB,0x2C,0x1B};

  IQReceiveContent(const IQReceiveContent&);
  IQReceiveContent& operator=(const IQReceiveContent&);
  IQReceiveContent() : confId(0), shareUserID(0), forwardUserID(0), startTime(0), hostId(0), eventId(0), parentEventId(0), oriStartTime(0), icalendar() {
  }

  virtual ~IQReceiveContent() throw();
  int32_t confId;
  int32_t shareUserID;
  int32_t forwardUserID;
  int32_t startTime;
  int32_t hostId;
  int64_t eventId;
  int64_t parentEventId;
  int32_t oriStartTime;
  std::string icalendar;

  _IQReceiveContent__isset __isset;

  void __set_confId(const int32_t val);

  void __set_shareUserID(const int32_t val);

  void __set_forwardUserID(const int32_t val);

  void __set_startTime(const int32_t val);

  void __set_hostId(const int32_t val);

  void __set_eventId(const int64_t val);

  void __set_parentEventId(const int64_t val);

  void __set_oriStartTime(const int32_t val);

  void __set_icalendar(const std::string& val);

  bool operator == (const IQReceiveContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (__isset.shareUserID != rhs.__isset.shareUserID)
      return false;
    else if (__isset.shareUserID && !(shareUserID == rhs.shareUserID))
      return false;
    if (__isset.forwardUserID != rhs.__isset.forwardUserID)
      return false;
    else if (__isset.forwardUserID && !(forwardUserID == rhs.forwardUserID))
      return false;
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (!(hostId == rhs.hostId))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    if (__isset.parentEventId != rhs.__isset.parentEventId)
      return false;
    else if (__isset.parentEventId && !(parentEventId == rhs.parentEventId))
      return false;
    if (__isset.oriStartTime != rhs.__isset.oriStartTime)
      return false;
    else if (__isset.oriStartTime && !(oriStartTime == rhs.oriStartTime))
      return false;
    if (__isset.icalendar != rhs.__isset.icalendar)
      return false;
    else if (__isset.icalendar && !(icalendar == rhs.icalendar))
      return false;
    return true;
  }
  bool operator != (const IQReceiveContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IQReceiveContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IQReceiveContent& obj);
};

void swap(IQReceiveContent &a, IQReceiveContent &b);

typedef struct _IQRejectContent__isset {
  _IQRejectContent__isset() : shareUserID(false), forwardUserID(false), startTime(false), eventId(false), parentEventId(false), oriStartTime(false), icalendar(false) {}
  bool shareUserID :1;
  bool forwardUserID :1;
  bool startTime :1;
  bool eventId :1;
  bool parentEventId :1;
  bool oriStartTime :1;
  bool icalendar :1;
} _IQRejectContent__isset;

class IQRejectContent {
 public:

  static const char* ascii_fingerprint; // = "102A5C57681CF2D21771FAB431CB2C1B";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x2A,0x5C,0x57,0x68,0x1C,0xF2,0xD2,0x17,0x71,0xFA,0xB4,0x31,0xCB,0x2C,0x1B};

  IQRejectContent(const IQRejectContent&);
  IQRejectContent& operator=(const IQRejectContent&);
  IQRejectContent() : confId(0), shareUserID(0), forwardUserID(0), startTime(0), hostId(0), eventId(0), parentEventId(0), oriStartTime(0), icalendar() {
  }

  virtual ~IQRejectContent() throw();
  int32_t confId;
  int32_t shareUserID;
  int32_t forwardUserID;
  int32_t startTime;
  int32_t hostId;
  int64_t eventId;
  int64_t parentEventId;
  int32_t oriStartTime;
  std::string icalendar;

  _IQRejectContent__isset __isset;

  void __set_confId(const int32_t val);

  void __set_shareUserID(const int32_t val);

  void __set_forwardUserID(const int32_t val);

  void __set_startTime(const int32_t val);

  void __set_hostId(const int32_t val);

  void __set_eventId(const int64_t val);

  void __set_parentEventId(const int64_t val);

  void __set_oriStartTime(const int32_t val);

  void __set_icalendar(const std::string& val);

  bool operator == (const IQRejectContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (__isset.shareUserID != rhs.__isset.shareUserID)
      return false;
    else if (__isset.shareUserID && !(shareUserID == rhs.shareUserID))
      return false;
    if (__isset.forwardUserID != rhs.__isset.forwardUserID)
      return false;
    else if (__isset.forwardUserID && !(forwardUserID == rhs.forwardUserID))
      return false;
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (!(hostId == rhs.hostId))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    if (__isset.parentEventId != rhs.__isset.parentEventId)
      return false;
    else if (__isset.parentEventId && !(parentEventId == rhs.parentEventId))
      return false;
    if (__isset.oriStartTime != rhs.__isset.oriStartTime)
      return false;
    else if (__isset.oriStartTime && !(oriStartTime == rhs.oriStartTime))
      return false;
    if (__isset.icalendar != rhs.__isset.icalendar)
      return false;
    else if (__isset.icalendar && !(icalendar == rhs.icalendar))
      return false;
    return true;
  }
  bool operator != (const IQRejectContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IQRejectContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IQRejectContent& obj);
};

void swap(IQRejectContent &a, IQRejectContent &b);

typedef struct _ConfCancelContent__isset {
  _ConfCancelContent__isset() : shareUserID(false), startTime(false), eventId(false), parentEventId(false), oriStartTime(false), icalendar(false) {}
  bool shareUserID :1;
  bool startTime :1;
  bool eventId :1;
  bool parentEventId :1;
  bool oriStartTime :1;
  bool icalendar :1;
} _ConfCancelContent__isset;

class ConfCancelContent {
 public:

  static const char* ascii_fingerprint; // = "C07A66DF3A94FEBF2342340AE9F4B433";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x7A,0x66,0xDF,0x3A,0x94,0xFE,0xBF,0x23,0x42,0x34,0x0A,0xE9,0xF4,0xB4,0x33};

  ConfCancelContent(const ConfCancelContent&);
  ConfCancelContent& operator=(const ConfCancelContent&);
  ConfCancelContent() : confId(0), shareUserID(0), startTime(0), eventId(0), parentEventId(0), oriStartTime(0), icalendar() {
  }

  virtual ~ConfCancelContent() throw();
  int32_t confId;
  int32_t shareUserID;
  int32_t startTime;
  int64_t eventId;
  int64_t parentEventId;
  int32_t oriStartTime;
  std::string icalendar;

  _ConfCancelContent__isset __isset;

  void __set_confId(const int32_t val);

  void __set_shareUserID(const int32_t val);

  void __set_startTime(const int32_t val);

  void __set_eventId(const int64_t val);

  void __set_parentEventId(const int64_t val);

  void __set_oriStartTime(const int32_t val);

  void __set_icalendar(const std::string& val);

  bool operator == (const ConfCancelContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (__isset.shareUserID != rhs.__isset.shareUserID)
      return false;
    else if (__isset.shareUserID && !(shareUserID == rhs.shareUserID))
      return false;
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    if (__isset.parentEventId != rhs.__isset.parentEventId)
      return false;
    else if (__isset.parentEventId && !(parentEventId == rhs.parentEventId))
      return false;
    if (__isset.oriStartTime != rhs.__isset.oriStartTime)
      return false;
    else if (__isset.oriStartTime && !(oriStartTime == rhs.oriStartTime))
      return false;
    if (__isset.icalendar != rhs.__isset.icalendar)
      return false;
    else if (__isset.icalendar && !(icalendar == rhs.icalendar))
      return false;
    return true;
  }
  bool operator != (const ConfCancelContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfCancelContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ConfCancelContent& obj);
};

void swap(ConfCancelContent &a, ConfCancelContent &b);

typedef struct _ConfAlertContent__isset {
  _ConfAlertContent__isset() : shareUserID(false), isInstant(false), startTime(false), role(false), icalendar(false), eventId(false) {}
  bool shareUserID :1;
  bool isInstant :1;
  bool startTime :1;
  bool role :1;
  bool icalendar :1;
  bool eventId :1;
} _ConfAlertContent__isset;

class ConfAlertContent {
 public:

  static const char* ascii_fingerprint; // = "7E5809B2FF9517414EF71B1D09126C1E";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x58,0x09,0xB2,0xFF,0x95,0x17,0x41,0x4E,0xF7,0x1B,0x1D,0x09,0x12,0x6C,0x1E};

  ConfAlertContent(const ConfAlertContent&);
  ConfAlertContent& operator=(const ConfAlertContent&);
  ConfAlertContent() : confId(0), shareUserID(0), isInstant(0), startTime(0), role((RoleType::type)0), icalendar(), eventId(0) {
  }

  virtual ~ConfAlertContent() throw();
  int32_t confId;
  int32_t shareUserID;
  int8_t isInstant;
  int32_t startTime;
  RoleType::type role;
  std::string icalendar;
  int64_t eventId;

  _ConfAlertContent__isset __isset;

  void __set_confId(const int32_t val);

  void __set_shareUserID(const int32_t val);

  void __set_isInstant(const int8_t val);

  void __set_startTime(const int32_t val);

  void __set_role(const RoleType::type val);

  void __set_icalendar(const std::string& val);

  void __set_eventId(const int64_t val);

  bool operator == (const ConfAlertContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (__isset.shareUserID != rhs.__isset.shareUserID)
      return false;
    else if (__isset.shareUserID && !(shareUserID == rhs.shareUserID))
      return false;
    if (__isset.isInstant != rhs.__isset.isInstant)
      return false;
    else if (__isset.isInstant && !(isInstant == rhs.isInstant))
      return false;
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (__isset.role != rhs.__isset.role)
      return false;
    else if (__isset.role && !(role == rhs.role))
      return false;
    if (__isset.icalendar != rhs.__isset.icalendar)
      return false;
    else if (__isset.icalendar && !(icalendar == rhs.icalendar))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const ConfAlertContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfAlertContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ConfAlertContent& obj);
};

void swap(ConfAlertContent &a, ConfAlertContent &b);

typedef struct _ConfChatContent__isset {
  _ConfChatContent__isset() : startTime(false), text(false), media(false), eventId(false), revocation(false) {}
  bool startTime :1;
  bool text :1;
  bool media :1;
  bool eventId :1;
  bool revocation :1;
} _ConfChatContent__isset;

class ConfChatContent {
 public:

  static const char* ascii_fingerprint; // = "850E6B3CD83964199F17A22332463B61";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x0E,0x6B,0x3C,0xD8,0x39,0x64,0x19,0x9F,0x17,0xA2,0x23,0x32,0x46,0x3B,0x61};

  ConfChatContent(const ConfChatContent&);
  ConfChatContent& operator=(const ConfChatContent&);
  ConfChatContent() : confId(0), startTime(0), eventId(0) {
  }

  virtual ~ConfChatContent() throw();
  int32_t confId;
  int32_t startTime;
  TextContent text;
  MediaContent media;
  int64_t eventId;
  RevocationContent revocation;

  _ConfChatContent__isset __isset;

  void __set_confId(const int32_t val);

  void __set_startTime(const int32_t val);

  void __set_text(const TextContent& val);

  void __set_media(const MediaContent& val);

  void __set_eventId(const int64_t val);

  void __set_revocation(const RevocationContent& val);

  bool operator == (const ConfChatContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (__isset.text != rhs.__isset.text)
      return false;
    else if (__isset.text && !(text == rhs.text))
      return false;
    if (__isset.media != rhs.__isset.media)
      return false;
    else if (__isset.media && !(media == rhs.media))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    if (__isset.revocation != rhs.__isset.revocation)
      return false;
    else if (__isset.revocation && !(revocation == rhs.revocation))
      return false;
    return true;
  }
  bool operator != (const ConfChatContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfChatContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ConfChatContent& obj);
};

void swap(ConfChatContent &a, ConfChatContent &b);

typedef struct _ConfSummaryContent__isset {
  _ConfSummaryContent__isset() : confName(false), startTime(false), updateTime(false), eventId(false) {}
  bool confName :1;
  bool startTime :1;
  bool updateTime :1;
  bool eventId :1;
} _ConfSummaryContent__isset;

class ConfSummaryContent {
 public:

  static const char* ascii_fingerprint; // = "CC6AEE2C6FC4468F0111197352940B14";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0x6A,0xEE,0x2C,0x6F,0xC4,0x46,0x8F,0x01,0x11,0x19,0x73,0x52,0x94,0x0B,0x14};

  ConfSummaryContent(const ConfSummaryContent&);
  ConfSummaryContent& operator=(const ConfSummaryContent&);
  ConfSummaryContent() : operatorid(0), summary_id(0), summary_name(), state(0), confId(0), confName(), startTime(0), updateTime(0), eventId(0) {
  }

  virtual ~ConfSummaryContent() throw();
  int32_t operatorid;
  int32_t summary_id;
  std::string summary_name;
  int8_t state;
  int32_t confId;
  std::string confName;
  int32_t startTime;
  int32_t updateTime;
  int64_t eventId;

  _ConfSummaryContent__isset __isset;

  void __set_operatorid(const int32_t val);

  void __set_summary_id(const int32_t val);

  void __set_summary_name(const std::string& val);

  void __set_state(const int8_t val);

  void __set_confId(const int32_t val);

  void __set_confName(const std::string& val);

  void __set_startTime(const int32_t val);

  void __set_updateTime(const int32_t val);

  void __set_eventId(const int64_t val);

  bool operator == (const ConfSummaryContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(summary_id == rhs.summary_id))
      return false;
    if (!(summary_name == rhs.summary_name))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(confId == rhs.confId))
      return false;
    if (__isset.confName != rhs.__isset.confName)
      return false;
    else if (__isset.confName && !(confName == rhs.confName))
      return false;
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (__isset.updateTime != rhs.__isset.updateTime)
      return false;
    else if (__isset.updateTime && !(updateTime == rhs.updateTime))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const ConfSummaryContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfSummaryContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ConfSummaryContent& obj);
};

void swap(ConfSummaryContent &a, ConfSummaryContent &b);


class CallStateContent {
 public:

  static const char* ascii_fingerprint; // = "CE957BCE4AA85FCDE5AE4AA17006475D";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x95,0x7B,0xCE,0x4A,0xA8,0x5F,0xCD,0xE5,0xAE,0x4A,0xA1,0x70,0x06,0x47,0x5D};

  CallStateContent(const CallStateContent&);
  CallStateContent& operator=(const CallStateContent&);
  CallStateContent() : userId(0), partyId(), callSeq(), oldCallState(0), newCallState(0) {
  }

  virtual ~CallStateContent() throw();
  int32_t userId;
  std::string partyId;
  std::string callSeq;
  int32_t oldCallState;
  int32_t newCallState;

  void __set_userId(const int32_t val);

  void __set_partyId(const std::string& val);

  void __set_callSeq(const std::string& val);

  void __set_oldCallState(const int32_t val);

  void __set_newCallState(const int32_t val);

  bool operator == (const CallStateContent & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(partyId == rhs.partyId))
      return false;
    if (!(callSeq == rhs.callSeq))
      return false;
    if (!(oldCallState == rhs.oldCallState))
      return false;
    if (!(newCallState == rhs.newCallState))
      return false;
    return true;
  }
  bool operator != (const CallStateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallStateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CallStateContent& obj);
};

void swap(CallStateContent &a, CallStateContent &b);


class ConfUploadContent {
 public:

  static const char* ascii_fingerprint; // = "707BCDFD0325EAD1D2F4576D0F0B8748";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x7B,0xCD,0xFD,0x03,0x25,0xEA,0xD1,0xD2,0xF4,0x57,0x6D,0x0F,0x0B,0x87,0x48};

  ConfUploadContent(const ConfUploadContent&);
  ConfUploadContent& operator=(const ConfUploadContent&);
  ConfUploadContent() : operatorid(0), doc_name(), down_url(), size(0), contentId(0), eventId(0) {
  }

  virtual ~ConfUploadContent() throw();
  int64_t operatorid;
  std::string doc_name;
  std::string down_url;
  int64_t size;
  int64_t contentId;
  int64_t eventId;

  void __set_operatorid(const int64_t val);

  void __set_doc_name(const std::string& val);

  void __set_down_url(const std::string& val);

  void __set_size(const int64_t val);

  void __set_contentId(const int64_t val);

  void __set_eventId(const int64_t val);

  bool operator == (const ConfUploadContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(doc_name == rhs.doc_name))
      return false;
    if (!(down_url == rhs.down_url))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(contentId == rhs.contentId))
      return false;
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const ConfUploadContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfUploadContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ConfUploadContent& obj);
};

void swap(ConfUploadContent &a, ConfUploadContent &b);


class ConfDelDocContent {
 public:

  static const char* ascii_fingerprint; // = "AEDA8F94B5AABFD550048B0BD878BEBD";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0xDA,0x8F,0x94,0xB5,0xAA,0xBF,0xD5,0x50,0x04,0x8B,0x0B,0xD8,0x78,0xBE,0xBD};

  ConfDelDocContent(const ConfDelDocContent&);
  ConfDelDocContent& operator=(const ConfDelDocContent&);
  ConfDelDocContent() : operatorid(0), doc_name(), contentId(0), eventId(0) {
  }

  virtual ~ConfDelDocContent() throw();
  int64_t operatorid;
  std::string doc_name;
  int64_t contentId;
  int64_t eventId;

  void __set_operatorid(const int64_t val);

  void __set_doc_name(const std::string& val);

  void __set_contentId(const int64_t val);

  void __set_eventId(const int64_t val);

  bool operator == (const ConfDelDocContent & rhs) const
  {
    if (!(operatorid == rhs.operatorid))
      return false;
    if (!(doc_name == rhs.doc_name))
      return false;
    if (!(contentId == rhs.contentId))
      return false;
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const ConfDelDocContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfDelDocContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ConfDelDocContent& obj);
};

void swap(ConfDelDocContent &a, ConfDelDocContent &b);


class ConfShareContent {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ConfShareContent(const ConfShareContent&);
  ConfShareContent& operator=(const ConfShareContent&);
  ConfShareContent() {
  }

  virtual ~ConfShareContent() throw();

  bool operator == (const ConfShareContent & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfShareContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfShareContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ConfShareContent& obj);
};

void swap(ConfShareContent &a, ConfShareContent &b);


class AudioInviteContent {
 public:

  static const char* ascii_fingerprint; // = "70563A0628F75DF9555F4D24690B1E26";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x56,0x3A,0x06,0x28,0xF7,0x5D,0xF9,0x55,0x5F,0x4D,0x24,0x69,0x0B,0x1E,0x26};

  AudioInviteContent(const AudioInviteContent&);
  AudioInviteContent& operator=(const AudioInviteContent&);
  AudioInviteContent() : confId(), hostId(0), confPwd() {
  }

  virtual ~AudioInviteContent() throw();
  std::string confId;
  int32_t hostId;
  std::string confPwd;

  void __set_confId(const std::string& val);

  void __set_hostId(const int32_t val);

  void __set_confPwd(const std::string& val);

  bool operator == (const AudioInviteContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (!(hostId == rhs.hostId))
      return false;
    if (!(confPwd == rhs.confPwd))
      return false;
    return true;
  }
  bool operator != (const AudioInviteContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioInviteContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AudioInviteContent& obj);
};

void swap(AudioInviteContent &a, AudioInviteContent &b);


class AudioReceiveContent {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  AudioReceiveContent(const AudioReceiveContent&);
  AudioReceiveContent& operator=(const AudioReceiveContent&);
  AudioReceiveContent() : confId(), hostId(0) {
  }

  virtual ~AudioReceiveContent() throw();
  std::string confId;
  int32_t hostId;

  void __set_confId(const std::string& val);

  void __set_hostId(const int32_t val);

  bool operator == (const AudioReceiveContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (!(hostId == rhs.hostId))
      return false;
    return true;
  }
  bool operator != (const AudioReceiveContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioReceiveContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AudioReceiveContent& obj);
};

void swap(AudioReceiveContent &a, AudioReceiveContent &b);

typedef struct _AudioRejectContent__isset {
  _AudioRejectContent__isset() : reason(false) {}
  bool reason :1;
} _AudioRejectContent__isset;

class AudioRejectContent {
 public:

  static const char* ascii_fingerprint; // = "614DB859ACF17855F9BC7D08DDD7B32A";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x4D,0xB8,0x59,0xAC,0xF1,0x78,0x55,0xF9,0xBC,0x7D,0x08,0xDD,0xD7,0xB3,0x2A};

  AudioRejectContent(const AudioRejectContent&);
  AudioRejectContent& operator=(const AudioRejectContent&);
  AudioRejectContent() : confId(), hostId(0), reason() {
  }

  virtual ~AudioRejectContent() throw();
  std::string confId;
  int32_t hostId;
  std::string reason;

  _AudioRejectContent__isset __isset;

  void __set_confId(const std::string& val);

  void __set_hostId(const int32_t val);

  void __set_reason(const std::string& val);

  bool operator == (const AudioRejectContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (!(hostId == rhs.hostId))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const AudioRejectContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioRejectContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AudioRejectContent& obj);
};

void swap(AudioRejectContent &a, AudioRejectContent &b);


class AudioStopContent {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  AudioStopContent(const AudioStopContent&);
  AudioStopContent& operator=(const AudioStopContent&);
  AudioStopContent() : confId(), hostId(0) {
  }

  virtual ~AudioStopContent() throw();
  std::string confId;
  int32_t hostId;

  void __set_confId(const std::string& val);

  void __set_hostId(const int32_t val);

  bool operator == (const AudioStopContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (!(hostId == rhs.hostId))
      return false;
    return true;
  }
  bool operator != (const AudioStopContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioStopContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AudioStopContent& obj);
};

void swap(AudioStopContent &a, AudioStopContent &b);

typedef struct _AudioBlockCallContent__isset {
  _AudioBlockCallContent__isset() : phoneNum(false) {}
  bool phoneNum :1;
} _AudioBlockCallContent__isset;

class AudioBlockCallContent {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  AudioBlockCallContent(const AudioBlockCallContent&);
  AudioBlockCallContent& operator=(const AudioBlockCallContent&);
  AudioBlockCallContent() : phoneNum() {
  }

  virtual ~AudioBlockCallContent() throw();
  std::string phoneNum;

  _AudioBlockCallContent__isset __isset;

  void __set_phoneNum(const std::string& val);

  bool operator == (const AudioBlockCallContent & rhs) const
  {
    if (__isset.phoneNum != rhs.__isset.phoneNum)
      return false;
    else if (__isset.phoneNum && !(phoneNum == rhs.phoneNum))
      return false;
    return true;
  }
  bool operator != (const AudioBlockCallContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioBlockCallContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AudioBlockCallContent& obj);
};

void swap(AudioBlockCallContent &a, AudioBlockCallContent &b);

typedef struct _AudioRejectCallContent__isset {
  _AudioRejectCallContent__isset() : phoneNum(false) {}
  bool phoneNum :1;
} _AudioRejectCallContent__isset;

class AudioRejectCallContent {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  AudioRejectCallContent(const AudioRejectCallContent&);
  AudioRejectCallContent& operator=(const AudioRejectCallContent&);
  AudioRejectCallContent() : phoneNum() {
  }

  virtual ~AudioRejectCallContent() throw();
  std::string phoneNum;

  _AudioRejectCallContent__isset __isset;

  void __set_phoneNum(const std::string& val);

  bool operator == (const AudioRejectCallContent & rhs) const
  {
    if (__isset.phoneNum != rhs.__isset.phoneNum)
      return false;
    else if (__isset.phoneNum && !(phoneNum == rhs.phoneNum))
      return false;
    return true;
  }
  bool operator != (const AudioRejectCallContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioRejectCallContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AudioRejectCallContent& obj);
};

void swap(AudioRejectCallContent &a, AudioRejectCallContent &b);

typedef struct _AudioRecentCallContent__isset {
  _AudioRecentCallContent__isset() : phoneNum(false) {}
  bool phoneNum :1;
} _AudioRecentCallContent__isset;

class AudioRecentCallContent {
 public:

  static const char* ascii_fingerprint; // = "96705E9A3FD7B072319C71653E0DBB90";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

  AudioRecentCallContent(const AudioRecentCallContent&);
  AudioRecentCallContent& operator=(const AudioRecentCallContent&);
  AudioRecentCallContent() : duration(0), phoneNum() {
  }

  virtual ~AudioRecentCallContent() throw();
  int32_t duration;
  std::string phoneNum;

  _AudioRecentCallContent__isset __isset;

  void __set_duration(const int32_t val);

  void __set_phoneNum(const std::string& val);

  bool operator == (const AudioRecentCallContent & rhs) const
  {
    if (!(duration == rhs.duration))
      return false;
    if (__isset.phoneNum != rhs.__isset.phoneNum)
      return false;
    else if (__isset.phoneNum && !(phoneNum == rhs.phoneNum))
      return false;
    return true;
  }
  bool operator != (const AudioRecentCallContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioRecentCallContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AudioRecentCallContent& obj);
};

void swap(AudioRecentCallContent &a, AudioRecentCallContent &b);

typedef struct _AudioCancelCallContent__isset {
  _AudioCancelCallContent__isset() : phoneNum(false) {}
  bool phoneNum :1;
} _AudioCancelCallContent__isset;

class AudioCancelCallContent {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  AudioCancelCallContent(const AudioCancelCallContent&);
  AudioCancelCallContent& operator=(const AudioCancelCallContent&);
  AudioCancelCallContent() : phoneNum() {
  }

  virtual ~AudioCancelCallContent() throw();
  std::string phoneNum;

  _AudioCancelCallContent__isset __isset;

  void __set_phoneNum(const std::string& val);

  bool operator == (const AudioCancelCallContent & rhs) const
  {
    if (__isset.phoneNum != rhs.__isset.phoneNum)
      return false;
    else if (__isset.phoneNum && !(phoneNum == rhs.phoneNum))
      return false;
    return true;
  }
  bool operator != (const AudioCancelCallContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioCancelCallContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AudioCancelCallContent& obj);
};

void swap(AudioCancelCallContent &a, AudioCancelCallContent &b);


class CardUpdateContent {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  CardUpdateContent(const CardUpdateContent&);
  CardUpdateContent& operator=(const CardUpdateContent&);
  CardUpdateContent() : userId(0), cardVersion(0) {
  }

  virtual ~CardUpdateContent() throw();
  int32_t userId;
  int32_t cardVersion;

  void __set_userId(const int32_t val);

  void __set_cardVersion(const int32_t val);

  bool operator == (const CardUpdateContent & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(cardVersion == rhs.cardVersion))
      return false;
    return true;
  }
  bool operator != (const CardUpdateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardUpdateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CardUpdateContent& obj);
};

void swap(CardUpdateContent &a, CardUpdateContent &b);


class ContacterAddContent {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ContacterAddContent(const ContacterAddContent&);
  ContacterAddContent& operator=(const ContacterAddContent&);
  ContacterAddContent() {
  }

  virtual ~ContacterAddContent() throw();

  bool operator == (const ContacterAddContent & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ContacterAddContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContacterAddContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ContacterAddContent& obj);
};

void swap(ContacterAddContent &a, ContacterAddContent &b);


class ContacterDelContent {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ContacterDelContent(const ContacterDelContent&);
  ContacterDelContent& operator=(const ContacterDelContent&);
  ContacterDelContent() {
  }

  virtual ~ContacterDelContent() throw();

  bool operator == (const ContacterDelContent & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ContacterDelContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContacterDelContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ContacterDelContent& obj);
};

void swap(ContacterDelContent &a, ContacterDelContent &b);

typedef struct _AttentionCreateContent__isset {
  _AttentionCreateContent__isset() : operatorId(false), attentionId(false) {}
  bool operatorId :1;
  bool attentionId :1;
} _AttentionCreateContent__isset;

class AttentionCreateContent {
 public:

  static const char* ascii_fingerprint; // = "C1241AF5AA92C586B664FD41DC97C576";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

  AttentionCreateContent(const AttentionCreateContent&);
  AttentionCreateContent& operator=(const AttentionCreateContent&);
  AttentionCreateContent() : operatorId(0), attentionId(0) {
  }

  virtual ~AttentionCreateContent() throw();
  int32_t operatorId;
  int32_t attentionId;

  _AttentionCreateContent__isset __isset;

  void __set_operatorId(const int32_t val);

  void __set_attentionId(const int32_t val);

  bool operator == (const AttentionCreateContent & rhs) const
  {
    if (__isset.operatorId != rhs.__isset.operatorId)
      return false;
    else if (__isset.operatorId && !(operatorId == rhs.operatorId))
      return false;
    if (__isset.attentionId != rhs.__isset.attentionId)
      return false;
    else if (__isset.attentionId && !(attentionId == rhs.attentionId))
      return false;
    return true;
  }
  bool operator != (const AttentionCreateContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttentionCreateContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AttentionCreateContent& obj);
};

void swap(AttentionCreateContent &a, AttentionCreateContent &b);

typedef struct _AttentionCancelContent__isset {
  _AttentionCancelContent__isset() : operatorId(false), attentionId(false) {}
  bool operatorId :1;
  bool attentionId :1;
} _AttentionCancelContent__isset;

class AttentionCancelContent {
 public:

  static const char* ascii_fingerprint; // = "C1241AF5AA92C586B664FD41DC97C576";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

  AttentionCancelContent(const AttentionCancelContent&);
  AttentionCancelContent& operator=(const AttentionCancelContent&);
  AttentionCancelContent() : operatorId(0), attentionId(0) {
  }

  virtual ~AttentionCancelContent() throw();
  int32_t operatorId;
  int32_t attentionId;

  _AttentionCancelContent__isset __isset;

  void __set_operatorId(const int32_t val);

  void __set_attentionId(const int32_t val);

  bool operator == (const AttentionCancelContent & rhs) const
  {
    if (__isset.operatorId != rhs.__isset.operatorId)
      return false;
    else if (__isset.operatorId && !(operatorId == rhs.operatorId))
      return false;
    if (__isset.attentionId != rhs.__isset.attentionId)
      return false;
    else if (__isset.attentionId && !(attentionId == rhs.attentionId))
      return false;
    return true;
  }
  bool operator != (const AttentionCancelContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttentionCancelContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AttentionCancelContent& obj);
};

void swap(AttentionCancelContent &a, AttentionCancelContent &b);


class WBMessageContent {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  WBMessageContent(const WBMessageContent&);
  WBMessageContent& operator=(const WBMessageContent&);
  WBMessageContent() : text() {
  }

  virtual ~WBMessageContent() throw();
  std::string text;

  void __set_text(const std::string& val);

  bool operator == (const WBMessageContent & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const WBMessageContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WBMessageContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WBMessageContent& obj);
};

void swap(WBMessageContent &a, WBMessageContent &b);


class RemoteAssistanceInviteContent {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  RemoteAssistanceInviteContent(const RemoteAssistanceInviteContent&);
  RemoteAssistanceInviteContent& operator=(const RemoteAssistanceInviteContent&);
  RemoteAssistanceInviteContent() : confId(), confPwd() {
  }

  virtual ~RemoteAssistanceInviteContent() throw();
  std::string confId;
  std::string confPwd;

  void __set_confId(const std::string& val);

  void __set_confPwd(const std::string& val);

  bool operator == (const RemoteAssistanceInviteContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    if (!(confPwd == rhs.confPwd))
      return false;
    return true;
  }
  bool operator != (const RemoteAssistanceInviteContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAssistanceInviteContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteAssistanceInviteContent& obj);
};

void swap(RemoteAssistanceInviteContent &a, RemoteAssistanceInviteContent &b);


class RemoteAssistanceAcceptContent {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RemoteAssistanceAcceptContent(const RemoteAssistanceAcceptContent&);
  RemoteAssistanceAcceptContent& operator=(const RemoteAssistanceAcceptContent&);
  RemoteAssistanceAcceptContent() : confId() {
  }

  virtual ~RemoteAssistanceAcceptContent() throw();
  std::string confId;

  void __set_confId(const std::string& val);

  bool operator == (const RemoteAssistanceAcceptContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    return true;
  }
  bool operator != (const RemoteAssistanceAcceptContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAssistanceAcceptContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteAssistanceAcceptContent& obj);
};

void swap(RemoteAssistanceAcceptContent &a, RemoteAssistanceAcceptContent &b);


class RemoteAssistanceRejectContent {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RemoteAssistanceRejectContent(const RemoteAssistanceRejectContent&);
  RemoteAssistanceRejectContent& operator=(const RemoteAssistanceRejectContent&);
  RemoteAssistanceRejectContent() : confId() {
  }

  virtual ~RemoteAssistanceRejectContent() throw();
  std::string confId;

  void __set_confId(const std::string& val);

  bool operator == (const RemoteAssistanceRejectContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    return true;
  }
  bool operator != (const RemoteAssistanceRejectContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAssistanceRejectContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteAssistanceRejectContent& obj);
};

void swap(RemoteAssistanceRejectContent &a, RemoteAssistanceRejectContent &b);


class RemoteAssistanceEndContent {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RemoteAssistanceEndContent(const RemoteAssistanceEndContent&);
  RemoteAssistanceEndContent& operator=(const RemoteAssistanceEndContent&);
  RemoteAssistanceEndContent() : confId() {
  }

  virtual ~RemoteAssistanceEndContent() throw();
  std::string confId;

  void __set_confId(const std::string& val);

  bool operator == (const RemoteAssistanceEndContent & rhs) const
  {
    if (!(confId == rhs.confId))
      return false;
    return true;
  }
  bool operator != (const RemoteAssistanceEndContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAssistanceEndContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteAssistanceEndContent& obj);
};

void swap(RemoteAssistanceEndContent &a, RemoteAssistanceEndContent &b);


class UserLoginNotifyContent {
 public:

  static const char* ascii_fingerprint; // = "179A1C2176C1B0460D8B93B4AE7A4421";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x9A,0x1C,0x21,0x76,0xC1,0xB0,0x46,0x0D,0x8B,0x93,0xB4,0xAE,0x7A,0x44,0x21};

  UserLoginNotifyContent(const UserLoginNotifyContent&);
  UserLoginNotifyContent& operator=(const UserLoginNotifyContent&);
  UserLoginNotifyContent() : deviceType((DeviceType::type)0), deviceName() {
  }

  virtual ~UserLoginNotifyContent() throw();
  JID user;
  DeviceType::type deviceType;
  std::string deviceName;

  void __set_user(const JID& val);

  void __set_deviceType(const DeviceType::type val);

  void __set_deviceName(const std::string& val);

  bool operator == (const UserLoginNotifyContent & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(deviceType == rhs.deviceType))
      return false;
    if (!(deviceName == rhs.deviceName))
      return false;
    return true;
  }
  bool operator != (const UserLoginNotifyContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLoginNotifyContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserLoginNotifyContent& obj);
};

void swap(UserLoginNotifyContent &a, UserLoginNotifyContent &b);

typedef struct _SessionTopContent__isset {
  _SessionTopContent__isset() : topindex(false) {}
  bool topindex :1;
} _SessionTopContent__isset;

class SessionTopContent {
 public:

  static const char* ascii_fingerprint; // = "46FDC8D9181BB7FDA19135B8CE799DF3";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xFD,0xC8,0xD9,0x18,0x1B,0xB7,0xFD,0xA1,0x91,0x35,0xB8,0xCE,0x79,0x9D,0xF3};

  SessionTopContent(const SessionTopContent&);
  SessionTopContent& operator=(const SessionTopContent&);
  SessionTopContent() : sessionType(0), topindex(0) {
  }

  virtual ~SessionTopContent() throw();
  JID to;
  int8_t sessionType;
  int64_t topindex;

  _SessionTopContent__isset __isset;

  void __set_to(const JID& val);

  void __set_sessionType(const int8_t val);

  void __set_topindex(const int64_t val);

  bool operator == (const SessionTopContent & rhs) const
  {
    if (!(to == rhs.to))
      return false;
    if (!(sessionType == rhs.sessionType))
      return false;
    if (__isset.topindex != rhs.__isset.topindex)
      return false;
    else if (__isset.topindex && !(topindex == rhs.topindex))
      return false;
    return true;
  }
  bool operator != (const SessionTopContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SessionTopContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SessionTopContent& obj);
};

void swap(SessionTopContent &a, SessionTopContent &b);


class AtMessageReadedContent {
 public:

  static const char* ascii_fingerprint; // = "A2D5FB503EF3D6688B7983AFEFB5B7BD";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xD5,0xFB,0x50,0x3E,0xF3,0xD6,0x68,0x8B,0x79,0x83,0xAF,0xEF,0xB5,0xB7,0xBD};

  AtMessageReadedContent(const AtMessageReadedContent&);
  AtMessageReadedContent& operator=(const AtMessageReadedContent&);
  AtMessageReadedContent() : sessionType(0) {
  }

  virtual ~AtMessageReadedContent() throw();
  JID to;
  int8_t sessionType;
  std::vector<int64_t>  seqList;

  void __set_to(const JID& val);

  void __set_sessionType(const int8_t val);

  void __set_seqList(const std::vector<int64_t> & val);

  bool operator == (const AtMessageReadedContent & rhs) const
  {
    if (!(to == rhs.to))
      return false;
    if (!(sessionType == rhs.sessionType))
      return false;
    if (!(seqList == rhs.seqList))
      return false;
    return true;
  }
  bool operator != (const AtMessageReadedContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtMessageReadedContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AtMessageReadedContent& obj);
};

void swap(AtMessageReadedContent &a, AtMessageReadedContent &b);

typedef struct _APITextContent__isset {
  _APITextContent__isset() : title(false), detailType(false), detailContent(false), detailAuth(false) {}
  bool title :1;
  bool detailType :1;
  bool detailContent :1;
  bool detailAuth :1;
} _APITextContent__isset;

class APITextContent {
 public:

  static const char* ascii_fingerprint; // = "B1E7BECF9534B306D9EC855AA5C7B063";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xBE,0xCF,0x95,0x34,0xB3,0x06,0xD9,0xEC,0x85,0x5A,0xA5,0xC7,0xB0,0x63};

  APITextContent(const APITextContent&);
  APITextContent& operator=(const APITextContent&);
  APITextContent() : title(), content(), detailType(0), detailContent(), detailAuth(0) {
  }

  virtual ~APITextContent() throw();
  std::string title;
  std::string content;
  int8_t detailType;
  std::string detailContent;
  int8_t detailAuth;

  _APITextContent__isset __isset;

  void __set_title(const std::string& val);

  void __set_content(const std::string& val);

  void __set_detailType(const int8_t val);

  void __set_detailContent(const std::string& val);

  void __set_detailAuth(const int8_t val);

  bool operator == (const APITextContent & rhs) const
  {
    if (__isset.title != rhs.__isset.title)
      return false;
    else if (__isset.title && !(title == rhs.title))
      return false;
    if (!(content == rhs.content))
      return false;
    if (__isset.detailType != rhs.__isset.detailType)
      return false;
    else if (__isset.detailType && !(detailType == rhs.detailType))
      return false;
    if (__isset.detailContent != rhs.__isset.detailContent)
      return false;
    else if (__isset.detailContent && !(detailContent == rhs.detailContent))
      return false;
    if (__isset.detailAuth != rhs.__isset.detailAuth)
      return false;
    else if (__isset.detailAuth && !(detailAuth == rhs.detailAuth))
      return false;
    return true;
  }
  bool operator != (const APITextContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APITextContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const APITextContent& obj);
};

void swap(APITextContent &a, APITextContent &b);

typedef struct _APIImageContent__isset {
  _APIImageContent__isset() : mediaThumb(false) {}
  bool mediaThumb :1;
} _APIImageContent__isset;

class APIImageContent {
 public:

  static const char* ascii_fingerprint; // = "CB5BB4FDB31465952A493405246C62CD";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x5B,0xB4,0xFD,0xB3,0x14,0x65,0x95,0x2A,0x49,0x34,0x05,0x24,0x6C,0x62,0xCD};

  APIImageContent(const APIImageContent&);
  APIImageContent& operator=(const APIImageContent&);
  APIImageContent() : mediaId(), detailType(0), mediaThumb() {
  }

  virtual ~APIImageContent() throw();
  std::string mediaId;
  int8_t detailType;
  std::string mediaThumb;

  _APIImageContent__isset __isset;

  void __set_mediaId(const std::string& val);

  void __set_detailType(const int8_t val);

  void __set_mediaThumb(const std::string& val);

  bool operator == (const APIImageContent & rhs) const
  {
    if (!(mediaId == rhs.mediaId))
      return false;
    if (!(detailType == rhs.detailType))
      return false;
    if (__isset.mediaThumb != rhs.__isset.mediaThumb)
      return false;
    else if (__isset.mediaThumb && !(mediaThumb == rhs.mediaThumb))
      return false;
    return true;
  }
  bool operator != (const APIImageContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APIImageContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const APIImageContent& obj);
};

void swap(APIImageContent &a, APIImageContent &b);

typedef struct _APIFileContent__isset {
  _APIFileContent__isset() : fileSize(false) {}
  bool fileSize :1;
} _APIFileContent__isset;

class APIFileContent {
 public:

  static const char* ascii_fingerprint; // = "D39FACD11A16AA5B371CD5AF27AE28F1";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x9F,0xAC,0xD1,0x1A,0x16,0xAA,0x5B,0x37,0x1C,0xD5,0xAF,0x27,0xAE,0x28,0xF1};

  APIFileContent(const APIFileContent&);
  APIFileContent& operator=(const APIFileContent&);
  APIFileContent() : mediaId(), detailType(0), fileSize(0), fileName() {
  }

  virtual ~APIFileContent() throw();
  std::string mediaId;
  int8_t detailType;
  int64_t fileSize;
  std::string fileName;

  _APIFileContent__isset __isset;

  void __set_mediaId(const std::string& val);

  void __set_detailType(const int8_t val);

  void __set_fileSize(const int64_t val);

  void __set_fileName(const std::string& val);

  bool operator == (const APIFileContent & rhs) const
  {
    if (!(mediaId == rhs.mediaId))
      return false;
    if (!(detailType == rhs.detailType))
      return false;
    if (__isset.fileSize != rhs.__isset.fileSize)
      return false;
    else if (__isset.fileSize && !(fileSize == rhs.fileSize))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const APIFileContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APIFileContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const APIFileContent& obj);
};

void swap(APIFileContent &a, APIFileContent &b);

typedef struct _APIOAContent__isset {
  _APIOAContent__isset() : status(false), color(false), bkColor(false), detailURL(false), detailAuth(false), titleElements(false), titleStyle(false), exData(false), customizedType(false), customizedData(false) {}
  bool status :1;
  bool color :1;
  bool bkColor :1;
  bool detailURL :1;
  bool detailAuth :1;
  bool titleElements :1;
  bool titleStyle :1;
  bool exData :1;
  bool customizedType :1;
  bool customizedData :1;
} _APIOAContent__isset;

class APIOAContent {
 public:

  static const char* ascii_fingerprint; // = "BE5530BA8B5258F48C9355F775FA69F6";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x55,0x30,0xBA,0x8B,0x52,0x58,0xF4,0x8C,0x93,0x55,0xF7,0x75,0xFA,0x69,0xF6};

  APIOAContent(const APIOAContent&);
  APIOAContent& operator=(const APIOAContent&);
  APIOAContent() : title(), status(0), color(), bkColor(), elements(), detailURL(), detailAuth(0), titleElements(), titleStyle(), exData(), customizedType(), customizedData() {
  }

  virtual ~APIOAContent() throw();
  std::string title;
  int16_t status;
  std::string color;
  std::string bkColor;
  std::string elements;
  std::string detailURL;
  int8_t detailAuth;
  std::string titleElements;
  std::string titleStyle;
  std::string exData;
  std::string customizedType;
  std::string customizedData;

  _APIOAContent__isset __isset;

  void __set_title(const std::string& val);

  void __set_status(const int16_t val);

  void __set_color(const std::string& val);

  void __set_bkColor(const std::string& val);

  void __set_elements(const std::string& val);

  void __set_detailURL(const std::string& val);

  void __set_detailAuth(const int8_t val);

  void __set_titleElements(const std::string& val);

  void __set_titleStyle(const std::string& val);

  void __set_exData(const std::string& val);

  void __set_customizedType(const std::string& val);

  void __set_customizedData(const std::string& val);

  bool operator == (const APIOAContent & rhs) const
  {
    if (!(title == rhs.title))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.color != rhs.__isset.color)
      return false;
    else if (__isset.color && !(color == rhs.color))
      return false;
    if (__isset.bkColor != rhs.__isset.bkColor)
      return false;
    else if (__isset.bkColor && !(bkColor == rhs.bkColor))
      return false;
    if (!(elements == rhs.elements))
      return false;
    if (__isset.detailURL != rhs.__isset.detailURL)
      return false;
    else if (__isset.detailURL && !(detailURL == rhs.detailURL))
      return false;
    if (__isset.detailAuth != rhs.__isset.detailAuth)
      return false;
    else if (__isset.detailAuth && !(detailAuth == rhs.detailAuth))
      return false;
    if (__isset.titleElements != rhs.__isset.titleElements)
      return false;
    else if (__isset.titleElements && !(titleElements == rhs.titleElements))
      return false;
    if (__isset.titleStyle != rhs.__isset.titleStyle)
      return false;
    else if (__isset.titleStyle && !(titleStyle == rhs.titleStyle))
      return false;
    if (__isset.exData != rhs.__isset.exData)
      return false;
    else if (__isset.exData && !(exData == rhs.exData))
      return false;
    if (__isset.customizedType != rhs.__isset.customizedType)
      return false;
    else if (__isset.customizedType && !(customizedType == rhs.customizedType))
      return false;
    if (__isset.customizedData != rhs.__isset.customizedData)
      return false;
    else if (__isset.customizedData && !(customizedData == rhs.customizedData))
      return false;
    return true;
  }
  bool operator != (const APIOAContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APIOAContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const APIOAContent& obj);
};

void swap(APIOAContent &a, APIOAContent &b);

typedef struct _APICustomizedContent__isset {
  _APICustomizedContent__isset() : data2(false), data3(false), data4(false) {}
  bool data2 :1;
  bool data3 :1;
  bool data4 :1;
} _APICustomizedContent__isset;

class APICustomizedContent {
 public:

  static const char* ascii_fingerprint; // = "6BA700CA2E5FC52A8DA5ADCF811DC8DA";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xA7,0x00,0xCA,0x2E,0x5F,0xC5,0x2A,0x8D,0xA5,0xAD,0xCF,0x81,0x1D,0xC8,0xDA};

  APICustomizedContent(const APICustomizedContent&);
  APICustomizedContent& operator=(const APICustomizedContent&);
  APICustomizedContent() : data1(), data2(), data3(), data4() {
  }

  virtual ~APICustomizedContent() throw();
  std::string data1;
  std::string data2;
  std::string data3;
  std::string data4;

  _APICustomizedContent__isset __isset;

  void __set_data1(const std::string& val);

  void __set_data2(const std::string& val);

  void __set_data3(const std::string& val);

  void __set_data4(const std::string& val);

  bool operator == (const APICustomizedContent & rhs) const
  {
    if (!(data1 == rhs.data1))
      return false;
    if (__isset.data2 != rhs.__isset.data2)
      return false;
    else if (__isset.data2 && !(data2 == rhs.data2))
      return false;
    if (__isset.data3 != rhs.__isset.data3)
      return false;
    else if (__isset.data3 && !(data3 == rhs.data3))
      return false;
    if (__isset.data4 != rhs.__isset.data4)
      return false;
    else if (__isset.data4 && !(data4 == rhs.data4))
      return false;
    return true;
  }
  bool operator != (const APICustomizedContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APICustomizedContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const APICustomizedContent& obj);
};

void swap(APICustomizedContent &a, APICustomizedContent &b);

typedef struct _APIAckSentContent__isset {
  _APIAckSentContent__isset() : conversation(false) {}
  bool conversation :1;
} _APIAckSentContent__isset;

class APIAckSentContent {
 public:

  static const char* ascii_fingerprint; // = "C8F46B3BE41FABEC71EFEEDD34420D17";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0xF4,0x6B,0x3B,0xE4,0x1F,0xAB,0xEC,0x71,0xEF,0xEE,0xDD,0x34,0x42,0x0D,0x17};

  APIAckSentContent(const APIAckSentContent&);
  APIAckSentContent& operator=(const APIAckSentContent&);
  APIAckSentContent() : id(0), seq(0), conversation(0), result(0) {
  }

  virtual ~APIAckSentContent() throw();
  int32_t id;
  int64_t seq;
  int32_t conversation;
  int8_t result;

  _APIAckSentContent__isset __isset;

  void __set_id(const int32_t val);

  void __set_seq(const int64_t val);

  void __set_conversation(const int32_t val);

  void __set_result(const int8_t val);

  bool operator == (const APIAckSentContent & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(seq == rhs.seq))
      return false;
    if (__isset.conversation != rhs.__isset.conversation)
      return false;
    else if (__isset.conversation && !(conversation == rhs.conversation))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const APIAckSentContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APIAckSentContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const APIAckSentContent& obj);
};

void swap(APIAckSentContent &a, APIAckSentContent &b);

typedef struct _APIOAStatusChangeContent__isset {
  _APIOAStatusChangeContent__isset() : externalData(false) {}
  bool externalData :1;
} _APIOAStatusChangeContent__isset;

class APIOAStatusChangeContent {
 public:

  static const char* ascii_fingerprint; // = "9862F98D5E6CA9D9ED006ABF4B191046";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x62,0xF9,0x8D,0x5E,0x6C,0xA9,0xD9,0xED,0x00,0x6A,0xBF,0x4B,0x19,0x10,0x46};

  APIOAStatusChangeContent(const APIOAStatusChangeContent&);
  APIOAStatusChangeContent& operator=(const APIOAStatusChangeContent&);
  APIOAStatusChangeContent() : seq(0), newStatus(0), externalData() {
  }

  virtual ~APIOAStatusChangeContent() throw();
  int64_t seq;
  int16_t newStatus;
  std::string externalData;

  _APIOAStatusChangeContent__isset __isset;

  void __set_seq(const int64_t val);

  void __set_newStatus(const int16_t val);

  void __set_externalData(const std::string& val);

  bool operator == (const APIOAStatusChangeContent & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(newStatus == rhs.newStatus))
      return false;
    if (__isset.externalData != rhs.__isset.externalData)
      return false;
    else if (__isset.externalData && !(externalData == rhs.externalData))
      return false;
    return true;
  }
  bool operator != (const APIOAStatusChangeContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APIOAStatusChangeContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const APIOAStatusChangeContent& obj);
};

void swap(APIOAStatusChangeContent &a, APIOAStatusChangeContent &b);


class APIAppEventChangeNotify {
 public:

  static const char* ascii_fingerprint; // = "B60006AAF0CAC4C90B413EB63943B6E9";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x00,0x06,0xAA,0xF0,0xCA,0xC4,0xC9,0x0B,0x41,0x3E,0xB6,0x39,0x43,0xB6,0xE9};

  APIAppEventChangeNotify(const APIAppEventChangeNotify&);
  APIAppEventChangeNotify& operator=(const APIAppEventChangeNotify&);
  APIAppEventChangeNotify() : appId(0), eventCount(0), externalData() {
  }

  virtual ~APIAppEventChangeNotify() throw();
  int64_t appId;
  int32_t eventCount;
  std::string externalData;

  void __set_appId(const int64_t val);

  void __set_eventCount(const int32_t val);

  void __set_externalData(const std::string& val);

  bool operator == (const APIAppEventChangeNotify & rhs) const
  {
    if (!(appId == rhs.appId))
      return false;
    if (!(eventCount == rhs.eventCount))
      return false;
    if (!(externalData == rhs.externalData))
      return false;
    return true;
  }
  bool operator != (const APIAppEventChangeNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APIAppEventChangeNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const APIAppEventChangeNotify& obj);
};

void swap(APIAppEventChangeNotify &a, APIAppEventChangeNotify &b);

typedef struct _APIAppChangeNotifyContent__isset {
  _APIAppChangeNotifyContent__isset() : externalData(false) {}
  bool externalData :1;
} _APIAppChangeNotifyContent__isset;

class APIAppChangeNotifyContent {
 public:

  static const char* ascii_fingerprint; // = "E78EA2A35CAD7C38E47E378E169618D6";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0x8E,0xA2,0xA3,0x5C,0xAD,0x7C,0x38,0xE4,0x7E,0x37,0x8E,0x16,0x96,0x18,0xD6};

  APIAppChangeNotifyContent(const APIAppChangeNotifyContent&);
  APIAppChangeNotifyContent& operator=(const APIAppChangeNotifyContent&);
  APIAppChangeNotifyContent() : event(0), appId(0), externalData() {
  }

  virtual ~APIAppChangeNotifyContent() throw();
  int16_t event;
  int64_t appId;
  std::string externalData;

  _APIAppChangeNotifyContent__isset __isset;

  void __set_event(const int16_t val);

  void __set_appId(const int64_t val);

  void __set_externalData(const std::string& val);

  bool operator == (const APIAppChangeNotifyContent & rhs) const
  {
    if (!(event == rhs.event))
      return false;
    if (!(appId == rhs.appId))
      return false;
    if (__isset.externalData != rhs.__isset.externalData)
      return false;
    else if (__isset.externalData && !(externalData == rhs.externalData))
      return false;
    return true;
  }
  bool operator != (const APIAppChangeNotifyContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APIAppChangeNotifyContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const APIAppChangeNotifyContent& obj);
};

void swap(APIAppChangeNotifyContent &a, APIAppChangeNotifyContent &b);

typedef struct _UcMessageHead__isset {
  _UcMessageHead__isset() : toPrivate(false), controlPri(true), channelPri(false), groupAtUsers(false) {}
  bool toPrivate :1;
  bool controlPri :1;
  bool channelPri :1;
  bool groupAtUsers :1;
} _UcMessageHead__isset;

class UcMessageHead {
 public:

  static const char* ascii_fingerprint; // = "B88CA2FEADE169AF8E86D4FBA78FAAAB";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0x8C,0xA2,0xFE,0xAD,0xE1,0x69,0xAF,0x8E,0x86,0xD4,0xFB,0xA7,0x8F,0xAA,0xAB};

  UcMessageHead(const UcMessageHead&);
  UcMessageHead& operator=(const UcMessageHead&);
  UcMessageHead() : version(256), appid(0), pri(0), protocoltype(0), protocolid(0), id(0), seq(0), timestamp(0), conversation(0), length(0), controlPri(15), channelPri(0) {
  }

  virtual ~UcMessageHead() throw();
  int16_t version;
  int16_t appid;
  int8_t pri;
  int8_t protocoltype;
  int16_t protocolid;
  int32_t id;
  int64_t seq;
  int64_t timestamp;
  JID from;
  JID to;
  int32_t conversation;
  int32_t length;
  JID toPrivate;
  int8_t controlPri;
  int16_t channelPri;
  std::vector<JID>  groupAtUsers;

  _UcMessageHead__isset __isset;

  void __set_version(const int16_t val);

  void __set_appid(const int16_t val);

  void __set_pri(const int8_t val);

  void __set_protocoltype(const int8_t val);

  void __set_protocolid(const int16_t val);

  void __set_id(const int32_t val);

  void __set_seq(const int64_t val);

  void __set_timestamp(const int64_t val);

  void __set_from(const JID& val);

  void __set_to(const JID& val);

  void __set_conversation(const int32_t val);

  void __set_length(const int32_t val);

  void __set_toPrivate(const JID& val);

  void __set_controlPri(const int8_t val);

  void __set_channelPri(const int16_t val);

  void __set_groupAtUsers(const std::vector<JID> & val);

  bool operator == (const UcMessageHead & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(appid == rhs.appid))
      return false;
    if (!(pri == rhs.pri))
      return false;
    if (!(protocoltype == rhs.protocoltype))
      return false;
    if (!(protocolid == rhs.protocolid))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(seq == rhs.seq))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(from == rhs.from))
      return false;
    if (!(to == rhs.to))
      return false;
    if (!(conversation == rhs.conversation))
      return false;
    if (!(length == rhs.length))
      return false;
    if (__isset.toPrivate != rhs.__isset.toPrivate)
      return false;
    else if (__isset.toPrivate && !(toPrivate == rhs.toPrivate))
      return false;
    if (__isset.controlPri != rhs.__isset.controlPri)
      return false;
    else if (__isset.controlPri && !(controlPri == rhs.controlPri))
      return false;
    if (__isset.channelPri != rhs.__isset.channelPri)
      return false;
    else if (__isset.channelPri && !(channelPri == rhs.channelPri))
      return false;
    if (__isset.groupAtUsers != rhs.__isset.groupAtUsers)
      return false;
    else if (__isset.groupAtUsers && !(groupAtUsers == rhs.groupAtUsers))
      return false;
    return true;
  }
  bool operator != (const UcMessageHead &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UcMessageHead & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UcMessageHead& obj);
};

void swap(UcMessageHead &a, UcMessageHead &b);

typedef struct _UcMessageBody__isset {
  _UcMessageBody__isset() : presence(false), ping(false), ackSent(false), ackReceived(false), ackRead(false), sleep(false), wakeupConfirm(false), ackPlay(false), batchAckRead(false), text(false), media(false), groupAdd(false), groupDel(false), groupUpdate(false), groupCreate(false), groupTop(false), summaryCreate(false), docSend(false), alertRule(false), groupClose(false), msgNotify(false), groupKick(false), codeCreate(false), codeDel(false), docDel(false), commentCreate(false), commentDel(false), groupAvatarUpdate(false), groupState(false), cloudFile(false), memberRole(false), report(false), revocation(false), groupScope(false), welcome(false), clientUpdate(false), completeInfo(false), pwdComplexUpdate(false), pwdExpire(false), pcGuide(false), mobileGuide(false), pwdModify(false), tagDel(false), remind(false), deptUpdate(false), deptTransfer(false), positionUpdate(false), employeeEntry(false), employeeLeave(false), employeeRights(false), deprtParentChange(false), companyJoin(false), deptDelete(false), entryConfirm(false), leaveConfirm(false), deptConfirm(false), instantInvite(false), confInvite(false), confReceive(false), confReject(false), confCancel(false), confAlert(false), instantReceive(false), instantReject(false), confChat(false), confSummary(false), callState(false), confUpload(false), confDocDel(false), cardUpdate(false), contacterAdd(false), contacterDel(false), attentionCreate(false), attentionCancel(false), transInvite(false), transReceive(false), transReject(false), transStop(false), audioInvite(false), audioReceive(false), audioReject(false), audioStop(false), callRecent(false), callBlock(false), callReject(false), callCancel(false), confShare(false), wbContent(false), remoteAssistanceInvite(false), remoteAssistanceAccept(false), remoteAssistanceReject(false), remoteAssistanceEnd(false), sessionTop(false), atMessageReaded(false), loginNotify(false), apiText(false), apiImage(false), apiFile(false), apiAckSent(false), apiOA(false), apiOAStatusChange(false), apiChangeNotify(false), apiEventNotify(false), apiCustomized(false) {}
  bool presence :1;
  bool ping :1;
  bool ackSent :1;
  bool ackReceived :1;
  bool ackRead :1;
  bool sleep :1;
  bool wakeupConfirm :1;
  bool ackPlay :1;
  bool batchAckRead :1;
  bool text :1;
  bool media :1;
  bool groupAdd :1;
  bool groupDel :1;
  bool groupUpdate :1;
  bool groupCreate :1;
  bool groupTop :1;
  bool summaryCreate :1;
  bool docSend :1;
  bool alertRule :1;
  bool groupClose :1;
  bool msgNotify :1;
  bool groupKick :1;
  bool codeCreate :1;
  bool codeDel :1;
  bool docDel :1;
  bool commentCreate :1;
  bool commentDel :1;
  bool groupAvatarUpdate :1;
  bool groupState :1;
  bool cloudFile :1;
  bool memberRole :1;
  bool report :1;
  bool revocation :1;
  bool groupScope :1;
  bool welcome :1;
  bool clientUpdate :1;
  bool completeInfo :1;
  bool pwdComplexUpdate :1;
  bool pwdExpire :1;
  bool pcGuide :1;
  bool mobileGuide :1;
  bool pwdModify :1;
  bool tagDel :1;
  bool remind :1;
  bool deptUpdate :1;
  bool deptTransfer :1;
  bool positionUpdate :1;
  bool employeeEntry :1;
  bool employeeLeave :1;
  bool employeeRights :1;
  bool deprtParentChange :1;
  bool companyJoin :1;
  bool deptDelete :1;
  bool entryConfirm :1;
  bool leaveConfirm :1;
  bool deptConfirm :1;
  bool instantInvite :1;
  bool confInvite :1;
  bool confReceive :1;
  bool confReject :1;
  bool confCancel :1;
  bool confAlert :1;
  bool instantReceive :1;
  bool instantReject :1;
  bool confChat :1;
  bool confSummary :1;
  bool callState :1;
  bool confUpload :1;
  bool confDocDel :1;
  bool cardUpdate :1;
  bool contacterAdd :1;
  bool contacterDel :1;
  bool attentionCreate :1;
  bool attentionCancel :1;
  bool transInvite :1;
  bool transReceive :1;
  bool transReject :1;
  bool transStop :1;
  bool audioInvite :1;
  bool audioReceive :1;
  bool audioReject :1;
  bool audioStop :1;
  bool callRecent :1;
  bool callBlock :1;
  bool callReject :1;
  bool callCancel :1;
  bool confShare :1;
  bool wbContent :1;
  bool remoteAssistanceInvite :1;
  bool remoteAssistanceAccept :1;
  bool remoteAssistanceReject :1;
  bool remoteAssistanceEnd :1;
  bool sessionTop :1;
  bool atMessageReaded :1;
  bool loginNotify :1;
  bool apiText :1;
  bool apiImage :1;
  bool apiFile :1;
  bool apiAckSent :1;
  bool apiOA :1;
  bool apiOAStatusChange :1;
  bool apiChangeNotify :1;
  bool apiEventNotify :1;
  bool apiCustomized :1;
} _UcMessageBody__isset;

class UcMessageBody {
 public:

  static const char* ascii_fingerprint; // = "A5C8691123356F11F2FB48CAF9D11A5B";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0xC8,0x69,0x11,0x23,0x35,0x6F,0x11,0xF2,0xFB,0x48,0xCA,0xF9,0xD1,0x1A,0x5B};

  UcMessageBody(const UcMessageBody&);
  UcMessageBody& operator=(const UcMessageBody&);
  UcMessageBody() {
  }

  virtual ~UcMessageBody() throw();
  MessagePresence presence;
  MessagePing ping;
  AckSent ackSent;
  AckReceived ackReceived;
  AckRead ackRead;
  SleepSet sleep;
  WakeupResult wakeupConfirm;
  AckPlay ackPlay;
  BatchAckRead batchAckRead;
  TextContent text;
  MediaContent media;
  GroupMemberAddContent groupAdd;
  GroupMemberDelContent groupDel;
  GroupNameUpdateContent groupUpdate;
  GroupCreateContent groupCreate;
  GroupTopContent groupTop;
  SummaryCreateContent summaryCreate;
  DocumentContent docSend;
  AlertRuleContent alertRule;
  DiscussionClose groupClose;
  MsgNotifyContent msgNotify;
  GroupMemberKickContent groupKick;
  CodeCreateContent codeCreate;
  CodeDelContent codeDel;
  DocumentDelContent docDel;
  CommentCreateContent commentCreate;
  CommentDelContent commentDel;
  GroupAvatarUpdateContent groupAvatarUpdate;
  GroupStateUpdateContent groupState;
  CloudFileContent cloudFile;
  MemberRoleUpdateContent memberRole;
  ReportContent report;
  RevocationContent revocation;
  GroupScopeContent groupScope;
  SystemWelcomeContent welcome;
  ClientUpdateContent clientUpdate;
  CompleteInfoContent completeInfo;
  PwdComplexUpdateContent pwdComplexUpdate;
  PwdExpireContent pwdExpire;
  PCClientGuide pcGuide;
  MobileClientGuide mobileGuide;
  PasswordModifyContent pwdModify;
  TagDelContent tagDel;
  GroupRemindContent remind;
  DeptUpdateContent deptUpdate;
  DeptTransferContent deptTransfer;
  PositionUpdateContent positionUpdate;
  EmployeeEntryContent employeeEntry;
  EmployeeLeaveContent employeeLeave;
  EmployeeRightsChangeContent employeeRights;
  DeptParentChangeContent deprtParentChange;
  CompanyJoinContent companyJoin;
  DeptDeleteContent deptDelete;
  EmployeeEntryConfirmContent entryConfirm;
  EmployeeLeaveConfirmContent leaveConfirm;
  DeptTransferConfirmContent deptConfirm;
  InstantIQInviteContent instantInvite;
  IQInviteContent confInvite;
  IQReceiveContent confReceive;
  IQRejectContent confReject;
  ConfCancelContent confCancel;
  ConfAlertContent confAlert;
  InstantIQReceiveContent instantReceive;
  InstantIQRejectContent instantReject;
  ConfChatContent confChat;
  ConfSummaryContent confSummary;
  CallStateContent callState;
  ConfUploadContent confUpload;
  ConfDelDocContent confDocDel;
  CardUpdateContent cardUpdate;
  ContacterAddContent contacterAdd;
  ContacterDelContent contacterDel;
  AttentionCreateContent attentionCreate;
  AttentionCancelContent attentionCancel;
  FileTransmissionInviteContent transInvite;
  FileTransmissionReceiveContent transReceive;
  FileTransmissionRejectContent transReject;
  FileTransmissionStopContent transStop;
  AudioInviteContent audioInvite;
  AudioReceiveContent audioReceive;
  AudioRejectContent audioReject;
  AudioStopContent audioStop;
  AudioRecentCallContent callRecent;
  AudioBlockCallContent callBlock;
  AudioRejectCallContent callReject;
  AudioCancelCallContent callCancel;
  ConfShareContent confShare;
  WBMessageContent wbContent;
  RemoteAssistanceInviteContent remoteAssistanceInvite;
  RemoteAssistanceAcceptContent remoteAssistanceAccept;
  RemoteAssistanceRejectContent remoteAssistanceReject;
  RemoteAssistanceEndContent remoteAssistanceEnd;
  SessionTopContent sessionTop;
  AtMessageReadedContent atMessageReaded;
  UserLoginNotifyContent loginNotify;
  APITextContent apiText;
  APIImageContent apiImage;
  APIFileContent apiFile;
  APIAckSentContent apiAckSent;
  APIOAContent apiOA;
  APIOAStatusChangeContent apiOAStatusChange;
  APIAppChangeNotifyContent apiChangeNotify;
  APIAppEventChangeNotify apiEventNotify;
  APICustomizedContent apiCustomized;

  _UcMessageBody__isset __isset;

  void __set_presence(const MessagePresence& val);

  void __set_ping(const MessagePing& val);

  void __set_ackSent(const AckSent& val);

  void __set_ackReceived(const AckReceived& val);

  void __set_ackRead(const AckRead& val);

  void __set_sleep(const SleepSet& val);

  void __set_wakeupConfirm(const WakeupResult& val);

  void __set_ackPlay(const AckPlay& val);

  void __set_batchAckRead(const BatchAckRead& val);

  void __set_text(const TextContent& val);

  void __set_media(const MediaContent& val);

  void __set_groupAdd(const GroupMemberAddContent& val);

  void __set_groupDel(const GroupMemberDelContent& val);

  void __set_groupUpdate(const GroupNameUpdateContent& val);

  void __set_groupCreate(const GroupCreateContent& val);

  void __set_groupTop(const GroupTopContent& val);

  void __set_summaryCreate(const SummaryCreateContent& val);

  void __set_docSend(const DocumentContent& val);

  void __set_alertRule(const AlertRuleContent& val);

  void __set_groupClose(const DiscussionClose& val);

  void __set_msgNotify(const MsgNotifyContent& val);

  void __set_groupKick(const GroupMemberKickContent& val);

  void __set_codeCreate(const CodeCreateContent& val);

  void __set_codeDel(const CodeDelContent& val);

  void __set_docDel(const DocumentDelContent& val);

  void __set_commentCreate(const CommentCreateContent& val);

  void __set_commentDel(const CommentDelContent& val);

  void __set_groupAvatarUpdate(const GroupAvatarUpdateContent& val);

  void __set_groupState(const GroupStateUpdateContent& val);

  void __set_cloudFile(const CloudFileContent& val);

  void __set_memberRole(const MemberRoleUpdateContent& val);

  void __set_report(const ReportContent& val);

  void __set_revocation(const RevocationContent& val);

  void __set_groupScope(const GroupScopeContent& val);

  void __set_welcome(const SystemWelcomeContent& val);

  void __set_clientUpdate(const ClientUpdateContent& val);

  void __set_completeInfo(const CompleteInfoContent& val);

  void __set_pwdComplexUpdate(const PwdComplexUpdateContent& val);

  void __set_pwdExpire(const PwdExpireContent& val);

  void __set_pcGuide(const PCClientGuide& val);

  void __set_mobileGuide(const MobileClientGuide& val);

  void __set_pwdModify(const PasswordModifyContent& val);

  void __set_tagDel(const TagDelContent& val);

  void __set_remind(const GroupRemindContent& val);

  void __set_deptUpdate(const DeptUpdateContent& val);

  void __set_deptTransfer(const DeptTransferContent& val);

  void __set_positionUpdate(const PositionUpdateContent& val);

  void __set_employeeEntry(const EmployeeEntryContent& val);

  void __set_employeeLeave(const EmployeeLeaveContent& val);

  void __set_employeeRights(const EmployeeRightsChangeContent& val);

  void __set_deprtParentChange(const DeptParentChangeContent& val);

  void __set_companyJoin(const CompanyJoinContent& val);

  void __set_deptDelete(const DeptDeleteContent& val);

  void __set_entryConfirm(const EmployeeEntryConfirmContent& val);

  void __set_leaveConfirm(const EmployeeLeaveConfirmContent& val);

  void __set_deptConfirm(const DeptTransferConfirmContent& val);

  void __set_instantInvite(const InstantIQInviteContent& val);

  void __set_confInvite(const IQInviteContent& val);

  void __set_confReceive(const IQReceiveContent& val);

  void __set_confReject(const IQRejectContent& val);

  void __set_confCancel(const ConfCancelContent& val);

  void __set_confAlert(const ConfAlertContent& val);

  void __set_instantReceive(const InstantIQReceiveContent& val);

  void __set_instantReject(const InstantIQRejectContent& val);

  void __set_confChat(const ConfChatContent& val);

  void __set_confSummary(const ConfSummaryContent& val);

  void __set_callState(const CallStateContent& val);

  void __set_confUpload(const ConfUploadContent& val);

  void __set_confDocDel(const ConfDelDocContent& val);

  void __set_cardUpdate(const CardUpdateContent& val);

  void __set_contacterAdd(const ContacterAddContent& val);

  void __set_contacterDel(const ContacterDelContent& val);

  void __set_attentionCreate(const AttentionCreateContent& val);

  void __set_attentionCancel(const AttentionCancelContent& val);

  void __set_transInvite(const FileTransmissionInviteContent& val);

  void __set_transReceive(const FileTransmissionReceiveContent& val);

  void __set_transReject(const FileTransmissionRejectContent& val);

  void __set_transStop(const FileTransmissionStopContent& val);

  void __set_audioInvite(const AudioInviteContent& val);

  void __set_audioReceive(const AudioReceiveContent& val);

  void __set_audioReject(const AudioRejectContent& val);

  void __set_audioStop(const AudioStopContent& val);

  void __set_callRecent(const AudioRecentCallContent& val);

  void __set_callBlock(const AudioBlockCallContent& val);

  void __set_callReject(const AudioRejectCallContent& val);

  void __set_callCancel(const AudioCancelCallContent& val);

  void __set_confShare(const ConfShareContent& val);

  void __set_wbContent(const WBMessageContent& val);

  void __set_remoteAssistanceInvite(const RemoteAssistanceInviteContent& val);

  void __set_remoteAssistanceAccept(const RemoteAssistanceAcceptContent& val);

  void __set_remoteAssistanceReject(const RemoteAssistanceRejectContent& val);

  void __set_remoteAssistanceEnd(const RemoteAssistanceEndContent& val);

  void __set_sessionTop(const SessionTopContent& val);

  void __set_atMessageReaded(const AtMessageReadedContent& val);

  void __set_loginNotify(const UserLoginNotifyContent& val);

  void __set_apiText(const APITextContent& val);

  void __set_apiImage(const APIImageContent& val);

  void __set_apiFile(const APIFileContent& val);

  void __set_apiAckSent(const APIAckSentContent& val);

  void __set_apiOA(const APIOAContent& val);

  void __set_apiOAStatusChange(const APIOAStatusChangeContent& val);

  void __set_apiChangeNotify(const APIAppChangeNotifyContent& val);

  void __set_apiEventNotify(const APIAppEventChangeNotify& val);

  void __set_apiCustomized(const APICustomizedContent& val);

  bool operator == (const UcMessageBody & rhs) const
  {
    if (__isset.presence != rhs.__isset.presence)
      return false;
    else if (__isset.presence && !(presence == rhs.presence))
      return false;
    if (__isset.ping != rhs.__isset.ping)
      return false;
    else if (__isset.ping && !(ping == rhs.ping))
      return false;
    if (__isset.ackSent != rhs.__isset.ackSent)
      return false;
    else if (__isset.ackSent && !(ackSent == rhs.ackSent))
      return false;
    if (__isset.ackReceived != rhs.__isset.ackReceived)
      return false;
    else if (__isset.ackReceived && !(ackReceived == rhs.ackReceived))
      return false;
    if (__isset.ackRead != rhs.__isset.ackRead)
      return false;
    else if (__isset.ackRead && !(ackRead == rhs.ackRead))
      return false;
    if (__isset.sleep != rhs.__isset.sleep)
      return false;
    else if (__isset.sleep && !(sleep == rhs.sleep))
      return false;
    if (__isset.wakeupConfirm != rhs.__isset.wakeupConfirm)
      return false;
    else if (__isset.wakeupConfirm && !(wakeupConfirm == rhs.wakeupConfirm))
      return false;
    if (__isset.ackPlay != rhs.__isset.ackPlay)
      return false;
    else if (__isset.ackPlay && !(ackPlay == rhs.ackPlay))
      return false;
    if (__isset.batchAckRead != rhs.__isset.batchAckRead)
      return false;
    else if (__isset.batchAckRead && !(batchAckRead == rhs.batchAckRead))
      return false;
    if (__isset.text != rhs.__isset.text)
      return false;
    else if (__isset.text && !(text == rhs.text))
      return false;
    if (__isset.media != rhs.__isset.media)
      return false;
    else if (__isset.media && !(media == rhs.media))
      return false;
    if (__isset.groupAdd != rhs.__isset.groupAdd)
      return false;
    else if (__isset.groupAdd && !(groupAdd == rhs.groupAdd))
      return false;
    if (__isset.groupDel != rhs.__isset.groupDel)
      return false;
    else if (__isset.groupDel && !(groupDel == rhs.groupDel))
      return false;
    if (__isset.groupUpdate != rhs.__isset.groupUpdate)
      return false;
    else if (__isset.groupUpdate && !(groupUpdate == rhs.groupUpdate))
      return false;
    if (__isset.groupCreate != rhs.__isset.groupCreate)
      return false;
    else if (__isset.groupCreate && !(groupCreate == rhs.groupCreate))
      return false;
    if (__isset.groupTop != rhs.__isset.groupTop)
      return false;
    else if (__isset.groupTop && !(groupTop == rhs.groupTop))
      return false;
    if (__isset.summaryCreate != rhs.__isset.summaryCreate)
      return false;
    else if (__isset.summaryCreate && !(summaryCreate == rhs.summaryCreate))
      return false;
    if (__isset.docSend != rhs.__isset.docSend)
      return false;
    else if (__isset.docSend && !(docSend == rhs.docSend))
      return false;
    if (__isset.alertRule != rhs.__isset.alertRule)
      return false;
    else if (__isset.alertRule && !(alertRule == rhs.alertRule))
      return false;
    if (__isset.groupClose != rhs.__isset.groupClose)
      return false;
    else if (__isset.groupClose && !(groupClose == rhs.groupClose))
      return false;
    if (__isset.msgNotify != rhs.__isset.msgNotify)
      return false;
    else if (__isset.msgNotify && !(msgNotify == rhs.msgNotify))
      return false;
    if (__isset.groupKick != rhs.__isset.groupKick)
      return false;
    else if (__isset.groupKick && !(groupKick == rhs.groupKick))
      return false;
    if (__isset.codeCreate != rhs.__isset.codeCreate)
      return false;
    else if (__isset.codeCreate && !(codeCreate == rhs.codeCreate))
      return false;
    if (__isset.codeDel != rhs.__isset.codeDel)
      return false;
    else if (__isset.codeDel && !(codeDel == rhs.codeDel))
      return false;
    if (__isset.docDel != rhs.__isset.docDel)
      return false;
    else if (__isset.docDel && !(docDel == rhs.docDel))
      return false;
    if (__isset.commentCreate != rhs.__isset.commentCreate)
      return false;
    else if (__isset.commentCreate && !(commentCreate == rhs.commentCreate))
      return false;
    if (__isset.commentDel != rhs.__isset.commentDel)
      return false;
    else if (__isset.commentDel && !(commentDel == rhs.commentDel))
      return false;
    if (__isset.groupAvatarUpdate != rhs.__isset.groupAvatarUpdate)
      return false;
    else if (__isset.groupAvatarUpdate && !(groupAvatarUpdate == rhs.groupAvatarUpdate))
      return false;
    if (__isset.groupState != rhs.__isset.groupState)
      return false;
    else if (__isset.groupState && !(groupState == rhs.groupState))
      return false;
    if (__isset.cloudFile != rhs.__isset.cloudFile)
      return false;
    else if (__isset.cloudFile && !(cloudFile == rhs.cloudFile))
      return false;
    if (__isset.memberRole != rhs.__isset.memberRole)
      return false;
    else if (__isset.memberRole && !(memberRole == rhs.memberRole))
      return false;
    if (__isset.report != rhs.__isset.report)
      return false;
    else if (__isset.report && !(report == rhs.report))
      return false;
    if (__isset.revocation != rhs.__isset.revocation)
      return false;
    else if (__isset.revocation && !(revocation == rhs.revocation))
      return false;
    if (__isset.groupScope != rhs.__isset.groupScope)
      return false;
    else if (__isset.groupScope && !(groupScope == rhs.groupScope))
      return false;
    if (__isset.welcome != rhs.__isset.welcome)
      return false;
    else if (__isset.welcome && !(welcome == rhs.welcome))
      return false;
    if (__isset.clientUpdate != rhs.__isset.clientUpdate)
      return false;
    else if (__isset.clientUpdate && !(clientUpdate == rhs.clientUpdate))
      return false;
    if (__isset.completeInfo != rhs.__isset.completeInfo)
      return false;
    else if (__isset.completeInfo && !(completeInfo == rhs.completeInfo))
      return false;
    if (__isset.pwdComplexUpdate != rhs.__isset.pwdComplexUpdate)
      return false;
    else if (__isset.pwdComplexUpdate && !(pwdComplexUpdate == rhs.pwdComplexUpdate))
      return false;
    if (__isset.pwdExpire != rhs.__isset.pwdExpire)
      return false;
    else if (__isset.pwdExpire && !(pwdExpire == rhs.pwdExpire))
      return false;
    if (__isset.pcGuide != rhs.__isset.pcGuide)
      return false;
    else if (__isset.pcGuide && !(pcGuide == rhs.pcGuide))
      return false;
    if (__isset.mobileGuide != rhs.__isset.mobileGuide)
      return false;
    else if (__isset.mobileGuide && !(mobileGuide == rhs.mobileGuide))
      return false;
    if (__isset.pwdModify != rhs.__isset.pwdModify)
      return false;
    else if (__isset.pwdModify && !(pwdModify == rhs.pwdModify))
      return false;
    if (__isset.tagDel != rhs.__isset.tagDel)
      return false;
    else if (__isset.tagDel && !(tagDel == rhs.tagDel))
      return false;
    if (__isset.remind != rhs.__isset.remind)
      return false;
    else if (__isset.remind && !(remind == rhs.remind))
      return false;
    if (__isset.deptUpdate != rhs.__isset.deptUpdate)
      return false;
    else if (__isset.deptUpdate && !(deptUpdate == rhs.deptUpdate))
      return false;
    if (__isset.deptTransfer != rhs.__isset.deptTransfer)
      return false;
    else if (__isset.deptTransfer && !(deptTransfer == rhs.deptTransfer))
      return false;
    if (__isset.positionUpdate != rhs.__isset.positionUpdate)
      return false;
    else if (__isset.positionUpdate && !(positionUpdate == rhs.positionUpdate))
      return false;
    if (__isset.employeeEntry != rhs.__isset.employeeEntry)
      return false;
    else if (__isset.employeeEntry && !(employeeEntry == rhs.employeeEntry))
      return false;
    if (__isset.employeeLeave != rhs.__isset.employeeLeave)
      return false;
    else if (__isset.employeeLeave && !(employeeLeave == rhs.employeeLeave))
      return false;
    if (__isset.employeeRights != rhs.__isset.employeeRights)
      return false;
    else if (__isset.employeeRights && !(employeeRights == rhs.employeeRights))
      return false;
    if (__isset.deprtParentChange != rhs.__isset.deprtParentChange)
      return false;
    else if (__isset.deprtParentChange && !(deprtParentChange == rhs.deprtParentChange))
      return false;
    if (__isset.companyJoin != rhs.__isset.companyJoin)
      return false;
    else if (__isset.companyJoin && !(companyJoin == rhs.companyJoin))
      return false;
    if (__isset.deptDelete != rhs.__isset.deptDelete)
      return false;
    else if (__isset.deptDelete && !(deptDelete == rhs.deptDelete))
      return false;
    if (__isset.entryConfirm != rhs.__isset.entryConfirm)
      return false;
    else if (__isset.entryConfirm && !(entryConfirm == rhs.entryConfirm))
      return false;
    if (__isset.leaveConfirm != rhs.__isset.leaveConfirm)
      return false;
    else if (__isset.leaveConfirm && !(leaveConfirm == rhs.leaveConfirm))
      return false;
    if (__isset.deptConfirm != rhs.__isset.deptConfirm)
      return false;
    else if (__isset.deptConfirm && !(deptConfirm == rhs.deptConfirm))
      return false;
    if (__isset.instantInvite != rhs.__isset.instantInvite)
      return false;
    else if (__isset.instantInvite && !(instantInvite == rhs.instantInvite))
      return false;
    if (__isset.confInvite != rhs.__isset.confInvite)
      return false;
    else if (__isset.confInvite && !(confInvite == rhs.confInvite))
      return false;
    if (__isset.confReceive != rhs.__isset.confReceive)
      return false;
    else if (__isset.confReceive && !(confReceive == rhs.confReceive))
      return false;
    if (__isset.confReject != rhs.__isset.confReject)
      return false;
    else if (__isset.confReject && !(confReject == rhs.confReject))
      return false;
    if (__isset.confCancel != rhs.__isset.confCancel)
      return false;
    else if (__isset.confCancel && !(confCancel == rhs.confCancel))
      return false;
    if (__isset.confAlert != rhs.__isset.confAlert)
      return false;
    else if (__isset.confAlert && !(confAlert == rhs.confAlert))
      return false;
    if (__isset.instantReceive != rhs.__isset.instantReceive)
      return false;
    else if (__isset.instantReceive && !(instantReceive == rhs.instantReceive))
      return false;
    if (__isset.instantReject != rhs.__isset.instantReject)
      return false;
    else if (__isset.instantReject && !(instantReject == rhs.instantReject))
      return false;
    if (__isset.confChat != rhs.__isset.confChat)
      return false;
    else if (__isset.confChat && !(confChat == rhs.confChat))
      return false;
    if (__isset.confSummary != rhs.__isset.confSummary)
      return false;
    else if (__isset.confSummary && !(confSummary == rhs.confSummary))
      return false;
    if (__isset.callState != rhs.__isset.callState)
      return false;
    else if (__isset.callState && !(callState == rhs.callState))
      return false;
    if (__isset.confUpload != rhs.__isset.confUpload)
      return false;
    else if (__isset.confUpload && !(confUpload == rhs.confUpload))
      return false;
    if (__isset.confDocDel != rhs.__isset.confDocDel)
      return false;
    else if (__isset.confDocDel && !(confDocDel == rhs.confDocDel))
      return false;
    if (__isset.cardUpdate != rhs.__isset.cardUpdate)
      return false;
    else if (__isset.cardUpdate && !(cardUpdate == rhs.cardUpdate))
      return false;
    if (__isset.contacterAdd != rhs.__isset.contacterAdd)
      return false;
    else if (__isset.contacterAdd && !(contacterAdd == rhs.contacterAdd))
      return false;
    if (__isset.contacterDel != rhs.__isset.contacterDel)
      return false;
    else if (__isset.contacterDel && !(contacterDel == rhs.contacterDel))
      return false;
    if (__isset.attentionCreate != rhs.__isset.attentionCreate)
      return false;
    else if (__isset.attentionCreate && !(attentionCreate == rhs.attentionCreate))
      return false;
    if (__isset.attentionCancel != rhs.__isset.attentionCancel)
      return false;
    else if (__isset.attentionCancel && !(attentionCancel == rhs.attentionCancel))
      return false;
    if (__isset.transInvite != rhs.__isset.transInvite)
      return false;
    else if (__isset.transInvite && !(transInvite == rhs.transInvite))
      return false;
    if (__isset.transReceive != rhs.__isset.transReceive)
      return false;
    else if (__isset.transReceive && !(transReceive == rhs.transReceive))
      return false;
    if (__isset.transReject != rhs.__isset.transReject)
      return false;
    else if (__isset.transReject && !(transReject == rhs.transReject))
      return false;
    if (__isset.transStop != rhs.__isset.transStop)
      return false;
    else if (__isset.transStop && !(transStop == rhs.transStop))
      return false;
    if (__isset.audioInvite != rhs.__isset.audioInvite)
      return false;
    else if (__isset.audioInvite && !(audioInvite == rhs.audioInvite))
      return false;
    if (__isset.audioReceive != rhs.__isset.audioReceive)
      return false;
    else if (__isset.audioReceive && !(audioReceive == rhs.audioReceive))
      return false;
    if (__isset.audioReject != rhs.__isset.audioReject)
      return false;
    else if (__isset.audioReject && !(audioReject == rhs.audioReject))
      return false;
    if (__isset.audioStop != rhs.__isset.audioStop)
      return false;
    else if (__isset.audioStop && !(audioStop == rhs.audioStop))
      return false;
    if (__isset.callRecent != rhs.__isset.callRecent)
      return false;
    else if (__isset.callRecent && !(callRecent == rhs.callRecent))
      return false;
    if (__isset.callBlock != rhs.__isset.callBlock)
      return false;
    else if (__isset.callBlock && !(callBlock == rhs.callBlock))
      return false;
    if (__isset.callReject != rhs.__isset.callReject)
      return false;
    else if (__isset.callReject && !(callReject == rhs.callReject))
      return false;
    if (__isset.callCancel != rhs.__isset.callCancel)
      return false;
    else if (__isset.callCancel && !(callCancel == rhs.callCancel))
      return false;
    if (__isset.confShare != rhs.__isset.confShare)
      return false;
    else if (__isset.confShare && !(confShare == rhs.confShare))
      return false;
    if (__isset.wbContent != rhs.__isset.wbContent)
      return false;
    else if (__isset.wbContent && !(wbContent == rhs.wbContent))
      return false;
    if (__isset.remoteAssistanceInvite != rhs.__isset.remoteAssistanceInvite)
      return false;
    else if (__isset.remoteAssistanceInvite && !(remoteAssistanceInvite == rhs.remoteAssistanceInvite))
      return false;
    if (__isset.remoteAssistanceAccept != rhs.__isset.remoteAssistanceAccept)
      return false;
    else if (__isset.remoteAssistanceAccept && !(remoteAssistanceAccept == rhs.remoteAssistanceAccept))
      return false;
    if (__isset.remoteAssistanceReject != rhs.__isset.remoteAssistanceReject)
      return false;
    else if (__isset.remoteAssistanceReject && !(remoteAssistanceReject == rhs.remoteAssistanceReject))
      return false;
    if (__isset.remoteAssistanceEnd != rhs.__isset.remoteAssistanceEnd)
      return false;
    else if (__isset.remoteAssistanceEnd && !(remoteAssistanceEnd == rhs.remoteAssistanceEnd))
      return false;
    if (__isset.sessionTop != rhs.__isset.sessionTop)
      return false;
    else if (__isset.sessionTop && !(sessionTop == rhs.sessionTop))
      return false;
    if (__isset.atMessageReaded != rhs.__isset.atMessageReaded)
      return false;
    else if (__isset.atMessageReaded && !(atMessageReaded == rhs.atMessageReaded))
      return false;
    if (__isset.loginNotify != rhs.__isset.loginNotify)
      return false;
    else if (__isset.loginNotify && !(loginNotify == rhs.loginNotify))
      return false;
    if (__isset.apiText != rhs.__isset.apiText)
      return false;
    else if (__isset.apiText && !(apiText == rhs.apiText))
      return false;
    if (__isset.apiImage != rhs.__isset.apiImage)
      return false;
    else if (__isset.apiImage && !(apiImage == rhs.apiImage))
      return false;
    if (__isset.apiFile != rhs.__isset.apiFile)
      return false;
    else if (__isset.apiFile && !(apiFile == rhs.apiFile))
      return false;
    if (__isset.apiAckSent != rhs.__isset.apiAckSent)
      return false;
    else if (__isset.apiAckSent && !(apiAckSent == rhs.apiAckSent))
      return false;
    if (__isset.apiOA != rhs.__isset.apiOA)
      return false;
    else if (__isset.apiOA && !(apiOA == rhs.apiOA))
      return false;
    if (__isset.apiOAStatusChange != rhs.__isset.apiOAStatusChange)
      return false;
    else if (__isset.apiOAStatusChange && !(apiOAStatusChange == rhs.apiOAStatusChange))
      return false;
    if (__isset.apiChangeNotify != rhs.__isset.apiChangeNotify)
      return false;
    else if (__isset.apiChangeNotify && !(apiChangeNotify == rhs.apiChangeNotify))
      return false;
    if (__isset.apiEventNotify != rhs.__isset.apiEventNotify)
      return false;
    else if (__isset.apiEventNotify && !(apiEventNotify == rhs.apiEventNotify))
      return false;
    if (__isset.apiCustomized != rhs.__isset.apiCustomized)
      return false;
    else if (__isset.apiCustomized && !(apiCustomized == rhs.apiCustomized))
      return false;
    return true;
  }
  bool operator != (const UcMessageBody &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UcMessageBody & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UcMessageBody& obj);
};

void swap(UcMessageBody &a, UcMessageBody &b);

} // namespace

#endif
