/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "uc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace uc {

int _kPresenceMessageTypeValues[] = {
  PresenceMessageType::DefaultType
};
const char* _kPresenceMessageTypeNames[] = {
  "DefaultType"
};
const std::map<int, const char*> _PresenceMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kPresenceMessageTypeValues, _kPresenceMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPresenceMessageIDValues[] = {
  PresenceMessageID::DefaultId
};
const char* _kPresenceMessageIDNames[] = {
  "DefaultId"
};
const std::map<int, const char*> _PresenceMessageID_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kPresenceMessageIDValues, _kPresenceMessageIDNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPresenceTypeValues[] = {
  PresenceType::Online,
  PresenceType::Busy,
  PresenceType::Away,
  PresenceType::Meeting,
  PresenceType::Offline,
  PresenceType::Call,
  PresenceType::Meeting_Phone,
  PresenceType::Meeting_Ctrl
};
const char* _kPresenceTypeNames[] = {
  "Online",
  "Busy",
  "Away",
  "Meeting",
  "Offline",
  "Call",
  "Meeting_Phone",
  "Meeting_Ctrl"
};
const std::map<int, const char*> _PresenceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kPresenceTypeValues, _kPresenceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDeviceTypeValues[] = {
  DeviceType::Iphone,
  DeviceType::Android,
  DeviceType::PC,
  DeviceType::Background,
  DeviceType::Ipad,
  DeviceType::Web
};
const char* _kDeviceTypeNames[] = {
  "Iphone",
  "Android",
  "PC",
  "Background",
  "Ipad",
  "Web"
};
const std::map<int, const char*> _DeviceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kDeviceTypeValues, _kDeviceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPingMessageTypeValues[] = {
  PingMessageType::DefaultType
};
const char* _kPingMessageTypeNames[] = {
  "DefaultType"
};
const std::map<int, const char*> _PingMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kPingMessageTypeValues, _kPingMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPingMessageIDValues[] = {
  PingMessageID::DefaultId
};
const char* _kPingMessageIDNames[] = {
  "DefaultId"
};
const std::map<int, const char*> _PingMessageID_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kPingMessageIDValues, _kPingMessageIDNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAckMessageIDValues[] = {
  AckMessageID::AckSent,
  AckMessageID::AckReceived,
  AckMessageID::AckRead,
  AckMessageID::AckPlay
};
const char* _kAckMessageIDNames[] = {
  "AckSent",
  "AckReceived",
  "AckRead",
  "AckPlay"
};
const std::map<int, const char*> _AckMessageID_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kAckMessageIDValues, _kAckMessageIDNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAckMessageTypeValues[] = {
  AckMessageType::DefaultType,
  AckMessageType::BatchAckType
};
const char* _kAckMessageTypeNames[] = {
  "DefaultType",
  "BatchAckType"
};
const std::map<int, const char*> _AckMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAckMessageTypeValues, _kAckMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSessionTypeValues[] = {
  SessionType::SingleChat,
  SessionType::DiscussionChat,
  SessionType::GroupChat,
  SessionType::CloudFileChat,
  SessionType::ConferenceType,
  SessionType::OrganizationType,
  SessionType::SystemType,
  SessionType::APIType
};
const char* _kSessionTypeNames[] = {
  "SingleChat",
  "DiscussionChat",
  "GroupChat",
  "CloudFileChat",
  "ConferenceType",
  "OrganizationType",
  "SystemType",
  "APIType"
};
const std::map<int, const char*> _SessionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kSessionTypeValues, _kSessionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSleepMessageTypeValues[] = {
  SleepMessageType::DefaultType
};
const char* _kSleepMessageTypeNames[] = {
  "DefaultType"
};
const std::map<int, const char*> _SleepMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kSleepMessageTypeValues, _kSleepMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSleepMessageIdValues[] = {
  SleepMessageId::IQRequest,
  SleepMessageId::IQConfirm
};
const char* _kSleepMessageIdNames[] = {
  "IQRequest",
  "IQConfirm"
};
const std::map<int, const char*> _SleepMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSleepMessageIdValues, _kSleepMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSleepModeValues[] = {
  SleepMode::light,
  SleepMode::deep,
  SleepMode::wakeup
};
const char* _kSleepModeNames[] = {
  "light",
  "deep",
  "wakeup"
};
const std::map<int, const char*> _SleepMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSleepModeValues, _kSleepModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGroupTypeValues[] = {
  GroupType::to_person,
  GroupType::to_group
};
const char* _kGroupTypeNames[] = {
  "to_person",
  "to_group"
};
const std::map<int, const char*> _GroupType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGroupTypeValues, _kGroupTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kContentTypeValues[] = {
  ContentType::thrift_type,
  ContentType::mime_type
};
const char* _kContentTypeNames[] = {
  "thrift_type",
  "mime_type"
};
const std::map<int, const char*> _ContentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kContentTypeValues, _kContentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPriTypeValues[] = {
  PriType::thrift_type,
  PriType::mime_type,
  PriType::audio_type,
  PriType::control_type,
  PriType::group_type,
  PriType::direct_type
};
const char* _kPriTypeNames[] = {
  "thrift_type",
  "mime_type",
  "audio_type",
  "control_type",
  "group_type",
  "direct_type"
};
const std::map<int, const char*> _PriType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kPriTypeValues, _kPriTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kControlPriTypeValues[] = {
  ControlPriType::unread_count_type,
  ControlPriType::display_type,
  ControlPriType::webpush_send_type,
  ControlPriType::webpush_count_type
};
const char* _kControlPriTypeNames[] = {
  "unread_count_type",
  "display_type",
  "webpush_send_type",
  "webpush_count_type"
};
const std::map<int, const char*> _ControlPriType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kControlPriTypeValues, _kControlPriTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kChannelPriTypeValues[] = {
  ChannelPriType::channel0,
  ChannelPriType::channel1,
  ChannelPriType::channel2,
  ChannelPriType::channel3,
  ChannelPriType::channel4
};
const char* _kChannelPriTypeNames[] = {
  "channel0",
  "channel1",
  "channel2",
  "channel3",
  "channel4"
};
const std::map<int, const char*> _ChannelPriType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kChannelPriTypeValues, _kChannelPriTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kChatMessageTypeValues[] = {
  ChatMessageType::NormalChat,
  ChatMessageType::DiscussionChat,
  ChatMessageType::GroupChat,
  ChatMessageType::CloudFileChat
};
const char* _kChatMessageTypeNames[] = {
  "NormalChat",
  "DiscussionChat",
  "GroupChat",
  "CloudFileChat"
};
const std::map<int, const char*> _ChatMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kChatMessageTypeValues, _kChatMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kChatMessageIdValues[] = {
  ChatMessageId::TextContent,
  ChatMessageId::MediaContent,
  ChatMessageId::DocumentSend,
  ChatMessageId::DocumentForward,
  ChatMessageId::DocumentDel,
  ChatMessageId::CodeCreate,
  ChatMessageId::CodeForward,
  ChatMessageId::CodeDel,
  ChatMessageId::CloudFileCreate,
  ChatMessageId::ReportContent,
  ChatMessageId::RevocationMsg
};
const char* _kChatMessageIdNames[] = {
  "TextContent",
  "MediaContent",
  "DocumentSend",
  "DocumentForward",
  "DocumentDel",
  "CodeCreate",
  "CodeForward",
  "CodeDel",
  "CloudFileCreate",
  "ReportContent",
  "RevocationMsg"
};
const std::map<int, const char*> _ChatMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kChatMessageIdValues, _kChatMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGroupMessageIdValues[] = {
  GroupMessageId::TextContent,
  GroupMessageId::MediaContent,
  GroupMessageId::DisMemberAdd,
  GroupMessageId::DisMemberDel,
  GroupMessageId::DisNameUpdate,
  GroupMessageId::DiscussionCreate,
  GroupMessageId::DiscussionTop,
  GroupMessageId::SummaryCreate,
  GroupMessageId::DocumentForward,
  GroupMessageId::AlertRuleUpdate,
  GroupMessageId::DiscussionClose,
  GroupMessageId::MsgNotifyUpdate,
  GroupMessageId::DisMemberKick,
  GroupMessageId::DocumentDel,
  GroupMessageId::CodeCreate,
  GroupMessageId::CodeForward,
  GroupMessageId::CodeDel,
  GroupMessageId::CommentCreate,
  GroupMessageId::CommentDel,
  GroupMessageId::DisAvatarUpdate,
  GroupMessageId::DisStateUpdate,
  GroupMessageId::CloudFileCreate,
  GroupMessageId::MemberRoleUpdate,
  GroupMessageId::ReportContent,
  GroupMessageId::RevocationMsg,
  GroupMessageId::DiscussionScope
};
const char* _kGroupMessageIdNames[] = {
  "TextContent",
  "MediaContent",
  "DisMemberAdd",
  "DisMemberDel",
  "DisNameUpdate",
  "DiscussionCreate",
  "DiscussionTop",
  "SummaryCreate",
  "DocumentForward",
  "AlertRuleUpdate",
  "DiscussionClose",
  "MsgNotifyUpdate",
  "DisMemberKick",
  "DocumentDel",
  "CodeCreate",
  "CodeForward",
  "CodeDel",
  "CommentCreate",
  "CommentDel",
  "DisAvatarUpdate",
  "DisStateUpdate",
  "CloudFileCreate",
  "MemberRoleUpdate",
  "ReportContent",
  "RevocationMsg",
  "DiscussionScope"
};
const std::map<int, const char*> _GroupMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(26, _kGroupMessageIdValues, _kGroupMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kClusterMessageIdValues[] = {
  ClusterMessageId::TextContent,
  ClusterMessageId::MediaContent,
  ClusterMessageId::DisMemberAdd,
  ClusterMessageId::DisMemberDel,
  ClusterMessageId::DisNameUpdate,
  ClusterMessageId::DiscussionCreate,
  ClusterMessageId::DiscussionTop,
  ClusterMessageId::SummaryCreate,
  ClusterMessageId::DocumentForward,
  ClusterMessageId::DiscussionClose,
  ClusterMessageId::MsgNotifyUpdate,
  ClusterMessageId::DisMemberKick,
  ClusterMessageId::DocumentDel,
  ClusterMessageId::CodeCreate,
  ClusterMessageId::CodeForward,
  ClusterMessageId::CodeDel,
  ClusterMessageId::CommentCreate,
  ClusterMessageId::CommentDel,
  ClusterMessageId::DisAvatarUpdate,
  ClusterMessageId::DisStateUpdate,
  ClusterMessageId::CloudFileCreate,
  ClusterMessageId::MemberRoleUpdate,
  ClusterMessageId::ReportContent,
  ClusterMessageId::RevocationMsg,
  ClusterMessageId::DiscussionScope
};
const char* _kClusterMessageIdNames[] = {
  "TextContent",
  "MediaContent",
  "DisMemberAdd",
  "DisMemberDel",
  "DisNameUpdate",
  "DiscussionCreate",
  "DiscussionTop",
  "SummaryCreate",
  "DocumentForward",
  "DiscussionClose",
  "MsgNotifyUpdate",
  "DisMemberKick",
  "DocumentDel",
  "CodeCreate",
  "CodeForward",
  "CodeDel",
  "CommentCreate",
  "CommentDel",
  "DisAvatarUpdate",
  "DisStateUpdate",
  "CloudFileCreate",
  "MemberRoleUpdate",
  "ReportContent",
  "RevocationMsg",
  "DiscussionScope"
};
const std::map<int, const char*> _ClusterMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(25, _kClusterMessageIdValues, _kClusterMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCloudFileMessageIdValues[] = {
  CloudFileMessageId::TextContent,
  CloudFileMessageId::MediaContent,
  CloudFileMessageId::DisMemberAdd,
  CloudFileMessageId::DisMemberDel,
  CloudFileMessageId::DisNameUpdate,
  CloudFileMessageId::DiscussionCreate,
  CloudFileMessageId::DiscussionClose,
  CloudFileMessageId::MsgNotifyUpdate,
  CloudFileMessageId::DisMemberKick,
  CloudFileMessageId::CommentCreate,
  CloudFileMessageId::CommentDel,
  CloudFileMessageId::DisAvatarUpdate,
  CloudFileMessageId::CloudFileCreate,
  CloudFileMessageId::CloudFileUpdate,
  CloudFileMessageId::CloudFileDel,
  CloudFileMessageId::CloudFileMove,
  CloudFileMessageId::CloudFileRename,
  CloudFileMessageId::MemberRoleUpdate,
  CloudFileMessageId::ReportContent,
  CloudFileMessageId::RevocationMsg
};
const char* _kCloudFileMessageIdNames[] = {
  "TextContent",
  "MediaContent",
  "DisMemberAdd",
  "DisMemberDel",
  "DisNameUpdate",
  "DiscussionCreate",
  "DiscussionClose",
  "MsgNotifyUpdate",
  "DisMemberKick",
  "CommentCreate",
  "CommentDel",
  "DisAvatarUpdate",
  "CloudFileCreate",
  "CloudFileUpdate",
  "CloudFileDel",
  "CloudFileMove",
  "CloudFileRename",
  "MemberRoleUpdate",
  "ReportContent",
  "RevocationMsg"
};
const std::map<int, const char*> _CloudFileMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(20, _kCloudFileMessageIdValues, _kCloudFileMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kChatMediaTypeValues[] = {
  ChatMediaType::MediaTypeAudio,
  ChatMediaType::MediaTypeImage,
  ChatMediaType::MediaTypeVideo,
  ChatMediaType::MediaTypeEmotion,
  ChatMediaType::MediaTypeMeetingRecord
};
const char* _kChatMediaTypeNames[] = {
  "MediaTypeAudio",
  "MediaTypeImage",
  "MediaTypeVideo",
  "MediaTypeEmotion",
  "MediaTypeMeetingRecord"
};
const std::map<int, const char*> _ChatMediaType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kChatMediaTypeValues, _kChatMediaTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTextContentTypeValues[] = {
  TextContentType::PlainText,
  TextContentType::MimeText
};
const char* _kTextContentTypeNames[] = {
  "PlainText",
  "MimeText"
};
const std::map<int, const char*> _TextContentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTextContentTypeValues, _kTextContentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAlertRuleTypeValues[] = {
  AlertRuleType::NoDay,
  AlertRuleType::Monday,
  AlertRuleType::Tuesday,
  AlertRuleType::Wednesday,
  AlertRuleType::Thursday,
  AlertRuleType::Friday,
  AlertRuleType::Saturday,
  AlertRuleType::Sunday
};
const char* _kAlertRuleTypeNames[] = {
  "NoDay",
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday"
};
const std::map<int, const char*> _AlertRuleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kAlertRuleTypeValues, _kAlertRuleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCloudTypeValues[] = {
  CloudType::FS,
  CloudType::GoKuai,
  CloudType::AnZhen
};
const char* _kCloudTypeNames[] = {
  "FS",
  "GoKuai",
  "AnZhen"
};
const std::map<int, const char*> _CloudType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCloudTypeValues, _kCloudTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFSDetailTypeValues[] = {
  FSDetailType::Document,
  FSDetailType::Code
};
const char* _kFSDetailTypeNames[] = {
  "Document",
  "Code"
};
const std::map<int, const char*> _FSDetailType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kFSDetailTypeValues, _kFSDetailTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGoKuaiDetailTypeValues[] = {
  GoKuaiDetailType::FileOperate
};
const char* _kGoKuaiDetailTypeNames[] = {
  "FileOperate"
};
const std::map<int, const char*> _GoKuaiDetailType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kGoKuaiDetailTypeValues, _kGoKuaiDetailTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAnZhenDetailTypeValues[] = {
  AnZhenDetailType::FileURL
};
const char* _kAnZhenDetailTypeNames[] = {
  "FileURL"
};
const std::map<int, const char*> _AnZhenDetailType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kAnZhenDetailTypeValues, _kAnZhenDetailTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMemberRoleTypeValues[] = {
  MemberRoleType::Member,
  MemberRoleType::Admin
};
const char* _kMemberRoleTypeNames[] = {
  "Member",
  "Admin"
};
const std::map<int, const char*> _MemberRoleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMemberRoleTypeValues, _kMemberRoleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSystemProtoMessageTypeValues[] = {
  SystemProtoMessageType::SystemWelcome,
  SystemProtoMessageType::ClientUpdate,
  SystemProtoMessageType::CompleteInfoType,
  SystemProtoMessageType::PwdRuleUpdate,
  SystemProtoMessageType::clientInstallGuide,
  SystemProtoMessageType::PasswordModify,
  SystemProtoMessageType::SensitiveWordDelete,
  SystemProtoMessageType::GroupRemind
};
const char* _kSystemProtoMessageTypeNames[] = {
  "SystemWelcome",
  "ClientUpdate",
  "CompleteInfoType",
  "PwdRuleUpdate",
  "clientInstallGuide",
  "PasswordModify",
  "SensitiveWordDelete",
  "GroupRemind"
};
const std::map<int, const char*> _SystemProtoMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kSystemProtoMessageTypeValues, _kSystemProtoMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSystemMessageIdValues[] = {
  SystemMessageId::DefaultId
};
const char* _kSystemMessageIdNames[] = {
  "DefaultId"
};
const std::map<int, const char*> _SystemMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kSystemMessageIdValues, _kSystemMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kClientUpdateProtoMessageIdValues[] = {
  ClientUpdateProtoMessageId::IphoneType,
  ClientUpdateProtoMessageId::AndroidType,
  ClientUpdateProtoMessageId::PCType
};
const char* _kClientUpdateProtoMessageIdNames[] = {
  "IphoneType",
  "AndroidType",
  "PCType"
};
const std::map<int, const char*> _ClientUpdateProtoMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kClientUpdateProtoMessageIdValues, _kClientUpdateProtoMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCompleteInfoMessageIdValues[] = {
  CompleteInfoMessageId::tagAdd,
  CompleteInfoMessageId::tagUpdate,
  CompleteInfoMessageId::tagDel
};
const char* _kCompleteInfoMessageIdNames[] = {
  "tagAdd",
  "tagUpdate",
  "tagDel"
};
const std::map<int, const char*> _CompleteInfoMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCompleteInfoMessageIdValues, _kCompleteInfoMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kInputTypeValues[] = {
  InputType::SingleLine,
  InputType::MultiLine,
  InputType::Number,
  InputType::Date
};
const char* _kInputTypeNames[] = {
  "SingleLine",
  "MultiLine",
  "Number",
  "Date"
};
const std::map<int, const char*> _InputType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kInputTypeValues, _kInputTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPwdRuleUpdateMessageIdValues[] = {
  PwdRuleUpdateMessageId::OutOfDateType,
  PwdRuleUpdateMessageId::ComplexType
};
const char* _kPwdRuleUpdateMessageIdNames[] = {
  "OutOfDateType",
  "ComplexType"
};
const std::map<int, const char*> _PwdRuleUpdateMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPwdRuleUpdateMessageIdValues, _kPwdRuleUpdateMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPwdComplexTypeValues[] = {
  PwdComplexType::type_1,
  PwdComplexType::type_2,
  PwdComplexType::type_3
};
const char* _kPwdComplexTypeNames[] = {
  "type_1",
  "type_2",
  "type_3"
};
const std::map<int, const char*> _PwdComplexType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPwdComplexTypeValues, _kPwdComplexTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kClientGuideMessageIdValues[] = {
  ClientGuideMessageId::MobileClientGuide,
  ClientGuideMessageId::PCClientGuide
};
const char* _kClientGuideMessageIdNames[] = {
  "MobileClientGuide",
  "PCClientGuide"
};
const std::map<int, const char*> _ClientGuideMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kClientGuideMessageIdValues, _kClientGuideMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFileTransmissionMessageTypeValues[] = {
  FileTransmissionMessageType::DefaultType
};
const char* _kFileTransmissionMessageTypeNames[] = {
  "DefaultType"
};
const std::map<int, const char*> _FileTransmissionMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kFileTransmissionMessageTypeValues, _kFileTransmissionMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFileTransmissionMessageIdValues[] = {
  FileTransmissionMessageId::TransInvite,
  FileTransmissionMessageId::TransReceive,
  FileTransmissionMessageId::TransReject,
  FileTransmissionMessageId::TransStop
};
const char* _kFileTransmissionMessageIdNames[] = {
  "TransInvite",
  "TransReceive",
  "TransReject",
  "TransStop"
};
const std::map<int, const char*> _FileTransmissionMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kFileTransmissionMessageIdValues, _kFileTransmissionMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrganizeProtoMessageTypeValues[] = {
  OrganizeProtoMessageType::OrganizeType
};
const char* _kOrganizeProtoMessageTypeNames[] = {
  "OrganizeType"
};
const std::map<int, const char*> _OrganizeProtoMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kOrganizeProtoMessageTypeValues, _kOrganizeProtoMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrganizeProtoMessageIdValues[] = {
  OrganizeProtoMessageId::DeptUpdate,
  OrganizeProtoMessageId::DeptTransfer,
  OrganizeProtoMessageId::PositionUpdate,
  OrganizeProtoMessageId::EmployeeEntry,
  OrganizeProtoMessageId::EmployeeLeave,
  OrganizeProtoMessageId::EmployeeRightsUpdate,
  OrganizeProtoMessageId::EmployeeJoin,
  OrganizeProtoMessageId::DeptParentChange,
  OrganizeProtoMessageId::CompanyJoin,
  OrganizeProtoMessageId::DeptDelete,
  OrganizeProtoMessageId::EmployeeEntryConfirm,
  OrganizeProtoMessageId::EmployeeLeaveConfirm,
  OrganizeProtoMessageId::DeptTransferConfirm,
  OrganizeProtoMessageId::EmployeeEntryReject,
  OrganizeProtoMessageId::EmployeeLeaveReject,
  OrganizeProtoMessageId::DeptTransferReject
};
const char* _kOrganizeProtoMessageIdNames[] = {
  "DeptUpdate",
  "DeptTransfer",
  "PositionUpdate",
  "EmployeeEntry",
  "EmployeeLeave",
  "EmployeeRightsUpdate",
  "EmployeeJoin",
  "DeptParentChange",
  "CompanyJoin",
  "DeptDelete",
  "EmployeeEntryConfirm",
  "EmployeeLeaveConfirm",
  "DeptTransferConfirm",
  "EmployeeEntryReject",
  "EmployeeLeaveReject",
  "DeptTransferReject"
};
const std::map<int, const char*> _OrganizeProtoMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(16, _kOrganizeProtoMessageIdValues, _kOrganizeProtoMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfMessageTypeValues[] = {
  ConfMessageType::NormalInstantConfInviteMsg,
  ConfMessageType::ConfInviteMsg,
  ConfMessageType::ConfUpdateMsg,
  ConfMessageType::ConfCancelMsg,
  ConfMessageType::ConfForwardMsg,
  ConfMessageType::ConfAlertMsg,
  ConfMessageType::ConfShareMsg,
  ConfMessageType::DiscussionInstantConfInviteMsg,
  ConfMessageType::ConfChatMsg,
  ConfMessageType::ConfSummaryMsg,
  ConfMessageType::ConfStateMsg,
  ConfMessageType::ConfUploadMsg,
  ConfMessageType::ConfDelDocMsg,
  ConfMessageType::ConfReportMsg
};
const char* _kConfMessageTypeNames[] = {
  "NormalInstantConfInviteMsg",
  "ConfInviteMsg",
  "ConfUpdateMsg",
  "ConfCancelMsg",
  "ConfForwardMsg",
  "ConfAlertMsg",
  "ConfShareMsg",
  "DiscussionInstantConfInviteMsg",
  "ConfChatMsg",
  "ConfSummaryMsg",
  "ConfStateMsg",
  "ConfUploadMsg",
  "ConfDelDocMsg",
  "ConfReportMsg"
};
const std::map<int, const char*> _ConfMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kConfMessageTypeValues, _kConfMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kInstantConfInviteMessageIdValues[] = {
  InstantConfInviteMessageId::IQInvite,
  InstantConfInviteMessageId::IQReceive,
  InstantConfInviteMessageId::IQReject
};
const char* _kInstantConfInviteMessageIdNames[] = {
  "IQInvite",
  "IQReceive",
  "IQReject"
};
const std::map<int, const char*> _InstantConfInviteMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kInstantConfInviteMessageIdValues, _kInstantConfInviteMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfInviteMessageIdValues[] = {
  ConfInviteMessageId::IQInvite,
  ConfInviteMessageId::IQReceive,
  ConfInviteMessageId::IQReject
};
const char* _kConfInviteMessageIdNames[] = {
  "IQInvite",
  "IQReceive",
  "IQReject"
};
const std::map<int, const char*> _ConfInviteMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kConfInviteMessageIdValues, _kConfInviteMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfUpdateMessageIdValues[] = {
  ConfUpdateMessageId::IQInvite,
  ConfUpdateMessageId::IQReceive,
  ConfUpdateMessageId::IQReject
};
const char* _kConfUpdateMessageIdNames[] = {
  "IQInvite",
  "IQReceive",
  "IQReject"
};
const std::map<int, const char*> _ConfUpdateMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kConfUpdateMessageIdValues, _kConfUpdateMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfCancelMessageIdValues[] = {
  ConfCancelMessageId::DefaultId,
  ConfCancelMessageId::RecurrentConfCancel
};
const char* _kConfCancelMessageIdNames[] = {
  "DefaultId",
  "RecurrentConfCancel"
};
const std::map<int, const char*> _ConfCancelMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kConfCancelMessageIdValues, _kConfCancelMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfAlertMessageIdValues[] = {
  ConfAlertMessageId::FifteenMinutesAlert,
  ConfAlertMessageId::ZeroMinutesAlert,
  ConfAlertMessageId::ConfStartAlert,
  ConfAlertMessageId::ConfEndAlert,
  ConfAlertMessageId::PartJoinAlert,
  ConfAlertMessageId::PartQuitAlert
};
const char* _kConfAlertMessageIdNames[] = {
  "FifteenMinutesAlert",
  "ZeroMinutesAlert",
  "ConfStartAlert",
  "ConfEndAlert",
  "PartJoinAlert",
  "PartQuitAlert"
};
const std::map<int, const char*> _ConfAlertMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kConfAlertMessageIdValues, _kConfAlertMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoleTypeValues[] = {
  RoleType::Host,
  RoleType::Speaker,
  RoleType::Part
};
const char* _kRoleTypeNames[] = {
  "Host",
  "Speaker",
  "Part"
};
const std::map<int, const char*> _RoleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRoleTypeValues, _kRoleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfChatMessageIdValues[] = {
  ConfChatMessageId::TextType,
  ConfChatMessageId::MediaType,
  ConfChatMessageId::RevocationMsg
};
const char* _kConfChatMessageIdNames[] = {
  "TextType",
  "MediaType",
  "RevocationMsg"
};
const std::map<int, const char*> _ConfChatMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kConfChatMessageIdValues, _kConfChatMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfSummaryMessageIdValues[] = {
  ConfSummaryMessageId::SummaryCreate,
  ConfSummaryMessageId::SummaryUpdate,
  ConfSummaryMessageId::SummaryForward
};
const char* _kConfSummaryMessageIdNames[] = {
  "SummaryCreate",
  "SummaryUpdate",
  "SummaryForward"
};
const std::map<int, const char*> _ConfSummaryMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kConfSummaryMessageIdValues, _kConfSummaryMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfSummaryStateValues[] = {
  ConfSummaryState::StateNew,
  ConfSummaryState::StatePublish,
  ConfSummaryState::StateDelete
};
const char* _kConfSummaryStateNames[] = {
  "StateNew",
  "StatePublish",
  "StateDelete"
};
const std::map<int, const char*> _ConfSummaryState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kConfSummaryStateValues, _kConfSummaryStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfStateMessageIdValues[] = {
  ConfStateMessageId::callState
};
const char* _kConfStateMessageIdNames[] = {
  "callState"
};
const std::map<int, const char*> _ConfStateMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kConfStateMessageIdValues, _kConfStateMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfFileMessageIdValues[] = {
  ConfFileMessageId::ConfFileUpload
};
const char* _kConfFileMessageIdNames[] = {
  "ConfFileUpload"
};
const std::map<int, const char*> _ConfFileMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kConfFileMessageIdValues, _kConfFileMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCalendarMessageTypeValues[] = {
  CalendarMessageType::CalendarShareType
};
const char* _kCalendarMessageTypeNames[] = {
  "CalendarShareType"
};
const std::map<int, const char*> _CalendarMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kCalendarMessageTypeValues, _kCalendarMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfShareMessageIdValues[] = {
  ConfShareMessageId::ConfShareCreate,
  ConfShareMessageId::ConfShareCancel,
  ConfShareMessageId::ConfShareGrantorDisable,
  ConfShareMessageId::ConfShareGranteeDisable,
  ConfShareMessageId::ConfShareGranteeTransfer,
  ConfShareMessageId::ConfShareGrantorLeave,
  ConfShareMessageId::ConfShareGranteeLeave
};
const char* _kConfShareMessageIdNames[] = {
  "ConfShareCreate",
  "ConfShareCancel",
  "ConfShareGrantorDisable",
  "ConfShareGranteeDisable",
  "ConfShareGranteeTransfer",
  "ConfShareGrantorLeave",
  "ConfShareGranteeLeave"
};
const std::map<int, const char*> _ConfShareMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kConfShareMessageIdValues, _kConfShareMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAudioChatMessageTypeValues[] = {
  AudioChatMessageType::DefaultType,
  AudioChatMessageType::AudioCallRecord,
  AudioChatMessageType::AudioUnfamiliarCallRecord,
  AudioChatMessageType::DiscussionType,
  AudioChatMessageType::GroupType
};
const char* _kAudioChatMessageTypeNames[] = {
  "DefaultType",
  "AudioCallRecord",
  "AudioUnfamiliarCallRecord",
  "DiscussionType",
  "GroupType"
};
const std::map<int, const char*> _AudioChatMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kAudioChatMessageTypeValues, _kAudioChatMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAudioChatMessageIdValues[] = {
  AudioChatMessageId::AudioInvite,
  AudioChatMessageId::AudioReceive,
  AudioChatMessageId::AudioReject,
  AudioChatMessageId::AudioStop,
  AudioChatMessageId::AudioCancelCall,
  AudioChatMessageId::AudioBlockCall,
  AudioChatMessageId::AudioRejectCall,
  AudioChatMessageId::AudioRecentCall
};
const char* _kAudioChatMessageIdNames[] = {
  "AudioInvite",
  "AudioReceive",
  "AudioReject",
  "AudioStop",
  "AudioCancelCall",
  "AudioBlockCall",
  "AudioRejectCall",
  "AudioRecentCall"
};
const std::map<int, const char*> _AudioChatMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kAudioChatMessageIdValues, _kAudioChatMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAudioCallMessageIdValues[] = {
  AudioCallMessageId::AudioBlockCall,
  AudioCallMessageId::AudioRejectCall,
  AudioCallMessageId::AudioRecentCall
};
const char* _kAudioCallMessageIdNames[] = {
  "AudioBlockCall",
  "AudioRejectCall",
  "AudioRecentCall"
};
const std::map<int, const char*> _AudioCallMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAudioCallMessageIdValues, _kAudioCallMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAddressBookMessageTypeValues[] = {
  AddressBookMessageType::CardUpdateMsg,
  AddressBookMessageType::ContacterRelationUpdateMsg,
  AddressBookMessageType::AttentionUpdate
};
const char* _kAddressBookMessageTypeNames[] = {
  "CardUpdateMsg",
  "ContacterRelationUpdateMsg",
  "AttentionUpdate"
};
const std::map<int, const char*> _AddressBookMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAddressBookMessageTypeValues, _kAddressBookMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCardUpdateMessageIdValues[] = {
  CardUpdateMessageId::DefaultId
};
const char* _kCardUpdateMessageIdNames[] = {
  "DefaultId"
};
const std::map<int, const char*> _CardUpdateMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kCardUpdateMessageIdValues, _kCardUpdateMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kContacterRelationUpdateMessageIdValues[] = {
  ContacterRelationUpdateMessageId::ContacterAdd,
  ContacterRelationUpdateMessageId::ContacterDel
};
const char* _kContacterRelationUpdateMessageIdNames[] = {
  "ContacterAdd",
  "ContacterDel"
};
const std::map<int, const char*> _ContacterRelationUpdateMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kContacterRelationUpdateMessageIdValues, _kContacterRelationUpdateMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAttentionUpdateMessageIdValues[] = {
  AttentionUpdateMessageId::AttentionCreate,
  AttentionUpdateMessageId::AttentionCancel
};
const char* _kAttentionUpdateMessageIdNames[] = {
  "AttentionCreate",
  "AttentionCancel"
};
const std::map<int, const char*> _AttentionUpdateMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAttentionUpdateMessageIdValues, _kAttentionUpdateMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTimeNewsMessageTypeValues[] = {
  TimeNewsMessageType::DefaultType
};
const char* _kTimeNewsMessageTypeNames[] = {
  "DefaultType"
};
const std::map<int, const char*> _TimeNewsMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTimeNewsMessageTypeValues, _kTimeNewsMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTimeNewsMessageIdValues[] = {
  TimeNewsMessageId::WB_ATTENTION,
  TimeNewsMessageId::WB_TIMENEWS_PUBLISH,
  TimeNewsMessageId::WB_TIMENEWS_COMMENT,
  TimeNewsMessageId::WB_TIMENEWS_FORWARD,
  TimeNewsMessageId::WB_TIMENEWS_PRAISE
};
const char* _kTimeNewsMessageIdNames[] = {
  "WB_ATTENTION",
  "WB_TIMENEWS_PUBLISH",
  "WB_TIMENEWS_COMMENT",
  "WB_TIMENEWS_FORWARD",
  "WB_TIMENEWS_PRAISE"
};
const std::map<int, const char*> _TimeNewsMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTimeNewsMessageIdValues, _kTimeNewsMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCaseMessageTypeValues[] = {
  CaseMessageType::DefaultType
};
const char* _kCaseMessageTypeNames[] = {
  "DefaultType"
};
const std::map<int, const char*> _CaseMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kCaseMessageTypeValues, _kCaseMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCaseMessageIdValues[] = {
  CaseMessageId::WB_CASE_PUBLISH,
  CaseMessageId::WB_CASE_COMMENT,
  CaseMessageId::WB_CASE_FORWARD,
  CaseMessageId::WB_CASE_PRAISE
};
const char* _kCaseMessageIdNames[] = {
  "WB_CASE_PUBLISH",
  "WB_CASE_COMMENT",
  "WB_CASE_FORWARD",
  "WB_CASE_PRAISE"
};
const std::map<int, const char*> _CaseMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCaseMessageIdValues, _kCaseMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPollMessageTypeValues[] = {
  PollMessageType::DefaultType
};
const char* _kPollMessageTypeNames[] = {
  "DefaultType"
};
const std::map<int, const char*> _PollMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kPollMessageTypeValues, _kPollMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPollMessageIdValues[] = {
  PollMessageId::WB_POLL_PUBLISH,
  PollMessageId::WB_POLL_COMMENT,
  PollMessageId::WB_POLL_FORWARD,
  PollMessageId::WB_POLL_RESPONSE,
  PollMessageId::WB_POLL_PRAISE
};
const char* _kPollMessageIdNames[] = {
  "WB_POLL_PUBLISH",
  "WB_POLL_COMMENT",
  "WB_POLL_FORWARD",
  "WB_POLL_RESPONSE",
  "WB_POLL_PRAISE"
};
const std::map<int, const char*> _PollMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kPollMessageIdValues, _kPollMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRemoteAssistanceMessageTypeValues[] = {
  RemoteAssistanceMessageType::DefaultType
};
const char* _kRemoteAssistanceMessageTypeNames[] = {
  "DefaultType"
};
const std::map<int, const char*> _RemoteAssistanceMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kRemoteAssistanceMessageTypeValues, _kRemoteAssistanceMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRemoteAssistanceMessageIdValues[] = {
  RemoteAssistanceMessageId::RemoteAssistanceInvite,
  RemoteAssistanceMessageId::RemoteAssistanceAccept,
  RemoteAssistanceMessageId::RemoteAssistanceReject,
  RemoteAssistanceMessageId::RemoteAssistanceEnd
};
const char* _kRemoteAssistanceMessageIdNames[] = {
  "RemoteAssistanceInvite",
  "RemoteAssistanceAccept",
  "RemoteAssistanceReject",
  "RemoteAssistanceEnd"
};
const std::map<int, const char*> _RemoteAssistanceMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kRemoteAssistanceMessageIdValues, _kRemoteAssistanceMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSyncMessageTypeValues[] = {
  SyncMessageType::SessionTopType,
  SyncMessageType::AtMessageType,
  SyncMessageType::UserLoginType
};
const char* _kSyncMessageTypeNames[] = {
  "SessionTopType",
  "AtMessageType",
  "UserLoginType"
};
const std::map<int, const char*> _SyncMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSyncMessageTypeValues, _kSyncMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSyncMessageIdValues[] = {
  SyncMessageId::SessionTopSet,
  SyncMessageId::SessionTopUnset,
  SyncMessageId::AtMessageReaded,
  SyncMessageId::UserLoginNotify
};
const char* _kSyncMessageIdNames[] = {
  "SessionTopSet",
  "SessionTopUnset",
  "AtMessageReaded",
  "UserLoginNotify"
};
const std::map<int, const char*> _SyncMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSyncMessageIdValues, _kSyncMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAPIMessageTypeValues[] = {
  APIMessageType::AppMsg,
  APIMessageType::AppAck,
  APIMessageType::AppControl
};
const char* _kAPIMessageTypeNames[] = {
  "AppMsg",
  "AppAck",
  "AppControl"
};
const std::map<int, const char*> _APIMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAPIMessageTypeValues, _kAPIMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAPIMessageIdValues[] = {
  APIMessageId::Text,
  APIMessageId::Image,
  APIMessageId::File,
  APIMessageId::OA,
  APIMessageId::Customized
};
const char* _kAPIMessageIdNames[] = {
  "Text",
  "Image",
  "File",
  "OA",
  "Customized"
};
const std::map<int, const char*> _APIMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kAPIMessageIdValues, _kAPIMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAPITextDetailTypeValues[] = {
  APITextDetailType::TextType,
  APITextDetailType::URLType
};
const char* _kAPITextDetailTypeNames[] = {
  "TextType",
  "URLType"
};
const std::map<int, const char*> _APITextDetailType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAPITextDetailTypeValues, _kAPITextDetailTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAPIFileDetailTypeValues[] = {
  APIFileDetailType::FSType,
  APIFileDetailType::URLType
};
const char* _kAPIFileDetailTypeNames[] = {
  "FSType",
  "URLType"
};
const std::map<int, const char*> _APIFileDetailType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAPIFileDetailTypeValues, _kAPIFileDetailTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAPIAckMessageIdValues[] = {
  APIAckMessageId::AckSent
};
const char* _kAPIAckMessageIdNames[] = {
  "AckSent"
};
const std::map<int, const char*> _APIAckMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kAPIAckMessageIdValues, _kAPIAckMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAPIControlMessageIdValues[] = {
  APIControlMessageId::OAStatusChange,
  APIControlMessageId::AppChangeNotify,
  APIControlMessageId::AppEventChangeNotify
};
const char* _kAPIControlMessageIdNames[] = {
  "OAStatusChange",
  "AppChangeNotify",
  "AppEventChangeNotify"
};
const std::map<int, const char*> _APIControlMessageId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAPIControlMessageIdValues, _kAPIControlMessageIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAPIAppChangeEventTypeValues[] = {
  APIAppChangeEventType::AppChangeEventAdd,
  APIAppChangeEventType::AppChangeEventDisable,
  APIAppChangeEventType::AppChangeEventModify
};
const char* _kAPIAppChangeEventTypeNames[] = {
  "AppChangeEventAdd",
  "AppChangeEventDisable",
  "AppChangeEventModify"
};
const std::map<int, const char*> _APIAppChangeEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAPIAppChangeEventTypeValues, _kAPIAppChangeEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAppIdValues[] = {
  AppId::AppChat,
  AppId::AppHeartbeat,
  AppId::AppPresence,
  AppId::AppNotify,
  AppId::AppFiletransfer,
  AppId::AppCalendar,
  AppId::AppMeeting,
  AppId::AppOrganization,
  AppId::AppCommon_notify,
  AppId::AppAck,
  AppId::AppAudio,
  AppId::AppAddressBook,
  AppId::AppSleep,
  AppId::AppTimeNews,
  AppId::AppCase,
  AppId::AppPoll,
  AppId::AppRemoteAssistance,
  AppId::AppSync,
  AppId::AppAPI
};
const char* _kAppIdNames[] = {
  "AppChat",
  "AppHeartbeat",
  "AppPresence",
  "AppNotify",
  "AppFiletransfer",
  "AppCalendar",
  "AppMeeting",
  "AppOrganization",
  "AppCommon_notify",
  "AppAck",
  "AppAudio",
  "AppAddressBook",
  "AppSleep",
  "AppTimeNews",
  "AppCase",
  "AppPoll",
  "AppRemoteAssistance",
  "AppSync",
  "AppAPI"
};
const std::map<int, const char*> _AppId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(19, _kAppIdValues, _kAppIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


JID::~JID() throw() {
}


void JID::__set_userID(const int32_t val) {
  this->userID = val;
}

void JID::__set_siteID(const int32_t val) {
  this->siteID = val;
}

void JID::__set_resID(const int32_t val) {
  this->resID = val;
}

const char* JID::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t JID::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t JID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userID = false;
  bool isset_siteID = false;
  bool isset_resID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userID);
          isset_userID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->siteID);
          isset_siteID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->resID);
          isset_resID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_siteID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_resID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t JID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("JID");

  xfer += oprot->writeFieldBegin("userID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("siteID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->siteID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resID", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->resID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(JID &a, JID &b) {
  using ::std::swap;
  swap(a.userID, b.userID);
  swap(a.siteID, b.siteID);
  swap(a.resID, b.resID);
}

JID::JID(const JID& other0) {
  userID = other0.userID;
  siteID = other0.siteID;
  resID = other0.resID;
}
JID& JID::operator=(const JID& other1) {
  userID = other1.userID;
  siteID = other1.siteID;
  resID = other1.resID;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const JID& obj) {
  using apache::thrift::to_string;
  out << "JID(";
  out << "userID=" << to_string(obj.userID);
  out << ", " << "siteID=" << to_string(obj.siteID);
  out << ", " << "resID=" << to_string(obj.resID);
  out << ")";
  return out;
}


MessagePresence::~MessagePresence() throw() {
}


void MessagePresence::__set_pri(const int32_t val) {
  this->pri = val;
}

void MessagePresence::__set_show(const std::string& val) {
  this->show = val;
}

void MessagePresence::__set_status(const PresenceType::type val) {
  this->status = val;
}

void MessagePresence::__set_deviceType(const DeviceType::type val) {
  this->deviceType = val;
}

void MessagePresence::__set_oldStatus(const PresenceType::type val) {
  this->oldStatus = val;
__isset.oldStatus = true;
}

const char* MessagePresence::ascii_fingerprint = "CF9E5E4D5EFE26418F209173A2DAE743";
const uint8_t MessagePresence::binary_fingerprint[16] = {0xCF,0x9E,0x5E,0x4D,0x5E,0xFE,0x26,0x41,0x8F,0x20,0x91,0x73,0xA2,0xDA,0xE7,0x43};

uint32_t MessagePresence::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pri);
          this->__isset.pri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->show);
          this->__isset.show = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->status = (PresenceType::type)ecast2;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->deviceType = (DeviceType::type)ecast3;
          this->__isset.deviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->oldStatus = (PresenceType::type)ecast4;
          this->__isset.oldStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessagePresence::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MessagePresence");

  xfer += oprot->writeFieldBegin("pri", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->pri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("show", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->show);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->deviceType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.oldStatus) {
    xfer += oprot->writeFieldBegin("oldStatus", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->oldStatus);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MessagePresence &a, MessagePresence &b) {
  using ::std::swap;
  swap(a.pri, b.pri);
  swap(a.show, b.show);
  swap(a.status, b.status);
  swap(a.deviceType, b.deviceType);
  swap(a.oldStatus, b.oldStatus);
  swap(a.__isset, b.__isset);
}

MessagePresence::MessagePresence(const MessagePresence& other5) {
  pri = other5.pri;
  show = other5.show;
  status = other5.status;
  deviceType = other5.deviceType;
  oldStatus = other5.oldStatus;
  __isset = other5.__isset;
}
MessagePresence& MessagePresence::operator=(const MessagePresence& other6) {
  pri = other6.pri;
  show = other6.show;
  status = other6.status;
  deviceType = other6.deviceType;
  oldStatus = other6.oldStatus;
  __isset = other6.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MessagePresence& obj) {
  using apache::thrift::to_string;
  out << "MessagePresence(";
  out << "pri=" << to_string(obj.pri);
  out << ", " << "show=" << to_string(obj.show);
  out << ", " << "status=" << to_string(obj.status);
  out << ", " << "deviceType=" << to_string(obj.deviceType);
  out << ", " << "oldStatus="; (obj.__isset.oldStatus ? (out << to_string(obj.oldStatus)) : (out << "<null>"));
  out << ")";
  return out;
}


MessagePing::~MessagePing() throw() {
}


void MessagePing::__set_interval(const int32_t val) {
  this->interval = val;
}

void MessagePing::__set_deviceType(const DeviceType::type val) {
  this->deviceType = val;
}

const char* MessagePing::ascii_fingerprint = "20FDD15CF009C5B6C703B6F2C65DFE88";
const uint8_t MessagePing::binary_fingerprint[16] = {0x20,0xFD,0xD1,0x5C,0xF0,0x09,0xC5,0xB6,0xC7,0x03,0xB6,0xF2,0xC6,0x5D,0xFE,0x88};

uint32_t MessagePing::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_interval = false;
  bool isset_deviceType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->interval);
          isset_interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->deviceType = (DeviceType::type)ecast7;
          isset_deviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_interval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_deviceType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePing::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MessagePing");

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->interval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->deviceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MessagePing &a, MessagePing &b) {
  using ::std::swap;
  swap(a.interval, b.interval);
  swap(a.deviceType, b.deviceType);
}

MessagePing::MessagePing(const MessagePing& other8) {
  interval = other8.interval;
  deviceType = other8.deviceType;
}
MessagePing& MessagePing::operator=(const MessagePing& other9) {
  interval = other9.interval;
  deviceType = other9.deviceType;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MessagePing& obj) {
  using apache::thrift::to_string;
  out << "MessagePing(";
  out << "interval=" << to_string(obj.interval);
  out << ", " << "deviceType=" << to_string(obj.deviceType);
  out << ")";
  return out;
}


AckSent::~AckSent() throw() {
}


void AckSent::__set_id(const int32_t val) {
  this->id = val;
}

void AckSent::__set_seq(const int64_t val) {
  this->seq = val;
}

void AckSent::__set_topicId(const int32_t val) {
  this->topicId = val;
}

void AckSent::__set_sessionType(const int8_t val) {
  this->sessionType = val;
__isset.sessionType = true;
}

const char* AckSent::ascii_fingerprint = "BB8A911441DE6005531A6C09C5C25519";
const uint8_t AckSent::binary_fingerprint[16] = {0xBB,0x8A,0x91,0x14,0x41,0xDE,0x60,0x05,0x53,0x1A,0x6C,0x09,0xC5,0xC2,0x55,0x19};

uint32_t AckSent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->topicId);
          this->__isset.topicId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sessionType);
          this->__isset.sessionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AckSent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AckSent");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topicId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->topicId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sessionType) {
    xfer += oprot->writeFieldBegin("sessionType", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->sessionType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AckSent &a, AckSent &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.seq, b.seq);
  swap(a.topicId, b.topicId);
  swap(a.sessionType, b.sessionType);
  swap(a.__isset, b.__isset);
}

AckSent::AckSent(const AckSent& other10) {
  id = other10.id;
  seq = other10.seq;
  topicId = other10.topicId;
  sessionType = other10.sessionType;
  __isset = other10.__isset;
}
AckSent& AckSent::operator=(const AckSent& other11) {
  id = other11.id;
  seq = other11.seq;
  topicId = other11.topicId;
  sessionType = other11.sessionType;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AckSent& obj) {
  using apache::thrift::to_string;
  out << "AckSent(";
  out << "id=" << to_string(obj.id);
  out << ", " << "seq=" << to_string(obj.seq);
  out << ", " << "topicId=" << to_string(obj.topicId);
  out << ", " << "sessionType="; (obj.__isset.sessionType ? (out << to_string(obj.sessionType)) : (out << "<null>"));
  out << ")";
  return out;
}


AckReceived::~AckReceived() throw() {
}


void AckReceived::__set_id(const int32_t val) {
  this->id = val;
}

void AckReceived::__set_seq(const int64_t val) {
  this->seq = val;
}

void AckReceived::__set_sessionType(const int8_t val) {
  this->sessionType = val;
__isset.sessionType = true;
}

const char* AckReceived::ascii_fingerprint = "99F1A051E5A8F08662D0DD2C8654EEDE";
const uint8_t AckReceived::binary_fingerprint[16] = {0x99,0xF1,0xA0,0x51,0xE5,0xA8,0xF0,0x86,0x62,0xD0,0xDD,0x2C,0x86,0x54,0xEE,0xDE};

uint32_t AckReceived::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sessionType);
          this->__isset.sessionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AckReceived::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AckReceived");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->seq);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sessionType) {
    xfer += oprot->writeFieldBegin("sessionType", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->sessionType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AckReceived &a, AckReceived &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.seq, b.seq);
  swap(a.sessionType, b.sessionType);
  swap(a.__isset, b.__isset);
}

AckReceived::AckReceived(const AckReceived& other12) {
  id = other12.id;
  seq = other12.seq;
  sessionType = other12.sessionType;
  __isset = other12.__isset;
}
AckReceived& AckReceived::operator=(const AckReceived& other13) {
  id = other13.id;
  seq = other13.seq;
  sessionType = other13.sessionType;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AckReceived& obj) {
  using apache::thrift::to_string;
  out << "AckReceived(";
  out << "id=" << to_string(obj.id);
  out << ", " << "seq=" << to_string(obj.seq);
  out << ", " << "sessionType="; (obj.__isset.sessionType ? (out << to_string(obj.sessionType)) : (out << "<null>"));
  out << ")";
  return out;
}


AckRead::~AckRead() throw() {
}


void AckRead::__set_id(const int32_t val) {
  this->id = val;
}

void AckRead::__set_seq(const int64_t val) {
  this->seq = val;
}

void AckRead::__set_sessionType(const int8_t val) {
  this->sessionType = val;
__isset.sessionType = true;
}

void AckRead::__set_ackedUser(const JID& val) {
  this->ackedUser = val;
__isset.ackedUser = true;
}

const char* AckRead::ascii_fingerprint = "C8E03121755B582E120E43C877BC564B";
const uint8_t AckRead::binary_fingerprint[16] = {0xC8,0xE0,0x31,0x21,0x75,0x5B,0x58,0x2E,0x12,0x0E,0x43,0xC8,0x77,0xBC,0x56,0x4B};

uint32_t AckRead::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sessionType);
          this->__isset.sessionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ackedUser.read(iprot);
          this->__isset.ackedUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AckRead::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AckRead");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->seq);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sessionType) {
    xfer += oprot->writeFieldBegin("sessionType", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->sessionType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ackedUser) {
    xfer += oprot->writeFieldBegin("ackedUser", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->ackedUser.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AckRead &a, AckRead &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.seq, b.seq);
  swap(a.sessionType, b.sessionType);
  swap(a.ackedUser, b.ackedUser);
  swap(a.__isset, b.__isset);
}

AckRead::AckRead(const AckRead& other14) {
  id = other14.id;
  seq = other14.seq;
  sessionType = other14.sessionType;
  ackedUser = other14.ackedUser;
  __isset = other14.__isset;
}
AckRead& AckRead::operator=(const AckRead& other15) {
  id = other15.id;
  seq = other15.seq;
  sessionType = other15.sessionType;
  ackedUser = other15.ackedUser;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AckRead& obj) {
  using apache::thrift::to_string;
  out << "AckRead(";
  out << "id=" << to_string(obj.id);
  out << ", " << "seq=" << to_string(obj.seq);
  out << ", " << "sessionType="; (obj.__isset.sessionType ? (out << to_string(obj.sessionType)) : (out << "<null>"));
  out << ", " << "ackedUser="; (obj.__isset.ackedUser ? (out << to_string(obj.ackedUser)) : (out << "<null>"));
  out << ")";
  return out;
}


AckPlay::~AckPlay() throw() {
}


void AckPlay::__set_id(const int32_t val) {
  this->id = val;
}

void AckPlay::__set_seq(const int64_t val) {
  this->seq = val;
}

void AckPlay::__set_sessionType(const int8_t val) {
  this->sessionType = val;
__isset.sessionType = true;
}

const char* AckPlay::ascii_fingerprint = "99F1A051E5A8F08662D0DD2C8654EEDE";
const uint8_t AckPlay::binary_fingerprint[16] = {0x99,0xF1,0xA0,0x51,0xE5,0xA8,0xF0,0x86,0x62,0xD0,0xDD,0x2C,0x86,0x54,0xEE,0xDE};

uint32_t AckPlay::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sessionType);
          this->__isset.sessionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AckPlay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AckPlay");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->seq);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sessionType) {
    xfer += oprot->writeFieldBegin("sessionType", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->sessionType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AckPlay &a, AckPlay &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.seq, b.seq);
  swap(a.sessionType, b.sessionType);
  swap(a.__isset, b.__isset);
}

AckPlay::AckPlay(const AckPlay& other16) {
  id = other16.id;
  seq = other16.seq;
  sessionType = other16.sessionType;
  __isset = other16.__isset;
}
AckPlay& AckPlay::operator=(const AckPlay& other17) {
  id = other17.id;
  seq = other17.seq;
  sessionType = other17.sessionType;
  __isset = other17.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AckPlay& obj) {
  using apache::thrift::to_string;
  out << "AckPlay(";
  out << "id=" << to_string(obj.id);
  out << ", " << "seq=" << to_string(obj.seq);
  out << ", " << "sessionType="; (obj.__isset.sessionType ? (out << to_string(obj.sessionType)) : (out << "<null>"));
  out << ")";
  return out;
}


BatchAckRead::~BatchAckRead() throw() {
}


void BatchAckRead::__set_sessionType(const int8_t val) {
  this->sessionType = val;
}

void BatchAckRead::__set_seqList(const std::vector<int64_t> & val) {
  this->seqList = val;
__isset.seqList = true;
}

void BatchAckRead::__set_ackedUser(const JID& val) {
  this->ackedUser = val;
__isset.ackedUser = true;
}

const char* BatchAckRead::ascii_fingerprint = "B640E40DA259FE46BEB7F884B0899275";
const uint8_t BatchAckRead::binary_fingerprint[16] = {0xB6,0x40,0xE4,0x0D,0xA2,0x59,0xFE,0x46,0xBE,0xB7,0xF8,0x84,0xB0,0x89,0x92,0x75};

uint32_t BatchAckRead::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sessionType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sessionType);
          isset_sessionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->seqList.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->seqList.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readI64(this->seqList[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.seqList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ackedUser.read(iprot);
          this->__isset.ackedUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sessionType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BatchAckRead::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchAckRead");

  xfer += oprot->writeFieldBegin("sessionType", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->sessionType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.seqList) {
    xfer += oprot->writeFieldBegin("seqList", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->seqList.size()));
      std::vector<int64_t> ::const_iterator _iter23;
      for (_iter23 = this->seqList.begin(); _iter23 != this->seqList.end(); ++_iter23)
      {
        xfer += oprot->writeI64((*_iter23));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ackedUser) {
    xfer += oprot->writeFieldBegin("ackedUser", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ackedUser.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchAckRead &a, BatchAckRead &b) {
  using ::std::swap;
  swap(a.sessionType, b.sessionType);
  swap(a.seqList, b.seqList);
  swap(a.ackedUser, b.ackedUser);
  swap(a.__isset, b.__isset);
}

BatchAckRead::BatchAckRead(const BatchAckRead& other24) {
  sessionType = other24.sessionType;
  seqList = other24.seqList;
  ackedUser = other24.ackedUser;
  __isset = other24.__isset;
}
BatchAckRead& BatchAckRead::operator=(const BatchAckRead& other25) {
  sessionType = other25.sessionType;
  seqList = other25.seqList;
  ackedUser = other25.ackedUser;
  __isset = other25.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchAckRead& obj) {
  using apache::thrift::to_string;
  out << "BatchAckRead(";
  out << "sessionType=" << to_string(obj.sessionType);
  out << ", " << "seqList="; (obj.__isset.seqList ? (out << to_string(obj.seqList)) : (out << "<null>"));
  out << ", " << "ackedUser="; (obj.__isset.ackedUser ? (out << to_string(obj.ackedUser)) : (out << "<null>"));
  out << ")";
  return out;
}


SleepSet::~SleepSet() throw() {
}


void SleepSet::__set_mode(const SleepMode::type val) {
  this->mode = val;
}

void SleepSet::__set_unreadCount(const int32_t val) {
  this->unreadCount = val;
__isset.unreadCount = true;
}

const char* SleepSet::ascii_fingerprint = "15D34740303C4E50CFFA807ABA20C3EF";
const uint8_t SleepSet::binary_fingerprint[16] = {0x15,0xD3,0x47,0x40,0x30,0x3C,0x4E,0x50,0xCF,0xFA,0x80,0x7A,0xBA,0x20,0xC3,0xEF};

uint32_t SleepSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast26;
          xfer += iprot->readI32(ecast26);
          this->mode = (SleepMode::type)ecast26;
          isset_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unreadCount);
          this->__isset.unreadCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SleepSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SleepSet");

  xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->mode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.unreadCount) {
    xfer += oprot->writeFieldBegin("unreadCount", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->unreadCount);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SleepSet &a, SleepSet &b) {
  using ::std::swap;
  swap(a.mode, b.mode);
  swap(a.unreadCount, b.unreadCount);
  swap(a.__isset, b.__isset);
}

SleepSet::SleepSet(const SleepSet& other27) {
  mode = other27.mode;
  unreadCount = other27.unreadCount;
  __isset = other27.__isset;
}
SleepSet& SleepSet::operator=(const SleepSet& other28) {
  mode = other28.mode;
  unreadCount = other28.unreadCount;
  __isset = other28.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SleepSet& obj) {
  using apache::thrift::to_string;
  out << "SleepSet(";
  out << "mode=" << to_string(obj.mode);
  out << ", " << "unreadCount="; (obj.__isset.unreadCount ? (out << to_string(obj.unreadCount)) : (out << "<null>"));
  out << ")";
  return out;
}


WakeupResult::~WakeupResult() throw() {
}


const char* WakeupResult::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t WakeupResult::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t WakeupResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WakeupResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WakeupResult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WakeupResult &a, WakeupResult &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WakeupResult::WakeupResult(const WakeupResult& other29) {
  (void) other29;
}
WakeupResult& WakeupResult::operator=(const WakeupResult& other30) {
  (void) other30;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WakeupResult& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "WakeupResult(";
  out << ")";
  return out;
}


TextContent::~TextContent() throw() {
}


void TextContent::__set_type(const int8_t val) {
  this->type = val;
}

void TextContent::__set_text(const std::string& val) {
  this->text = val;
}

void TextContent::__set_text_style(const std::string& val) {
  this->text_style = val;
__isset.text_style = true;
}

const char* TextContent::ascii_fingerprint = "99D2C06913B8B06B49EC2862CC8C2FD1";
const uint8_t TextContent::binary_fingerprint[16] = {0x99,0xD2,0xC0,0x69,0x13,0xB8,0xB0,0x6B,0x49,0xEC,0x28,0x62,0xCC,0x8C,0x2F,0xD1};

uint32_t TextContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_text = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          isset_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text_style);
          this->__isset.text_style = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_text)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TextContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TextContent");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.text_style) {
    xfer += oprot->writeFieldBegin("text_style", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->text_style);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TextContent &a, TextContent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.text, b.text);
  swap(a.text_style, b.text_style);
  swap(a.__isset, b.__isset);
}

TextContent::TextContent(const TextContent& other31) {
  type = other31.type;
  text = other31.text;
  text_style = other31.text_style;
  __isset = other31.__isset;
}
TextContent& TextContent::operator=(const TextContent& other32) {
  type = other32.type;
  text = other32.text;
  text_style = other32.text_style;
  __isset = other32.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TextContent& obj) {
  using apache::thrift::to_string;
  out << "TextContent(";
  out << "type=" << to_string(obj.type);
  out << ", " << "text=" << to_string(obj.text);
  out << ", " << "text_style="; (obj.__isset.text_style ? (out << to_string(obj.text_style)) : (out << "<null>"));
  out << ")";
  return out;
}


MediaContent::~MediaContent() throw() {
}


void MediaContent::__set_media_filename(const std::string& val) {
  this->media_filename = val;
__isset.media_filename = true;
}

void MediaContent::__set_media_filesize(const int32_t val) {
  this->media_filesize = val;
}

void MediaContent::__set_media_type(const ChatMediaType::type val) {
  this->media_type = val;
}

void MediaContent::__set_media_down_url(const std::string& val) {
  this->media_down_url = val;
}

void MediaContent::__set_media_thumb(const std::string& val) {
  this->media_thumb = val;
__isset.media_thumb = true;
}

void MediaContent::__set_media_duration(const int32_t val) {
  this->media_duration = val;
__isset.media_duration = true;
}

void MediaContent::__set_operatorId(const int32_t val) {
  this->operatorId = val;
__isset.operatorId = true;
}

void MediaContent::__set_operatorName(const std::string& val) {
  this->operatorName = val;
__isset.operatorName = true;
}

void MediaContent::__set_operatorAvatar(const std::string& val) {
  this->operatorAvatar = val;
__isset.operatorAvatar = true;
}

void MediaContent::__set_media_thumb_url(const std::string& val) {
  this->media_thumb_url = val;
__isset.media_thumb_url = true;
}

const char* MediaContent::ascii_fingerprint = "8FEB58F40B30E798565A633BE8BE296D";
const uint8_t MediaContent::binary_fingerprint[16] = {0x8F,0xEB,0x58,0xF4,0x0B,0x30,0xE7,0x98,0x56,0x5A,0x63,0x3B,0xE8,0xBE,0x29,0x6D};

uint32_t MediaContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_media_filesize = false;
  bool isset_media_type = false;
  bool isset_media_down_url = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->media_filename);
          this->__isset.media_filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->media_filesize);
          isset_media_filesize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast33;
          xfer += iprot->readI32(ecast33);
          this->media_type = (ChatMediaType::type)ecast33;
          isset_media_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->media_down_url);
          isset_media_down_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->media_thumb);
          this->__isset.media_thumb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->media_duration);
          this->__isset.media_duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorId);
          this->__isset.operatorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operatorName);
          this->__isset.operatorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operatorAvatar);
          this->__isset.operatorAvatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->media_thumb_url);
          this->__isset.media_thumb_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_media_filesize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_media_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_media_down_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MediaContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MediaContent");

  if (this->__isset.media_filename) {
    xfer += oprot->writeFieldBegin("media_filename", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->media_filename);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("media_filesize", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->media_filesize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("media_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->media_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("media_down_url", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->media_down_url);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.media_thumb) {
    xfer += oprot->writeFieldBegin("media_thumb", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->media_thumb);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.media_duration) {
    xfer += oprot->writeFieldBegin("media_duration", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->media_duration);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operatorId) {
    xfer += oprot->writeFieldBegin("operatorId", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->operatorId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operatorName) {
    xfer += oprot->writeFieldBegin("operatorName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->operatorName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operatorAvatar) {
    xfer += oprot->writeFieldBegin("operatorAvatar", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->operatorAvatar);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.media_thumb_url) {
    xfer += oprot->writeFieldBegin("media_thumb_url", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->media_thumb_url);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MediaContent &a, MediaContent &b) {
  using ::std::swap;
  swap(a.media_filename, b.media_filename);
  swap(a.media_filesize, b.media_filesize);
  swap(a.media_type, b.media_type);
  swap(a.media_down_url, b.media_down_url);
  swap(a.media_thumb, b.media_thumb);
  swap(a.media_duration, b.media_duration);
  swap(a.operatorId, b.operatorId);
  swap(a.operatorName, b.operatorName);
  swap(a.operatorAvatar, b.operatorAvatar);
  swap(a.media_thumb_url, b.media_thumb_url);
  swap(a.__isset, b.__isset);
}

MediaContent::MediaContent(const MediaContent& other34) {
  media_filename = other34.media_filename;
  media_filesize = other34.media_filesize;
  media_type = other34.media_type;
  media_down_url = other34.media_down_url;
  media_thumb = other34.media_thumb;
  media_duration = other34.media_duration;
  operatorId = other34.operatorId;
  operatorName = other34.operatorName;
  operatorAvatar = other34.operatorAvatar;
  media_thumb_url = other34.media_thumb_url;
  __isset = other34.__isset;
}
MediaContent& MediaContent::operator=(const MediaContent& other35) {
  media_filename = other35.media_filename;
  media_filesize = other35.media_filesize;
  media_type = other35.media_type;
  media_down_url = other35.media_down_url;
  media_thumb = other35.media_thumb;
  media_duration = other35.media_duration;
  operatorId = other35.operatorId;
  operatorName = other35.operatorName;
  operatorAvatar = other35.operatorAvatar;
  media_thumb_url = other35.media_thumb_url;
  __isset = other35.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MediaContent& obj) {
  using apache::thrift::to_string;
  out << "MediaContent(";
  out << "media_filename="; (obj.__isset.media_filename ? (out << to_string(obj.media_filename)) : (out << "<null>"));
  out << ", " << "media_filesize=" << to_string(obj.media_filesize);
  out << ", " << "media_type=" << to_string(obj.media_type);
  out << ", " << "media_down_url=" << to_string(obj.media_down_url);
  out << ", " << "media_thumb="; (obj.__isset.media_thumb ? (out << to_string(obj.media_thumb)) : (out << "<null>"));
  out << ", " << "media_duration="; (obj.__isset.media_duration ? (out << to_string(obj.media_duration)) : (out << "<null>"));
  out << ", " << "operatorId="; (obj.__isset.operatorId ? (out << to_string(obj.operatorId)) : (out << "<null>"));
  out << ", " << "operatorName="; (obj.__isset.operatorName ? (out << to_string(obj.operatorName)) : (out << "<null>"));
  out << ", " << "operatorAvatar="; (obj.__isset.operatorAvatar ? (out << to_string(obj.operatorAvatar)) : (out << "<null>"));
  out << ", " << "media_thumb_url="; (obj.__isset.media_thumb_url ? (out << to_string(obj.media_thumb_url)) : (out << "<null>"));
  out << ")";
  return out;
}


ReportContent::~ReportContent() throw() {
}


void ReportContent::__set_eventId(const int64_t val) {
  this->eventId = val;
__isset.eventId = true;
}

void ReportContent::__set_reportTitle(const std::string& val) {
  this->reportTitle = val;
}

void ReportContent::__set_reportUrl(const std::string& val) {
  this->reportUrl = val;
}

void ReportContent::__set_externalData(const std::string& val) {
  this->externalData = val;
__isset.externalData = true;
}

const char* ReportContent::ascii_fingerprint = "A9B917F98C7E17162035AC5125D079E1";
const uint8_t ReportContent::binary_fingerprint[16] = {0xA9,0xB9,0x17,0xF9,0x8C,0x7E,0x17,0x16,0x20,0x35,0xAC,0x51,0x25,0xD0,0x79,0xE1};

uint32_t ReportContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_reportTitle = false;
  bool isset_reportUrl = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reportTitle);
          isset_reportTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reportUrl);
          isset_reportUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->externalData);
          this->__isset.externalData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_reportTitle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reportUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ReportContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReportContent");

  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("reportTitle", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->reportTitle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->reportUrl);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.externalData) {
    xfer += oprot->writeFieldBegin("externalData", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->externalData);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReportContent &a, ReportContent &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
  swap(a.reportTitle, b.reportTitle);
  swap(a.reportUrl, b.reportUrl);
  swap(a.externalData, b.externalData);
  swap(a.__isset, b.__isset);
}

ReportContent::ReportContent(const ReportContent& other36) {
  eventId = other36.eventId;
  reportTitle = other36.reportTitle;
  reportUrl = other36.reportUrl;
  externalData = other36.externalData;
  __isset = other36.__isset;
}
ReportContent& ReportContent::operator=(const ReportContent& other37) {
  eventId = other37.eventId;
  reportTitle = other37.reportTitle;
  reportUrl = other37.reportUrl;
  externalData = other37.externalData;
  __isset = other37.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReportContent& obj) {
  using apache::thrift::to_string;
  out << "ReportContent(";
  out << "eventId="; (obj.__isset.eventId ? (out << to_string(obj.eventId)) : (out << "<null>"));
  out << ", " << "reportTitle=" << to_string(obj.reportTitle);
  out << ", " << "reportUrl=" << to_string(obj.reportUrl);
  out << ", " << "externalData="; (obj.__isset.externalData ? (out << to_string(obj.externalData)) : (out << "<null>"));
  out << ")";
  return out;
}


GroupMemberInfo::~GroupMemberInfo() throw() {
}


void GroupMemberInfo::__set_memberId(const int32_t val) {
  this->memberId = val;
}

void GroupMemberInfo::__set_join_time(const int32_t val) {
  this->join_time = val;
}

void GroupMemberInfo::__set_join_state(const int8_t val) {
  this->join_state = val;
__isset.join_state = true;
}

void GroupMemberInfo::__set_role(const int8_t val) {
  this->role = val;
__isset.role = true;
}

const char* GroupMemberInfo::ascii_fingerprint = "56F395EEC2B58D28586316ECAB04D7E5";
const uint8_t GroupMemberInfo::binary_fingerprint[16] = {0x56,0xF3,0x95,0xEE,0xC2,0xB5,0x8D,0x28,0x58,0x63,0x16,0xEC,0xAB,0x04,0xD7,0xE5};

uint32_t GroupMemberInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_memberId = false;
  bool isset_join_time = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memberId);
          isset_memberId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->join_time);
          isset_join_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->join_state);
          this->__isset.join_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->role);
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_memberId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_join_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupMemberInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupMemberInfo");

  xfer += oprot->writeFieldBegin("memberId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->memberId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("join_time", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->join_time);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.join_state) {
    xfer += oprot->writeFieldBegin("join_state", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->join_state);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role) {
    xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->role);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupMemberInfo &a, GroupMemberInfo &b) {
  using ::std::swap;
  swap(a.memberId, b.memberId);
  swap(a.join_time, b.join_time);
  swap(a.join_state, b.join_state);
  swap(a.role, b.role);
  swap(a.__isset, b.__isset);
}

GroupMemberInfo::GroupMemberInfo(const GroupMemberInfo& other38) {
  memberId = other38.memberId;
  join_time = other38.join_time;
  join_state = other38.join_state;
  role = other38.role;
  __isset = other38.__isset;
}
GroupMemberInfo& GroupMemberInfo::operator=(const GroupMemberInfo& other39) {
  memberId = other39.memberId;
  join_time = other39.join_time;
  join_state = other39.join_state;
  role = other39.role;
  __isset = other39.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupMemberInfo& obj) {
  using apache::thrift::to_string;
  out << "GroupMemberInfo(";
  out << "memberId=" << to_string(obj.memberId);
  out << ", " << "join_time=" << to_string(obj.join_time);
  out << ", " << "join_state="; (obj.__isset.join_state ? (out << to_string(obj.join_state)) : (out << "<null>"));
  out << ", " << "role="; (obj.__isset.role ? (out << to_string(obj.role)) : (out << "<null>"));
  out << ")";
  return out;
}


GroupMemberAddContent::~GroupMemberAddContent() throw() {
}


void GroupMemberAddContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void GroupMemberAddContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

void GroupMemberAddContent::__set_memberList(const std::vector<GroupMemberInfo> & val) {
  this->memberList = val;
}

void GroupMemberAddContent::__set_avatar(const std::string& val) {
  this->avatar = val;
__isset.avatar = true;
}

void GroupMemberAddContent::__set_group_name(const std::string& val) {
  this->group_name = val;
__isset.group_name = true;
}

void GroupMemberAddContent::__set_name_pinyin(const std::string& val) {
  this->name_pinyin = val;
__isset.name_pinyin = true;
}

void GroupMemberAddContent::__set_name_flag(const int8_t val) {
  this->name_flag = val;
__isset.name_flag = true;
}

const char* GroupMemberAddContent::ascii_fingerprint = "60C9ECF73060D44823B5EB306F803DAF";
const uint8_t GroupMemberAddContent::binary_fingerprint[16] = {0x60,0xC9,0xEC,0xF7,0x30,0x60,0xD4,0x48,0x23,0xB5,0xEB,0x30,0x6F,0x80,0x3D,0xAF};

uint32_t GroupMemberAddContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_groupid = false;
  bool isset_memberList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->memberList.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->memberList.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += this->memberList[_i44].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_memberList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar);
          this->__isset.avatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group_name);
          this->__isset.group_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_pinyin);
          this->__isset.name_pinyin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->name_flag);
          this->__isset.name_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_memberList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupMemberAddContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupMemberAddContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->memberList.size()));
    std::vector<GroupMemberInfo> ::const_iterator _iter45;
    for (_iter45 = this->memberList.begin(); _iter45 != this->memberList.end(); ++_iter45)
    {
      xfer += (*_iter45).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.avatar) {
    xfer += oprot->writeFieldBegin("avatar", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->avatar);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_name) {
    xfer += oprot->writeFieldBegin("group_name", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->group_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name_pinyin) {
    xfer += oprot->writeFieldBegin("name_pinyin", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->name_pinyin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name_flag) {
    xfer += oprot->writeFieldBegin("name_flag", ::apache::thrift::protocol::T_BYTE, 7);
    xfer += oprot->writeByte(this->name_flag);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupMemberAddContent &a, GroupMemberAddContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.groupid, b.groupid);
  swap(a.memberList, b.memberList);
  swap(a.avatar, b.avatar);
  swap(a.group_name, b.group_name);
  swap(a.name_pinyin, b.name_pinyin);
  swap(a.name_flag, b.name_flag);
  swap(a.__isset, b.__isset);
}

GroupMemberAddContent::GroupMemberAddContent(const GroupMemberAddContent& other46) {
  operatorid = other46.operatorid;
  groupid = other46.groupid;
  memberList = other46.memberList;
  avatar = other46.avatar;
  group_name = other46.group_name;
  name_pinyin = other46.name_pinyin;
  name_flag = other46.name_flag;
  __isset = other46.__isset;
}
GroupMemberAddContent& GroupMemberAddContent::operator=(const GroupMemberAddContent& other47) {
  operatorid = other47.operatorid;
  groupid = other47.groupid;
  memberList = other47.memberList;
  avatar = other47.avatar;
  group_name = other47.group_name;
  name_pinyin = other47.name_pinyin;
  name_flag = other47.name_flag;
  __isset = other47.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupMemberAddContent& obj) {
  using apache::thrift::to_string;
  out << "GroupMemberAddContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "groupid=" << to_string(obj.groupid);
  out << ", " << "memberList=" << to_string(obj.memberList);
  out << ", " << "avatar="; (obj.__isset.avatar ? (out << to_string(obj.avatar)) : (out << "<null>"));
  out << ", " << "group_name="; (obj.__isset.group_name ? (out << to_string(obj.group_name)) : (out << "<null>"));
  out << ", " << "name_pinyin="; (obj.__isset.name_pinyin ? (out << to_string(obj.name_pinyin)) : (out << "<null>"));
  out << ", " << "name_flag="; (obj.__isset.name_flag ? (out << to_string(obj.name_flag)) : (out << "<null>"));
  out << ")";
  return out;
}


GroupMemberDelContent::~GroupMemberDelContent() throw() {
}


void GroupMemberDelContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void GroupMemberDelContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

void GroupMemberDelContent::__set_memberId(const int32_t val) {
  this->memberId = val;
}

void GroupMemberDelContent::__set_avatar(const std::string& val) {
  this->avatar = val;
__isset.avatar = true;
}

void GroupMemberDelContent::__set_group_name(const std::string& val) {
  this->group_name = val;
__isset.group_name = true;
}

void GroupMemberDelContent::__set_name_pinyin(const std::string& val) {
  this->name_pinyin = val;
__isset.name_pinyin = true;
}

void GroupMemberDelContent::__set_name_flag(const int8_t val) {
  this->name_flag = val;
__isset.name_flag = true;
}

const char* GroupMemberDelContent::ascii_fingerprint = "15AFBAC64FB888980F5FB466D75C6E62";
const uint8_t GroupMemberDelContent::binary_fingerprint[16] = {0x15,0xAF,0xBA,0xC6,0x4F,0xB8,0x88,0x98,0x0F,0x5F,0xB4,0x66,0xD7,0x5C,0x6E,0x62};

uint32_t GroupMemberDelContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_groupid = false;
  bool isset_memberId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memberId);
          isset_memberId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar);
          this->__isset.avatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group_name);
          this->__isset.group_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_pinyin);
          this->__isset.name_pinyin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->name_flag);
          this->__isset.name_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_memberId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupMemberDelContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupMemberDelContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->memberId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.avatar) {
    xfer += oprot->writeFieldBegin("avatar", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->avatar);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_name) {
    xfer += oprot->writeFieldBegin("group_name", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->group_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name_pinyin) {
    xfer += oprot->writeFieldBegin("name_pinyin", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->name_pinyin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name_flag) {
    xfer += oprot->writeFieldBegin("name_flag", ::apache::thrift::protocol::T_BYTE, 7);
    xfer += oprot->writeByte(this->name_flag);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupMemberDelContent &a, GroupMemberDelContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.groupid, b.groupid);
  swap(a.memberId, b.memberId);
  swap(a.avatar, b.avatar);
  swap(a.group_name, b.group_name);
  swap(a.name_pinyin, b.name_pinyin);
  swap(a.name_flag, b.name_flag);
  swap(a.__isset, b.__isset);
}

GroupMemberDelContent::GroupMemberDelContent(const GroupMemberDelContent& other48) {
  operatorid = other48.operatorid;
  groupid = other48.groupid;
  memberId = other48.memberId;
  avatar = other48.avatar;
  group_name = other48.group_name;
  name_pinyin = other48.name_pinyin;
  name_flag = other48.name_flag;
  __isset = other48.__isset;
}
GroupMemberDelContent& GroupMemberDelContent::operator=(const GroupMemberDelContent& other49) {
  operatorid = other49.operatorid;
  groupid = other49.groupid;
  memberId = other49.memberId;
  avatar = other49.avatar;
  group_name = other49.group_name;
  name_pinyin = other49.name_pinyin;
  name_flag = other49.name_flag;
  __isset = other49.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupMemberDelContent& obj) {
  using apache::thrift::to_string;
  out << "GroupMemberDelContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "groupid=" << to_string(obj.groupid);
  out << ", " << "memberId=" << to_string(obj.memberId);
  out << ", " << "avatar="; (obj.__isset.avatar ? (out << to_string(obj.avatar)) : (out << "<null>"));
  out << ", " << "group_name="; (obj.__isset.group_name ? (out << to_string(obj.group_name)) : (out << "<null>"));
  out << ", " << "name_pinyin="; (obj.__isset.name_pinyin ? (out << to_string(obj.name_pinyin)) : (out << "<null>"));
  out << ", " << "name_flag="; (obj.__isset.name_flag ? (out << to_string(obj.name_flag)) : (out << "<null>"));
  out << ")";
  return out;
}


GroupNameUpdateContent::~GroupNameUpdateContent() throw() {
}


void GroupNameUpdateContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void GroupNameUpdateContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

void GroupNameUpdateContent::__set_group_name(const std::string& val) {
  this->group_name = val;
}

void GroupNameUpdateContent::__set_name_pinyin(const std::string& val) {
  this->name_pinyin = val;
}

void GroupNameUpdateContent::__set_name_flag(const int8_t val) {
  this->name_flag = val;
}

const char* GroupNameUpdateContent::ascii_fingerprint = "CCAAFC10DC3C0859CBBCF4BBFE49DA1B";
const uint8_t GroupNameUpdateContent::binary_fingerprint[16] = {0xCC,0xAA,0xFC,0x10,0xDC,0x3C,0x08,0x59,0xCB,0xBC,0xF4,0xBB,0xFE,0x49,0xDA,0x1B};

uint32_t GroupNameUpdateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_groupid = false;
  bool isset_group_name = false;
  bool isset_name_pinyin = false;
  bool isset_name_flag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group_name);
          isset_group_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_pinyin);
          isset_name_pinyin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->name_flag);
          isset_name_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_group_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_pinyin)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_flag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupNameUpdateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupNameUpdateContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->group_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_pinyin", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name_pinyin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_flag", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->name_flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupNameUpdateContent &a, GroupNameUpdateContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.groupid, b.groupid);
  swap(a.group_name, b.group_name);
  swap(a.name_pinyin, b.name_pinyin);
  swap(a.name_flag, b.name_flag);
}

GroupNameUpdateContent::GroupNameUpdateContent(const GroupNameUpdateContent& other50) {
  operatorid = other50.operatorid;
  groupid = other50.groupid;
  group_name = other50.group_name;
  name_pinyin = other50.name_pinyin;
  name_flag = other50.name_flag;
}
GroupNameUpdateContent& GroupNameUpdateContent::operator=(const GroupNameUpdateContent& other51) {
  operatorid = other51.operatorid;
  groupid = other51.groupid;
  group_name = other51.group_name;
  name_pinyin = other51.name_pinyin;
  name_flag = other51.name_flag;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupNameUpdateContent& obj) {
  using apache::thrift::to_string;
  out << "GroupNameUpdateContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "groupid=" << to_string(obj.groupid);
  out << ", " << "group_name=" << to_string(obj.group_name);
  out << ", " << "name_pinyin=" << to_string(obj.name_pinyin);
  out << ", " << "name_flag=" << to_string(obj.name_flag);
  out << ")";
  return out;
}


GroupCreateContent::~GroupCreateContent() throw() {
}


void GroupCreateContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void GroupCreateContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

void GroupCreateContent::__set_memberList(const std::vector<GroupMemberInfo> & val) {
  this->memberList = val;
}

void GroupCreateContent::__set_avatar(const std::string& val) {
  this->avatar = val;
__isset.avatar = true;
}

void GroupCreateContent::__set_group_name(const std::string& val) {
  this->group_name = val;
__isset.group_name = true;
}

void GroupCreateContent::__set_name_pinyin(const std::string& val) {
  this->name_pinyin = val;
__isset.name_pinyin = true;
}

void GroupCreateContent::__set_create_time(const int32_t val) {
  this->create_time = val;
}

void GroupCreateContent::__set_siteID(const int32_t val) {
  this->siteID = val;
}

void GroupCreateContent::__set_name_flag(const int8_t val) {
  this->name_flag = val;
}

void GroupCreateContent::__set_group_type(const int8_t val) {
  this->group_type = val;
__isset.group_type = true;
}

void GroupCreateContent::__set_memberCount(const int32_t val) {
  this->memberCount = val;
__isset.memberCount = true;
}

void GroupCreateContent::__set_group_status(const int32_t val) {
  this->group_status = val;
__isset.group_status = true;
}

void GroupCreateContent::__set_status_info(const std::string& val) {
  this->status_info = val;
__isset.status_info = true;
}

void GroupCreateContent::__set_cloud_library_info(const std::string& val) {
  this->cloud_library_info = val;
__isset.cloud_library_info = true;
}

void GroupCreateContent::__set_display_scope(const int32_t val) {
  this->display_scope = val;
__isset.display_scope = true;
}

const char* GroupCreateContent::ascii_fingerprint = "4CFF539C9B6120C54253046AEFE02124";
const uint8_t GroupCreateContent::binary_fingerprint[16] = {0x4C,0xFF,0x53,0x9C,0x9B,0x61,0x20,0xC5,0x42,0x53,0x04,0x6A,0xEF,0xE0,0x21,0x24};

uint32_t GroupCreateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_groupid = false;
  bool isset_memberList = false;
  bool isset_create_time = false;
  bool isset_siteID = false;
  bool isset_name_flag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->memberList.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _etype55;
            xfer += iprot->readListBegin(_etype55, _size52);
            this->memberList.resize(_size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              xfer += this->memberList[_i56].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_memberList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar);
          this->__isset.avatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group_name);
          this->__isset.group_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_pinyin);
          this->__isset.name_pinyin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->create_time);
          isset_create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->siteID);
          isset_siteID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->name_flag);
          isset_name_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->group_type);
          this->__isset.group_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memberCount);
          this->__isset.memberCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group_status);
          this->__isset.group_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status_info);
          this->__isset.status_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cloud_library_info);
          this->__isset.cloud_library_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->display_scope);
          this->__isset.display_scope = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_memberList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_create_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_siteID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_flag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupCreateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupCreateContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->memberList.size()));
    std::vector<GroupMemberInfo> ::const_iterator _iter57;
    for (_iter57 = this->memberList.begin(); _iter57 != this->memberList.end(); ++_iter57)
    {
      xfer += (*_iter57).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.avatar) {
    xfer += oprot->writeFieldBegin("avatar", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->avatar);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_name) {
    xfer += oprot->writeFieldBegin("group_name", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->group_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name_pinyin) {
    xfer += oprot->writeFieldBegin("name_pinyin", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->name_pinyin);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("siteID", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->siteID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_flag", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->name_flag);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.group_type) {
    xfer += oprot->writeFieldBegin("group_type", ::apache::thrift::protocol::T_BYTE, 10);
    xfer += oprot->writeByte(this->group_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.memberCount) {
    xfer += oprot->writeFieldBegin("memberCount", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->memberCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_status) {
    xfer += oprot->writeFieldBegin("group_status", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->group_status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status_info) {
    xfer += oprot->writeFieldBegin("status_info", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->status_info);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cloud_library_info) {
    xfer += oprot->writeFieldBegin("cloud_library_info", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->cloud_library_info);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.display_scope) {
    xfer += oprot->writeFieldBegin("display_scope", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->display_scope);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupCreateContent &a, GroupCreateContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.groupid, b.groupid);
  swap(a.memberList, b.memberList);
  swap(a.avatar, b.avatar);
  swap(a.group_name, b.group_name);
  swap(a.name_pinyin, b.name_pinyin);
  swap(a.create_time, b.create_time);
  swap(a.siteID, b.siteID);
  swap(a.name_flag, b.name_flag);
  swap(a.group_type, b.group_type);
  swap(a.memberCount, b.memberCount);
  swap(a.group_status, b.group_status);
  swap(a.status_info, b.status_info);
  swap(a.cloud_library_info, b.cloud_library_info);
  swap(a.display_scope, b.display_scope);
  swap(a.__isset, b.__isset);
}

GroupCreateContent::GroupCreateContent(const GroupCreateContent& other58) {
  operatorid = other58.operatorid;
  groupid = other58.groupid;
  memberList = other58.memberList;
  avatar = other58.avatar;
  group_name = other58.group_name;
  name_pinyin = other58.name_pinyin;
  create_time = other58.create_time;
  siteID = other58.siteID;
  name_flag = other58.name_flag;
  group_type = other58.group_type;
  memberCount = other58.memberCount;
  group_status = other58.group_status;
  status_info = other58.status_info;
  cloud_library_info = other58.cloud_library_info;
  display_scope = other58.display_scope;
  __isset = other58.__isset;
}
GroupCreateContent& GroupCreateContent::operator=(const GroupCreateContent& other59) {
  operatorid = other59.operatorid;
  groupid = other59.groupid;
  memberList = other59.memberList;
  avatar = other59.avatar;
  group_name = other59.group_name;
  name_pinyin = other59.name_pinyin;
  create_time = other59.create_time;
  siteID = other59.siteID;
  name_flag = other59.name_flag;
  group_type = other59.group_type;
  memberCount = other59.memberCount;
  group_status = other59.group_status;
  status_info = other59.status_info;
  cloud_library_info = other59.cloud_library_info;
  display_scope = other59.display_scope;
  __isset = other59.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupCreateContent& obj) {
  using apache::thrift::to_string;
  out << "GroupCreateContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "groupid=" << to_string(obj.groupid);
  out << ", " << "memberList=" << to_string(obj.memberList);
  out << ", " << "avatar="; (obj.__isset.avatar ? (out << to_string(obj.avatar)) : (out << "<null>"));
  out << ", " << "group_name="; (obj.__isset.group_name ? (out << to_string(obj.group_name)) : (out << "<null>"));
  out << ", " << "name_pinyin="; (obj.__isset.name_pinyin ? (out << to_string(obj.name_pinyin)) : (out << "<null>"));
  out << ", " << "create_time=" << to_string(obj.create_time);
  out << ", " << "siteID=" << to_string(obj.siteID);
  out << ", " << "name_flag=" << to_string(obj.name_flag);
  out << ", " << "group_type="; (obj.__isset.group_type ? (out << to_string(obj.group_type)) : (out << "<null>"));
  out << ", " << "memberCount="; (obj.__isset.memberCount ? (out << to_string(obj.memberCount)) : (out << "<null>"));
  out << ", " << "group_status="; (obj.__isset.group_status ? (out << to_string(obj.group_status)) : (out << "<null>"));
  out << ", " << "status_info="; (obj.__isset.status_info ? (out << to_string(obj.status_info)) : (out << "<null>"));
  out << ", " << "cloud_library_info="; (obj.__isset.cloud_library_info ? (out << to_string(obj.cloud_library_info)) : (out << "<null>"));
  out << ", " << "display_scope="; (obj.__isset.display_scope ? (out << to_string(obj.display_scope)) : (out << "<null>"));
  out << ")";
  return out;
}


GroupMemberKickContent::~GroupMemberKickContent() throw() {
}


void GroupMemberKickContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void GroupMemberKickContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

void GroupMemberKickContent::__set_memberList(const std::vector<int32_t> & val) {
  this->memberList = val;
}

void GroupMemberKickContent::__set_avatar(const std::string& val) {
  this->avatar = val;
__isset.avatar = true;
}

void GroupMemberKickContent::__set_group_name(const std::string& val) {
  this->group_name = val;
__isset.group_name = true;
}

void GroupMemberKickContent::__set_name_pinyin(const std::string& val) {
  this->name_pinyin = val;
__isset.name_pinyin = true;
}

void GroupMemberKickContent::__set_name_flag(const int8_t val) {
  this->name_flag = val;
__isset.name_flag = true;
}

const char* GroupMemberKickContent::ascii_fingerprint = "27020854A47AD185BBE288F5433E61F0";
const uint8_t GroupMemberKickContent::binary_fingerprint[16] = {0x27,0x02,0x08,0x54,0xA4,0x7A,0xD1,0x85,0xBB,0xE2,0x88,0xF5,0x43,0x3E,0x61,0xF0};

uint32_t GroupMemberKickContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_groupid = false;
  bool isset_memberList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->memberList.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->memberList.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += iprot->readI32(this->memberList[_i64]);
            }
            xfer += iprot->readListEnd();
          }
          isset_memberList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar);
          this->__isset.avatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group_name);
          this->__isset.group_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_pinyin);
          this->__isset.name_pinyin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->name_flag);
          this->__isset.name_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_memberList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupMemberKickContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupMemberKickContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->memberList.size()));
    std::vector<int32_t> ::const_iterator _iter65;
    for (_iter65 = this->memberList.begin(); _iter65 != this->memberList.end(); ++_iter65)
    {
      xfer += oprot->writeI32((*_iter65));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.avatar) {
    xfer += oprot->writeFieldBegin("avatar", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->avatar);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_name) {
    xfer += oprot->writeFieldBegin("group_name", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->group_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name_pinyin) {
    xfer += oprot->writeFieldBegin("name_pinyin", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->name_pinyin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name_flag) {
    xfer += oprot->writeFieldBegin("name_flag", ::apache::thrift::protocol::T_BYTE, 7);
    xfer += oprot->writeByte(this->name_flag);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupMemberKickContent &a, GroupMemberKickContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.groupid, b.groupid);
  swap(a.memberList, b.memberList);
  swap(a.avatar, b.avatar);
  swap(a.group_name, b.group_name);
  swap(a.name_pinyin, b.name_pinyin);
  swap(a.name_flag, b.name_flag);
  swap(a.__isset, b.__isset);
}

GroupMemberKickContent::GroupMemberKickContent(const GroupMemberKickContent& other66) {
  operatorid = other66.operatorid;
  groupid = other66.groupid;
  memberList = other66.memberList;
  avatar = other66.avatar;
  group_name = other66.group_name;
  name_pinyin = other66.name_pinyin;
  name_flag = other66.name_flag;
  __isset = other66.__isset;
}
GroupMemberKickContent& GroupMemberKickContent::operator=(const GroupMemberKickContent& other67) {
  operatorid = other67.operatorid;
  groupid = other67.groupid;
  memberList = other67.memberList;
  avatar = other67.avatar;
  group_name = other67.group_name;
  name_pinyin = other67.name_pinyin;
  name_flag = other67.name_flag;
  __isset = other67.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupMemberKickContent& obj) {
  using apache::thrift::to_string;
  out << "GroupMemberKickContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "groupid=" << to_string(obj.groupid);
  out << ", " << "memberList=" << to_string(obj.memberList);
  out << ", " << "avatar="; (obj.__isset.avatar ? (out << to_string(obj.avatar)) : (out << "<null>"));
  out << ", " << "group_name="; (obj.__isset.group_name ? (out << to_string(obj.group_name)) : (out << "<null>"));
  out << ", " << "name_pinyin="; (obj.__isset.name_pinyin ? (out << to_string(obj.name_pinyin)) : (out << "<null>"));
  out << ", " << "name_flag="; (obj.__isset.name_flag ? (out << to_string(obj.name_flag)) : (out << "<null>"));
  out << ")";
  return out;
}


GroupAvatarUpdateContent::~GroupAvatarUpdateContent() throw() {
}


void GroupAvatarUpdateContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void GroupAvatarUpdateContent::__set_avatar(const std::string& val) {
  this->avatar = val;
}

void GroupAvatarUpdateContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

const char* GroupAvatarUpdateContent::ascii_fingerprint = "52C6DAB6CF51AF617111F6D3964C6503";
const uint8_t GroupAvatarUpdateContent::binary_fingerprint[16] = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};

uint32_t GroupAvatarUpdateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_avatar = false;
  bool isset_groupid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar);
          isset_avatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_avatar)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupAvatarUpdateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupAvatarUpdateContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatar", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->avatar);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupAvatarUpdateContent &a, GroupAvatarUpdateContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.avatar, b.avatar);
  swap(a.groupid, b.groupid);
}

GroupAvatarUpdateContent::GroupAvatarUpdateContent(const GroupAvatarUpdateContent& other68) {
  operatorid = other68.operatorid;
  avatar = other68.avatar;
  groupid = other68.groupid;
}
GroupAvatarUpdateContent& GroupAvatarUpdateContent::operator=(const GroupAvatarUpdateContent& other69) {
  operatorid = other69.operatorid;
  avatar = other69.avatar;
  groupid = other69.groupid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupAvatarUpdateContent& obj) {
  using apache::thrift::to_string;
  out << "GroupAvatarUpdateContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "avatar=" << to_string(obj.avatar);
  out << ", " << "groupid=" << to_string(obj.groupid);
  out << ")";
  return out;
}


GroupStateUpdateContent::~GroupStateUpdateContent() throw() {
}


void GroupStateUpdateContent::__set_group_status(const int32_t val) {
  this->group_status = val;
}

void GroupStateUpdateContent::__set_status_info(const std::string& val) {
  this->status_info = val;
__isset.status_info = true;
}

const char* GroupStateUpdateContent::ascii_fingerprint = "96705E9A3FD7B072319C71653E0DBB90";
const uint8_t GroupStateUpdateContent::binary_fingerprint[16] = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

uint32_t GroupStateUpdateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_group_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group_status);
          isset_group_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status_info);
          this->__isset.status_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_group_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupStateUpdateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupStateUpdateContent");

  xfer += oprot->writeFieldBegin("group_status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->group_status);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status_info) {
    xfer += oprot->writeFieldBegin("status_info", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->status_info);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupStateUpdateContent &a, GroupStateUpdateContent &b) {
  using ::std::swap;
  swap(a.group_status, b.group_status);
  swap(a.status_info, b.status_info);
  swap(a.__isset, b.__isset);
}

GroupStateUpdateContent::GroupStateUpdateContent(const GroupStateUpdateContent& other70) {
  group_status = other70.group_status;
  status_info = other70.status_info;
  __isset = other70.__isset;
}
GroupStateUpdateContent& GroupStateUpdateContent::operator=(const GroupStateUpdateContent& other71) {
  group_status = other71.group_status;
  status_info = other71.status_info;
  __isset = other71.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupStateUpdateContent& obj) {
  using apache::thrift::to_string;
  out << "GroupStateUpdateContent(";
  out << "group_status=" << to_string(obj.group_status);
  out << ", " << "status_info="; (obj.__isset.status_info ? (out << to_string(obj.status_info)) : (out << "<null>"));
  out << ")";
  return out;
}


GroupTopContent::~GroupTopContent() throw() {
}


void GroupTopContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void GroupTopContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

void GroupTopContent::__set_isTop(const int8_t val) {
  this->isTop = val;
}

const char* GroupTopContent::ascii_fingerprint = "7F794FC8247C6D0546A5F3441CCCD6B1";
const uint8_t GroupTopContent::binary_fingerprint[16] = {0x7F,0x79,0x4F,0xC8,0x24,0x7C,0x6D,0x05,0x46,0xA5,0xF3,0x44,0x1C,0xCC,0xD6,0xB1};

uint32_t GroupTopContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_groupid = false;
  bool isset_isTop = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->isTop);
          isset_isTop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isTop)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupTopContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupTopContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isTop", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->isTop);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupTopContent &a, GroupTopContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.groupid, b.groupid);
  swap(a.isTop, b.isTop);
}

GroupTopContent::GroupTopContent(const GroupTopContent& other72) {
  operatorid = other72.operatorid;
  groupid = other72.groupid;
  isTop = other72.isTop;
}
GroupTopContent& GroupTopContent::operator=(const GroupTopContent& other73) {
  operatorid = other73.operatorid;
  groupid = other73.groupid;
  isTop = other73.isTop;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupTopContent& obj) {
  using apache::thrift::to_string;
  out << "GroupTopContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "groupid=" << to_string(obj.groupid);
  out << ", " << "isTop=" << to_string(obj.isTop);
  out << ")";
  return out;
}


GroupScopeContent::~GroupScopeContent() throw() {
}


void GroupScopeContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void GroupScopeContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

void GroupScopeContent::__set_display_scope(const int32_t val) {
  this->display_scope = val;
}

const char* GroupScopeContent::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t GroupScopeContent::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t GroupScopeContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_groupid = false;
  bool isset_display_scope = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->display_scope);
          isset_display_scope = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display_scope)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupScopeContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupScopeContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display_scope", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->display_scope);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupScopeContent &a, GroupScopeContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.groupid, b.groupid);
  swap(a.display_scope, b.display_scope);
}

GroupScopeContent::GroupScopeContent(const GroupScopeContent& other74) {
  operatorid = other74.operatorid;
  groupid = other74.groupid;
  display_scope = other74.display_scope;
}
GroupScopeContent& GroupScopeContent::operator=(const GroupScopeContent& other75) {
  operatorid = other75.operatorid;
  groupid = other75.groupid;
  display_scope = other75.display_scope;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupScopeContent& obj) {
  using apache::thrift::to_string;
  out << "GroupScopeContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "groupid=" << to_string(obj.groupid);
  out << ", " << "display_scope=" << to_string(obj.display_scope);
  out << ")";
  return out;
}


SummaryCreateContent::~SummaryCreateContent() throw() {
}


void SummaryCreateContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void SummaryCreateContent::__set_summary_name(const std::string& val) {
  this->summary_name = val;
}

void SummaryCreateContent::__set_down_url(const std::string& val) {
  this->down_url = val;
__isset.down_url = true;
}

void SummaryCreateContent::__set_size(const int32_t val) {
  this->size = val;
__isset.size = true;
}

void SummaryCreateContent::__set_contentId(const int64_t val) {
  this->contentId = val;
__isset.contentId = true;
}

const char* SummaryCreateContent::ascii_fingerprint = "01895D5D829E0F7E2747FE573FBF99F9";
const uint8_t SummaryCreateContent::binary_fingerprint[16] = {0x01,0x89,0x5D,0x5D,0x82,0x9E,0x0F,0x7E,0x27,0x47,0xFE,0x57,0x3F,0xBF,0x99,0xF9};

uint32_t SummaryCreateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_summary_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->summary_name);
          isset_summary_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->down_url);
          this->__isset.down_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          this->__isset.contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_summary_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SummaryCreateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SummaryCreateContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("summary_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->summary_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.down_url) {
    xfer += oprot->writeFieldBegin("down_url", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->down_url);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentId) {
    xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->contentId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SummaryCreateContent &a, SummaryCreateContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.summary_name, b.summary_name);
  swap(a.down_url, b.down_url);
  swap(a.size, b.size);
  swap(a.contentId, b.contentId);
  swap(a.__isset, b.__isset);
}

SummaryCreateContent::SummaryCreateContent(const SummaryCreateContent& other76) {
  operatorid = other76.operatorid;
  summary_name = other76.summary_name;
  down_url = other76.down_url;
  size = other76.size;
  contentId = other76.contentId;
  __isset = other76.__isset;
}
SummaryCreateContent& SummaryCreateContent::operator=(const SummaryCreateContent& other77) {
  operatorid = other77.operatorid;
  summary_name = other77.summary_name;
  down_url = other77.down_url;
  size = other77.size;
  contentId = other77.contentId;
  __isset = other77.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SummaryCreateContent& obj) {
  using apache::thrift::to_string;
  out << "SummaryCreateContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "summary_name=" << to_string(obj.summary_name);
  out << ", " << "down_url="; (obj.__isset.down_url ? (out << to_string(obj.down_url)) : (out << "<null>"));
  out << ", " << "size="; (obj.__isset.size ? (out << to_string(obj.size)) : (out << "<null>"));
  out << ", " << "contentId="; (obj.__isset.contentId ? (out << to_string(obj.contentId)) : (out << "<null>"));
  out << ")";
  return out;
}


DocumentContent::~DocumentContent() throw() {
}


void DocumentContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void DocumentContent::__set_doc_name(const std::string& val) {
  this->doc_name = val;
}

void DocumentContent::__set_down_url(const std::string& val) {
  this->down_url = val;
}

void DocumentContent::__set_size(const int32_t val) {
  this->size = val;
__isset.size = true;
}

void DocumentContent::__set_contentId(const int64_t val) {
  this->contentId = val;
__isset.contentId = true;
}

const char* DocumentContent::ascii_fingerprint = "FFA096E8E6E39CC8770860B35E8F3AA7";
const uint8_t DocumentContent::binary_fingerprint[16] = {0xFF,0xA0,0x96,0xE8,0xE6,0xE3,0x9C,0xC8,0x77,0x08,0x60,0xB3,0x5E,0x8F,0x3A,0xA7};

uint32_t DocumentContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_doc_name = false;
  bool isset_down_url = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->doc_name);
          isset_doc_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->down_url);
          isset_down_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          this->__isset.contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_doc_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_down_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DocumentContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DocumentContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("doc_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->doc_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("down_url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->down_url);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentId) {
    xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->contentId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DocumentContent &a, DocumentContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.doc_name, b.doc_name);
  swap(a.down_url, b.down_url);
  swap(a.size, b.size);
  swap(a.contentId, b.contentId);
  swap(a.__isset, b.__isset);
}

DocumentContent::DocumentContent(const DocumentContent& other78) {
  operatorid = other78.operatorid;
  doc_name = other78.doc_name;
  down_url = other78.down_url;
  size = other78.size;
  contentId = other78.contentId;
  __isset = other78.__isset;
}
DocumentContent& DocumentContent::operator=(const DocumentContent& other79) {
  operatorid = other79.operatorid;
  doc_name = other79.doc_name;
  down_url = other79.down_url;
  size = other79.size;
  contentId = other79.contentId;
  __isset = other79.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DocumentContent& obj) {
  using apache::thrift::to_string;
  out << "DocumentContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "doc_name=" << to_string(obj.doc_name);
  out << ", " << "down_url=" << to_string(obj.down_url);
  out << ", " << "size="; (obj.__isset.size ? (out << to_string(obj.size)) : (out << "<null>"));
  out << ", " << "contentId="; (obj.__isset.contentId ? (out << to_string(obj.contentId)) : (out << "<null>"));
  out << ")";
  return out;
}


DocumentDelContent::~DocumentDelContent() throw() {
}


void DocumentDelContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void DocumentDelContent::__set_contentId(const int64_t val) {
  this->contentId = val;
}

void DocumentDelContent::__set_doc_name(const std::string& val) {
  this->doc_name = val;
__isset.doc_name = true;
}

const char* DocumentDelContent::ascii_fingerprint = "F51617F135B1C1CF4FD15F6ACC93B2A8";
const uint8_t DocumentDelContent::binary_fingerprint[16] = {0xF5,0x16,0x17,0xF1,0x35,0xB1,0xC1,0xCF,0x4F,0xD1,0x5F,0x6A,0xCC,0x93,0xB2,0xA8};

uint32_t DocumentDelContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_contentId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          isset_contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->doc_name);
          this->__isset.doc_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DocumentDelContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DocumentDelContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->contentId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.doc_name) {
    xfer += oprot->writeFieldBegin("doc_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->doc_name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DocumentDelContent &a, DocumentDelContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.contentId, b.contentId);
  swap(a.doc_name, b.doc_name);
  swap(a.__isset, b.__isset);
}

DocumentDelContent::DocumentDelContent(const DocumentDelContent& other80) {
  operatorid = other80.operatorid;
  contentId = other80.contentId;
  doc_name = other80.doc_name;
  __isset = other80.__isset;
}
DocumentDelContent& DocumentDelContent::operator=(const DocumentDelContent& other81) {
  operatorid = other81.operatorid;
  contentId = other81.contentId;
  doc_name = other81.doc_name;
  __isset = other81.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DocumentDelContent& obj) {
  using apache::thrift::to_string;
  out << "DocumentDelContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "contentId=" << to_string(obj.contentId);
  out << ", " << "doc_name="; (obj.__isset.doc_name ? (out << to_string(obj.doc_name)) : (out << "<null>"));
  out << ")";
  return out;
}


CodeCreateContent::~CodeCreateContent() throw() {
}


void CodeCreateContent::__set_contentId(const int64_t val) {
  this->contentId = val;
}

void CodeCreateContent::__set_title(const std::string& val) {
  this->title = val;
}

void CodeCreateContent::__set_langType(const std::string& val) {
  this->langType = val;
}

void CodeCreateContent::__set_contentHead(const std::string& val) {
  this->contentHead = val;
}

void CodeCreateContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

void CodeCreateContent::__set_size(const int32_t val) {
  this->size = val;
}

void CodeCreateContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void CodeCreateContent::__set_operatorName(const std::string& val) {
  this->operatorName = val;
__isset.operatorName = true;
}

void CodeCreateContent::__set_downUrl(const std::string& val) {
  this->downUrl = val;
}

void CodeCreateContent::__set_totalLines(const int32_t val) {
  this->totalLines = val;
}

void CodeCreateContent::__set_createTime(const int64_t val) {
  this->createTime = val;
}

const char* CodeCreateContent::ascii_fingerprint = "2E04C0C90A0D5CC642DC20D59BBF591C";
const uint8_t CodeCreateContent::binary_fingerprint[16] = {0x2E,0x04,0xC0,0xC9,0x0A,0x0D,0x5C,0xC6,0x42,0xDC,0x20,0xD5,0x9B,0xBF,0x59,0x1C};

uint32_t CodeCreateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_contentId = false;
  bool isset_title = false;
  bool isset_langType = false;
  bool isset_contentHead = false;
  bool isset_size = false;
  bool isset_operatorid = false;
  bool isset_downUrl = false;
  bool isset_totalLines = false;
  bool isset_createTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          isset_contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->langType);
          isset_langType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentHead);
          isset_contentHead = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          isset_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operatorName);
          this->__isset.operatorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->downUrl);
          isset_downUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalLines);
          isset_totalLines = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          isset_createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_contentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_langType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentHead)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_downUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_totalLines)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_createTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CodeCreateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CodeCreateContent");

  xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->contentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("langType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->langType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentHead", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->contentHead);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.operatorName) {
    xfer += oprot->writeFieldBegin("operatorName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->operatorName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("downUrl", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->downUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalLines", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->totalLines);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CodeCreateContent &a, CodeCreateContent &b) {
  using ::std::swap;
  swap(a.contentId, b.contentId);
  swap(a.title, b.title);
  swap(a.langType, b.langType);
  swap(a.contentHead, b.contentHead);
  swap(a.desc, b.desc);
  swap(a.size, b.size);
  swap(a.operatorid, b.operatorid);
  swap(a.operatorName, b.operatorName);
  swap(a.downUrl, b.downUrl);
  swap(a.totalLines, b.totalLines);
  swap(a.createTime, b.createTime);
  swap(a.__isset, b.__isset);
}

CodeCreateContent::CodeCreateContent(const CodeCreateContent& other82) {
  contentId = other82.contentId;
  title = other82.title;
  langType = other82.langType;
  contentHead = other82.contentHead;
  desc = other82.desc;
  size = other82.size;
  operatorid = other82.operatorid;
  operatorName = other82.operatorName;
  downUrl = other82.downUrl;
  totalLines = other82.totalLines;
  createTime = other82.createTime;
  __isset = other82.__isset;
}
CodeCreateContent& CodeCreateContent::operator=(const CodeCreateContent& other83) {
  contentId = other83.contentId;
  title = other83.title;
  langType = other83.langType;
  contentHead = other83.contentHead;
  desc = other83.desc;
  size = other83.size;
  operatorid = other83.operatorid;
  operatorName = other83.operatorName;
  downUrl = other83.downUrl;
  totalLines = other83.totalLines;
  createTime = other83.createTime;
  __isset = other83.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CodeCreateContent& obj) {
  using apache::thrift::to_string;
  out << "CodeCreateContent(";
  out << "contentId=" << to_string(obj.contentId);
  out << ", " << "title=" << to_string(obj.title);
  out << ", " << "langType=" << to_string(obj.langType);
  out << ", " << "contentHead=" << to_string(obj.contentHead);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ", " << "size=" << to_string(obj.size);
  out << ", " << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "operatorName="; (obj.__isset.operatorName ? (out << to_string(obj.operatorName)) : (out << "<null>"));
  out << ", " << "downUrl=" << to_string(obj.downUrl);
  out << ", " << "totalLines=" << to_string(obj.totalLines);
  out << ", " << "createTime=" << to_string(obj.createTime);
  out << ")";
  return out;
}


CodeDelContent::~CodeDelContent() throw() {
}


void CodeDelContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void CodeDelContent::__set_contentId(const int64_t val) {
  this->contentId = val;
}

void CodeDelContent::__set_title(const std::string& val) {
  this->title = val;
__isset.title = true;
}

const char* CodeDelContent::ascii_fingerprint = "F51617F135B1C1CF4FD15F6ACC93B2A8";
const uint8_t CodeDelContent::binary_fingerprint[16] = {0xF5,0x16,0x17,0xF1,0x35,0xB1,0xC1,0xCF,0x4F,0xD1,0x5F,0x6A,0xCC,0x93,0xB2,0xA8};

uint32_t CodeDelContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_contentId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          isset_contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CodeDelContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CodeDelContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->contentId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.title) {
    xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->title);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CodeDelContent &a, CodeDelContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.contentId, b.contentId);
  swap(a.title, b.title);
  swap(a.__isset, b.__isset);
}

CodeDelContent::CodeDelContent(const CodeDelContent& other84) {
  operatorid = other84.operatorid;
  contentId = other84.contentId;
  title = other84.title;
  __isset = other84.__isset;
}
CodeDelContent& CodeDelContent::operator=(const CodeDelContent& other85) {
  operatorid = other85.operatorid;
  contentId = other85.contentId;
  title = other85.title;
  __isset = other85.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CodeDelContent& obj) {
  using apache::thrift::to_string;
  out << "CodeDelContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "contentId=" << to_string(obj.contentId);
  out << ", " << "title="; (obj.__isset.title ? (out << to_string(obj.title)) : (out << "<null>"));
  out << ")";
  return out;
}


CommentCreateContent::~CommentCreateContent() throw() {
}


void CommentCreateContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void CommentCreateContent::__set_operatorName(const std::string& val) {
  this->operatorName = val;
__isset.operatorName = true;
}

void CommentCreateContent::__set_commentId(const int64_t val) {
  this->commentId = val;
}

void CommentCreateContent::__set_commentDesc(const std::string& val) {
  this->commentDesc = val;
}

void CommentCreateContent::__set_contentId(const int64_t val) {
  this->contentId = val;
}

void CommentCreateContent::__set_contentName(const std::string& val) {
  this->contentName = val;
}

void CommentCreateContent::__set_contentType(const int8_t val) {
  this->contentType = val;
}

void CommentCreateContent::__set_createTime(const int64_t val) {
  this->createTime = val;
}

void CommentCreateContent::__set_cloudType(const int16_t val) {
  this->cloudType = val;
__isset.cloudType = true;
}

const char* CommentCreateContent::ascii_fingerprint = "FA2035E601D803A0C0E574441AEB5065";
const uint8_t CommentCreateContent::binary_fingerprint[16] = {0xFA,0x20,0x35,0xE6,0x01,0xD8,0x03,0xA0,0xC0,0xE5,0x74,0x44,0x1A,0xEB,0x50,0x65};

uint32_t CommentCreateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_commentId = false;
  bool isset_commentDesc = false;
  bool isset_contentId = false;
  bool isset_contentName = false;
  bool isset_contentType = false;
  bool isset_createTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operatorName);
          this->__isset.operatorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentId);
          isset_commentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commentDesc);
          isset_commentDesc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          isset_contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentName);
          isset_contentName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->contentType);
          isset_contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          isset_createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->cloudType);
          this->__isset.cloudType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_commentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_commentDesc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_createTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CommentCreateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CommentCreateContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.operatorName) {
    xfer += oprot->writeFieldBegin("operatorName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->operatorName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("commentId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->commentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentDesc", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->commentDesc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->contentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->contentName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->contentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->createTime);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.cloudType) {
    xfer += oprot->writeFieldBegin("cloudType", ::apache::thrift::protocol::T_I16, 9);
    xfer += oprot->writeI16(this->cloudType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CommentCreateContent &a, CommentCreateContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.operatorName, b.operatorName);
  swap(a.commentId, b.commentId);
  swap(a.commentDesc, b.commentDesc);
  swap(a.contentId, b.contentId);
  swap(a.contentName, b.contentName);
  swap(a.contentType, b.contentType);
  swap(a.createTime, b.createTime);
  swap(a.cloudType, b.cloudType);
  swap(a.__isset, b.__isset);
}

CommentCreateContent::CommentCreateContent(const CommentCreateContent& other86) {
  operatorid = other86.operatorid;
  operatorName = other86.operatorName;
  commentId = other86.commentId;
  commentDesc = other86.commentDesc;
  contentId = other86.contentId;
  contentName = other86.contentName;
  contentType = other86.contentType;
  createTime = other86.createTime;
  cloudType = other86.cloudType;
  __isset = other86.__isset;
}
CommentCreateContent& CommentCreateContent::operator=(const CommentCreateContent& other87) {
  operatorid = other87.operatorid;
  operatorName = other87.operatorName;
  commentId = other87.commentId;
  commentDesc = other87.commentDesc;
  contentId = other87.contentId;
  contentName = other87.contentName;
  contentType = other87.contentType;
  createTime = other87.createTime;
  cloudType = other87.cloudType;
  __isset = other87.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CommentCreateContent& obj) {
  using apache::thrift::to_string;
  out << "CommentCreateContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "operatorName="; (obj.__isset.operatorName ? (out << to_string(obj.operatorName)) : (out << "<null>"));
  out << ", " << "commentId=" << to_string(obj.commentId);
  out << ", " << "commentDesc=" << to_string(obj.commentDesc);
  out << ", " << "contentId=" << to_string(obj.contentId);
  out << ", " << "contentName=" << to_string(obj.contentName);
  out << ", " << "contentType=" << to_string(obj.contentType);
  out << ", " << "createTime=" << to_string(obj.createTime);
  out << ", " << "cloudType="; (obj.__isset.cloudType ? (out << to_string(obj.cloudType)) : (out << "<null>"));
  out << ")";
  return out;
}


CommentDelContent::~CommentDelContent() throw() {
}


void CommentDelContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void CommentDelContent::__set_commentId(const int64_t val) {
  this->commentId = val;
}

void CommentDelContent::__set_contentId(const int64_t val) {
  this->contentId = val;
__isset.contentId = true;
}

void CommentDelContent::__set_contentName(const std::string& val) {
  this->contentName = val;
__isset.contentName = true;
}

const char* CommentDelContent::ascii_fingerprint = "F03D6DDC846223BC27471997C966A9A8";
const uint8_t CommentDelContent::binary_fingerprint[16] = {0xF0,0x3D,0x6D,0xDC,0x84,0x62,0x23,0xBC,0x27,0x47,0x19,0x97,0xC9,0x66,0xA9,0xA8};

uint32_t CommentDelContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_commentId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentId);
          isset_commentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          this->__isset.contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentName);
          this->__isset.contentName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_commentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CommentDelContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CommentDelContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->commentId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.contentId) {
    xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->contentId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentName) {
    xfer += oprot->writeFieldBegin("contentName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->contentName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CommentDelContent &a, CommentDelContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.commentId, b.commentId);
  swap(a.contentId, b.contentId);
  swap(a.contentName, b.contentName);
  swap(a.__isset, b.__isset);
}

CommentDelContent::CommentDelContent(const CommentDelContent& other88) {
  operatorid = other88.operatorid;
  commentId = other88.commentId;
  contentId = other88.contentId;
  contentName = other88.contentName;
  __isset = other88.__isset;
}
CommentDelContent& CommentDelContent::operator=(const CommentDelContent& other89) {
  operatorid = other89.operatorid;
  commentId = other89.commentId;
  contentId = other89.contentId;
  contentName = other89.contentName;
  __isset = other89.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CommentDelContent& obj) {
  using apache::thrift::to_string;
  out << "CommentDelContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "commentId=" << to_string(obj.commentId);
  out << ", " << "contentId="; (obj.__isset.contentId ? (out << to_string(obj.contentId)) : (out << "<null>"));
  out << ", " << "contentName="; (obj.__isset.contentName ? (out << to_string(obj.contentName)) : (out << "<null>"));
  out << ")";
  return out;
}


AlertRuleContent::~AlertRuleContent() throw() {
}


void AlertRuleContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

void AlertRuleContent::__set_state(const int8_t val) {
  this->state = val;
}

void AlertRuleContent::__set_rule(const int32_t val) {
  this->rule = val;
}

void AlertRuleContent::__set_time(const int32_t val) {
  this->time = val;
}

const char* AlertRuleContent::ascii_fingerprint = "4A2AC987E20CE9C8A713ADB492E990A0";
const uint8_t AlertRuleContent::binary_fingerprint[16] = {0x4A,0x2A,0xC9,0x87,0xE2,0x0C,0xE9,0xC8,0xA7,0x13,0xAD,0xB4,0x92,0xE9,0x90,0xA0};

uint32_t AlertRuleContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_groupid = false;
  bool isset_state = false;
  bool isset_rule = false;
  bool isset_time = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->state);
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rule);
          isset_rule = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time);
          isset_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rule)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AlertRuleContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AlertRuleContent");

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rule", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->rule);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AlertRuleContent &a, AlertRuleContent &b) {
  using ::std::swap;
  swap(a.groupid, b.groupid);
  swap(a.state, b.state);
  swap(a.rule, b.rule);
  swap(a.time, b.time);
}

AlertRuleContent::AlertRuleContent(const AlertRuleContent& other90) {
  groupid = other90.groupid;
  state = other90.state;
  rule = other90.rule;
  time = other90.time;
}
AlertRuleContent& AlertRuleContent::operator=(const AlertRuleContent& other91) {
  groupid = other91.groupid;
  state = other91.state;
  rule = other91.rule;
  time = other91.time;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AlertRuleContent& obj) {
  using apache::thrift::to_string;
  out << "AlertRuleContent(";
  out << "groupid=" << to_string(obj.groupid);
  out << ", " << "state=" << to_string(obj.state);
  out << ", " << "rule=" << to_string(obj.rule);
  out << ", " << "time=" << to_string(obj.time);
  out << ")";
  return out;
}


DiscussionClose::~DiscussionClose() throw() {
}


void DiscussionClose::__set_operatorId(const int32_t val) {
  this->operatorId = val;
}

const char* DiscussionClose::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t DiscussionClose::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t DiscussionClose::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorId);
          isset_operatorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DiscussionClose::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DiscussionClose");

  xfer += oprot->writeFieldBegin("operatorId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DiscussionClose &a, DiscussionClose &b) {
  using ::std::swap;
  swap(a.operatorId, b.operatorId);
}

DiscussionClose::DiscussionClose(const DiscussionClose& other92) {
  operatorId = other92.operatorId;
}
DiscussionClose& DiscussionClose::operator=(const DiscussionClose& other93) {
  operatorId = other93.operatorId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DiscussionClose& obj) {
  using apache::thrift::to_string;
  out << "DiscussionClose(";
  out << "operatorId=" << to_string(obj.operatorId);
  out << ")";
  return out;
}


MsgNotifyContent::~MsgNotifyContent() throw() {
}


void MsgNotifyContent::__set_groupid(const int32_t val) {
  this->groupid = val;
}

void MsgNotifyContent::__set_state(const int8_t val) {
  this->state = val;
}

const char* MsgNotifyContent::ascii_fingerprint = "C4007E46EFE548F8B4E100931498BEF8";
const uint8_t MsgNotifyContent::binary_fingerprint[16] = {0xC4,0x00,0x7E,0x46,0xEF,0xE5,0x48,0xF8,0xB4,0xE1,0x00,0x93,0x14,0x98,0xBE,0xF8};

uint32_t MsgNotifyContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_groupid = false;
  bool isset_state = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          isset_groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->state);
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_groupid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MsgNotifyContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MsgNotifyContent");

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MsgNotifyContent &a, MsgNotifyContent &b) {
  using ::std::swap;
  swap(a.groupid, b.groupid);
  swap(a.state, b.state);
}

MsgNotifyContent::MsgNotifyContent(const MsgNotifyContent& other94) {
  groupid = other94.groupid;
  state = other94.state;
}
MsgNotifyContent& MsgNotifyContent::operator=(const MsgNotifyContent& other95) {
  groupid = other95.groupid;
  state = other95.state;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MsgNotifyContent& obj) {
  using apache::thrift::to_string;
  out << "MsgNotifyContent(";
  out << "groupid=" << to_string(obj.groupid);
  out << ", " << "state=" << to_string(obj.state);
  out << ")";
  return out;
}


CloudFileContent::~CloudFileContent() throw() {
}


void CloudFileContent::__set_operatorId(const int32_t val) {
  this->operatorId = val;
}

void CloudFileContent::__set_operatorName(const std::string& val) {
  this->operatorName = val;
}

void CloudFileContent::__set_fileName(const std::string& val) {
  this->fileName = val;
}

void CloudFileContent::__set_fileNameTo(const std::string& val) {
  this->fileNameTo = val;
__isset.fileNameTo = true;
}

void CloudFileContent::__set_size(const int64_t val) {
  this->size = val;
}

void CloudFileContent::__set_fileCounts(const int32_t val) {
  this->fileCounts = val;
__isset.fileCounts = true;
}

void CloudFileContent::__set_isDir(const int8_t val) {
  this->isDir = val;
}

void CloudFileContent::__set_cloudType(const int16_t val) {
  this->cloudType = val;
}

void CloudFileContent::__set_detailType(const int8_t val) {
  this->detailType = val;
}

void CloudFileContent::__set_detailContent(const std::string& val) {
  this->detailContent = val;
}

void CloudFileContent::__set_createTime(const int64_t val) {
  this->createTime = val;
}

void CloudFileContent::__set_contentId(const int64_t val) {
  this->contentId = val;
}

const char* CloudFileContent::ascii_fingerprint = "A54A5E80B5EB9D73BE47821C542A3B4F";
const uint8_t CloudFileContent::binary_fingerprint[16] = {0xA5,0x4A,0x5E,0x80,0xB5,0xEB,0x9D,0x73,0xBE,0x47,0x82,0x1C,0x54,0x2A,0x3B,0x4F};

uint32_t CloudFileContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorId = false;
  bool isset_operatorName = false;
  bool isset_fileName = false;
  bool isset_size = false;
  bool isset_isDir = false;
  bool isset_cloudType = false;
  bool isset_detailType = false;
  bool isset_detailContent = false;
  bool isset_createTime = false;
  bool isset_contentId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorId);
          isset_operatorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operatorName);
          isset_operatorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileName);
          isset_fileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileNameTo);
          this->__isset.fileNameTo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          isset_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fileCounts);
          this->__isset.fileCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->isDir);
          isset_isDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->cloudType);
          isset_cloudType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->detailType);
          isset_detailType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailContent);
          isset_detailContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          isset_createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          isset_contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_operatorName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fileName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isDir)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cloudType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_detailType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_detailContent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_createTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CloudFileContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CloudFileContent");

  xfer += oprot->writeFieldBegin("operatorId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("operatorName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->operatorName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->fileName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fileNameTo) {
    xfer += oprot->writeFieldBegin("fileNameTo", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->fileNameTo);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->size);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fileCounts) {
    xfer += oprot->writeFieldBegin("fileCounts", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->fileCounts);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("isDir", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->isDir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cloudType", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->cloudType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detailType", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->detailType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detailContent", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->detailContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->contentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CloudFileContent &a, CloudFileContent &b) {
  using ::std::swap;
  swap(a.operatorId, b.operatorId);
  swap(a.operatorName, b.operatorName);
  swap(a.fileName, b.fileName);
  swap(a.fileNameTo, b.fileNameTo);
  swap(a.size, b.size);
  swap(a.fileCounts, b.fileCounts);
  swap(a.isDir, b.isDir);
  swap(a.cloudType, b.cloudType);
  swap(a.detailType, b.detailType);
  swap(a.detailContent, b.detailContent);
  swap(a.createTime, b.createTime);
  swap(a.contentId, b.contentId);
  swap(a.__isset, b.__isset);
}

CloudFileContent::CloudFileContent(const CloudFileContent& other96) {
  operatorId = other96.operatorId;
  operatorName = other96.operatorName;
  fileName = other96.fileName;
  fileNameTo = other96.fileNameTo;
  size = other96.size;
  fileCounts = other96.fileCounts;
  isDir = other96.isDir;
  cloudType = other96.cloudType;
  detailType = other96.detailType;
  detailContent = other96.detailContent;
  createTime = other96.createTime;
  contentId = other96.contentId;
  __isset = other96.__isset;
}
CloudFileContent& CloudFileContent::operator=(const CloudFileContent& other97) {
  operatorId = other97.operatorId;
  operatorName = other97.operatorName;
  fileName = other97.fileName;
  fileNameTo = other97.fileNameTo;
  size = other97.size;
  fileCounts = other97.fileCounts;
  isDir = other97.isDir;
  cloudType = other97.cloudType;
  detailType = other97.detailType;
  detailContent = other97.detailContent;
  createTime = other97.createTime;
  contentId = other97.contentId;
  __isset = other97.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CloudFileContent& obj) {
  using apache::thrift::to_string;
  out << "CloudFileContent(";
  out << "operatorId=" << to_string(obj.operatorId);
  out << ", " << "operatorName=" << to_string(obj.operatorName);
  out << ", " << "fileName=" << to_string(obj.fileName);
  out << ", " << "fileNameTo="; (obj.__isset.fileNameTo ? (out << to_string(obj.fileNameTo)) : (out << "<null>"));
  out << ", " << "size=" << to_string(obj.size);
  out << ", " << "fileCounts="; (obj.__isset.fileCounts ? (out << to_string(obj.fileCounts)) : (out << "<null>"));
  out << ", " << "isDir=" << to_string(obj.isDir);
  out << ", " << "cloudType=" << to_string(obj.cloudType);
  out << ", " << "detailType=" << to_string(obj.detailType);
  out << ", " << "detailContent=" << to_string(obj.detailContent);
  out << ", " << "createTime=" << to_string(obj.createTime);
  out << ", " << "contentId=" << to_string(obj.contentId);
  out << ")";
  return out;
}


MemberRoleUpdateContent::~MemberRoleUpdateContent() throw() {
}


void MemberRoleUpdateContent::__set_roleMap(const std::map<int32_t, int8_t> & val) {
  this->roleMap = val;
}

const char* MemberRoleUpdateContent::ascii_fingerprint = "A67B8D241F2CDBF89BFD4C0C33D44EFC";
const uint8_t MemberRoleUpdateContent::binary_fingerprint[16] = {0xA6,0x7B,0x8D,0x24,0x1F,0x2C,0xDB,0xF8,0x9B,0xFD,0x4C,0x0C,0x33,0xD4,0x4E,0xFC};

uint32_t MemberRoleUpdateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_roleMap = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->roleMap.clear();
            uint32_t _size98;
            ::apache::thrift::protocol::TType _ktype99;
            ::apache::thrift::protocol::TType _vtype100;
            xfer += iprot->readMapBegin(_ktype99, _vtype100, _size98);
            uint32_t _i102;
            for (_i102 = 0; _i102 < _size98; ++_i102)
            {
              int32_t _key103;
              xfer += iprot->readI32(_key103);
              int8_t& _val104 = this->roleMap[_key103];
              xfer += iprot->readByte(_val104);
            }
            xfer += iprot->readMapEnd();
          }
          isset_roleMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_roleMap)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MemberRoleUpdateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MemberRoleUpdateContent");

  xfer += oprot->writeFieldBegin("roleMap", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->roleMap.size()));
    std::map<int32_t, int8_t> ::const_iterator _iter105;
    for (_iter105 = this->roleMap.begin(); _iter105 != this->roleMap.end(); ++_iter105)
    {
      xfer += oprot->writeI32(_iter105->first);
      xfer += oprot->writeByte(_iter105->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MemberRoleUpdateContent &a, MemberRoleUpdateContent &b) {
  using ::std::swap;
  swap(a.roleMap, b.roleMap);
}

MemberRoleUpdateContent::MemberRoleUpdateContent(const MemberRoleUpdateContent& other106) {
  roleMap = other106.roleMap;
}
MemberRoleUpdateContent& MemberRoleUpdateContent::operator=(const MemberRoleUpdateContent& other107) {
  roleMap = other107.roleMap;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MemberRoleUpdateContent& obj) {
  using apache::thrift::to_string;
  out << "MemberRoleUpdateContent(";
  out << "roleMap=" << to_string(obj.roleMap);
  out << ")";
  return out;
}


RevocationContent::~RevocationContent() throw() {
}


void RevocationContent::__set_seq(const int64_t val) {
  this->seq = val;
}

void RevocationContent::__set_type(const int16_t val) {
  this->type = val;
__isset.type = true;
}

const char* RevocationContent::ascii_fingerprint = "7382E68BFD7B318A844F38E0B57A07A4";
const uint8_t RevocationContent::binary_fingerprint[16] = {0x73,0x82,0xE6,0x8B,0xFD,0x7B,0x31,0x8A,0x84,0x4F,0x38,0xE0,0xB5,0x7A,0x07,0xA4};

uint32_t RevocationContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_seq = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seq);
          isset_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_seq)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RevocationContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RevocationContent");

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->seq);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RevocationContent &a, RevocationContent &b) {
  using ::std::swap;
  swap(a.seq, b.seq);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

RevocationContent::RevocationContent(const RevocationContent& other108) {
  seq = other108.seq;
  type = other108.type;
  __isset = other108.__isset;
}
RevocationContent& RevocationContent::operator=(const RevocationContent& other109) {
  seq = other109.seq;
  type = other109.type;
  __isset = other109.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RevocationContent& obj) {
  using apache::thrift::to_string;
  out << "RevocationContent(";
  out << "seq=" << to_string(obj.seq);
  out << ", " << "type="; (obj.__isset.type ? (out << to_string(obj.type)) : (out << "<null>"));
  out << ")";
  return out;
}


PasswordModifyContent::~PasswordModifyContent() throw() {
}


void PasswordModifyContent::__set_password(const std::string& val) {
  this->password = val;
__isset.password = true;
}

const char* PasswordModifyContent::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t PasswordModifyContent::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t PasswordModifyContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PasswordModifyContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PasswordModifyContent");

  if (this->__isset.password) {
    xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->password);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PasswordModifyContent &a, PasswordModifyContent &b) {
  using ::std::swap;
  swap(a.password, b.password);
  swap(a.__isset, b.__isset);
}

PasswordModifyContent::PasswordModifyContent(const PasswordModifyContent& other110) {
  password = other110.password;
  __isset = other110.__isset;
}
PasswordModifyContent& PasswordModifyContent::operator=(const PasswordModifyContent& other111) {
  password = other111.password;
  __isset = other111.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PasswordModifyContent& obj) {
  using apache::thrift::to_string;
  out << "PasswordModifyContent(";
  out << "password="; (obj.__isset.password ? (out << to_string(obj.password)) : (out << "<null>"));
  out << ")";
  return out;
}


SystemWelcomeContent::~SystemWelcomeContent() throw() {
}


void SystemWelcomeContent::__set_title(const std::string& val) {
  this->title = val;
}

void SystemWelcomeContent::__set_image_url(const std::string& val) {
  this->image_url = val;
}

void SystemWelcomeContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

void SystemWelcomeContent::__set_target_link(const std::string& val) {
  this->target_link = val;
__isset.target_link = true;
}

const char* SystemWelcomeContent::ascii_fingerprint = "FED0FBEAA0C90D1589E8B650561B7675";
const uint8_t SystemWelcomeContent::binary_fingerprint[16] = {0xFE,0xD0,0xFB,0xEA,0xA0,0xC9,0x0D,0x15,0x89,0xE8,0xB6,0x50,0x56,0x1B,0x76,0x75};

uint32_t SystemWelcomeContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_title = false;
  bool isset_image_url = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->image_url);
          isset_image_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->target_link);
          this->__isset.target_link = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_image_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SystemWelcomeContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SystemWelcomeContent");

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("image_url", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->image_url);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.target_link) {
    xfer += oprot->writeFieldBegin("target_link", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->target_link);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SystemWelcomeContent &a, SystemWelcomeContent &b) {
  using ::std::swap;
  swap(a.title, b.title);
  swap(a.image_url, b.image_url);
  swap(a.desc, b.desc);
  swap(a.target_link, b.target_link);
  swap(a.__isset, b.__isset);
}

SystemWelcomeContent::SystemWelcomeContent(const SystemWelcomeContent& other112) {
  title = other112.title;
  image_url = other112.image_url;
  desc = other112.desc;
  target_link = other112.target_link;
  __isset = other112.__isset;
}
SystemWelcomeContent& SystemWelcomeContent::operator=(const SystemWelcomeContent& other113) {
  title = other113.title;
  image_url = other113.image_url;
  desc = other113.desc;
  target_link = other113.target_link;
  __isset = other113.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SystemWelcomeContent& obj) {
  using apache::thrift::to_string;
  out << "SystemWelcomeContent(";
  out << "title=" << to_string(obj.title);
  out << ", " << "image_url=" << to_string(obj.image_url);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ", " << "target_link="; (obj.__isset.target_link ? (out << to_string(obj.target_link)) : (out << "<null>"));
  out << ")";
  return out;
}


ClientUpdateContent::~ClientUpdateContent() throw() {
}


void ClientUpdateContent::__set_version_code(const int32_t val) {
  this->version_code = val;
}

void ClientUpdateContent::__set_is_force_upgrade(const int8_t val) {
  this->is_force_upgrade = val;
}

void ClientUpdateContent::__set_max_sdk_version(const int16_t val) {
  this->max_sdk_version = val;
__isset.max_sdk_version = true;
}

void ClientUpdateContent::__set_min_sdk_version(const int16_t val) {
  this->min_sdk_version = val;
}

void ClientUpdateContent::__set_version_name(const std::string& val) {
  this->version_name = val;
}

void ClientUpdateContent::__set_desc(const std::string& val) {
  this->desc = val;
}

void ClientUpdateContent::__set_url(const std::string& val) {
  this->url = val;
}

const char* ClientUpdateContent::ascii_fingerprint = "F6CE1DE81BDB961B855BD0A5FC12F584";
const uint8_t ClientUpdateContent::binary_fingerprint[16] = {0xF6,0xCE,0x1D,0xE8,0x1B,0xDB,0x96,0x1B,0x85,0x5B,0xD0,0xA5,0xFC,0x12,0xF5,0x84};

uint32_t ClientUpdateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version_code = false;
  bool isset_is_force_upgrade = false;
  bool isset_min_sdk_version = false;
  bool isset_version_name = false;
  bool isset_desc = false;
  bool isset_url = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version_code);
          isset_version_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->is_force_upgrade);
          isset_is_force_upgrade = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->max_sdk_version);
          this->__isset.max_sdk_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->min_sdk_version);
          isset_min_sdk_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version_name);
          isset_version_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          isset_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_force_upgrade)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_sdk_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_version_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClientUpdateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ClientUpdateContent");

  xfer += oprot->writeFieldBegin("version_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->version_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_force_upgrade", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->is_force_upgrade);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.max_sdk_version) {
    xfer += oprot->writeFieldBegin("max_sdk_version", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->max_sdk_version);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("min_sdk_version", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->min_sdk_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->version_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->desc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ClientUpdateContent &a, ClientUpdateContent &b) {
  using ::std::swap;
  swap(a.version_code, b.version_code);
  swap(a.is_force_upgrade, b.is_force_upgrade);
  swap(a.max_sdk_version, b.max_sdk_version);
  swap(a.min_sdk_version, b.min_sdk_version);
  swap(a.version_name, b.version_name);
  swap(a.desc, b.desc);
  swap(a.url, b.url);
  swap(a.__isset, b.__isset);
}

ClientUpdateContent::ClientUpdateContent(const ClientUpdateContent& other114) {
  version_code = other114.version_code;
  is_force_upgrade = other114.is_force_upgrade;
  max_sdk_version = other114.max_sdk_version;
  min_sdk_version = other114.min_sdk_version;
  version_name = other114.version_name;
  desc = other114.desc;
  url = other114.url;
  __isset = other114.__isset;
}
ClientUpdateContent& ClientUpdateContent::operator=(const ClientUpdateContent& other115) {
  version_code = other115.version_code;
  is_force_upgrade = other115.is_force_upgrade;
  max_sdk_version = other115.max_sdk_version;
  min_sdk_version = other115.min_sdk_version;
  version_name = other115.version_name;
  desc = other115.desc;
  url = other115.url;
  __isset = other115.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ClientUpdateContent& obj) {
  using apache::thrift::to_string;
  out << "ClientUpdateContent(";
  out << "version_code=" << to_string(obj.version_code);
  out << ", " << "is_force_upgrade=" << to_string(obj.is_force_upgrade);
  out << ", " << "max_sdk_version="; (obj.__isset.max_sdk_version ? (out << to_string(obj.max_sdk_version)) : (out << "<null>"));
  out << ", " << "min_sdk_version=" << to_string(obj.min_sdk_version);
  out << ", " << "version_name=" << to_string(obj.version_name);
  out << ", " << "desc=" << to_string(obj.desc);
  out << ", " << "url=" << to_string(obj.url);
  out << ")";
  return out;
}


InfoCell::~InfoCell() throw() {
}


void InfoCell::__set_tagId(const int32_t val) {
  this->tagId = val;
}

void InfoCell::__set_label(const std::string& val) {
  this->label = val;
}

void InfoCell::__set_inputType(const int16_t val) {
  this->inputType = val;
__isset.inputType = true;
}

void InfoCell::__set_scope(const int16_t val) {
  this->scope = val;
}

void InfoCell::__set_type(const int16_t val) {
  this->type = val;
}

void InfoCell::__set_state(const int16_t val) {
  this->state = val;
}

void InfoCell::__set_value(const std::string& val) {
  this->value = val;
__isset.value = true;
}

const char* InfoCell::ascii_fingerprint = "990E23FA38BCFCCCD6874CF4A2C48152";
const uint8_t InfoCell::binary_fingerprint[16] = {0x99,0x0E,0x23,0xFA,0x38,0xBC,0xFC,0xCC,0xD6,0x87,0x4C,0xF4,0xA2,0xC4,0x81,0x52};

uint32_t InfoCell::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tagId = false;
  bool isset_label = false;
  bool isset_scope = false;
  bool isset_type = false;
  bool isset_state = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tagId);
          isset_tagId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label);
          isset_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->inputType);
          this->__isset.inputType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->scope);
          isset_scope = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->state);
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tagId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scope)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InfoCell::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InfoCell");

  xfer += oprot->writeFieldBegin("tagId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->tagId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->label);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.inputType) {
    xfer += oprot->writeFieldBegin("inputType", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->inputType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("scope", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->scope);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->state);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InfoCell &a, InfoCell &b) {
  using ::std::swap;
  swap(a.tagId, b.tagId);
  swap(a.label, b.label);
  swap(a.inputType, b.inputType);
  swap(a.scope, b.scope);
  swap(a.type, b.type);
  swap(a.state, b.state);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

InfoCell::InfoCell(const InfoCell& other116) {
  tagId = other116.tagId;
  label = other116.label;
  inputType = other116.inputType;
  scope = other116.scope;
  type = other116.type;
  state = other116.state;
  value = other116.value;
  __isset = other116.__isset;
}
InfoCell& InfoCell::operator=(const InfoCell& other117) {
  tagId = other117.tagId;
  label = other117.label;
  inputType = other117.inputType;
  scope = other117.scope;
  type = other117.type;
  state = other117.state;
  value = other117.value;
  __isset = other117.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InfoCell& obj) {
  using apache::thrift::to_string;
  out << "InfoCell(";
  out << "tagId=" << to_string(obj.tagId);
  out << ", " << "label=" << to_string(obj.label);
  out << ", " << "inputType="; (obj.__isset.inputType ? (out << to_string(obj.inputType)) : (out << "<null>"));
  out << ", " << "scope=" << to_string(obj.scope);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "state=" << to_string(obj.state);
  out << ", " << "value="; (obj.__isset.value ? (out << to_string(obj.value)) : (out << "<null>"));
  out << ")";
  return out;
}


CompleteInfoContent::~CompleteInfoContent() throw() {
}


void CompleteInfoContent::__set_info_cell_list(const std::vector<InfoCell> & val) {
  this->info_cell_list = val;
}

void CompleteInfoContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* CompleteInfoContent::ascii_fingerprint = "0806D77A915A2E91FDD024FE4D2F40DB";
const uint8_t CompleteInfoContent::binary_fingerprint[16] = {0x08,0x06,0xD7,0x7A,0x91,0x5A,0x2E,0x91,0xFD,0xD0,0x24,0xFE,0x4D,0x2F,0x40,0xDB};

uint32_t CompleteInfoContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_info_cell_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->info_cell_list.clear();
            uint32_t _size118;
            ::apache::thrift::protocol::TType _etype121;
            xfer += iprot->readListBegin(_etype121, _size118);
            this->info_cell_list.resize(_size118);
            uint32_t _i122;
            for (_i122 = 0; _i122 < _size118; ++_i122)
            {
              xfer += this->info_cell_list[_i122].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_info_cell_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_info_cell_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CompleteInfoContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CompleteInfoContent");

  xfer += oprot->writeFieldBegin("info_cell_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->info_cell_list.size()));
    std::vector<InfoCell> ::const_iterator _iter123;
    for (_iter123 = this->info_cell_list.begin(); _iter123 != this->info_cell_list.end(); ++_iter123)
    {
      xfer += (*_iter123).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CompleteInfoContent &a, CompleteInfoContent &b) {
  using ::std::swap;
  swap(a.info_cell_list, b.info_cell_list);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

CompleteInfoContent::CompleteInfoContent(const CompleteInfoContent& other124) {
  info_cell_list = other124.info_cell_list;
  desc = other124.desc;
  __isset = other124.__isset;
}
CompleteInfoContent& CompleteInfoContent::operator=(const CompleteInfoContent& other125) {
  info_cell_list = other125.info_cell_list;
  desc = other125.desc;
  __isset = other125.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CompleteInfoContent& obj) {
  using apache::thrift::to_string;
  out << "CompleteInfoContent(";
  out << "info_cell_list=" << to_string(obj.info_cell_list);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


TagDelContent::~TagDelContent() throw() {
}


void TagDelContent::__set_delTagIds(const std::vector<int32_t> & val) {
  this->delTagIds = val;
}

const char* TagDelContent::ascii_fingerprint = "A803C54EAD95E24D90C5E66FB98EA72B";
const uint8_t TagDelContent::binary_fingerprint[16] = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

uint32_t TagDelContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_delTagIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->delTagIds.clear();
            uint32_t _size126;
            ::apache::thrift::protocol::TType _etype129;
            xfer += iprot->readListBegin(_etype129, _size126);
            this->delTagIds.resize(_size126);
            uint32_t _i130;
            for (_i130 = 0; _i130 < _size126; ++_i130)
            {
              xfer += iprot->readI32(this->delTagIds[_i130]);
            }
            xfer += iprot->readListEnd();
          }
          isset_delTagIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_delTagIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TagDelContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TagDelContent");

  xfer += oprot->writeFieldBegin("delTagIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->delTagIds.size()));
    std::vector<int32_t> ::const_iterator _iter131;
    for (_iter131 = this->delTagIds.begin(); _iter131 != this->delTagIds.end(); ++_iter131)
    {
      xfer += oprot->writeI32((*_iter131));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TagDelContent &a, TagDelContent &b) {
  using ::std::swap;
  swap(a.delTagIds, b.delTagIds);
}

TagDelContent::TagDelContent(const TagDelContent& other132) {
  delTagIds = other132.delTagIds;
}
TagDelContent& TagDelContent::operator=(const TagDelContent& other133) {
  delTagIds = other133.delTagIds;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TagDelContent& obj) {
  using apache::thrift::to_string;
  out << "TagDelContent(";
  out << "delTagIds=" << to_string(obj.delTagIds);
  out << ")";
  return out;
}


PwdComplexUpdateContent::~PwdComplexUpdateContent() throw() {
}


void PwdComplexUpdateContent::__set_type(const PwdComplexType::type val) {
  this->type = val;
}

const char* PwdComplexUpdateContent::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t PwdComplexUpdateContent::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t PwdComplexUpdateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast134;
          xfer += iprot->readI32(ecast134);
          this->type = (PwdComplexType::type)ecast134;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PwdComplexUpdateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PwdComplexUpdateContent");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PwdComplexUpdateContent &a, PwdComplexUpdateContent &b) {
  using ::std::swap;
  swap(a.type, b.type);
}

PwdComplexUpdateContent::PwdComplexUpdateContent(const PwdComplexUpdateContent& other135) {
  type = other135.type;
}
PwdComplexUpdateContent& PwdComplexUpdateContent::operator=(const PwdComplexUpdateContent& other136) {
  type = other136.type;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PwdComplexUpdateContent& obj) {
  using apache::thrift::to_string;
  out << "PwdComplexUpdateContent(";
  out << "type=" << to_string(obj.type);
  out << ")";
  return out;
}


PwdExpireContent::~PwdExpireContent() throw() {
}


void PwdExpireContent::__set_dueDays(const int32_t val) {
  this->dueDays = val;
}

const char* PwdExpireContent::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t PwdExpireContent::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t PwdExpireContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dueDays = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dueDays);
          isset_dueDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dueDays)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PwdExpireContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PwdExpireContent");

  xfer += oprot->writeFieldBegin("dueDays", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->dueDays);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PwdExpireContent &a, PwdExpireContent &b) {
  using ::std::swap;
  swap(a.dueDays, b.dueDays);
}

PwdExpireContent::PwdExpireContent(const PwdExpireContent& other137) {
  dueDays = other137.dueDays;
}
PwdExpireContent& PwdExpireContent::operator=(const PwdExpireContent& other138) {
  dueDays = other138.dueDays;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PwdExpireContent& obj) {
  using apache::thrift::to_string;
  out << "PwdExpireContent(";
  out << "dueDays=" << to_string(obj.dueDays);
  out << ")";
  return out;
}


PCClientGuide::~PCClientGuide() throw() {
}


void PCClientGuide::__set_downUrl(const std::string& val) {
  this->downUrl = val;
}

const char* PCClientGuide::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t PCClientGuide::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t PCClientGuide::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_downUrl = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->downUrl);
          isset_downUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_downUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PCClientGuide::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PCClientGuide");

  xfer += oprot->writeFieldBegin("downUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->downUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PCClientGuide &a, PCClientGuide &b) {
  using ::std::swap;
  swap(a.downUrl, b.downUrl);
}

PCClientGuide::PCClientGuide(const PCClientGuide& other139) {
  downUrl = other139.downUrl;
}
PCClientGuide& PCClientGuide::operator=(const PCClientGuide& other140) {
  downUrl = other140.downUrl;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PCClientGuide& obj) {
  using apache::thrift::to_string;
  out << "PCClientGuide(";
  out << "downUrl=" << to_string(obj.downUrl);
  out << ")";
  return out;
}


MobileClientGuide::~MobileClientGuide() throw() {
}


void MobileClientGuide::__set_androidMarketUrl(const std::string& val) {
  this->androidMarketUrl = val;
}

void MobileClientGuide::__set_iphoneMarketUrl(const std::string& val) {
  this->iphoneMarketUrl = val;
}

const char* MobileClientGuide::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t MobileClientGuide::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t MobileClientGuide::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_androidMarketUrl = false;
  bool isset_iphoneMarketUrl = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->androidMarketUrl);
          isset_androidMarketUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iphoneMarketUrl);
          isset_iphoneMarketUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_androidMarketUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_iphoneMarketUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MobileClientGuide::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MobileClientGuide");

  xfer += oprot->writeFieldBegin("androidMarketUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->androidMarketUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iphoneMarketUrl", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->iphoneMarketUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MobileClientGuide &a, MobileClientGuide &b) {
  using ::std::swap;
  swap(a.androidMarketUrl, b.androidMarketUrl);
  swap(a.iphoneMarketUrl, b.iphoneMarketUrl);
}

MobileClientGuide::MobileClientGuide(const MobileClientGuide& other141) {
  androidMarketUrl = other141.androidMarketUrl;
  iphoneMarketUrl = other141.iphoneMarketUrl;
}
MobileClientGuide& MobileClientGuide::operator=(const MobileClientGuide& other142) {
  androidMarketUrl = other142.androidMarketUrl;
  iphoneMarketUrl = other142.iphoneMarketUrl;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MobileClientGuide& obj) {
  using apache::thrift::to_string;
  out << "MobileClientGuide(";
  out << "androidMarketUrl=" << to_string(obj.androidMarketUrl);
  out << ", " << "iphoneMarketUrl=" << to_string(obj.iphoneMarketUrl);
  out << ")";
  return out;
}


GroupRemindContent::~GroupRemindContent() throw() {
}


void GroupRemindContent::__set_groupIdList(const std::vector<int32_t> & val) {
  this->groupIdList = val;
}

const char* GroupRemindContent::ascii_fingerprint = "A803C54EAD95E24D90C5E66FB98EA72B";
const uint8_t GroupRemindContent::binary_fingerprint[16] = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

uint32_t GroupRemindContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_groupIdList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->groupIdList.clear();
            uint32_t _size143;
            ::apache::thrift::protocol::TType _etype146;
            xfer += iprot->readListBegin(_etype146, _size143);
            this->groupIdList.resize(_size143);
            uint32_t _i147;
            for (_i147 = 0; _i147 < _size143; ++_i147)
            {
              xfer += iprot->readI32(this->groupIdList[_i147]);
            }
            xfer += iprot->readListEnd();
          }
          isset_groupIdList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_groupIdList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GroupRemindContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GroupRemindContent");

  xfer += oprot->writeFieldBegin("groupIdList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->groupIdList.size()));
    std::vector<int32_t> ::const_iterator _iter148;
    for (_iter148 = this->groupIdList.begin(); _iter148 != this->groupIdList.end(); ++_iter148)
    {
      xfer += oprot->writeI32((*_iter148));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GroupRemindContent &a, GroupRemindContent &b) {
  using ::std::swap;
  swap(a.groupIdList, b.groupIdList);
}

GroupRemindContent::GroupRemindContent(const GroupRemindContent& other149) {
  groupIdList = other149.groupIdList;
}
GroupRemindContent& GroupRemindContent::operator=(const GroupRemindContent& other150) {
  groupIdList = other150.groupIdList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GroupRemindContent& obj) {
  using apache::thrift::to_string;
  out << "GroupRemindContent(";
  out << "groupIdList=" << to_string(obj.groupIdList);
  out << ")";
  return out;
}


FileTransmissionInviteContent::~FileTransmissionInviteContent() throw() {
}


void FileTransmissionInviteContent::__set_fileMD5(const std::string& val) {
  this->fileMD5 = val;
}

void FileTransmissionInviteContent::__set_fileName(const std::string& val) {
  this->fileName = val;
}

void FileTransmissionInviteContent::__set_fileSize(const int64_t val) {
  this->fileSize = val;
}

void FileTransmissionInviteContent::__set_blockSize(const int64_t val) {
  this->blockSize = val;
}

void FileTransmissionInviteContent::__set_nZip(const int8_t val) {
  this->nZip = val;
}

void FileTransmissionInviteContent::__set_taskId(const int64_t val) {
  this->taskId = val;
}

const char* FileTransmissionInviteContent::ascii_fingerprint = "95BED25B4D6D53716ECD8B38E15794C5";
const uint8_t FileTransmissionInviteContent::binary_fingerprint[16] = {0x95,0xBE,0xD2,0x5B,0x4D,0x6D,0x53,0x71,0x6E,0xCD,0x8B,0x38,0xE1,0x57,0x94,0xC5};

uint32_t FileTransmissionInviteContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileMD5 = false;
  bool isset_fileName = false;
  bool isset_fileSize = false;
  bool isset_blockSize = false;
  bool isset_nZip = false;
  bool isset_taskId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileMD5);
          isset_fileMD5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileName);
          isset_fileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileSize);
          isset_fileSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockSize);
          isset_blockSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->nZip);
          isset_nZip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->taskId);
          isset_taskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileMD5)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fileName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fileSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_blockSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_nZip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_taskId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FileTransmissionInviteContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FileTransmissionInviteContent");

  xfer += oprot->writeFieldBegin("fileMD5", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fileMD5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->fileName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileSize", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->fileSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blockSize", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->blockSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nZip", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->nZip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskId", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->taskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FileTransmissionInviteContent &a, FileTransmissionInviteContent &b) {
  using ::std::swap;
  swap(a.fileMD5, b.fileMD5);
  swap(a.fileName, b.fileName);
  swap(a.fileSize, b.fileSize);
  swap(a.blockSize, b.blockSize);
  swap(a.nZip, b.nZip);
  swap(a.taskId, b.taskId);
}

FileTransmissionInviteContent::FileTransmissionInviteContent(const FileTransmissionInviteContent& other151) {
  fileMD5 = other151.fileMD5;
  fileName = other151.fileName;
  fileSize = other151.fileSize;
  blockSize = other151.blockSize;
  nZip = other151.nZip;
  taskId = other151.taskId;
}
FileTransmissionInviteContent& FileTransmissionInviteContent::operator=(const FileTransmissionInviteContent& other152) {
  fileMD5 = other152.fileMD5;
  fileName = other152.fileName;
  fileSize = other152.fileSize;
  blockSize = other152.blockSize;
  nZip = other152.nZip;
  taskId = other152.taskId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FileTransmissionInviteContent& obj) {
  using apache::thrift::to_string;
  out << "FileTransmissionInviteContent(";
  out << "fileMD5=" << to_string(obj.fileMD5);
  out << ", " << "fileName=" << to_string(obj.fileName);
  out << ", " << "fileSize=" << to_string(obj.fileSize);
  out << ", " << "blockSize=" << to_string(obj.blockSize);
  out << ", " << "nZip=" << to_string(obj.nZip);
  out << ", " << "taskId=" << to_string(obj.taskId);
  out << ")";
  return out;
}


FileTransmissionReceiveContent::~FileTransmissionReceiveContent() throw() {
}


void FileTransmissionReceiveContent::__set_sendTaskId(const int64_t val) {
  this->sendTaskId = val;
}

void FileTransmissionReceiveContent::__set_receiveTaskId(const int64_t val) {
  this->receiveTaskId = val;
}

void FileTransmissionReceiveContent::__set_ip(const std::string& val) {
  this->ip = val;
}

void FileTransmissionReceiveContent::__set_port(const int16_t val) {
  this->port = val;
}

void FileTransmissionReceiveContent::__set_serverList(const std::string& val) {
  this->serverList = val;
}

void FileTransmissionReceiveContent::__set_transType(const int8_t val) {
  this->transType = val;
}

void FileTransmissionReceiveContent::__set_transPoint(const int64_t val) {
  this->transPoint = val;
}

const char* FileTransmissionReceiveContent::ascii_fingerprint = "7093089C1F1E66F5F7165E6F8C15F1C4";
const uint8_t FileTransmissionReceiveContent::binary_fingerprint[16] = {0x70,0x93,0x08,0x9C,0x1F,0x1E,0x66,0xF5,0xF7,0x16,0x5E,0x6F,0x8C,0x15,0xF1,0xC4};

uint32_t FileTransmissionReceiveContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sendTaskId = false;
  bool isset_receiveTaskId = false;
  bool isset_ip = false;
  bool isset_port = false;
  bool isset_serverList = false;
  bool isset_transType = false;
  bool isset_transPoint = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sendTaskId);
          isset_sendTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receiveTaskId);
          isset_receiveTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          isset_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          isset_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverList);
          isset_serverList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->transType);
          isset_transType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transPoint);
          isset_transPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sendTaskId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_receiveTaskId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_serverList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transPoint)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FileTransmissionReceiveContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FileTransmissionReceiveContent");

  xfer += oprot->writeFieldBegin("sendTaskId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sendTaskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiveTaskId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->receiveTaskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverList", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->serverList);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transType", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->transType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transPoint", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->transPoint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FileTransmissionReceiveContent &a, FileTransmissionReceiveContent &b) {
  using ::std::swap;
  swap(a.sendTaskId, b.sendTaskId);
  swap(a.receiveTaskId, b.receiveTaskId);
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.serverList, b.serverList);
  swap(a.transType, b.transType);
  swap(a.transPoint, b.transPoint);
}

FileTransmissionReceiveContent::FileTransmissionReceiveContent(const FileTransmissionReceiveContent& other153) {
  sendTaskId = other153.sendTaskId;
  receiveTaskId = other153.receiveTaskId;
  ip = other153.ip;
  port = other153.port;
  serverList = other153.serverList;
  transType = other153.transType;
  transPoint = other153.transPoint;
}
FileTransmissionReceiveContent& FileTransmissionReceiveContent::operator=(const FileTransmissionReceiveContent& other154) {
  sendTaskId = other154.sendTaskId;
  receiveTaskId = other154.receiveTaskId;
  ip = other154.ip;
  port = other154.port;
  serverList = other154.serverList;
  transType = other154.transType;
  transPoint = other154.transPoint;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FileTransmissionReceiveContent& obj) {
  using apache::thrift::to_string;
  out << "FileTransmissionReceiveContent(";
  out << "sendTaskId=" << to_string(obj.sendTaskId);
  out << ", " << "receiveTaskId=" << to_string(obj.receiveTaskId);
  out << ", " << "ip=" << to_string(obj.ip);
  out << ", " << "port=" << to_string(obj.port);
  out << ", " << "serverList=" << to_string(obj.serverList);
  out << ", " << "transType=" << to_string(obj.transType);
  out << ", " << "transPoint=" << to_string(obj.transPoint);
  out << ")";
  return out;
}


FileTransmissionRejectContent::~FileTransmissionRejectContent() throw() {
}


void FileTransmissionRejectContent::__set_taskId(const int64_t val) {
  this->taskId = val;
}

void FileTransmissionRejectContent::__set_fileName(const std::string& val) {
  this->fileName = val;
}

void FileTransmissionRejectContent::__set_fileSize(const int64_t val) {
  this->fileSize = val;
}

const char* FileTransmissionRejectContent::ascii_fingerprint = "FEBAC9C9DD701ABE5222D0CA33FDA432";
const uint8_t FileTransmissionRejectContent::binary_fingerprint[16] = {0xFE,0xBA,0xC9,0xC9,0xDD,0x70,0x1A,0xBE,0x52,0x22,0xD0,0xCA,0x33,0xFD,0xA4,0x32};

uint32_t FileTransmissionRejectContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_taskId = false;
  bool isset_fileName = false;
  bool isset_fileSize = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->taskId);
          isset_taskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileName);
          isset_fileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileSize);
          isset_fileSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_taskId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fileName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fileSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FileTransmissionRejectContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FileTransmissionRejectContent");

  xfer += oprot->writeFieldBegin("taskId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->taskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->fileName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileSize", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->fileSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FileTransmissionRejectContent &a, FileTransmissionRejectContent &b) {
  using ::std::swap;
  swap(a.taskId, b.taskId);
  swap(a.fileName, b.fileName);
  swap(a.fileSize, b.fileSize);
}

FileTransmissionRejectContent::FileTransmissionRejectContent(const FileTransmissionRejectContent& other155) {
  taskId = other155.taskId;
  fileName = other155.fileName;
  fileSize = other155.fileSize;
}
FileTransmissionRejectContent& FileTransmissionRejectContent::operator=(const FileTransmissionRejectContent& other156) {
  taskId = other156.taskId;
  fileName = other156.fileName;
  fileSize = other156.fileSize;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FileTransmissionRejectContent& obj) {
  using apache::thrift::to_string;
  out << "FileTransmissionRejectContent(";
  out << "taskId=" << to_string(obj.taskId);
  out << ", " << "fileName=" << to_string(obj.fileName);
  out << ", " << "fileSize=" << to_string(obj.fileSize);
  out << ")";
  return out;
}


FileTransmissionStopContent::~FileTransmissionStopContent() throw() {
}


void FileTransmissionStopContent::__set_sendTaskId(const int64_t val) {
  this->sendTaskId = val;
}

void FileTransmissionStopContent::__set_receiveTaskId(const int64_t val) {
  this->receiveTaskId = val;
}

void FileTransmissionStopContent::__set_fileName(const std::string& val) {
  this->fileName = val;
}

void FileTransmissionStopContent::__set_fileSize(const int64_t val) {
  this->fileSize = val;
}

void FileTransmissionStopContent::__set_flag(const int8_t val) {
  this->flag = val;
}

const char* FileTransmissionStopContent::ascii_fingerprint = "A1A6809CD4361F6DBC9990FF9DD0865D";
const uint8_t FileTransmissionStopContent::binary_fingerprint[16] = {0xA1,0xA6,0x80,0x9C,0xD4,0x36,0x1F,0x6D,0xBC,0x99,0x90,0xFF,0x9D,0xD0,0x86,0x5D};

uint32_t FileTransmissionStopContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sendTaskId = false;
  bool isset_receiveTaskId = false;
  bool isset_fileName = false;
  bool isset_fileSize = false;
  bool isset_flag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sendTaskId);
          isset_sendTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receiveTaskId);
          isset_receiveTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileName);
          isset_fileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileSize);
          isset_fileSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->flag);
          isset_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sendTaskId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_receiveTaskId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fileName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fileSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_flag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FileTransmissionStopContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FileTransmissionStopContent");

  xfer += oprot->writeFieldBegin("sendTaskId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sendTaskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiveTaskId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->receiveTaskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->fileName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileSize", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->fileSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flag", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FileTransmissionStopContent &a, FileTransmissionStopContent &b) {
  using ::std::swap;
  swap(a.sendTaskId, b.sendTaskId);
  swap(a.receiveTaskId, b.receiveTaskId);
  swap(a.fileName, b.fileName);
  swap(a.fileSize, b.fileSize);
  swap(a.flag, b.flag);
}

FileTransmissionStopContent::FileTransmissionStopContent(const FileTransmissionStopContent& other157) {
  sendTaskId = other157.sendTaskId;
  receiveTaskId = other157.receiveTaskId;
  fileName = other157.fileName;
  fileSize = other157.fileSize;
  flag = other157.flag;
}
FileTransmissionStopContent& FileTransmissionStopContent::operator=(const FileTransmissionStopContent& other158) {
  sendTaskId = other158.sendTaskId;
  receiveTaskId = other158.receiveTaskId;
  fileName = other158.fileName;
  fileSize = other158.fileSize;
  flag = other158.flag;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FileTransmissionStopContent& obj) {
  using apache::thrift::to_string;
  out << "FileTransmissionStopContent(";
  out << "sendTaskId=" << to_string(obj.sendTaskId);
  out << ", " << "receiveTaskId=" << to_string(obj.receiveTaskId);
  out << ", " << "fileName=" << to_string(obj.fileName);
  out << ", " << "fileSize=" << to_string(obj.fileSize);
  out << ", " << "flag=" << to_string(obj.flag);
  out << ")";
  return out;
}


DeptTransferConfirmContent::~DeptTransferConfirmContent() throw() {
}


void DeptTransferConfirmContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void DeptTransferConfirmContent::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void DeptTransferConfirmContent::__set_dept_id(const int32_t val) {
  this->dept_id = val;
__isset.dept_id = true;
}

void DeptTransferConfirmContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void DeptTransferConfirmContent::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void DeptTransferConfirmContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* DeptTransferConfirmContent::ascii_fingerprint = "276DBD1044C1B368CCA6818A63010483";
const uint8_t DeptTransferConfirmContent::binary_fingerprint[16] = {0x27,0x6D,0xBD,0x10,0x44,0xC1,0xB3,0x68,0xCC,0xA6,0x81,0x8A,0x63,0x01,0x04,0x83};

uint32_t DeptTransferConfirmContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_user_name = false;
  bool isset_dept_name = false;
  bool isset_user_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          isset_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dept_id);
          this->__isset.dept_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeptTransferConfirmContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeptTransferConfirmContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dept_id) {
    xfer += oprot->writeFieldBegin("dept_id", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->dept_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeptTransferConfirmContent &a, DeptTransferConfirmContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.user_name, b.user_name);
  swap(a.dept_id, b.dept_id);
  swap(a.dept_name, b.dept_name);
  swap(a.user_id, b.user_id);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

DeptTransferConfirmContent::DeptTransferConfirmContent(const DeptTransferConfirmContent& other159) {
  operator_id = other159.operator_id;
  user_name = other159.user_name;
  dept_id = other159.dept_id;
  dept_name = other159.dept_name;
  user_id = other159.user_id;
  desc = other159.desc;
  __isset = other159.__isset;
}
DeptTransferConfirmContent& DeptTransferConfirmContent::operator=(const DeptTransferConfirmContent& other160) {
  operator_id = other160.operator_id;
  user_name = other160.user_name;
  dept_id = other160.dept_id;
  dept_name = other160.dept_name;
  user_id = other160.user_id;
  desc = other160.desc;
  __isset = other160.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeptTransferConfirmContent& obj) {
  using apache::thrift::to_string;
  out << "DeptTransferConfirmContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "user_name=" << to_string(obj.user_name);
  out << ", " << "dept_id="; (obj.__isset.dept_id ? (out << to_string(obj.dept_id)) : (out << "<null>"));
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


EmployeeLeaveConfirmContent::~EmployeeLeaveConfirmContent() throw() {
}


void EmployeeLeaveConfirmContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void EmployeeLeaveConfirmContent::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void EmployeeLeaveConfirmContent::__set_dept_id(const int32_t val) {
  this->dept_id = val;
__isset.dept_id = true;
}

void EmployeeLeaveConfirmContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void EmployeeLeaveConfirmContent::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void EmployeeLeaveConfirmContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* EmployeeLeaveConfirmContent::ascii_fingerprint = "276DBD1044C1B368CCA6818A63010483";
const uint8_t EmployeeLeaveConfirmContent::binary_fingerprint[16] = {0x27,0x6D,0xBD,0x10,0x44,0xC1,0xB3,0x68,0xCC,0xA6,0x81,0x8A,0x63,0x01,0x04,0x83};

uint32_t EmployeeLeaveConfirmContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_user_name = false;
  bool isset_dept_name = false;
  bool isset_user_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          isset_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dept_id);
          this->__isset.dept_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EmployeeLeaveConfirmContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("EmployeeLeaveConfirmContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dept_id) {
    xfer += oprot->writeFieldBegin("dept_id", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->dept_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(EmployeeLeaveConfirmContent &a, EmployeeLeaveConfirmContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.user_name, b.user_name);
  swap(a.dept_id, b.dept_id);
  swap(a.dept_name, b.dept_name);
  swap(a.user_id, b.user_id);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

EmployeeLeaveConfirmContent::EmployeeLeaveConfirmContent(const EmployeeLeaveConfirmContent& other161) {
  operator_id = other161.operator_id;
  user_name = other161.user_name;
  dept_id = other161.dept_id;
  dept_name = other161.dept_name;
  user_id = other161.user_id;
  desc = other161.desc;
  __isset = other161.__isset;
}
EmployeeLeaveConfirmContent& EmployeeLeaveConfirmContent::operator=(const EmployeeLeaveConfirmContent& other162) {
  operator_id = other162.operator_id;
  user_name = other162.user_name;
  dept_id = other162.dept_id;
  dept_name = other162.dept_name;
  user_id = other162.user_id;
  desc = other162.desc;
  __isset = other162.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const EmployeeLeaveConfirmContent& obj) {
  using apache::thrift::to_string;
  out << "EmployeeLeaveConfirmContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "user_name=" << to_string(obj.user_name);
  out << ", " << "dept_id="; (obj.__isset.dept_id ? (out << to_string(obj.dept_id)) : (out << "<null>"));
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


EmployeeEntryConfirmContent::~EmployeeEntryConfirmContent() throw() {
}


void EmployeeEntryConfirmContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void EmployeeEntryConfirmContent::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void EmployeeEntryConfirmContent::__set_dept_id(const int32_t val) {
  this->dept_id = val;
__isset.dept_id = true;
}

void EmployeeEntryConfirmContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void EmployeeEntryConfirmContent::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void EmployeeEntryConfirmContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* EmployeeEntryConfirmContent::ascii_fingerprint = "276DBD1044C1B368CCA6818A63010483";
const uint8_t EmployeeEntryConfirmContent::binary_fingerprint[16] = {0x27,0x6D,0xBD,0x10,0x44,0xC1,0xB3,0x68,0xCC,0xA6,0x81,0x8A,0x63,0x01,0x04,0x83};

uint32_t EmployeeEntryConfirmContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_user_name = false;
  bool isset_dept_name = false;
  bool isset_user_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          isset_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dept_id);
          this->__isset.dept_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EmployeeEntryConfirmContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("EmployeeEntryConfirmContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dept_id) {
    xfer += oprot->writeFieldBegin("dept_id", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->dept_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(EmployeeEntryConfirmContent &a, EmployeeEntryConfirmContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.user_name, b.user_name);
  swap(a.dept_id, b.dept_id);
  swap(a.dept_name, b.dept_name);
  swap(a.user_id, b.user_id);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

EmployeeEntryConfirmContent::EmployeeEntryConfirmContent(const EmployeeEntryConfirmContent& other163) {
  operator_id = other163.operator_id;
  user_name = other163.user_name;
  dept_id = other163.dept_id;
  dept_name = other163.dept_name;
  user_id = other163.user_id;
  desc = other163.desc;
  __isset = other163.__isset;
}
EmployeeEntryConfirmContent& EmployeeEntryConfirmContent::operator=(const EmployeeEntryConfirmContent& other164) {
  operator_id = other164.operator_id;
  user_name = other164.user_name;
  dept_id = other164.dept_id;
  dept_name = other164.dept_name;
  user_id = other164.user_id;
  desc = other164.desc;
  __isset = other164.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const EmployeeEntryConfirmContent& obj) {
  using apache::thrift::to_string;
  out << "EmployeeEntryConfirmContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "user_name=" << to_string(obj.user_name);
  out << ", " << "dept_id="; (obj.__isset.dept_id ? (out << to_string(obj.dept_id)) : (out << "<null>"));
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


CompanyJoinContent::~CompanyJoinContent() throw() {
}


void CompanyJoinContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void CompanyJoinContent::__set_company_id(const int32_t val) {
  this->company_id = val;
__isset.company_id = true;
}

void CompanyJoinContent::__set_company_name(const std::string& val) {
  this->company_name = val;
}

void CompanyJoinContent::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void CompanyJoinContent::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void CompanyJoinContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* CompanyJoinContent::ascii_fingerprint = "DC6C26A07F670658C340C956437DF0B7";
const uint8_t CompanyJoinContent::binary_fingerprint[16] = {0xDC,0x6C,0x26,0xA0,0x7F,0x67,0x06,0x58,0xC3,0x40,0xC9,0x56,0x43,0x7D,0xF0,0xB7};

uint32_t CompanyJoinContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_company_name = false;
  bool isset_user_id = false;
  bool isset_user_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->company_id);
          this->__isset.company_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company_name);
          isset_company_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          isset_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_company_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CompanyJoinContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CompanyJoinContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.company_id) {
    xfer += oprot->writeFieldBegin("company_id", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->company_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("company_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->company_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CompanyJoinContent &a, CompanyJoinContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.company_id, b.company_id);
  swap(a.company_name, b.company_name);
  swap(a.user_id, b.user_id);
  swap(a.user_name, b.user_name);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

CompanyJoinContent::CompanyJoinContent(const CompanyJoinContent& other165) {
  operator_id = other165.operator_id;
  company_id = other165.company_id;
  company_name = other165.company_name;
  user_id = other165.user_id;
  user_name = other165.user_name;
  desc = other165.desc;
  __isset = other165.__isset;
}
CompanyJoinContent& CompanyJoinContent::operator=(const CompanyJoinContent& other166) {
  operator_id = other166.operator_id;
  company_id = other166.company_id;
  company_name = other166.company_name;
  user_id = other166.user_id;
  user_name = other166.user_name;
  desc = other166.desc;
  __isset = other166.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CompanyJoinContent& obj) {
  using apache::thrift::to_string;
  out << "CompanyJoinContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "company_id="; (obj.__isset.company_id ? (out << to_string(obj.company_id)) : (out << "<null>"));
  out << ", " << "company_name=" << to_string(obj.company_name);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "user_name=" << to_string(obj.user_name);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


DeptDeleteContent::~DeptDeleteContent() throw() {
}


void DeptDeleteContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void DeptDeleteContent::__set_dept_id(const int32_t val) {
  this->dept_id = val;
}

void DeptDeleteContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void DeptDeleteContent::__set_parent_dept_name(const std::string& val) {
  this->parent_dept_name = val;
}

void DeptDeleteContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* DeptDeleteContent::ascii_fingerprint = "AEEF8A47CB674B0E621F244F915D169A";
const uint8_t DeptDeleteContent::binary_fingerprint[16] = {0xAE,0xEF,0x8A,0x47,0xCB,0x67,0x4B,0x0E,0x62,0x1F,0x24,0x4F,0x91,0x5D,0x16,0x9A};

uint32_t DeptDeleteContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_dept_id = false;
  bool isset_dept_name = false;
  bool isset_parent_dept_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dept_id);
          isset_dept_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parent_dept_name);
          isset_parent_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parent_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeptDeleteContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeptDeleteContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dept_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parent_dept_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->parent_dept_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeptDeleteContent &a, DeptDeleteContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.dept_id, b.dept_id);
  swap(a.dept_name, b.dept_name);
  swap(a.parent_dept_name, b.parent_dept_name);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

DeptDeleteContent::DeptDeleteContent(const DeptDeleteContent& other167) {
  operator_id = other167.operator_id;
  dept_id = other167.dept_id;
  dept_name = other167.dept_name;
  parent_dept_name = other167.parent_dept_name;
  desc = other167.desc;
  __isset = other167.__isset;
}
DeptDeleteContent& DeptDeleteContent::operator=(const DeptDeleteContent& other168) {
  operator_id = other168.operator_id;
  dept_id = other168.dept_id;
  dept_name = other168.dept_name;
  parent_dept_name = other168.parent_dept_name;
  desc = other168.desc;
  __isset = other168.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeptDeleteContent& obj) {
  using apache::thrift::to_string;
  out << "DeptDeleteContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "dept_id=" << to_string(obj.dept_id);
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "parent_dept_name=" << to_string(obj.parent_dept_name);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


DeptParentChangeContent::~DeptParentChangeContent() throw() {
}


void DeptParentChangeContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void DeptParentChangeContent::__set_dept_id(const int32_t val) {
  this->dept_id = val;
}

void DeptParentChangeContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void DeptParentChangeContent::__set_old_dept_name(const std::string& val) {
  this->old_dept_name = val;
}

void DeptParentChangeContent::__set_new_dept_name(const std::string& val) {
  this->new_dept_name = val;
}

void DeptParentChangeContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* DeptParentChangeContent::ascii_fingerprint = "8055EEDFC3011F0FCA8AD622380D2D9B";
const uint8_t DeptParentChangeContent::binary_fingerprint[16] = {0x80,0x55,0xEE,0xDF,0xC3,0x01,0x1F,0x0F,0xCA,0x8A,0xD6,0x22,0x38,0x0D,0x2D,0x9B};

uint32_t DeptParentChangeContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_dept_id = false;
  bool isset_dept_name = false;
  bool isset_old_dept_name = false;
  bool isset_new_dept_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dept_id);
          isset_dept_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->old_dept_name);
          isset_old_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->new_dept_name);
          isset_new_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_old_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeptParentChangeContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeptParentChangeContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dept_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("old_dept_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->old_dept_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_dept_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->new_dept_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeptParentChangeContent &a, DeptParentChangeContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.dept_id, b.dept_id);
  swap(a.dept_name, b.dept_name);
  swap(a.old_dept_name, b.old_dept_name);
  swap(a.new_dept_name, b.new_dept_name);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

DeptParentChangeContent::DeptParentChangeContent(const DeptParentChangeContent& other169) {
  operator_id = other169.operator_id;
  dept_id = other169.dept_id;
  dept_name = other169.dept_name;
  old_dept_name = other169.old_dept_name;
  new_dept_name = other169.new_dept_name;
  desc = other169.desc;
  __isset = other169.__isset;
}
DeptParentChangeContent& DeptParentChangeContent::operator=(const DeptParentChangeContent& other170) {
  operator_id = other170.operator_id;
  dept_id = other170.dept_id;
  dept_name = other170.dept_name;
  old_dept_name = other170.old_dept_name;
  new_dept_name = other170.new_dept_name;
  desc = other170.desc;
  __isset = other170.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeptParentChangeContent& obj) {
  using apache::thrift::to_string;
  out << "DeptParentChangeContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "dept_id=" << to_string(obj.dept_id);
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "old_dept_name=" << to_string(obj.old_dept_name);
  out << ", " << "new_dept_name=" << to_string(obj.new_dept_name);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


DeptUpdateContent::~DeptUpdateContent() throw() {
}


void DeptUpdateContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void DeptUpdateContent::__set_dept_id(const int32_t val) {
  this->dept_id = val;
}

void DeptUpdateContent::__set_old_dept_name(const std::string& val) {
  this->old_dept_name = val;
}

void DeptUpdateContent::__set_new_dept_name(const std::string& val) {
  this->new_dept_name = val;
}

void DeptUpdateContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* DeptUpdateContent::ascii_fingerprint = "AEEF8A47CB674B0E621F244F915D169A";
const uint8_t DeptUpdateContent::binary_fingerprint[16] = {0xAE,0xEF,0x8A,0x47,0xCB,0x67,0x4B,0x0E,0x62,0x1F,0x24,0x4F,0x91,0x5D,0x16,0x9A};

uint32_t DeptUpdateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_dept_id = false;
  bool isset_old_dept_name = false;
  bool isset_new_dept_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dept_id);
          isset_dept_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->old_dept_name);
          isset_old_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->new_dept_name);
          isset_new_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_old_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeptUpdateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeptUpdateContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dept_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("old_dept_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->old_dept_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_dept_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->new_dept_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeptUpdateContent &a, DeptUpdateContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.dept_id, b.dept_id);
  swap(a.old_dept_name, b.old_dept_name);
  swap(a.new_dept_name, b.new_dept_name);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

DeptUpdateContent::DeptUpdateContent(const DeptUpdateContent& other171) {
  operator_id = other171.operator_id;
  dept_id = other171.dept_id;
  old_dept_name = other171.old_dept_name;
  new_dept_name = other171.new_dept_name;
  desc = other171.desc;
  __isset = other171.__isset;
}
DeptUpdateContent& DeptUpdateContent::operator=(const DeptUpdateContent& other172) {
  operator_id = other172.operator_id;
  dept_id = other172.dept_id;
  old_dept_name = other172.old_dept_name;
  new_dept_name = other172.new_dept_name;
  desc = other172.desc;
  __isset = other172.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeptUpdateContent& obj) {
  using apache::thrift::to_string;
  out << "DeptUpdateContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "dept_id=" << to_string(obj.dept_id);
  out << ", " << "old_dept_name=" << to_string(obj.old_dept_name);
  out << ", " << "new_dept_name=" << to_string(obj.new_dept_name);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


DeptTransferContent::~DeptTransferContent() throw() {
}


void DeptTransferContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void DeptTransferContent::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void DeptTransferContent::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void DeptTransferContent::__set_dept_id(const int32_t val) {
  this->dept_id = val;
}

void DeptTransferContent::__set_old_dept_name(const std::string& val) {
  this->old_dept_name = val;
__isset.old_dept_name = true;
}

void DeptTransferContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void DeptTransferContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* DeptTransferContent::ascii_fingerprint = "40EED2FDAEF7D842279C74ACE83AFE79";
const uint8_t DeptTransferContent::binary_fingerprint[16] = {0x40,0xEE,0xD2,0xFD,0xAE,0xF7,0xD8,0x42,0x27,0x9C,0x74,0xAC,0xE8,0x3A,0xFE,0x79};

uint32_t DeptTransferContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_user_id = false;
  bool isset_user_name = false;
  bool isset_dept_id = false;
  bool isset_dept_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          isset_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dept_id);
          isset_dept_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->old_dept_name);
          this->__isset.old_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeptTransferContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeptTransferContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->dept_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.old_dept_name) {
    xfer += oprot->writeFieldBegin("old_dept_name", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->old_dept_name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeptTransferContent &a, DeptTransferContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.user_id, b.user_id);
  swap(a.user_name, b.user_name);
  swap(a.dept_id, b.dept_id);
  swap(a.old_dept_name, b.old_dept_name);
  swap(a.dept_name, b.dept_name);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

DeptTransferContent::DeptTransferContent(const DeptTransferContent& other173) {
  operator_id = other173.operator_id;
  user_id = other173.user_id;
  user_name = other173.user_name;
  dept_id = other173.dept_id;
  old_dept_name = other173.old_dept_name;
  dept_name = other173.dept_name;
  desc = other173.desc;
  __isset = other173.__isset;
}
DeptTransferContent& DeptTransferContent::operator=(const DeptTransferContent& other174) {
  operator_id = other174.operator_id;
  user_id = other174.user_id;
  user_name = other174.user_name;
  dept_id = other174.dept_id;
  old_dept_name = other174.old_dept_name;
  dept_name = other174.dept_name;
  desc = other174.desc;
  __isset = other174.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeptTransferContent& obj) {
  using apache::thrift::to_string;
  out << "DeptTransferContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "user_name=" << to_string(obj.user_name);
  out << ", " << "dept_id=" << to_string(obj.dept_id);
  out << ", " << "old_dept_name="; (obj.__isset.old_dept_name ? (out << to_string(obj.old_dept_name)) : (out << "<null>"));
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


PositionUpdateContent::~PositionUpdateContent() throw() {
}


void PositionUpdateContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void PositionUpdateContent::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void PositionUpdateContent::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void PositionUpdateContent::__set_new_position(const std::string& val) {
  this->new_position = val;
}

void PositionUpdateContent::__set_old_position(const std::string& val) {
  this->old_position = val;
__isset.old_position = true;
}

void PositionUpdateContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void PositionUpdateContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* PositionUpdateContent::ascii_fingerprint = "9FCF77057A734BECF4EE0F222B47801B";
const uint8_t PositionUpdateContent::binary_fingerprint[16] = {0x9F,0xCF,0x77,0x05,0x7A,0x73,0x4B,0xEC,0xF4,0xEE,0x0F,0x22,0x2B,0x47,0x80,0x1B};

uint32_t PositionUpdateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_user_id = false;
  bool isset_user_name = false;
  bool isset_new_position = false;
  bool isset_dept_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          isset_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->new_position);
          isset_new_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->old_position);
          this->__isset.old_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_position)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PositionUpdateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PositionUpdateContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_position", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->new_position);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.old_position) {
    xfer += oprot->writeFieldBegin("old_position", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->old_position);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PositionUpdateContent &a, PositionUpdateContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.user_id, b.user_id);
  swap(a.user_name, b.user_name);
  swap(a.new_position, b.new_position);
  swap(a.old_position, b.old_position);
  swap(a.dept_name, b.dept_name);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

PositionUpdateContent::PositionUpdateContent(const PositionUpdateContent& other175) {
  operator_id = other175.operator_id;
  user_id = other175.user_id;
  user_name = other175.user_name;
  new_position = other175.new_position;
  old_position = other175.old_position;
  dept_name = other175.dept_name;
  desc = other175.desc;
  __isset = other175.__isset;
}
PositionUpdateContent& PositionUpdateContent::operator=(const PositionUpdateContent& other176) {
  operator_id = other176.operator_id;
  user_id = other176.user_id;
  user_name = other176.user_name;
  new_position = other176.new_position;
  old_position = other176.old_position;
  dept_name = other176.dept_name;
  desc = other176.desc;
  __isset = other176.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PositionUpdateContent& obj) {
  using apache::thrift::to_string;
  out << "PositionUpdateContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "user_name=" << to_string(obj.user_name);
  out << ", " << "new_position=" << to_string(obj.new_position);
  out << ", " << "old_position="; (obj.__isset.old_position ? (out << to_string(obj.old_position)) : (out << "<null>"));
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


EmployeeEntryContent::~EmployeeEntryContent() throw() {
}


void EmployeeEntryContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void EmployeeEntryContent::__set_dept_id(const int32_t val) {
  this->dept_id = val;
}

void EmployeeEntryContent::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void EmployeeEntryContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void EmployeeEntryContent::__set_position(const std::string& val) {
  this->position = val;
}

void EmployeeEntryContent::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void EmployeeEntryContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* EmployeeEntryContent::ascii_fingerprint = "AF9711CAD17C108B86FF31EDDA46EC08";
const uint8_t EmployeeEntryContent::binary_fingerprint[16] = {0xAF,0x97,0x11,0xCA,0xD1,0x7C,0x10,0x8B,0x86,0xFF,0x31,0xED,0xDA,0x46,0xEC,0x08};

uint32_t EmployeeEntryContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_dept_id = false;
  bool isset_user_name = false;
  bool isset_dept_name = false;
  bool isset_position = false;
  bool isset_user_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dept_id);
          isset_dept_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          isset_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->position);
          isset_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_position)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EmployeeEntryContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("EmployeeEntryContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dept_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->position);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(EmployeeEntryContent &a, EmployeeEntryContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.dept_id, b.dept_id);
  swap(a.user_name, b.user_name);
  swap(a.dept_name, b.dept_name);
  swap(a.position, b.position);
  swap(a.user_id, b.user_id);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

EmployeeEntryContent::EmployeeEntryContent(const EmployeeEntryContent& other177) {
  operator_id = other177.operator_id;
  dept_id = other177.dept_id;
  user_name = other177.user_name;
  dept_name = other177.dept_name;
  position = other177.position;
  user_id = other177.user_id;
  desc = other177.desc;
  __isset = other177.__isset;
}
EmployeeEntryContent& EmployeeEntryContent::operator=(const EmployeeEntryContent& other178) {
  operator_id = other178.operator_id;
  dept_id = other178.dept_id;
  user_name = other178.user_name;
  dept_name = other178.dept_name;
  position = other178.position;
  user_id = other178.user_id;
  desc = other178.desc;
  __isset = other178.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const EmployeeEntryContent& obj) {
  using apache::thrift::to_string;
  out << "EmployeeEntryContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "dept_id=" << to_string(obj.dept_id);
  out << ", " << "user_name=" << to_string(obj.user_name);
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "position=" << to_string(obj.position);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


EmployeeLeaveContent::~EmployeeLeaveContent() throw() {
}


void EmployeeLeaveContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void EmployeeLeaveContent::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void EmployeeLeaveContent::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void EmployeeLeaveContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void EmployeeLeaveContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* EmployeeLeaveContent::ascii_fingerprint = "AEEF8A47CB674B0E621F244F915D169A";
const uint8_t EmployeeLeaveContent::binary_fingerprint[16] = {0xAE,0xEF,0x8A,0x47,0xCB,0x67,0x4B,0x0E,0x62,0x1F,0x24,0x4F,0x91,0x5D,0x16,0x9A};

uint32_t EmployeeLeaveContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_user_id = false;
  bool isset_user_name = false;
  bool isset_dept_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          isset_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EmployeeLeaveContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("EmployeeLeaveContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(EmployeeLeaveContent &a, EmployeeLeaveContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.user_id, b.user_id);
  swap(a.user_name, b.user_name);
  swap(a.dept_name, b.dept_name);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

EmployeeLeaveContent::EmployeeLeaveContent(const EmployeeLeaveContent& other179) {
  operator_id = other179.operator_id;
  user_id = other179.user_id;
  user_name = other179.user_name;
  dept_name = other179.dept_name;
  desc = other179.desc;
  __isset = other179.__isset;
}
EmployeeLeaveContent& EmployeeLeaveContent::operator=(const EmployeeLeaveContent& other180) {
  operator_id = other180.operator_id;
  user_id = other180.user_id;
  user_name = other180.user_name;
  dept_name = other180.dept_name;
  desc = other180.desc;
  __isset = other180.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const EmployeeLeaveContent& obj) {
  using apache::thrift::to_string;
  out << "EmployeeLeaveContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "user_name=" << to_string(obj.user_name);
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


EmployeeRightsChangeContent::~EmployeeRightsChangeContent() throw() {
}


void EmployeeRightsChangeContent::__set_operator_id(const int32_t val) {
  this->operator_id = val;
}

void EmployeeRightsChangeContent::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void EmployeeRightsChangeContent::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void EmployeeRightsChangeContent::__set_dept_name(const std::string& val) {
  this->dept_name = val;
}

void EmployeeRightsChangeContent::__set_dept_id(const int32_t val) {
  this->dept_id = val;
}

void EmployeeRightsChangeContent::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

const char* EmployeeRightsChangeContent::ascii_fingerprint = "7E1F761F8AF9194C3206AA828C3FE5B6";
const uint8_t EmployeeRightsChangeContent::binary_fingerprint[16] = {0x7E,0x1F,0x76,0x1F,0x8A,0xF9,0x19,0x4C,0x32,0x06,0xAA,0x82,0x8C,0x3F,0xE5,0xB6};

uint32_t EmployeeRightsChangeContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operator_id = false;
  bool isset_user_id = false;
  bool isset_user_name = false;
  bool isset_dept_name = false;
  bool isset_dept_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operator_id);
          isset_operator_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          isset_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          isset_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dept_name);
          isset_dept_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dept_id);
          isset_dept_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operator_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dept_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EmployeeRightsChangeContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("EmployeeRightsChangeContent");

  xfer += oprot->writeFieldBegin("operator_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operator_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dept_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dept_id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->dept_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(EmployeeRightsChangeContent &a, EmployeeRightsChangeContent &b) {
  using ::std::swap;
  swap(a.operator_id, b.operator_id);
  swap(a.user_id, b.user_id);
  swap(a.user_name, b.user_name);
  swap(a.dept_name, b.dept_name);
  swap(a.dept_id, b.dept_id);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

EmployeeRightsChangeContent::EmployeeRightsChangeContent(const EmployeeRightsChangeContent& other181) {
  operator_id = other181.operator_id;
  user_id = other181.user_id;
  user_name = other181.user_name;
  dept_name = other181.dept_name;
  dept_id = other181.dept_id;
  desc = other181.desc;
  __isset = other181.__isset;
}
EmployeeRightsChangeContent& EmployeeRightsChangeContent::operator=(const EmployeeRightsChangeContent& other182) {
  operator_id = other182.operator_id;
  user_id = other182.user_id;
  user_name = other182.user_name;
  dept_name = other182.dept_name;
  dept_id = other182.dept_id;
  desc = other182.desc;
  __isset = other182.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const EmployeeRightsChangeContent& obj) {
  using apache::thrift::to_string;
  out << "EmployeeRightsChangeContent(";
  out << "operator_id=" << to_string(obj.operator_id);
  out << ", " << "user_id=" << to_string(obj.user_id);
  out << ", " << "user_name=" << to_string(obj.user_name);
  out << ", " << "dept_name=" << to_string(obj.dept_name);
  out << ", " << "dept_id=" << to_string(obj.dept_id);
  out << ", " << "desc="; (obj.__isset.desc ? (out << to_string(obj.desc)) : (out << "<null>"));
  out << ")";
  return out;
}


InstantIQInviteContent::~InstantIQInviteContent() throw() {
}


void InstantIQInviteContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void InstantIQInviteContent::__set_hostId(const int32_t val) {
  this->hostId = val;
}

void InstantIQInviteContent::__set_confPwd(const std::string& val) {
  this->confPwd = val;
}

void InstantIQInviteContent::__set_isReserve(const int8_t val) {
  this->isReserve = val;
__isset.isReserve = true;
}

const char* InstantIQInviteContent::ascii_fingerprint = "7486976EF28C2F176D8B57834507D169";
const uint8_t InstantIQInviteContent::binary_fingerprint[16] = {0x74,0x86,0x97,0x6E,0xF2,0x8C,0x2F,0x17,0x6D,0x8B,0x57,0x83,0x45,0x07,0xD1,0x69};

uint32_t InstantIQInviteContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;
  bool isset_hostId = false;
  bool isset_confPwd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hostId);
          isset_hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confPwd);
          isset_confPwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->isReserve);
          this->__isset.isReserve = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_confPwd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InstantIQInviteContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InstantIQInviteContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->hostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confPwd", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->confPwd);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.isReserve) {
    xfer += oprot->writeFieldBegin("isReserve", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->isReserve);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InstantIQInviteContent &a, InstantIQInviteContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.hostId, b.hostId);
  swap(a.confPwd, b.confPwd);
  swap(a.isReserve, b.isReserve);
  swap(a.__isset, b.__isset);
}

InstantIQInviteContent::InstantIQInviteContent(const InstantIQInviteContent& other183) {
  confId = other183.confId;
  hostId = other183.hostId;
  confPwd = other183.confPwd;
  isReserve = other183.isReserve;
  __isset = other183.__isset;
}
InstantIQInviteContent& InstantIQInviteContent::operator=(const InstantIQInviteContent& other184) {
  confId = other184.confId;
  hostId = other184.hostId;
  confPwd = other184.confPwd;
  isReserve = other184.isReserve;
  __isset = other184.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InstantIQInviteContent& obj) {
  using apache::thrift::to_string;
  out << "InstantIQInviteContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "hostId=" << to_string(obj.hostId);
  out << ", " << "confPwd=" << to_string(obj.confPwd);
  out << ", " << "isReserve="; (obj.__isset.isReserve ? (out << to_string(obj.isReserve)) : (out << "<null>"));
  out << ")";
  return out;
}


InstantIQReceiveContent::~InstantIQReceiveContent() throw() {
}


void InstantIQReceiveContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void InstantIQReceiveContent::__set_isReserve(const int8_t val) {
  this->isReserve = val;
__isset.isReserve = true;
}

const char* InstantIQReceiveContent::ascii_fingerprint = "1B4ACDFCA5439DAFFF71DD05FB13004E";
const uint8_t InstantIQReceiveContent::binary_fingerprint[16] = {0x1B,0x4A,0xCD,0xFC,0xA5,0x43,0x9D,0xAF,0xFF,0x71,0xDD,0x05,0xFB,0x13,0x00,0x4E};

uint32_t InstantIQReceiveContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->isReserve);
          this->__isset.isReserve = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InstantIQReceiveContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InstantIQReceiveContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.isReserve) {
    xfer += oprot->writeFieldBegin("isReserve", ::apache::thrift::protocol::T_BYTE, 2);
    xfer += oprot->writeByte(this->isReserve);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InstantIQReceiveContent &a, InstantIQReceiveContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.isReserve, b.isReserve);
  swap(a.__isset, b.__isset);
}

InstantIQReceiveContent::InstantIQReceiveContent(const InstantIQReceiveContent& other185) {
  confId = other185.confId;
  isReserve = other185.isReserve;
  __isset = other185.__isset;
}
InstantIQReceiveContent& InstantIQReceiveContent::operator=(const InstantIQReceiveContent& other186) {
  confId = other186.confId;
  isReserve = other186.isReserve;
  __isset = other186.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InstantIQReceiveContent& obj) {
  using apache::thrift::to_string;
  out << "InstantIQReceiveContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "isReserve="; (obj.__isset.isReserve ? (out << to_string(obj.isReserve)) : (out << "<null>"));
  out << ")";
  return out;
}


InstantIQRejectContent::~InstantIQRejectContent() throw() {
}


void InstantIQRejectContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void InstantIQRejectContent::__set_isReserve(const int8_t val) {
  this->isReserve = val;
__isset.isReserve = true;
}

const char* InstantIQRejectContent::ascii_fingerprint = "1B4ACDFCA5439DAFFF71DD05FB13004E";
const uint8_t InstantIQRejectContent::binary_fingerprint[16] = {0x1B,0x4A,0xCD,0xFC,0xA5,0x43,0x9D,0xAF,0xFF,0x71,0xDD,0x05,0xFB,0x13,0x00,0x4E};

uint32_t InstantIQRejectContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->isReserve);
          this->__isset.isReserve = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InstantIQRejectContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InstantIQRejectContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.isReserve) {
    xfer += oprot->writeFieldBegin("isReserve", ::apache::thrift::protocol::T_BYTE, 2);
    xfer += oprot->writeByte(this->isReserve);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InstantIQRejectContent &a, InstantIQRejectContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.isReserve, b.isReserve);
  swap(a.__isset, b.__isset);
}

InstantIQRejectContent::InstantIQRejectContent(const InstantIQRejectContent& other187) {
  confId = other187.confId;
  isReserve = other187.isReserve;
  __isset = other187.__isset;
}
InstantIQRejectContent& InstantIQRejectContent::operator=(const InstantIQRejectContent& other188) {
  confId = other188.confId;
  isReserve = other188.isReserve;
  __isset = other188.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InstantIQRejectContent& obj) {
  using apache::thrift::to_string;
  out << "InstantIQRejectContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "isReserve="; (obj.__isset.isReserve ? (out << to_string(obj.isReserve)) : (out << "<null>"));
  out << ")";
  return out;
}


IQInviteContent::~IQInviteContent() throw() {
}


void IQInviteContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void IQInviteContent::__set_shareUserID(const int32_t val) {
  this->shareUserID = val;
__isset.shareUserID = true;
}

void IQInviteContent::__set_hostId(const int32_t val) {
  this->hostId = val;
}

void IQInviteContent::__set_groupID(const int32_t val) {
  this->groupID = val;
}

void IQInviteContent::__set_isRecurrent(const int8_t val) {
  this->isRecurrent = val;
}

void IQInviteContent::__set_startTime(const int32_t val) {
  this->startTime = val;
__isset.startTime = true;
}

void IQInviteContent::__set_eventId(const int64_t val) {
  this->eventId = val;
__isset.eventId = true;
}

void IQInviteContent::__set_parentEventId(const int64_t val) {
  this->parentEventId = val;
__isset.parentEventId = true;
}

void IQInviteContent::__set_oriStartTime(const int32_t val) {
  this->oriStartTime = val;
__isset.oriStartTime = true;
}

void IQInviteContent::__set_icalendar(const std::string& val) {
  this->icalendar = val;
}

const char* IQInviteContent::ascii_fingerprint = "487CA912A3979A80E71A122778FB5F6F";
const uint8_t IQInviteContent::binary_fingerprint[16] = {0x48,0x7C,0xA9,0x12,0xA3,0x97,0x9A,0x80,0xE7,0x1A,0x12,0x27,0x78,0xFB,0x5F,0x6F};

uint32_t IQInviteContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;
  bool isset_hostId = false;
  bool isset_groupID = false;
  bool isset_isRecurrent = false;
  bool isset_icalendar = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shareUserID);
          this->__isset.shareUserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hostId);
          isset_hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupID);
          isset_groupID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->isRecurrent);
          isset_isRecurrent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parentEventId);
          this->__isset.parentEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->oriStartTime);
          this->__isset.oriStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->icalendar);
          isset_icalendar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_groupID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isRecurrent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_icalendar)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IQInviteContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("IQInviteContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.shareUserID) {
    xfer += oprot->writeFieldBegin("shareUserID", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->shareUserID);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->hostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupID", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->groupID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("icalendar", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->icalendar);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isRecurrent", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->isRecurrent);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentEventId) {
    xfer += oprot->writeFieldBegin("parentEventId", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->parentEventId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oriStartTime) {
    xfer += oprot->writeFieldBegin("oriStartTime", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->oriStartTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(IQInviteContent &a, IQInviteContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.shareUserID, b.shareUserID);
  swap(a.hostId, b.hostId);
  swap(a.groupID, b.groupID);
  swap(a.isRecurrent, b.isRecurrent);
  swap(a.startTime, b.startTime);
  swap(a.eventId, b.eventId);
  swap(a.parentEventId, b.parentEventId);
  swap(a.oriStartTime, b.oriStartTime);
  swap(a.icalendar, b.icalendar);
  swap(a.__isset, b.__isset);
}

IQInviteContent::IQInviteContent(const IQInviteContent& other189) {
  confId = other189.confId;
  shareUserID = other189.shareUserID;
  hostId = other189.hostId;
  groupID = other189.groupID;
  isRecurrent = other189.isRecurrent;
  startTime = other189.startTime;
  eventId = other189.eventId;
  parentEventId = other189.parentEventId;
  oriStartTime = other189.oriStartTime;
  icalendar = other189.icalendar;
  __isset = other189.__isset;
}
IQInviteContent& IQInviteContent::operator=(const IQInviteContent& other190) {
  confId = other190.confId;
  shareUserID = other190.shareUserID;
  hostId = other190.hostId;
  groupID = other190.groupID;
  isRecurrent = other190.isRecurrent;
  startTime = other190.startTime;
  eventId = other190.eventId;
  parentEventId = other190.parentEventId;
  oriStartTime = other190.oriStartTime;
  icalendar = other190.icalendar;
  __isset = other190.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const IQInviteContent& obj) {
  using apache::thrift::to_string;
  out << "IQInviteContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "shareUserID="; (obj.__isset.shareUserID ? (out << to_string(obj.shareUserID)) : (out << "<null>"));
  out << ", " << "hostId=" << to_string(obj.hostId);
  out << ", " << "groupID=" << to_string(obj.groupID);
  out << ", " << "isRecurrent=" << to_string(obj.isRecurrent);
  out << ", " << "startTime="; (obj.__isset.startTime ? (out << to_string(obj.startTime)) : (out << "<null>"));
  out << ", " << "eventId="; (obj.__isset.eventId ? (out << to_string(obj.eventId)) : (out << "<null>"));
  out << ", " << "parentEventId="; (obj.__isset.parentEventId ? (out << to_string(obj.parentEventId)) : (out << "<null>"));
  out << ", " << "oriStartTime="; (obj.__isset.oriStartTime ? (out << to_string(obj.oriStartTime)) : (out << "<null>"));
  out << ", " << "icalendar=" << to_string(obj.icalendar);
  out << ")";
  return out;
}


IQReceiveContent::~IQReceiveContent() throw() {
}


void IQReceiveContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void IQReceiveContent::__set_shareUserID(const int32_t val) {
  this->shareUserID = val;
__isset.shareUserID = true;
}

void IQReceiveContent::__set_forwardUserID(const int32_t val) {
  this->forwardUserID = val;
__isset.forwardUserID = true;
}

void IQReceiveContent::__set_startTime(const int32_t val) {
  this->startTime = val;
__isset.startTime = true;
}

void IQReceiveContent::__set_hostId(const int32_t val) {
  this->hostId = val;
}

void IQReceiveContent::__set_eventId(const int64_t val) {
  this->eventId = val;
__isset.eventId = true;
}

void IQReceiveContent::__set_parentEventId(const int64_t val) {
  this->parentEventId = val;
__isset.parentEventId = true;
}

void IQReceiveContent::__set_oriStartTime(const int32_t val) {
  this->oriStartTime = val;
__isset.oriStartTime = true;
}

void IQReceiveContent::__set_icalendar(const std::string& val) {
  this->icalendar = val;
__isset.icalendar = true;
}

const char* IQReceiveContent::ascii_fingerprint = "102A5C57681CF2D21771FAB431CB2C1B";
const uint8_t IQReceiveContent::binary_fingerprint[16] = {0x10,0x2A,0x5C,0x57,0x68,0x1C,0xF2,0xD2,0x17,0x71,0xFA,0xB4,0x31,0xCB,0x2C,0x1B};

uint32_t IQReceiveContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;
  bool isset_hostId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shareUserID);
          this->__isset.shareUserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->forwardUserID);
          this->__isset.forwardUserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hostId);
          isset_hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parentEventId);
          this->__isset.parentEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->oriStartTime);
          this->__isset.oriStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->icalendar);
          this->__isset.icalendar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IQReceiveContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("IQReceiveContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.shareUserID) {
    xfer += oprot->writeFieldBegin("shareUserID", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->shareUserID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.forwardUserID) {
    xfer += oprot->writeFieldBegin("forwardUserID", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->forwardUserID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->hostId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.icalendar) {
    xfer += oprot->writeFieldBegin("icalendar", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->icalendar);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentEventId) {
    xfer += oprot->writeFieldBegin("parentEventId", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->parentEventId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oriStartTime) {
    xfer += oprot->writeFieldBegin("oriStartTime", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->oriStartTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(IQReceiveContent &a, IQReceiveContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.shareUserID, b.shareUserID);
  swap(a.forwardUserID, b.forwardUserID);
  swap(a.startTime, b.startTime);
  swap(a.hostId, b.hostId);
  swap(a.eventId, b.eventId);
  swap(a.parentEventId, b.parentEventId);
  swap(a.oriStartTime, b.oriStartTime);
  swap(a.icalendar, b.icalendar);
  swap(a.__isset, b.__isset);
}

IQReceiveContent::IQReceiveContent(const IQReceiveContent& other191) {
  confId = other191.confId;
  shareUserID = other191.shareUserID;
  forwardUserID = other191.forwardUserID;
  startTime = other191.startTime;
  hostId = other191.hostId;
  eventId = other191.eventId;
  parentEventId = other191.parentEventId;
  oriStartTime = other191.oriStartTime;
  icalendar = other191.icalendar;
  __isset = other191.__isset;
}
IQReceiveContent& IQReceiveContent::operator=(const IQReceiveContent& other192) {
  confId = other192.confId;
  shareUserID = other192.shareUserID;
  forwardUserID = other192.forwardUserID;
  startTime = other192.startTime;
  hostId = other192.hostId;
  eventId = other192.eventId;
  parentEventId = other192.parentEventId;
  oriStartTime = other192.oriStartTime;
  icalendar = other192.icalendar;
  __isset = other192.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const IQReceiveContent& obj) {
  using apache::thrift::to_string;
  out << "IQReceiveContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "shareUserID="; (obj.__isset.shareUserID ? (out << to_string(obj.shareUserID)) : (out << "<null>"));
  out << ", " << "forwardUserID="; (obj.__isset.forwardUserID ? (out << to_string(obj.forwardUserID)) : (out << "<null>"));
  out << ", " << "startTime="; (obj.__isset.startTime ? (out << to_string(obj.startTime)) : (out << "<null>"));
  out << ", " << "hostId=" << to_string(obj.hostId);
  out << ", " << "eventId="; (obj.__isset.eventId ? (out << to_string(obj.eventId)) : (out << "<null>"));
  out << ", " << "parentEventId="; (obj.__isset.parentEventId ? (out << to_string(obj.parentEventId)) : (out << "<null>"));
  out << ", " << "oriStartTime="; (obj.__isset.oriStartTime ? (out << to_string(obj.oriStartTime)) : (out << "<null>"));
  out << ", " << "icalendar="; (obj.__isset.icalendar ? (out << to_string(obj.icalendar)) : (out << "<null>"));
  out << ")";
  return out;
}


IQRejectContent::~IQRejectContent() throw() {
}


void IQRejectContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void IQRejectContent::__set_shareUserID(const int32_t val) {
  this->shareUserID = val;
__isset.shareUserID = true;
}

void IQRejectContent::__set_forwardUserID(const int32_t val) {
  this->forwardUserID = val;
__isset.forwardUserID = true;
}

void IQRejectContent::__set_startTime(const int32_t val) {
  this->startTime = val;
__isset.startTime = true;
}

void IQRejectContent::__set_hostId(const int32_t val) {
  this->hostId = val;
}

void IQRejectContent::__set_eventId(const int64_t val) {
  this->eventId = val;
__isset.eventId = true;
}

void IQRejectContent::__set_parentEventId(const int64_t val) {
  this->parentEventId = val;
__isset.parentEventId = true;
}

void IQRejectContent::__set_oriStartTime(const int32_t val) {
  this->oriStartTime = val;
__isset.oriStartTime = true;
}

void IQRejectContent::__set_icalendar(const std::string& val) {
  this->icalendar = val;
__isset.icalendar = true;
}

const char* IQRejectContent::ascii_fingerprint = "102A5C57681CF2D21771FAB431CB2C1B";
const uint8_t IQRejectContent::binary_fingerprint[16] = {0x10,0x2A,0x5C,0x57,0x68,0x1C,0xF2,0xD2,0x17,0x71,0xFA,0xB4,0x31,0xCB,0x2C,0x1B};

uint32_t IQRejectContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;
  bool isset_hostId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shareUserID);
          this->__isset.shareUserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->forwardUserID);
          this->__isset.forwardUserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hostId);
          isset_hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parentEventId);
          this->__isset.parentEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->oriStartTime);
          this->__isset.oriStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->icalendar);
          this->__isset.icalendar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IQRejectContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("IQRejectContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.shareUserID) {
    xfer += oprot->writeFieldBegin("shareUserID", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->shareUserID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.forwardUserID) {
    xfer += oprot->writeFieldBegin("forwardUserID", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->forwardUserID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->hostId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.icalendar) {
    xfer += oprot->writeFieldBegin("icalendar", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->icalendar);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentEventId) {
    xfer += oprot->writeFieldBegin("parentEventId", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->parentEventId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oriStartTime) {
    xfer += oprot->writeFieldBegin("oriStartTime", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->oriStartTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(IQRejectContent &a, IQRejectContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.shareUserID, b.shareUserID);
  swap(a.forwardUserID, b.forwardUserID);
  swap(a.startTime, b.startTime);
  swap(a.hostId, b.hostId);
  swap(a.eventId, b.eventId);
  swap(a.parentEventId, b.parentEventId);
  swap(a.oriStartTime, b.oriStartTime);
  swap(a.icalendar, b.icalendar);
  swap(a.__isset, b.__isset);
}

IQRejectContent::IQRejectContent(const IQRejectContent& other193) {
  confId = other193.confId;
  shareUserID = other193.shareUserID;
  forwardUserID = other193.forwardUserID;
  startTime = other193.startTime;
  hostId = other193.hostId;
  eventId = other193.eventId;
  parentEventId = other193.parentEventId;
  oriStartTime = other193.oriStartTime;
  icalendar = other193.icalendar;
  __isset = other193.__isset;
}
IQRejectContent& IQRejectContent::operator=(const IQRejectContent& other194) {
  confId = other194.confId;
  shareUserID = other194.shareUserID;
  forwardUserID = other194.forwardUserID;
  startTime = other194.startTime;
  hostId = other194.hostId;
  eventId = other194.eventId;
  parentEventId = other194.parentEventId;
  oriStartTime = other194.oriStartTime;
  icalendar = other194.icalendar;
  __isset = other194.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const IQRejectContent& obj) {
  using apache::thrift::to_string;
  out << "IQRejectContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "shareUserID="; (obj.__isset.shareUserID ? (out << to_string(obj.shareUserID)) : (out << "<null>"));
  out << ", " << "forwardUserID="; (obj.__isset.forwardUserID ? (out << to_string(obj.forwardUserID)) : (out << "<null>"));
  out << ", " << "startTime="; (obj.__isset.startTime ? (out << to_string(obj.startTime)) : (out << "<null>"));
  out << ", " << "hostId=" << to_string(obj.hostId);
  out << ", " << "eventId="; (obj.__isset.eventId ? (out << to_string(obj.eventId)) : (out << "<null>"));
  out << ", " << "parentEventId="; (obj.__isset.parentEventId ? (out << to_string(obj.parentEventId)) : (out << "<null>"));
  out << ", " << "oriStartTime="; (obj.__isset.oriStartTime ? (out << to_string(obj.oriStartTime)) : (out << "<null>"));
  out << ", " << "icalendar="; (obj.__isset.icalendar ? (out << to_string(obj.icalendar)) : (out << "<null>"));
  out << ")";
  return out;
}


ConfCancelContent::~ConfCancelContent() throw() {
}


void ConfCancelContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void ConfCancelContent::__set_shareUserID(const int32_t val) {
  this->shareUserID = val;
__isset.shareUserID = true;
}

void ConfCancelContent::__set_startTime(const int32_t val) {
  this->startTime = val;
__isset.startTime = true;
}

void ConfCancelContent::__set_eventId(const int64_t val) {
  this->eventId = val;
__isset.eventId = true;
}

void ConfCancelContent::__set_parentEventId(const int64_t val) {
  this->parentEventId = val;
__isset.parentEventId = true;
}

void ConfCancelContent::__set_oriStartTime(const int32_t val) {
  this->oriStartTime = val;
__isset.oriStartTime = true;
}

void ConfCancelContent::__set_icalendar(const std::string& val) {
  this->icalendar = val;
__isset.icalendar = true;
}

const char* ConfCancelContent::ascii_fingerprint = "C07A66DF3A94FEBF2342340AE9F4B433";
const uint8_t ConfCancelContent::binary_fingerprint[16] = {0xC0,0x7A,0x66,0xDF,0x3A,0x94,0xFE,0xBF,0x23,0x42,0x34,0x0A,0xE9,0xF4,0xB4,0x33};

uint32_t ConfCancelContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shareUserID);
          this->__isset.shareUserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parentEventId);
          this->__isset.parentEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->oriStartTime);
          this->__isset.oriStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->icalendar);
          this->__isset.icalendar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConfCancelContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ConfCancelContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.shareUserID) {
    xfer += oprot->writeFieldBegin("shareUserID", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->shareUserID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.icalendar) {
    xfer += oprot->writeFieldBegin("icalendar", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->icalendar);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentEventId) {
    xfer += oprot->writeFieldBegin("parentEventId", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->parentEventId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oriStartTime) {
    xfer += oprot->writeFieldBegin("oriStartTime", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->oriStartTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ConfCancelContent &a, ConfCancelContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.shareUserID, b.shareUserID);
  swap(a.startTime, b.startTime);
  swap(a.eventId, b.eventId);
  swap(a.parentEventId, b.parentEventId);
  swap(a.oriStartTime, b.oriStartTime);
  swap(a.icalendar, b.icalendar);
  swap(a.__isset, b.__isset);
}

ConfCancelContent::ConfCancelContent(const ConfCancelContent& other195) {
  confId = other195.confId;
  shareUserID = other195.shareUserID;
  startTime = other195.startTime;
  eventId = other195.eventId;
  parentEventId = other195.parentEventId;
  oriStartTime = other195.oriStartTime;
  icalendar = other195.icalendar;
  __isset = other195.__isset;
}
ConfCancelContent& ConfCancelContent::operator=(const ConfCancelContent& other196) {
  confId = other196.confId;
  shareUserID = other196.shareUserID;
  startTime = other196.startTime;
  eventId = other196.eventId;
  parentEventId = other196.parentEventId;
  oriStartTime = other196.oriStartTime;
  icalendar = other196.icalendar;
  __isset = other196.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ConfCancelContent& obj) {
  using apache::thrift::to_string;
  out << "ConfCancelContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "shareUserID="; (obj.__isset.shareUserID ? (out << to_string(obj.shareUserID)) : (out << "<null>"));
  out << ", " << "startTime="; (obj.__isset.startTime ? (out << to_string(obj.startTime)) : (out << "<null>"));
  out << ", " << "eventId="; (obj.__isset.eventId ? (out << to_string(obj.eventId)) : (out << "<null>"));
  out << ", " << "parentEventId="; (obj.__isset.parentEventId ? (out << to_string(obj.parentEventId)) : (out << "<null>"));
  out << ", " << "oriStartTime="; (obj.__isset.oriStartTime ? (out << to_string(obj.oriStartTime)) : (out << "<null>"));
  out << ", " << "icalendar="; (obj.__isset.icalendar ? (out << to_string(obj.icalendar)) : (out << "<null>"));
  out << ")";
  return out;
}


ConfAlertContent::~ConfAlertContent() throw() {
}


void ConfAlertContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void ConfAlertContent::__set_shareUserID(const int32_t val) {
  this->shareUserID = val;
__isset.shareUserID = true;
}

void ConfAlertContent::__set_isInstant(const int8_t val) {
  this->isInstant = val;
__isset.isInstant = true;
}

void ConfAlertContent::__set_startTime(const int32_t val) {
  this->startTime = val;
__isset.startTime = true;
}

void ConfAlertContent::__set_role(const RoleType::type val) {
  this->role = val;
__isset.role = true;
}

void ConfAlertContent::__set_icalendar(const std::string& val) {
  this->icalendar = val;
__isset.icalendar = true;
}

void ConfAlertContent::__set_eventId(const int64_t val) {
  this->eventId = val;
__isset.eventId = true;
}

const char* ConfAlertContent::ascii_fingerprint = "7E5809B2FF9517414EF71B1D09126C1E";
const uint8_t ConfAlertContent::binary_fingerprint[16] = {0x7E,0x58,0x09,0xB2,0xFF,0x95,0x17,0x41,0x4E,0xF7,0x1B,0x1D,0x09,0x12,0x6C,0x1E};

uint32_t ConfAlertContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shareUserID);
          this->__isset.shareUserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->isInstant);
          this->__isset.isInstant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast197;
          xfer += iprot->readI32(ecast197);
          this->role = (RoleType::type)ecast197;
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->icalendar);
          this->__isset.icalendar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConfAlertContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ConfAlertContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.shareUserID) {
    xfer += oprot->writeFieldBegin("shareUserID", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->shareUserID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isInstant) {
    xfer += oprot->writeFieldBegin("isInstant", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->isInstant);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role) {
    xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->role);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.icalendar) {
    xfer += oprot->writeFieldBegin("icalendar", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->icalendar);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ConfAlertContent &a, ConfAlertContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.shareUserID, b.shareUserID);
  swap(a.isInstant, b.isInstant);
  swap(a.startTime, b.startTime);
  swap(a.role, b.role);
  swap(a.icalendar, b.icalendar);
  swap(a.eventId, b.eventId);
  swap(a.__isset, b.__isset);
}

ConfAlertContent::ConfAlertContent(const ConfAlertContent& other198) {
  confId = other198.confId;
  shareUserID = other198.shareUserID;
  isInstant = other198.isInstant;
  startTime = other198.startTime;
  role = other198.role;
  icalendar = other198.icalendar;
  eventId = other198.eventId;
  __isset = other198.__isset;
}
ConfAlertContent& ConfAlertContent::operator=(const ConfAlertContent& other199) {
  confId = other199.confId;
  shareUserID = other199.shareUserID;
  isInstant = other199.isInstant;
  startTime = other199.startTime;
  role = other199.role;
  icalendar = other199.icalendar;
  eventId = other199.eventId;
  __isset = other199.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ConfAlertContent& obj) {
  using apache::thrift::to_string;
  out << "ConfAlertContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "shareUserID="; (obj.__isset.shareUserID ? (out << to_string(obj.shareUserID)) : (out << "<null>"));
  out << ", " << "isInstant="; (obj.__isset.isInstant ? (out << to_string(obj.isInstant)) : (out << "<null>"));
  out << ", " << "startTime="; (obj.__isset.startTime ? (out << to_string(obj.startTime)) : (out << "<null>"));
  out << ", " << "role="; (obj.__isset.role ? (out << to_string(obj.role)) : (out << "<null>"));
  out << ", " << "icalendar="; (obj.__isset.icalendar ? (out << to_string(obj.icalendar)) : (out << "<null>"));
  out << ", " << "eventId="; (obj.__isset.eventId ? (out << to_string(obj.eventId)) : (out << "<null>"));
  out << ")";
  return out;
}


ConfChatContent::~ConfChatContent() throw() {
}


void ConfChatContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void ConfChatContent::__set_startTime(const int32_t val) {
  this->startTime = val;
__isset.startTime = true;
}

void ConfChatContent::__set_text(const TextContent& val) {
  this->text = val;
__isset.text = true;
}

void ConfChatContent::__set_media(const MediaContent& val) {
  this->media = val;
__isset.media = true;
}

void ConfChatContent::__set_eventId(const int64_t val) {
  this->eventId = val;
__isset.eventId = true;
}

void ConfChatContent::__set_revocation(const RevocationContent& val) {
  this->revocation = val;
__isset.revocation = true;
}

const char* ConfChatContent::ascii_fingerprint = "850E6B3CD83964199F17A22332463B61";
const uint8_t ConfChatContent::binary_fingerprint[16] = {0x85,0x0E,0x6B,0x3C,0xD8,0x39,0x64,0x19,0x9F,0x17,0xA2,0x23,0x32,0x46,0x3B,0x61};

uint32_t ConfChatContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->text.read(iprot);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->media.read(iprot);
          this->__isset.media = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->revocation.read(iprot);
          this->__isset.revocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConfChatContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ConfChatContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.text) {
    xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->text.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.media) {
    xfer += oprot->writeFieldBegin("media", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->media.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.revocation) {
    xfer += oprot->writeFieldBegin("revocation", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->revocation.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ConfChatContent &a, ConfChatContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.startTime, b.startTime);
  swap(a.text, b.text);
  swap(a.media, b.media);
  swap(a.eventId, b.eventId);
  swap(a.revocation, b.revocation);
  swap(a.__isset, b.__isset);
}

ConfChatContent::ConfChatContent(const ConfChatContent& other200) {
  confId = other200.confId;
  startTime = other200.startTime;
  text = other200.text;
  media = other200.media;
  eventId = other200.eventId;
  revocation = other200.revocation;
  __isset = other200.__isset;
}
ConfChatContent& ConfChatContent::operator=(const ConfChatContent& other201) {
  confId = other201.confId;
  startTime = other201.startTime;
  text = other201.text;
  media = other201.media;
  eventId = other201.eventId;
  revocation = other201.revocation;
  __isset = other201.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ConfChatContent& obj) {
  using apache::thrift::to_string;
  out << "ConfChatContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "startTime="; (obj.__isset.startTime ? (out << to_string(obj.startTime)) : (out << "<null>"));
  out << ", " << "text="; (obj.__isset.text ? (out << to_string(obj.text)) : (out << "<null>"));
  out << ", " << "media="; (obj.__isset.media ? (out << to_string(obj.media)) : (out << "<null>"));
  out << ", " << "eventId="; (obj.__isset.eventId ? (out << to_string(obj.eventId)) : (out << "<null>"));
  out << ", " << "revocation="; (obj.__isset.revocation ? (out << to_string(obj.revocation)) : (out << "<null>"));
  out << ")";
  return out;
}


ConfSummaryContent::~ConfSummaryContent() throw() {
}


void ConfSummaryContent::__set_operatorid(const int32_t val) {
  this->operatorid = val;
}

void ConfSummaryContent::__set_summary_id(const int32_t val) {
  this->summary_id = val;
}

void ConfSummaryContent::__set_summary_name(const std::string& val) {
  this->summary_name = val;
}

void ConfSummaryContent::__set_state(const int8_t val) {
  this->state = val;
}

void ConfSummaryContent::__set_confId(const int32_t val) {
  this->confId = val;
}

void ConfSummaryContent::__set_confName(const std::string& val) {
  this->confName = val;
__isset.confName = true;
}

void ConfSummaryContent::__set_startTime(const int32_t val) {
  this->startTime = val;
__isset.startTime = true;
}

void ConfSummaryContent::__set_updateTime(const int32_t val) {
  this->updateTime = val;
__isset.updateTime = true;
}

void ConfSummaryContent::__set_eventId(const int64_t val) {
  this->eventId = val;
__isset.eventId = true;
}

const char* ConfSummaryContent::ascii_fingerprint = "CC6AEE2C6FC4468F0111197352940B14";
const uint8_t ConfSummaryContent::binary_fingerprint[16] = {0xCC,0x6A,0xEE,0x2C,0x6F,0xC4,0x46,0x8F,0x01,0x11,0x19,0x73,0x52,0x94,0x0B,0x14};

uint32_t ConfSummaryContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_summary_id = false;
  bool isset_summary_name = false;
  bool isset_state = false;
  bool isset_confId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->summary_id);
          isset_summary_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->summary_name);
          isset_summary_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->state);
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confName);
          this->__isset.confName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateTime);
          this->__isset.updateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_summary_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_summary_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConfSummaryContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ConfSummaryContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("summary_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->summary_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("summary_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->summary_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->confId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.confName) {
    xfer += oprot->writeFieldBegin("confName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->confName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateTime) {
    xfer += oprot->writeFieldBegin("updateTime", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->updateTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ConfSummaryContent &a, ConfSummaryContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.summary_id, b.summary_id);
  swap(a.summary_name, b.summary_name);
  swap(a.state, b.state);
  swap(a.confId, b.confId);
  swap(a.confName, b.confName);
  swap(a.startTime, b.startTime);
  swap(a.updateTime, b.updateTime);
  swap(a.eventId, b.eventId);
  swap(a.__isset, b.__isset);
}

ConfSummaryContent::ConfSummaryContent(const ConfSummaryContent& other202) {
  operatorid = other202.operatorid;
  summary_id = other202.summary_id;
  summary_name = other202.summary_name;
  state = other202.state;
  confId = other202.confId;
  confName = other202.confName;
  startTime = other202.startTime;
  updateTime = other202.updateTime;
  eventId = other202.eventId;
  __isset = other202.__isset;
}
ConfSummaryContent& ConfSummaryContent::operator=(const ConfSummaryContent& other203) {
  operatorid = other203.operatorid;
  summary_id = other203.summary_id;
  summary_name = other203.summary_name;
  state = other203.state;
  confId = other203.confId;
  confName = other203.confName;
  startTime = other203.startTime;
  updateTime = other203.updateTime;
  eventId = other203.eventId;
  __isset = other203.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ConfSummaryContent& obj) {
  using apache::thrift::to_string;
  out << "ConfSummaryContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "summary_id=" << to_string(obj.summary_id);
  out << ", " << "summary_name=" << to_string(obj.summary_name);
  out << ", " << "state=" << to_string(obj.state);
  out << ", " << "confId=" << to_string(obj.confId);
  out << ", " << "confName="; (obj.__isset.confName ? (out << to_string(obj.confName)) : (out << "<null>"));
  out << ", " << "startTime="; (obj.__isset.startTime ? (out << to_string(obj.startTime)) : (out << "<null>"));
  out << ", " << "updateTime="; (obj.__isset.updateTime ? (out << to_string(obj.updateTime)) : (out << "<null>"));
  out << ", " << "eventId="; (obj.__isset.eventId ? (out << to_string(obj.eventId)) : (out << "<null>"));
  out << ")";
  return out;
}


CallStateContent::~CallStateContent() throw() {
}


void CallStateContent::__set_userId(const int32_t val) {
  this->userId = val;
}

void CallStateContent::__set_partyId(const std::string& val) {
  this->partyId = val;
}

void CallStateContent::__set_callSeq(const std::string& val) {
  this->callSeq = val;
}

void CallStateContent::__set_oldCallState(const int32_t val) {
  this->oldCallState = val;
}

void CallStateContent::__set_newCallState(const int32_t val) {
  this->newCallState = val;
}

const char* CallStateContent::ascii_fingerprint = "CE957BCE4AA85FCDE5AE4AA17006475D";
const uint8_t CallStateContent::binary_fingerprint[16] = {0xCE,0x95,0x7B,0xCE,0x4A,0xA8,0x5F,0xCD,0xE5,0xAE,0x4A,0xA1,0x70,0x06,0x47,0x5D};

uint32_t CallStateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userId = false;
  bool isset_partyId = false;
  bool isset_callSeq = false;
  bool isset_oldCallState = false;
  bool isset_newCallState = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          isset_userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partyId);
          isset_partyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->callSeq);
          isset_callSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->oldCallState);
          isset_oldCallState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->newCallState);
          isset_newCallState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_callSeq)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_oldCallState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_newCallState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CallStateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CallStateContent");

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partyId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->partyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callSeq", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->callSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oldCallState", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->oldCallState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newCallState", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->newCallState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CallStateContent &a, CallStateContent &b) {
  using ::std::swap;
  swap(a.userId, b.userId);
  swap(a.partyId, b.partyId);
  swap(a.callSeq, b.callSeq);
  swap(a.oldCallState, b.oldCallState);
  swap(a.newCallState, b.newCallState);
}

CallStateContent::CallStateContent(const CallStateContent& other204) {
  userId = other204.userId;
  partyId = other204.partyId;
  callSeq = other204.callSeq;
  oldCallState = other204.oldCallState;
  newCallState = other204.newCallState;
}
CallStateContent& CallStateContent::operator=(const CallStateContent& other205) {
  userId = other205.userId;
  partyId = other205.partyId;
  callSeq = other205.callSeq;
  oldCallState = other205.oldCallState;
  newCallState = other205.newCallState;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CallStateContent& obj) {
  using apache::thrift::to_string;
  out << "CallStateContent(";
  out << "userId=" << to_string(obj.userId);
  out << ", " << "partyId=" << to_string(obj.partyId);
  out << ", " << "callSeq=" << to_string(obj.callSeq);
  out << ", " << "oldCallState=" << to_string(obj.oldCallState);
  out << ", " << "newCallState=" << to_string(obj.newCallState);
  out << ")";
  return out;
}


ConfUploadContent::~ConfUploadContent() throw() {
}


void ConfUploadContent::__set_operatorid(const int64_t val) {
  this->operatorid = val;
}

void ConfUploadContent::__set_doc_name(const std::string& val) {
  this->doc_name = val;
}

void ConfUploadContent::__set_down_url(const std::string& val) {
  this->down_url = val;
}

void ConfUploadContent::__set_size(const int64_t val) {
  this->size = val;
}

void ConfUploadContent::__set_contentId(const int64_t val) {
  this->contentId = val;
}

void ConfUploadContent::__set_eventId(const int64_t val) {
  this->eventId = val;
}

const char* ConfUploadContent::ascii_fingerprint = "707BCDFD0325EAD1D2F4576D0F0B8748";
const uint8_t ConfUploadContent::binary_fingerprint[16] = {0x70,0x7B,0xCD,0xFD,0x03,0x25,0xEA,0xD1,0xD2,0xF4,0x57,0x6D,0x0F,0x0B,0x87,0x48};

uint32_t ConfUploadContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_doc_name = false;
  bool isset_down_url = false;
  bool isset_size = false;
  bool isset_contentId = false;
  bool isset_eventId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->doc_name);
          isset_doc_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->down_url);
          isset_down_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          isset_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          isset_contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_doc_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_down_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConfUploadContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ConfUploadContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("doc_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->doc_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("down_url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->down_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->contentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ConfUploadContent &a, ConfUploadContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.doc_name, b.doc_name);
  swap(a.down_url, b.down_url);
  swap(a.size, b.size);
  swap(a.contentId, b.contentId);
  swap(a.eventId, b.eventId);
}

ConfUploadContent::ConfUploadContent(const ConfUploadContent& other206) {
  operatorid = other206.operatorid;
  doc_name = other206.doc_name;
  down_url = other206.down_url;
  size = other206.size;
  contentId = other206.contentId;
  eventId = other206.eventId;
}
ConfUploadContent& ConfUploadContent::operator=(const ConfUploadContent& other207) {
  operatorid = other207.operatorid;
  doc_name = other207.doc_name;
  down_url = other207.down_url;
  size = other207.size;
  contentId = other207.contentId;
  eventId = other207.eventId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ConfUploadContent& obj) {
  using apache::thrift::to_string;
  out << "ConfUploadContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "doc_name=" << to_string(obj.doc_name);
  out << ", " << "down_url=" << to_string(obj.down_url);
  out << ", " << "size=" << to_string(obj.size);
  out << ", " << "contentId=" << to_string(obj.contentId);
  out << ", " << "eventId=" << to_string(obj.eventId);
  out << ")";
  return out;
}


ConfDelDocContent::~ConfDelDocContent() throw() {
}


void ConfDelDocContent::__set_operatorid(const int64_t val) {
  this->operatorid = val;
}

void ConfDelDocContent::__set_doc_name(const std::string& val) {
  this->doc_name = val;
}

void ConfDelDocContent::__set_contentId(const int64_t val) {
  this->contentId = val;
}

void ConfDelDocContent::__set_eventId(const int64_t val) {
  this->eventId = val;
}

const char* ConfDelDocContent::ascii_fingerprint = "AEDA8F94B5AABFD550048B0BD878BEBD";
const uint8_t ConfDelDocContent::binary_fingerprint[16] = {0xAE,0xDA,0x8F,0x94,0xB5,0xAA,0xBF,0xD5,0x50,0x04,0x8B,0x0B,0xD8,0x78,0xBE,0xBD};

uint32_t ConfDelDocContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_operatorid = false;
  bool isset_doc_name = false;
  bool isset_contentId = false;
  bool isset_eventId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->operatorid);
          isset_operatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->doc_name);
          isset_doc_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contentId);
          isset_contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_operatorid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_doc_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConfDelDocContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ConfDelDocContent");

  xfer += oprot->writeFieldBegin("operatorid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->operatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("doc_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->doc_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->contentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ConfDelDocContent &a, ConfDelDocContent &b) {
  using ::std::swap;
  swap(a.operatorid, b.operatorid);
  swap(a.doc_name, b.doc_name);
  swap(a.contentId, b.contentId);
  swap(a.eventId, b.eventId);
}

ConfDelDocContent::ConfDelDocContent(const ConfDelDocContent& other208) {
  operatorid = other208.operatorid;
  doc_name = other208.doc_name;
  contentId = other208.contentId;
  eventId = other208.eventId;
}
ConfDelDocContent& ConfDelDocContent::operator=(const ConfDelDocContent& other209) {
  operatorid = other209.operatorid;
  doc_name = other209.doc_name;
  contentId = other209.contentId;
  eventId = other209.eventId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ConfDelDocContent& obj) {
  using apache::thrift::to_string;
  out << "ConfDelDocContent(";
  out << "operatorid=" << to_string(obj.operatorid);
  out << ", " << "doc_name=" << to_string(obj.doc_name);
  out << ", " << "contentId=" << to_string(obj.contentId);
  out << ", " << "eventId=" << to_string(obj.eventId);
  out << ")";
  return out;
}


ConfShareContent::~ConfShareContent() throw() {
}


const char* ConfShareContent::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t ConfShareContent::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t ConfShareContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConfShareContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ConfShareContent");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ConfShareContent &a, ConfShareContent &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ConfShareContent::ConfShareContent(const ConfShareContent& other210) {
  (void) other210;
}
ConfShareContent& ConfShareContent::operator=(const ConfShareContent& other211) {
  (void) other211;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ConfShareContent& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "ConfShareContent(";
  out << ")";
  return out;
}


AudioInviteContent::~AudioInviteContent() throw() {
}


void AudioInviteContent::__set_confId(const std::string& val) {
  this->confId = val;
}

void AudioInviteContent::__set_hostId(const int32_t val) {
  this->hostId = val;
}

void AudioInviteContent::__set_confPwd(const std::string& val) {
  this->confPwd = val;
}

const char* AudioInviteContent::ascii_fingerprint = "70563A0628F75DF9555F4D24690B1E26";
const uint8_t AudioInviteContent::binary_fingerprint[16] = {0x70,0x56,0x3A,0x06,0x28,0xF7,0x5D,0xF9,0x55,0x5F,0x4D,0x24,0x69,0x0B,0x1E,0x26};

uint32_t AudioInviteContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;
  bool isset_hostId = false;
  bool isset_confPwd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hostId);
          isset_hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confPwd);
          isset_confPwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_confPwd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AudioInviteContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AudioInviteContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->confId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->hostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confPwd", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->confPwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AudioInviteContent &a, AudioInviteContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.hostId, b.hostId);
  swap(a.confPwd, b.confPwd);
}

AudioInviteContent::AudioInviteContent(const AudioInviteContent& other212) {
  confId = other212.confId;
  hostId = other212.hostId;
  confPwd = other212.confPwd;
}
AudioInviteContent& AudioInviteContent::operator=(const AudioInviteContent& other213) {
  confId = other213.confId;
  hostId = other213.hostId;
  confPwd = other213.confPwd;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AudioInviteContent& obj) {
  using apache::thrift::to_string;
  out << "AudioInviteContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "hostId=" << to_string(obj.hostId);
  out << ", " << "confPwd=" << to_string(obj.confPwd);
  out << ")";
  return out;
}


AudioReceiveContent::~AudioReceiveContent() throw() {
}


void AudioReceiveContent::__set_confId(const std::string& val) {
  this->confId = val;
}

void AudioReceiveContent::__set_hostId(const int32_t val) {
  this->hostId = val;
}

const char* AudioReceiveContent::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t AudioReceiveContent::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t AudioReceiveContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;
  bool isset_hostId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hostId);
          isset_hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AudioReceiveContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AudioReceiveContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->confId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->hostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AudioReceiveContent &a, AudioReceiveContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.hostId, b.hostId);
}

AudioReceiveContent::AudioReceiveContent(const AudioReceiveContent& other214) {
  confId = other214.confId;
  hostId = other214.hostId;
}
AudioReceiveContent& AudioReceiveContent::operator=(const AudioReceiveContent& other215) {
  confId = other215.confId;
  hostId = other215.hostId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AudioReceiveContent& obj) {
  using apache::thrift::to_string;
  out << "AudioReceiveContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "hostId=" << to_string(obj.hostId);
  out << ")";
  return out;
}


AudioRejectContent::~AudioRejectContent() throw() {
}


void AudioRejectContent::__set_confId(const std::string& val) {
  this->confId = val;
}

void AudioRejectContent::__set_hostId(const int32_t val) {
  this->hostId = val;
}

void AudioRejectContent::__set_reason(const std::string& val) {
  this->reason = val;
__isset.reason = true;
}

const char* AudioRejectContent::ascii_fingerprint = "614DB859ACF17855F9BC7D08DDD7B32A";
const uint8_t AudioRejectContent::binary_fingerprint[16] = {0x61,0x4D,0xB8,0x59,0xAC,0xF1,0x78,0x55,0xF9,0xBC,0x7D,0x08,0xDD,0xD7,0xB3,0x2A};

uint32_t AudioRejectContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;
  bool isset_hostId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hostId);
          isset_hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AudioRejectContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AudioRejectContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->confId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->hostId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.reason) {
    xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->reason);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AudioRejectContent &a, AudioRejectContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.hostId, b.hostId);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

AudioRejectContent::AudioRejectContent(const AudioRejectContent& other216) {
  confId = other216.confId;
  hostId = other216.hostId;
  reason = other216.reason;
  __isset = other216.__isset;
}
AudioRejectContent& AudioRejectContent::operator=(const AudioRejectContent& other217) {
  confId = other217.confId;
  hostId = other217.hostId;
  reason = other217.reason;
  __isset = other217.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AudioRejectContent& obj) {
  using apache::thrift::to_string;
  out << "AudioRejectContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "hostId=" << to_string(obj.hostId);
  out << ", " << "reason="; (obj.__isset.reason ? (out << to_string(obj.reason)) : (out << "<null>"));
  out << ")";
  return out;
}


AudioStopContent::~AudioStopContent() throw() {
}


void AudioStopContent::__set_confId(const std::string& val) {
  this->confId = val;
}

void AudioStopContent::__set_hostId(const int32_t val) {
  this->hostId = val;
}

const char* AudioStopContent::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t AudioStopContent::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t AudioStopContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;
  bool isset_hostId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hostId);
          isset_hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AudioStopContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AudioStopContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->confId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->hostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AudioStopContent &a, AudioStopContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.hostId, b.hostId);
}

AudioStopContent::AudioStopContent(const AudioStopContent& other218) {
  confId = other218.confId;
  hostId = other218.hostId;
}
AudioStopContent& AudioStopContent::operator=(const AudioStopContent& other219) {
  confId = other219.confId;
  hostId = other219.hostId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AudioStopContent& obj) {
  using apache::thrift::to_string;
  out << "AudioStopContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "hostId=" << to_string(obj.hostId);
  out << ")";
  return out;
}


AudioBlockCallContent::~AudioBlockCallContent() throw() {
}


void AudioBlockCallContent::__set_phoneNum(const std::string& val) {
  this->phoneNum = val;
__isset.phoneNum = true;
}

const char* AudioBlockCallContent::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t AudioBlockCallContent::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t AudioBlockCallContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneNum);
          this->__isset.phoneNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AudioBlockCallContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AudioBlockCallContent");

  if (this->__isset.phoneNum) {
    xfer += oprot->writeFieldBegin("phoneNum", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->phoneNum);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AudioBlockCallContent &a, AudioBlockCallContent &b) {
  using ::std::swap;
  swap(a.phoneNum, b.phoneNum);
  swap(a.__isset, b.__isset);
}

AudioBlockCallContent::AudioBlockCallContent(const AudioBlockCallContent& other220) {
  phoneNum = other220.phoneNum;
  __isset = other220.__isset;
}
AudioBlockCallContent& AudioBlockCallContent::operator=(const AudioBlockCallContent& other221) {
  phoneNum = other221.phoneNum;
  __isset = other221.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AudioBlockCallContent& obj) {
  using apache::thrift::to_string;
  out << "AudioBlockCallContent(";
  out << "phoneNum="; (obj.__isset.phoneNum ? (out << to_string(obj.phoneNum)) : (out << "<null>"));
  out << ")";
  return out;
}


AudioRejectCallContent::~AudioRejectCallContent() throw() {
}


void AudioRejectCallContent::__set_phoneNum(const std::string& val) {
  this->phoneNum = val;
__isset.phoneNum = true;
}

const char* AudioRejectCallContent::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t AudioRejectCallContent::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t AudioRejectCallContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneNum);
          this->__isset.phoneNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AudioRejectCallContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AudioRejectCallContent");

  if (this->__isset.phoneNum) {
    xfer += oprot->writeFieldBegin("phoneNum", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->phoneNum);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AudioRejectCallContent &a, AudioRejectCallContent &b) {
  using ::std::swap;
  swap(a.phoneNum, b.phoneNum);
  swap(a.__isset, b.__isset);
}

AudioRejectCallContent::AudioRejectCallContent(const AudioRejectCallContent& other222) {
  phoneNum = other222.phoneNum;
  __isset = other222.__isset;
}
AudioRejectCallContent& AudioRejectCallContent::operator=(const AudioRejectCallContent& other223) {
  phoneNum = other223.phoneNum;
  __isset = other223.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AudioRejectCallContent& obj) {
  using apache::thrift::to_string;
  out << "AudioRejectCallContent(";
  out << "phoneNum="; (obj.__isset.phoneNum ? (out << to_string(obj.phoneNum)) : (out << "<null>"));
  out << ")";
  return out;
}


AudioRecentCallContent::~AudioRecentCallContent() throw() {
}


void AudioRecentCallContent::__set_duration(const int32_t val) {
  this->duration = val;
}

void AudioRecentCallContent::__set_phoneNum(const std::string& val) {
  this->phoneNum = val;
__isset.phoneNum = true;
}

const char* AudioRecentCallContent::ascii_fingerprint = "96705E9A3FD7B072319C71653E0DBB90";
const uint8_t AudioRecentCallContent::binary_fingerprint[16] = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

uint32_t AudioRecentCallContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_duration = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->duration);
          isset_duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneNum);
          this->__isset.phoneNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_duration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AudioRecentCallContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AudioRecentCallContent");

  xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->duration);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.phoneNum) {
    xfer += oprot->writeFieldBegin("phoneNum", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->phoneNum);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AudioRecentCallContent &a, AudioRecentCallContent &b) {
  using ::std::swap;
  swap(a.duration, b.duration);
  swap(a.phoneNum, b.phoneNum);
  swap(a.__isset, b.__isset);
}

AudioRecentCallContent::AudioRecentCallContent(const AudioRecentCallContent& other224) {
  duration = other224.duration;
  phoneNum = other224.phoneNum;
  __isset = other224.__isset;
}
AudioRecentCallContent& AudioRecentCallContent::operator=(const AudioRecentCallContent& other225) {
  duration = other225.duration;
  phoneNum = other225.phoneNum;
  __isset = other225.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AudioRecentCallContent& obj) {
  using apache::thrift::to_string;
  out << "AudioRecentCallContent(";
  out << "duration=" << to_string(obj.duration);
  out << ", " << "phoneNum="; (obj.__isset.phoneNum ? (out << to_string(obj.phoneNum)) : (out << "<null>"));
  out << ")";
  return out;
}


AudioCancelCallContent::~AudioCancelCallContent() throw() {
}


void AudioCancelCallContent::__set_phoneNum(const std::string& val) {
  this->phoneNum = val;
__isset.phoneNum = true;
}

const char* AudioCancelCallContent::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t AudioCancelCallContent::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t AudioCancelCallContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneNum);
          this->__isset.phoneNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AudioCancelCallContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AudioCancelCallContent");

  if (this->__isset.phoneNum) {
    xfer += oprot->writeFieldBegin("phoneNum", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->phoneNum);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AudioCancelCallContent &a, AudioCancelCallContent &b) {
  using ::std::swap;
  swap(a.phoneNum, b.phoneNum);
  swap(a.__isset, b.__isset);
}

AudioCancelCallContent::AudioCancelCallContent(const AudioCancelCallContent& other226) {
  phoneNum = other226.phoneNum;
  __isset = other226.__isset;
}
AudioCancelCallContent& AudioCancelCallContent::operator=(const AudioCancelCallContent& other227) {
  phoneNum = other227.phoneNum;
  __isset = other227.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AudioCancelCallContent& obj) {
  using apache::thrift::to_string;
  out << "AudioCancelCallContent(";
  out << "phoneNum="; (obj.__isset.phoneNum ? (out << to_string(obj.phoneNum)) : (out << "<null>"));
  out << ")";
  return out;
}


CardUpdateContent::~CardUpdateContent() throw() {
}


void CardUpdateContent::__set_userId(const int32_t val) {
  this->userId = val;
}

void CardUpdateContent::__set_cardVersion(const int32_t val) {
  this->cardVersion = val;
}

const char* CardUpdateContent::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t CardUpdateContent::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t CardUpdateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userId = false;
  bool isset_cardVersion = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          isset_userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cardVersion);
          isset_cardVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cardVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CardUpdateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CardUpdateContent");

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cardVersion", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->cardVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CardUpdateContent &a, CardUpdateContent &b) {
  using ::std::swap;
  swap(a.userId, b.userId);
  swap(a.cardVersion, b.cardVersion);
}

CardUpdateContent::CardUpdateContent(const CardUpdateContent& other228) {
  userId = other228.userId;
  cardVersion = other228.cardVersion;
}
CardUpdateContent& CardUpdateContent::operator=(const CardUpdateContent& other229) {
  userId = other229.userId;
  cardVersion = other229.cardVersion;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CardUpdateContent& obj) {
  using apache::thrift::to_string;
  out << "CardUpdateContent(";
  out << "userId=" << to_string(obj.userId);
  out << ", " << "cardVersion=" << to_string(obj.cardVersion);
  out << ")";
  return out;
}


ContacterAddContent::~ContacterAddContent() throw() {
}


const char* ContacterAddContent::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t ContacterAddContent::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t ContacterAddContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContacterAddContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ContacterAddContent");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ContacterAddContent &a, ContacterAddContent &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ContacterAddContent::ContacterAddContent(const ContacterAddContent& other230) {
  (void) other230;
}
ContacterAddContent& ContacterAddContent::operator=(const ContacterAddContent& other231) {
  (void) other231;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ContacterAddContent& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "ContacterAddContent(";
  out << ")";
  return out;
}


ContacterDelContent::~ContacterDelContent() throw() {
}


const char* ContacterDelContent::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t ContacterDelContent::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t ContacterDelContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContacterDelContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ContacterDelContent");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ContacterDelContent &a, ContacterDelContent &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ContacterDelContent::ContacterDelContent(const ContacterDelContent& other232) {
  (void) other232;
}
ContacterDelContent& ContacterDelContent::operator=(const ContacterDelContent& other233) {
  (void) other233;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ContacterDelContent& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "ContacterDelContent(";
  out << ")";
  return out;
}


AttentionCreateContent::~AttentionCreateContent() throw() {
}


void AttentionCreateContent::__set_operatorId(const int32_t val) {
  this->operatorId = val;
__isset.operatorId = true;
}

void AttentionCreateContent::__set_attentionId(const int32_t val) {
  this->attentionId = val;
__isset.attentionId = true;
}

const char* AttentionCreateContent::ascii_fingerprint = "C1241AF5AA92C586B664FD41DC97C576";
const uint8_t AttentionCreateContent::binary_fingerprint[16] = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

uint32_t AttentionCreateContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorId);
          this->__isset.operatorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attentionId);
          this->__isset.attentionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AttentionCreateContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AttentionCreateContent");

  if (this->__isset.operatorId) {
    xfer += oprot->writeFieldBegin("operatorId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->operatorId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attentionId) {
    xfer += oprot->writeFieldBegin("attentionId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->attentionId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AttentionCreateContent &a, AttentionCreateContent &b) {
  using ::std::swap;
  swap(a.operatorId, b.operatorId);
  swap(a.attentionId, b.attentionId);
  swap(a.__isset, b.__isset);
}

AttentionCreateContent::AttentionCreateContent(const AttentionCreateContent& other234) {
  operatorId = other234.operatorId;
  attentionId = other234.attentionId;
  __isset = other234.__isset;
}
AttentionCreateContent& AttentionCreateContent::operator=(const AttentionCreateContent& other235) {
  operatorId = other235.operatorId;
  attentionId = other235.attentionId;
  __isset = other235.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AttentionCreateContent& obj) {
  using apache::thrift::to_string;
  out << "AttentionCreateContent(";
  out << "operatorId="; (obj.__isset.operatorId ? (out << to_string(obj.operatorId)) : (out << "<null>"));
  out << ", " << "attentionId="; (obj.__isset.attentionId ? (out << to_string(obj.attentionId)) : (out << "<null>"));
  out << ")";
  return out;
}


AttentionCancelContent::~AttentionCancelContent() throw() {
}


void AttentionCancelContent::__set_operatorId(const int32_t val) {
  this->operatorId = val;
__isset.operatorId = true;
}

void AttentionCancelContent::__set_attentionId(const int32_t val) {
  this->attentionId = val;
__isset.attentionId = true;
}

const char* AttentionCancelContent::ascii_fingerprint = "C1241AF5AA92C586B664FD41DC97C576";
const uint8_t AttentionCancelContent::binary_fingerprint[16] = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

uint32_t AttentionCancelContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operatorId);
          this->__isset.operatorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attentionId);
          this->__isset.attentionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AttentionCancelContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AttentionCancelContent");

  if (this->__isset.operatorId) {
    xfer += oprot->writeFieldBegin("operatorId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->operatorId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attentionId) {
    xfer += oprot->writeFieldBegin("attentionId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->attentionId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AttentionCancelContent &a, AttentionCancelContent &b) {
  using ::std::swap;
  swap(a.operatorId, b.operatorId);
  swap(a.attentionId, b.attentionId);
  swap(a.__isset, b.__isset);
}

AttentionCancelContent::AttentionCancelContent(const AttentionCancelContent& other236) {
  operatorId = other236.operatorId;
  attentionId = other236.attentionId;
  __isset = other236.__isset;
}
AttentionCancelContent& AttentionCancelContent::operator=(const AttentionCancelContent& other237) {
  operatorId = other237.operatorId;
  attentionId = other237.attentionId;
  __isset = other237.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AttentionCancelContent& obj) {
  using apache::thrift::to_string;
  out << "AttentionCancelContent(";
  out << "operatorId="; (obj.__isset.operatorId ? (out << to_string(obj.operatorId)) : (out << "<null>"));
  out << ", " << "attentionId="; (obj.__isset.attentionId ? (out << to_string(obj.attentionId)) : (out << "<null>"));
  out << ")";
  return out;
}


WBMessageContent::~WBMessageContent() throw() {
}


void WBMessageContent::__set_text(const std::string& val) {
  this->text = val;
}

const char* WBMessageContent::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t WBMessageContent::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t WBMessageContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_text = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          isset_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_text)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WBMessageContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WBMessageContent");

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WBMessageContent &a, WBMessageContent &b) {
  using ::std::swap;
  swap(a.text, b.text);
}

WBMessageContent::WBMessageContent(const WBMessageContent& other238) {
  text = other238.text;
}
WBMessageContent& WBMessageContent::operator=(const WBMessageContent& other239) {
  text = other239.text;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WBMessageContent& obj) {
  using apache::thrift::to_string;
  out << "WBMessageContent(";
  out << "text=" << to_string(obj.text);
  out << ")";
  return out;
}


RemoteAssistanceInviteContent::~RemoteAssistanceInviteContent() throw() {
}


void RemoteAssistanceInviteContent::__set_confId(const std::string& val) {
  this->confId = val;
}

void RemoteAssistanceInviteContent::__set_confPwd(const std::string& val) {
  this->confPwd = val;
}

const char* RemoteAssistanceInviteContent::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t RemoteAssistanceInviteContent::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t RemoteAssistanceInviteContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;
  bool isset_confPwd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confPwd);
          isset_confPwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_confPwd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RemoteAssistanceInviteContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RemoteAssistanceInviteContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->confId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confPwd", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->confPwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RemoteAssistanceInviteContent &a, RemoteAssistanceInviteContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
  swap(a.confPwd, b.confPwd);
}

RemoteAssistanceInviteContent::RemoteAssistanceInviteContent(const RemoteAssistanceInviteContent& other240) {
  confId = other240.confId;
  confPwd = other240.confPwd;
}
RemoteAssistanceInviteContent& RemoteAssistanceInviteContent::operator=(const RemoteAssistanceInviteContent& other241) {
  confId = other241.confId;
  confPwd = other241.confPwd;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RemoteAssistanceInviteContent& obj) {
  using apache::thrift::to_string;
  out << "RemoteAssistanceInviteContent(";
  out << "confId=" << to_string(obj.confId);
  out << ", " << "confPwd=" << to_string(obj.confPwd);
  out << ")";
  return out;
}


RemoteAssistanceAcceptContent::~RemoteAssistanceAcceptContent() throw() {
}


void RemoteAssistanceAcceptContent::__set_confId(const std::string& val) {
  this->confId = val;
}

const char* RemoteAssistanceAcceptContent::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t RemoteAssistanceAcceptContent::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t RemoteAssistanceAcceptContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RemoteAssistanceAcceptContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RemoteAssistanceAcceptContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->confId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RemoteAssistanceAcceptContent &a, RemoteAssistanceAcceptContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
}

RemoteAssistanceAcceptContent::RemoteAssistanceAcceptContent(const RemoteAssistanceAcceptContent& other242) {
  confId = other242.confId;
}
RemoteAssistanceAcceptContent& RemoteAssistanceAcceptContent::operator=(const RemoteAssistanceAcceptContent& other243) {
  confId = other243.confId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RemoteAssistanceAcceptContent& obj) {
  using apache::thrift::to_string;
  out << "RemoteAssistanceAcceptContent(";
  out << "confId=" << to_string(obj.confId);
  out << ")";
  return out;
}


RemoteAssistanceRejectContent::~RemoteAssistanceRejectContent() throw() {
}


void RemoteAssistanceRejectContent::__set_confId(const std::string& val) {
  this->confId = val;
}

const char* RemoteAssistanceRejectContent::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t RemoteAssistanceRejectContent::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t RemoteAssistanceRejectContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RemoteAssistanceRejectContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RemoteAssistanceRejectContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->confId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RemoteAssistanceRejectContent &a, RemoteAssistanceRejectContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
}

RemoteAssistanceRejectContent::RemoteAssistanceRejectContent(const RemoteAssistanceRejectContent& other244) {
  confId = other244.confId;
}
RemoteAssistanceRejectContent& RemoteAssistanceRejectContent::operator=(const RemoteAssistanceRejectContent& other245) {
  confId = other245.confId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RemoteAssistanceRejectContent& obj) {
  using apache::thrift::to_string;
  out << "RemoteAssistanceRejectContent(";
  out << "confId=" << to_string(obj.confId);
  out << ")";
  return out;
}


RemoteAssistanceEndContent::~RemoteAssistanceEndContent() throw() {
}


void RemoteAssistanceEndContent::__set_confId(const std::string& val) {
  this->confId = val;
}

const char* RemoteAssistanceEndContent::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t RemoteAssistanceEndContent::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t RemoteAssistanceEndContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confId);
          isset_confId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RemoteAssistanceEndContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RemoteAssistanceEndContent");

  xfer += oprot->writeFieldBegin("confId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->confId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RemoteAssistanceEndContent &a, RemoteAssistanceEndContent &b) {
  using ::std::swap;
  swap(a.confId, b.confId);
}

RemoteAssistanceEndContent::RemoteAssistanceEndContent(const RemoteAssistanceEndContent& other246) {
  confId = other246.confId;
}
RemoteAssistanceEndContent& RemoteAssistanceEndContent::operator=(const RemoteAssistanceEndContent& other247) {
  confId = other247.confId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RemoteAssistanceEndContent& obj) {
  using apache::thrift::to_string;
  out << "RemoteAssistanceEndContent(";
  out << "confId=" << to_string(obj.confId);
  out << ")";
  return out;
}


UserLoginNotifyContent::~UserLoginNotifyContent() throw() {
}


void UserLoginNotifyContent::__set_user(const JID& val) {
  this->user = val;
}

void UserLoginNotifyContent::__set_deviceType(const DeviceType::type val) {
  this->deviceType = val;
}

void UserLoginNotifyContent::__set_deviceName(const std::string& val) {
  this->deviceName = val;
}

const char* UserLoginNotifyContent::ascii_fingerprint = "179A1C2176C1B0460D8B93B4AE7A4421";
const uint8_t UserLoginNotifyContent::binary_fingerprint[16] = {0x17,0x9A,0x1C,0x21,0x76,0xC1,0xB0,0x46,0x0D,0x8B,0x93,0xB4,0xAE,0x7A,0x44,0x21};

uint32_t UserLoginNotifyContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_user = false;
  bool isset_deviceType = false;
  bool isset_deviceName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user.read(iprot);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast248;
          xfer += iprot->readI32(ecast248);
          this->deviceType = (DeviceType::type)ecast248;
          isset_deviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceName);
          isset_deviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_deviceType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_deviceName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UserLoginNotifyContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserLoginNotifyContent");

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->user.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->deviceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->deviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserLoginNotifyContent &a, UserLoginNotifyContent &b) {
  using ::std::swap;
  swap(a.user, b.user);
  swap(a.deviceType, b.deviceType);
  swap(a.deviceName, b.deviceName);
}

UserLoginNotifyContent::UserLoginNotifyContent(const UserLoginNotifyContent& other249) {
  user = other249.user;
  deviceType = other249.deviceType;
  deviceName = other249.deviceName;
}
UserLoginNotifyContent& UserLoginNotifyContent::operator=(const UserLoginNotifyContent& other250) {
  user = other250.user;
  deviceType = other250.deviceType;
  deviceName = other250.deviceName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserLoginNotifyContent& obj) {
  using apache::thrift::to_string;
  out << "UserLoginNotifyContent(";
  out << "user=" << to_string(obj.user);
  out << ", " << "deviceType=" << to_string(obj.deviceType);
  out << ", " << "deviceName=" << to_string(obj.deviceName);
  out << ")";
  return out;
}


SessionTopContent::~SessionTopContent() throw() {
}


void SessionTopContent::__set_to(const JID& val) {
  this->to = val;
}

void SessionTopContent::__set_sessionType(const int8_t val) {
  this->sessionType = val;
}

void SessionTopContent::__set_topindex(const int64_t val) {
  this->topindex = val;
__isset.topindex = true;
}

const char* SessionTopContent::ascii_fingerprint = "46FDC8D9181BB7FDA19135B8CE799DF3";
const uint8_t SessionTopContent::binary_fingerprint[16] = {0x46,0xFD,0xC8,0xD9,0x18,0x1B,0xB7,0xFD,0xA1,0x91,0x35,0xB8,0xCE,0x79,0x9D,0xF3};

uint32_t SessionTopContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_to = false;
  bool isset_sessionType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->to.read(iprot);
          isset_to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sessionType);
          isset_sessionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->topindex);
          this->__isset.topindex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_to)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sessionType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SessionTopContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SessionTopContent");

  xfer += oprot->writeFieldBegin("to", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->to.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionType", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->sessionType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.topindex) {
    xfer += oprot->writeFieldBegin("topindex", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->topindex);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SessionTopContent &a, SessionTopContent &b) {
  using ::std::swap;
  swap(a.to, b.to);
  swap(a.sessionType, b.sessionType);
  swap(a.topindex, b.topindex);
  swap(a.__isset, b.__isset);
}

SessionTopContent::SessionTopContent(const SessionTopContent& other251) {
  to = other251.to;
  sessionType = other251.sessionType;
  topindex = other251.topindex;
  __isset = other251.__isset;
}
SessionTopContent& SessionTopContent::operator=(const SessionTopContent& other252) {
  to = other252.to;
  sessionType = other252.sessionType;
  topindex = other252.topindex;
  __isset = other252.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SessionTopContent& obj) {
  using apache::thrift::to_string;
  out << "SessionTopContent(";
  out << "to=" << to_string(obj.to);
  out << ", " << "sessionType=" << to_string(obj.sessionType);
  out << ", " << "topindex="; (obj.__isset.topindex ? (out << to_string(obj.topindex)) : (out << "<null>"));
  out << ")";
  return out;
}


AtMessageReadedContent::~AtMessageReadedContent() throw() {
}


void AtMessageReadedContent::__set_to(const JID& val) {
  this->to = val;
}

void AtMessageReadedContent::__set_sessionType(const int8_t val) {
  this->sessionType = val;
}

void AtMessageReadedContent::__set_seqList(const std::vector<int64_t> & val) {
  this->seqList = val;
}

const char* AtMessageReadedContent::ascii_fingerprint = "A2D5FB503EF3D6688B7983AFEFB5B7BD";
const uint8_t AtMessageReadedContent::binary_fingerprint[16] = {0xA2,0xD5,0xFB,0x50,0x3E,0xF3,0xD6,0x68,0x8B,0x79,0x83,0xAF,0xEF,0xB5,0xB7,0xBD};

uint32_t AtMessageReadedContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_to = false;
  bool isset_sessionType = false;
  bool isset_seqList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->to.read(iprot);
          isset_to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sessionType);
          isset_sessionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->seqList.clear();
            uint32_t _size253;
            ::apache::thrift::protocol::TType _etype256;
            xfer += iprot->readListBegin(_etype256, _size253);
            this->seqList.resize(_size253);
            uint32_t _i257;
            for (_i257 = 0; _i257 < _size253; ++_i257)
            {
              xfer += iprot->readI64(this->seqList[_i257]);
            }
            xfer += iprot->readListEnd();
          }
          isset_seqList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_to)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sessionType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_seqList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AtMessageReadedContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AtMessageReadedContent");

  xfer += oprot->writeFieldBegin("to", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->to.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionType", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->sessionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seqList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->seqList.size()));
    std::vector<int64_t> ::const_iterator _iter258;
    for (_iter258 = this->seqList.begin(); _iter258 != this->seqList.end(); ++_iter258)
    {
      xfer += oprot->writeI64((*_iter258));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AtMessageReadedContent &a, AtMessageReadedContent &b) {
  using ::std::swap;
  swap(a.to, b.to);
  swap(a.sessionType, b.sessionType);
  swap(a.seqList, b.seqList);
}

AtMessageReadedContent::AtMessageReadedContent(const AtMessageReadedContent& other259) {
  to = other259.to;
  sessionType = other259.sessionType;
  seqList = other259.seqList;
}
AtMessageReadedContent& AtMessageReadedContent::operator=(const AtMessageReadedContent& other260) {
  to = other260.to;
  sessionType = other260.sessionType;
  seqList = other260.seqList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AtMessageReadedContent& obj) {
  using apache::thrift::to_string;
  out << "AtMessageReadedContent(";
  out << "to=" << to_string(obj.to);
  out << ", " << "sessionType=" << to_string(obj.sessionType);
  out << ", " << "seqList=" << to_string(obj.seqList);
  out << ")";
  return out;
}


APITextContent::~APITextContent() throw() {
}


void APITextContent::__set_title(const std::string& val) {
  this->title = val;
__isset.title = true;
}

void APITextContent::__set_content(const std::string& val) {
  this->content = val;
}

void APITextContent::__set_detailType(const int8_t val) {
  this->detailType = val;
__isset.detailType = true;
}

void APITextContent::__set_detailContent(const std::string& val) {
  this->detailContent = val;
__isset.detailContent = true;
}

void APITextContent::__set_detailAuth(const int8_t val) {
  this->detailAuth = val;
__isset.detailAuth = true;
}

const char* APITextContent::ascii_fingerprint = "B1E7BECF9534B306D9EC855AA5C7B063";
const uint8_t APITextContent::binary_fingerprint[16] = {0xB1,0xE7,0xBE,0xCF,0x95,0x34,0xB3,0x06,0xD9,0xEC,0x85,0x5A,0xA5,0xC7,0xB0,0x63};

uint32_t APITextContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_content = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          isset_content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->detailType);
          this->__isset.detailType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailContent);
          this->__isset.detailContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->detailAuth);
          this->__isset.detailAuth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_content)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t APITextContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("APITextContent");

  if (this->__isset.title) {
    xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->title);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.detailType) {
    xfer += oprot->writeFieldBegin("detailType", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->detailType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailContent) {
    xfer += oprot->writeFieldBegin("detailContent", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->detailContent);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailAuth) {
    xfer += oprot->writeFieldBegin("detailAuth", ::apache::thrift::protocol::T_BYTE, 5);
    xfer += oprot->writeByte(this->detailAuth);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(APITextContent &a, APITextContent &b) {
  using ::std::swap;
  swap(a.title, b.title);
  swap(a.content, b.content);
  swap(a.detailType, b.detailType);
  swap(a.detailContent, b.detailContent);
  swap(a.detailAuth, b.detailAuth);
  swap(a.__isset, b.__isset);
}

APITextContent::APITextContent(const APITextContent& other261) {
  title = other261.title;
  content = other261.content;
  detailType = other261.detailType;
  detailContent = other261.detailContent;
  detailAuth = other261.detailAuth;
  __isset = other261.__isset;
}
APITextContent& APITextContent::operator=(const APITextContent& other262) {
  title = other262.title;
  content = other262.content;
  detailType = other262.detailType;
  detailContent = other262.detailContent;
  detailAuth = other262.detailAuth;
  __isset = other262.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const APITextContent& obj) {
  using apache::thrift::to_string;
  out << "APITextContent(";
  out << "title="; (obj.__isset.title ? (out << to_string(obj.title)) : (out << "<null>"));
  out << ", " << "content=" << to_string(obj.content);
  out << ", " << "detailType="; (obj.__isset.detailType ? (out << to_string(obj.detailType)) : (out << "<null>"));
  out << ", " << "detailContent="; (obj.__isset.detailContent ? (out << to_string(obj.detailContent)) : (out << "<null>"));
  out << ", " << "detailAuth="; (obj.__isset.detailAuth ? (out << to_string(obj.detailAuth)) : (out << "<null>"));
  out << ")";
  return out;
}


APIImageContent::~APIImageContent() throw() {
}


void APIImageContent::__set_mediaId(const std::string& val) {
  this->mediaId = val;
}

void APIImageContent::__set_detailType(const int8_t val) {
  this->detailType = val;
}

void APIImageContent::__set_mediaThumb(const std::string& val) {
  this->mediaThumb = val;
__isset.mediaThumb = true;
}

const char* APIImageContent::ascii_fingerprint = "CB5BB4FDB31465952A493405246C62CD";
const uint8_t APIImageContent::binary_fingerprint[16] = {0xCB,0x5B,0xB4,0xFD,0xB3,0x14,0x65,0x95,0x2A,0x49,0x34,0x05,0x24,0x6C,0x62,0xCD};

uint32_t APIImageContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_mediaId = false;
  bool isset_detailType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mediaId);
          isset_mediaId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->detailType);
          isset_detailType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mediaThumb);
          this->__isset.mediaThumb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_mediaId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_detailType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t APIImageContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("APIImageContent");

  xfer += oprot->writeFieldBegin("mediaId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mediaId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detailType", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->detailType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.mediaThumb) {
    xfer += oprot->writeFieldBegin("mediaThumb", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->mediaThumb);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(APIImageContent &a, APIImageContent &b) {
  using ::std::swap;
  swap(a.mediaId, b.mediaId);
  swap(a.detailType, b.detailType);
  swap(a.mediaThumb, b.mediaThumb);
  swap(a.__isset, b.__isset);
}

APIImageContent::APIImageContent(const APIImageContent& other263) {
  mediaId = other263.mediaId;
  detailType = other263.detailType;
  mediaThumb = other263.mediaThumb;
  __isset = other263.__isset;
}
APIImageContent& APIImageContent::operator=(const APIImageContent& other264) {
  mediaId = other264.mediaId;
  detailType = other264.detailType;
  mediaThumb = other264.mediaThumb;
  __isset = other264.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const APIImageContent& obj) {
  using apache::thrift::to_string;
  out << "APIImageContent(";
  out << "mediaId=" << to_string(obj.mediaId);
  out << ", " << "detailType=" << to_string(obj.detailType);
  out << ", " << "mediaThumb="; (obj.__isset.mediaThumb ? (out << to_string(obj.mediaThumb)) : (out << "<null>"));
  out << ")";
  return out;
}


APIFileContent::~APIFileContent() throw() {
}


void APIFileContent::__set_mediaId(const std::string& val) {
  this->mediaId = val;
}

void APIFileContent::__set_detailType(const int8_t val) {
  this->detailType = val;
}

void APIFileContent::__set_fileSize(const int64_t val) {
  this->fileSize = val;
__isset.fileSize = true;
}

void APIFileContent::__set_fileName(const std::string& val) {
  this->fileName = val;
}

const char* APIFileContent::ascii_fingerprint = "D39FACD11A16AA5B371CD5AF27AE28F1";
const uint8_t APIFileContent::binary_fingerprint[16] = {0xD3,0x9F,0xAC,0xD1,0x1A,0x16,0xAA,0x5B,0x37,0x1C,0xD5,0xAF,0x27,0xAE,0x28,0xF1};

uint32_t APIFileContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_mediaId = false;
  bool isset_detailType = false;
  bool isset_fileName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mediaId);
          isset_mediaId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->detailType);
          isset_detailType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileSize);
          this->__isset.fileSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileName);
          isset_fileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_mediaId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_detailType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fileName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t APIFileContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("APIFileContent");

  xfer += oprot->writeFieldBegin("mediaId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mediaId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detailType", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->detailType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fileSize) {
    xfer += oprot->writeFieldBegin("fileSize", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->fileSize);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("fileName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->fileName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(APIFileContent &a, APIFileContent &b) {
  using ::std::swap;
  swap(a.mediaId, b.mediaId);
  swap(a.detailType, b.detailType);
  swap(a.fileSize, b.fileSize);
  swap(a.fileName, b.fileName);
  swap(a.__isset, b.__isset);
}

APIFileContent::APIFileContent(const APIFileContent& other265) {
  mediaId = other265.mediaId;
  detailType = other265.detailType;
  fileSize = other265.fileSize;
  fileName = other265.fileName;
  __isset = other265.__isset;
}
APIFileContent& APIFileContent::operator=(const APIFileContent& other266) {
  mediaId = other266.mediaId;
  detailType = other266.detailType;
  fileSize = other266.fileSize;
  fileName = other266.fileName;
  __isset = other266.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const APIFileContent& obj) {
  using apache::thrift::to_string;
  out << "APIFileContent(";
  out << "mediaId=" << to_string(obj.mediaId);
  out << ", " << "detailType=" << to_string(obj.detailType);
  out << ", " << "fileSize="; (obj.__isset.fileSize ? (out << to_string(obj.fileSize)) : (out << "<null>"));
  out << ", " << "fileName=" << to_string(obj.fileName);
  out << ")";
  return out;
}


APIOAContent::~APIOAContent() throw() {
}


void APIOAContent::__set_title(const std::string& val) {
  this->title = val;
}

void APIOAContent::__set_status(const int16_t val) {
  this->status = val;
__isset.status = true;
}

void APIOAContent::__set_color(const std::string& val) {
  this->color = val;
__isset.color = true;
}

void APIOAContent::__set_bkColor(const std::string& val) {
  this->bkColor = val;
__isset.bkColor = true;
}

void APIOAContent::__set_elements(const std::string& val) {
  this->elements = val;
}

void APIOAContent::__set_detailURL(const std::string& val) {
  this->detailURL = val;
__isset.detailURL = true;
}

void APIOAContent::__set_detailAuth(const int8_t val) {
  this->detailAuth = val;
__isset.detailAuth = true;
}

void APIOAContent::__set_titleElements(const std::string& val) {
  this->titleElements = val;
__isset.titleElements = true;
}

void APIOAContent::__set_titleStyle(const std::string& val) {
  this->titleStyle = val;
__isset.titleStyle = true;
}

void APIOAContent::__set_exData(const std::string& val) {
  this->exData = val;
__isset.exData = true;
}

void APIOAContent::__set_customizedType(const std::string& val) {
  this->customizedType = val;
__isset.customizedType = true;
}

void APIOAContent::__set_customizedData(const std::string& val) {
  this->customizedData = val;
__isset.customizedData = true;
}

const char* APIOAContent::ascii_fingerprint = "BE5530BA8B5258F48C9355F775FA69F6";
const uint8_t APIOAContent::binary_fingerprint[16] = {0xBE,0x55,0x30,0xBA,0x8B,0x52,0x58,0xF4,0x8C,0x93,0x55,0xF7,0x75,0xFA,0x69,0xF6};

uint32_t APIOAContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_title = false;
  bool isset_elements = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bkColor);
          this->__isset.bkColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->elements);
          isset_elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailURL);
          this->__isset.detailURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->detailAuth);
          this->__isset.detailAuth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->titleElements);
          this->__isset.titleElements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->titleStyle);
          this->__isset.titleStyle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exData);
          this->__isset.exData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customizedType);
          this->__isset.customizedType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customizedData);
          this->__isset.customizedData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_elements)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t APIOAContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("APIOAContent");

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.color) {
    xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->color);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bkColor) {
    xfer += oprot->writeFieldBegin("bkColor", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->bkColor);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->elements);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.detailURL) {
    xfer += oprot->writeFieldBegin("detailURL", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->detailURL);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailAuth) {
    xfer += oprot->writeFieldBegin("detailAuth", ::apache::thrift::protocol::T_BYTE, 7);
    xfer += oprot->writeByte(this->detailAuth);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.titleElements) {
    xfer += oprot->writeFieldBegin("titleElements", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->titleElements);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.titleStyle) {
    xfer += oprot->writeFieldBegin("titleStyle", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->titleStyle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exData) {
    xfer += oprot->writeFieldBegin("exData", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->exData);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.customizedType) {
    xfer += oprot->writeFieldBegin("customizedType", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->customizedType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.customizedData) {
    xfer += oprot->writeFieldBegin("customizedData", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->customizedData);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(APIOAContent &a, APIOAContent &b) {
  using ::std::swap;
  swap(a.title, b.title);
  swap(a.status, b.status);
  swap(a.color, b.color);
  swap(a.bkColor, b.bkColor);
  swap(a.elements, b.elements);
  swap(a.detailURL, b.detailURL);
  swap(a.detailAuth, b.detailAuth);
  swap(a.titleElements, b.titleElements);
  swap(a.titleStyle, b.titleStyle);
  swap(a.exData, b.exData);
  swap(a.customizedType, b.customizedType);
  swap(a.customizedData, b.customizedData);
  swap(a.__isset, b.__isset);
}

APIOAContent::APIOAContent(const APIOAContent& other267) {
  title = other267.title;
  status = other267.status;
  color = other267.color;
  bkColor = other267.bkColor;
  elements = other267.elements;
  detailURL = other267.detailURL;
  detailAuth = other267.detailAuth;
  titleElements = other267.titleElements;
  titleStyle = other267.titleStyle;
  exData = other267.exData;
  customizedType = other267.customizedType;
  customizedData = other267.customizedData;
  __isset = other267.__isset;
}
APIOAContent& APIOAContent::operator=(const APIOAContent& other268) {
  title = other268.title;
  status = other268.status;
  color = other268.color;
  bkColor = other268.bkColor;
  elements = other268.elements;
  detailURL = other268.detailURL;
  detailAuth = other268.detailAuth;
  titleElements = other268.titleElements;
  titleStyle = other268.titleStyle;
  exData = other268.exData;
  customizedType = other268.customizedType;
  customizedData = other268.customizedData;
  __isset = other268.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const APIOAContent& obj) {
  using apache::thrift::to_string;
  out << "APIOAContent(";
  out << "title=" << to_string(obj.title);
  out << ", " << "status="; (obj.__isset.status ? (out << to_string(obj.status)) : (out << "<null>"));
  out << ", " << "color="; (obj.__isset.color ? (out << to_string(obj.color)) : (out << "<null>"));
  out << ", " << "bkColor="; (obj.__isset.bkColor ? (out << to_string(obj.bkColor)) : (out << "<null>"));
  out << ", " << "elements=" << to_string(obj.elements);
  out << ", " << "detailURL="; (obj.__isset.detailURL ? (out << to_string(obj.detailURL)) : (out << "<null>"));
  out << ", " << "detailAuth="; (obj.__isset.detailAuth ? (out << to_string(obj.detailAuth)) : (out << "<null>"));
  out << ", " << "titleElements="; (obj.__isset.titleElements ? (out << to_string(obj.titleElements)) : (out << "<null>"));
  out << ", " << "titleStyle="; (obj.__isset.titleStyle ? (out << to_string(obj.titleStyle)) : (out << "<null>"));
  out << ", " << "exData="; (obj.__isset.exData ? (out << to_string(obj.exData)) : (out << "<null>"));
  out << ", " << "customizedType="; (obj.__isset.customizedType ? (out << to_string(obj.customizedType)) : (out << "<null>"));
  out << ", " << "customizedData="; (obj.__isset.customizedData ? (out << to_string(obj.customizedData)) : (out << "<null>"));
  out << ")";
  return out;
}


APICustomizedContent::~APICustomizedContent() throw() {
}


void APICustomizedContent::__set_data1(const std::string& val) {
  this->data1 = val;
}

void APICustomizedContent::__set_data2(const std::string& val) {
  this->data2 = val;
__isset.data2 = true;
}

void APICustomizedContent::__set_data3(const std::string& val) {
  this->data3 = val;
__isset.data3 = true;
}

void APICustomizedContent::__set_data4(const std::string& val) {
  this->data4 = val;
__isset.data4 = true;
}

const char* APICustomizedContent::ascii_fingerprint = "6BA700CA2E5FC52A8DA5ADCF811DC8DA";
const uint8_t APICustomizedContent::binary_fingerprint[16] = {0x6B,0xA7,0x00,0xCA,0x2E,0x5F,0xC5,0x2A,0x8D,0xA5,0xAD,0xCF,0x81,0x1D,0xC8,0xDA};

uint32_t APICustomizedContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_data1 = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data1);
          isset_data1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data2);
          this->__isset.data2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data3);
          this->__isset.data3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data4);
          this->__isset.data4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_data1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t APICustomizedContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("APICustomizedContent");

  xfer += oprot->writeFieldBegin("data1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->data1);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data2) {
    xfer += oprot->writeFieldBegin("data2", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->data2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data3) {
    xfer += oprot->writeFieldBegin("data3", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->data3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data4) {
    xfer += oprot->writeFieldBegin("data4", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->data4);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(APICustomizedContent &a, APICustomizedContent &b) {
  using ::std::swap;
  swap(a.data1, b.data1);
  swap(a.data2, b.data2);
  swap(a.data3, b.data3);
  swap(a.data4, b.data4);
  swap(a.__isset, b.__isset);
}

APICustomizedContent::APICustomizedContent(const APICustomizedContent& other269) {
  data1 = other269.data1;
  data2 = other269.data2;
  data3 = other269.data3;
  data4 = other269.data4;
  __isset = other269.__isset;
}
APICustomizedContent& APICustomizedContent::operator=(const APICustomizedContent& other270) {
  data1 = other270.data1;
  data2 = other270.data2;
  data3 = other270.data3;
  data4 = other270.data4;
  __isset = other270.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const APICustomizedContent& obj) {
  using apache::thrift::to_string;
  out << "APICustomizedContent(";
  out << "data1=" << to_string(obj.data1);
  out << ", " << "data2="; (obj.__isset.data2 ? (out << to_string(obj.data2)) : (out << "<null>"));
  out << ", " << "data3="; (obj.__isset.data3 ? (out << to_string(obj.data3)) : (out << "<null>"));
  out << ", " << "data4="; (obj.__isset.data4 ? (out << to_string(obj.data4)) : (out << "<null>"));
  out << ")";
  return out;
}


APIAckSentContent::~APIAckSentContent() throw() {
}


void APIAckSentContent::__set_id(const int32_t val) {
  this->id = val;
}

void APIAckSentContent::__set_seq(const int64_t val) {
  this->seq = val;
}

void APIAckSentContent::__set_conversation(const int32_t val) {
  this->conversation = val;
__isset.conversation = true;
}

void APIAckSentContent::__set_result(const int8_t val) {
  this->result = val;
}

const char* APIAckSentContent::ascii_fingerprint = "C8F46B3BE41FABEC71EFEEDD34420D17";
const uint8_t APIAckSentContent::binary_fingerprint[16] = {0xC8,0xF4,0x6B,0x3B,0xE4,0x1F,0xAB,0xEC,0x71,0xEF,0xEE,0xDD,0x34,0x42,0x0D,0x17};

uint32_t APIAckSentContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_seq = false;
  bool isset_result = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seq);
          isset_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->conversation);
          this->__isset.conversation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->result);
          isset_result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_seq)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t APIAckSentContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("APIAckSentContent");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->seq);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.conversation) {
    xfer += oprot->writeFieldBegin("conversation", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->conversation);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(APIAckSentContent &a, APIAckSentContent &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.seq, b.seq);
  swap(a.conversation, b.conversation);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

APIAckSentContent::APIAckSentContent(const APIAckSentContent& other271) {
  id = other271.id;
  seq = other271.seq;
  conversation = other271.conversation;
  result = other271.result;
  __isset = other271.__isset;
}
APIAckSentContent& APIAckSentContent::operator=(const APIAckSentContent& other272) {
  id = other272.id;
  seq = other272.seq;
  conversation = other272.conversation;
  result = other272.result;
  __isset = other272.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const APIAckSentContent& obj) {
  using apache::thrift::to_string;
  out << "APIAckSentContent(";
  out << "id=" << to_string(obj.id);
  out << ", " << "seq=" << to_string(obj.seq);
  out << ", " << "conversation="; (obj.__isset.conversation ? (out << to_string(obj.conversation)) : (out << "<null>"));
  out << ", " << "result=" << to_string(obj.result);
  out << ")";
  return out;
}


APIOAStatusChangeContent::~APIOAStatusChangeContent() throw() {
}


void APIOAStatusChangeContent::__set_seq(const int64_t val) {
  this->seq = val;
}

void APIOAStatusChangeContent::__set_newStatus(const int16_t val) {
  this->newStatus = val;
}

void APIOAStatusChangeContent::__set_externalData(const std::string& val) {
  this->externalData = val;
__isset.externalData = true;
}

const char* APIOAStatusChangeContent::ascii_fingerprint = "9862F98D5E6CA9D9ED006ABF4B191046";
const uint8_t APIOAStatusChangeContent::binary_fingerprint[16] = {0x98,0x62,0xF9,0x8D,0x5E,0x6C,0xA9,0xD9,0xED,0x00,0x6A,0xBF,0x4B,0x19,0x10,0x46};

uint32_t APIOAStatusChangeContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_seq = false;
  bool isset_newStatus = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seq);
          isset_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->newStatus);
          isset_newStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->externalData);
          this->__isset.externalData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_seq)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_newStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t APIOAStatusChangeContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("APIOAStatusChangeContent");

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newStatus", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->newStatus);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.externalData) {
    xfer += oprot->writeFieldBegin("externalData", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->externalData);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(APIOAStatusChangeContent &a, APIOAStatusChangeContent &b) {
  using ::std::swap;
  swap(a.seq, b.seq);
  swap(a.newStatus, b.newStatus);
  swap(a.externalData, b.externalData);
  swap(a.__isset, b.__isset);
}

APIOAStatusChangeContent::APIOAStatusChangeContent(const APIOAStatusChangeContent& other273) {
  seq = other273.seq;
  newStatus = other273.newStatus;
  externalData = other273.externalData;
  __isset = other273.__isset;
}
APIOAStatusChangeContent& APIOAStatusChangeContent::operator=(const APIOAStatusChangeContent& other274) {
  seq = other274.seq;
  newStatus = other274.newStatus;
  externalData = other274.externalData;
  __isset = other274.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const APIOAStatusChangeContent& obj) {
  using apache::thrift::to_string;
  out << "APIOAStatusChangeContent(";
  out << "seq=" << to_string(obj.seq);
  out << ", " << "newStatus=" << to_string(obj.newStatus);
  out << ", " << "externalData="; (obj.__isset.externalData ? (out << to_string(obj.externalData)) : (out << "<null>"));
  out << ")";
  return out;
}


APIAppEventChangeNotify::~APIAppEventChangeNotify() throw() {
}


void APIAppEventChangeNotify::__set_appId(const int64_t val) {
  this->appId = val;
}

void APIAppEventChangeNotify::__set_eventCount(const int32_t val) {
  this->eventCount = val;
}

void APIAppEventChangeNotify::__set_externalData(const std::string& val) {
  this->externalData = val;
}

const char* APIAppEventChangeNotify::ascii_fingerprint = "B60006AAF0CAC4C90B413EB63943B6E9";
const uint8_t APIAppEventChangeNotify::binary_fingerprint[16] = {0xB6,0x00,0x06,0xAA,0xF0,0xCA,0xC4,0xC9,0x0B,0x41,0x3E,0xB6,0x39,0x43,0xB6,0xE9};

uint32_t APIAppEventChangeNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_appId = false;
  bool isset_eventCount = false;
  bool isset_externalData = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->appId);
          isset_appId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventCount);
          isset_eventCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->externalData);
          isset_externalData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_appId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_externalData)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t APIAppEventChangeNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("APIAppEventChangeNotify");

  xfer += oprot->writeFieldBegin("appId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->appId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->eventCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("externalData", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->externalData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(APIAppEventChangeNotify &a, APIAppEventChangeNotify &b) {
  using ::std::swap;
  swap(a.appId, b.appId);
  swap(a.eventCount, b.eventCount);
  swap(a.externalData, b.externalData);
}

APIAppEventChangeNotify::APIAppEventChangeNotify(const APIAppEventChangeNotify& other275) {
  appId = other275.appId;
  eventCount = other275.eventCount;
  externalData = other275.externalData;
}
APIAppEventChangeNotify& APIAppEventChangeNotify::operator=(const APIAppEventChangeNotify& other276) {
  appId = other276.appId;
  eventCount = other276.eventCount;
  externalData = other276.externalData;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const APIAppEventChangeNotify& obj) {
  using apache::thrift::to_string;
  out << "APIAppEventChangeNotify(";
  out << "appId=" << to_string(obj.appId);
  out << ", " << "eventCount=" << to_string(obj.eventCount);
  out << ", " << "externalData=" << to_string(obj.externalData);
  out << ")";
  return out;
}


APIAppChangeNotifyContent::~APIAppChangeNotifyContent() throw() {
}


void APIAppChangeNotifyContent::__set_event(const int16_t val) {
  this->event = val;
}

void APIAppChangeNotifyContent::__set_appId(const int64_t val) {
  this->appId = val;
}

void APIAppChangeNotifyContent::__set_externalData(const std::string& val) {
  this->externalData = val;
__isset.externalData = true;
}

const char* APIAppChangeNotifyContent::ascii_fingerprint = "E78EA2A35CAD7C38E47E378E169618D6";
const uint8_t APIAppChangeNotifyContent::binary_fingerprint[16] = {0xE7,0x8E,0xA2,0xA3,0x5C,0xAD,0x7C,0x38,0xE4,0x7E,0x37,0x8E,0x16,0x96,0x18,0xD6};

uint32_t APIAppChangeNotifyContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_event = false;
  bool isset_appId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->event);
          isset_event = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->appId);
          isset_appId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->externalData);
          this->__isset.externalData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_event)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t APIAppChangeNotifyContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("APIAppChangeNotifyContent");

  xfer += oprot->writeFieldBegin("event", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->event);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->appId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.externalData) {
    xfer += oprot->writeFieldBegin("externalData", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->externalData);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(APIAppChangeNotifyContent &a, APIAppChangeNotifyContent &b) {
  using ::std::swap;
  swap(a.event, b.event);
  swap(a.appId, b.appId);
  swap(a.externalData, b.externalData);
  swap(a.__isset, b.__isset);
}

APIAppChangeNotifyContent::APIAppChangeNotifyContent(const APIAppChangeNotifyContent& other277) {
  event = other277.event;
  appId = other277.appId;
  externalData = other277.externalData;
  __isset = other277.__isset;
}
APIAppChangeNotifyContent& APIAppChangeNotifyContent::operator=(const APIAppChangeNotifyContent& other278) {
  event = other278.event;
  appId = other278.appId;
  externalData = other278.externalData;
  __isset = other278.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const APIAppChangeNotifyContent& obj) {
  using apache::thrift::to_string;
  out << "APIAppChangeNotifyContent(";
  out << "event=" << to_string(obj.event);
  out << ", " << "appId=" << to_string(obj.appId);
  out << ", " << "externalData="; (obj.__isset.externalData ? (out << to_string(obj.externalData)) : (out << "<null>"));
  out << ")";
  return out;
}


UcMessageHead::~UcMessageHead() throw() {
}


void UcMessageHead::__set_version(const int16_t val) {
  this->version = val;
}

void UcMessageHead::__set_appid(const int16_t val) {
  this->appid = val;
}

void UcMessageHead::__set_pri(const int8_t val) {
  this->pri = val;
}

void UcMessageHead::__set_protocoltype(const int8_t val) {
  this->protocoltype = val;
}

void UcMessageHead::__set_protocolid(const int16_t val) {
  this->protocolid = val;
}

void UcMessageHead::__set_id(const int32_t val) {
  this->id = val;
}

void UcMessageHead::__set_seq(const int64_t val) {
  this->seq = val;
}

void UcMessageHead::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void UcMessageHead::__set_from(const JID& val) {
  this->from = val;
}

void UcMessageHead::__set_to(const JID& val) {
  this->to = val;
}

void UcMessageHead::__set_conversation(const int32_t val) {
  this->conversation = val;
}

void UcMessageHead::__set_length(const int32_t val) {
  this->length = val;
}

void UcMessageHead::__set_toPrivate(const JID& val) {
  this->toPrivate = val;
__isset.toPrivate = true;
}

void UcMessageHead::__set_controlPri(const int8_t val) {
  this->controlPri = val;
__isset.controlPri = true;
}

void UcMessageHead::__set_channelPri(const int16_t val) {
  this->channelPri = val;
__isset.channelPri = true;
}

void UcMessageHead::__set_groupAtUsers(const std::vector<JID> & val) {
  this->groupAtUsers = val;
__isset.groupAtUsers = true;
}

const char* UcMessageHead::ascii_fingerprint = "B88CA2FEADE169AF8E86D4FBA78FAAAB";
const uint8_t UcMessageHead::binary_fingerprint[16] = {0xB8,0x8C,0xA2,0xFE,0xAD,0xE1,0x69,0xAF,0x8E,0x86,0xD4,0xFB,0xA7,0x8F,0xAA,0xAB};

uint32_t UcMessageHead::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_appid = false;
  bool isset_pri = false;
  bool isset_protocoltype = false;
  bool isset_protocolid = false;
  bool isset_id = false;
  bool isset_seq = false;
  bool isset_timestamp = false;
  bool isset_from = false;
  bool isset_to = false;
  bool isset_conversation = false;
  bool isset_length = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->version);
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appid);
          isset_appid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->pri);
          isset_pri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->protocoltype);
          isset_protocoltype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->protocolid);
          isset_protocolid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seq);
          isset_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          isset_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->from.read(iprot);
          isset_from = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->to.read(iprot);
          isset_to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->conversation);
          isset_conversation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->length);
          isset_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->toPrivate.read(iprot);
          this->__isset.toPrivate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->controlPri);
          this->__isset.controlPri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->channelPri);
          this->__isset.channelPri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->groupAtUsers.clear();
            uint32_t _size279;
            ::apache::thrift::protocol::TType _etype282;
            xfer += iprot->readListBegin(_etype282, _size279);
            this->groupAtUsers.resize(_size279);
            uint32_t _i283;
            for (_i283 = 0; _i283 < _size279; ++_i283)
            {
              xfer += this->groupAtUsers[_i283].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.groupAtUsers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pri)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_protocoltype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_protocolid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_seq)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_from)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_to)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_conversation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_length)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UcMessageHead::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UcMessageHead");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->appid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pri", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->pri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("protocoltype", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->protocoltype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("protocolid", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->protocolid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->from.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->to.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("conversation", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->conversation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->length);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.toPrivate) {
    xfer += oprot->writeFieldBegin("toPrivate", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->toPrivate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.controlPri) {
    xfer += oprot->writeFieldBegin("controlPri", ::apache::thrift::protocol::T_BYTE, 15);
    xfer += oprot->writeByte(this->controlPri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelPri) {
    xfer += oprot->writeFieldBegin("channelPri", ::apache::thrift::protocol::T_I16, 16);
    xfer += oprot->writeI16(this->channelPri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupAtUsers) {
    xfer += oprot->writeFieldBegin("groupAtUsers", ::apache::thrift::protocol::T_LIST, 17);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->groupAtUsers.size()));
      std::vector<JID> ::const_iterator _iter284;
      for (_iter284 = this->groupAtUsers.begin(); _iter284 != this->groupAtUsers.end(); ++_iter284)
      {
        xfer += (*_iter284).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UcMessageHead &a, UcMessageHead &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.appid, b.appid);
  swap(a.pri, b.pri);
  swap(a.protocoltype, b.protocoltype);
  swap(a.protocolid, b.protocolid);
  swap(a.id, b.id);
  swap(a.seq, b.seq);
  swap(a.timestamp, b.timestamp);
  swap(a.from, b.from);
  swap(a.to, b.to);
  swap(a.conversation, b.conversation);
  swap(a.length, b.length);
  swap(a.toPrivate, b.toPrivate);
  swap(a.controlPri, b.controlPri);
  swap(a.channelPri, b.channelPri);
  swap(a.groupAtUsers, b.groupAtUsers);
  swap(a.__isset, b.__isset);
}

UcMessageHead::UcMessageHead(const UcMessageHead& other285) {
  version = other285.version;
  appid = other285.appid;
  pri = other285.pri;
  protocoltype = other285.protocoltype;
  protocolid = other285.protocolid;
  id = other285.id;
  seq = other285.seq;
  timestamp = other285.timestamp;
  from = other285.from;
  to = other285.to;
  conversation = other285.conversation;
  length = other285.length;
  toPrivate = other285.toPrivate;
  controlPri = other285.controlPri;
  channelPri = other285.channelPri;
  groupAtUsers = other285.groupAtUsers;
  __isset = other285.__isset;
}
UcMessageHead& UcMessageHead::operator=(const UcMessageHead& other286) {
  version = other286.version;
  appid = other286.appid;
  pri = other286.pri;
  protocoltype = other286.protocoltype;
  protocolid = other286.protocolid;
  id = other286.id;
  seq = other286.seq;
  timestamp = other286.timestamp;
  from = other286.from;
  to = other286.to;
  conversation = other286.conversation;
  length = other286.length;
  toPrivate = other286.toPrivate;
  controlPri = other286.controlPri;
  channelPri = other286.channelPri;
  groupAtUsers = other286.groupAtUsers;
  __isset = other286.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UcMessageHead& obj) {
  using apache::thrift::to_string;
  out << "UcMessageHead(";
  out << "version=" << to_string(obj.version);
  out << ", " << "appid=" << to_string(obj.appid);
  out << ", " << "pri=" << to_string(obj.pri);
  out << ", " << "protocoltype=" << to_string(obj.protocoltype);
  out << ", " << "protocolid=" << to_string(obj.protocolid);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "seq=" << to_string(obj.seq);
  out << ", " << "timestamp=" << to_string(obj.timestamp);
  out << ", " << "from=" << to_string(obj.from);
  out << ", " << "to=" << to_string(obj.to);
  out << ", " << "conversation=" << to_string(obj.conversation);
  out << ", " << "length=" << to_string(obj.length);
  out << ", " << "toPrivate="; (obj.__isset.toPrivate ? (out << to_string(obj.toPrivate)) : (out << "<null>"));
  out << ", " << "controlPri="; (obj.__isset.controlPri ? (out << to_string(obj.controlPri)) : (out << "<null>"));
  out << ", " << "channelPri="; (obj.__isset.channelPri ? (out << to_string(obj.channelPri)) : (out << "<null>"));
  out << ", " << "groupAtUsers="; (obj.__isset.groupAtUsers ? (out << to_string(obj.groupAtUsers)) : (out << "<null>"));
  out << ")";
  return out;
}


UcMessageBody::~UcMessageBody() throw() {
}


void UcMessageBody::__set_presence(const MessagePresence& val) {
  this->presence = val;
__isset.presence = true;
}

void UcMessageBody::__set_ping(const MessagePing& val) {
  this->ping = val;
__isset.ping = true;
}

void UcMessageBody::__set_ackSent(const AckSent& val) {
  this->ackSent = val;
__isset.ackSent = true;
}

void UcMessageBody::__set_ackReceived(const AckReceived& val) {
  this->ackReceived = val;
__isset.ackReceived = true;
}

void UcMessageBody::__set_ackRead(const AckRead& val) {
  this->ackRead = val;
__isset.ackRead = true;
}

void UcMessageBody::__set_sleep(const SleepSet& val) {
  this->sleep = val;
__isset.sleep = true;
}

void UcMessageBody::__set_wakeupConfirm(const WakeupResult& val) {
  this->wakeupConfirm = val;
__isset.wakeupConfirm = true;
}

void UcMessageBody::__set_ackPlay(const AckPlay& val) {
  this->ackPlay = val;
__isset.ackPlay = true;
}

void UcMessageBody::__set_batchAckRead(const BatchAckRead& val) {
  this->batchAckRead = val;
__isset.batchAckRead = true;
}

void UcMessageBody::__set_text(const TextContent& val) {
  this->text = val;
__isset.text = true;
}

void UcMessageBody::__set_media(const MediaContent& val) {
  this->media = val;
__isset.media = true;
}

void UcMessageBody::__set_groupAdd(const GroupMemberAddContent& val) {
  this->groupAdd = val;
__isset.groupAdd = true;
}

void UcMessageBody::__set_groupDel(const GroupMemberDelContent& val) {
  this->groupDel = val;
__isset.groupDel = true;
}

void UcMessageBody::__set_groupUpdate(const GroupNameUpdateContent& val) {
  this->groupUpdate = val;
__isset.groupUpdate = true;
}

void UcMessageBody::__set_groupCreate(const GroupCreateContent& val) {
  this->groupCreate = val;
__isset.groupCreate = true;
}

void UcMessageBody::__set_groupTop(const GroupTopContent& val) {
  this->groupTop = val;
__isset.groupTop = true;
}

void UcMessageBody::__set_summaryCreate(const SummaryCreateContent& val) {
  this->summaryCreate = val;
__isset.summaryCreate = true;
}

void UcMessageBody::__set_docSend(const DocumentContent& val) {
  this->docSend = val;
__isset.docSend = true;
}

void UcMessageBody::__set_alertRule(const AlertRuleContent& val) {
  this->alertRule = val;
__isset.alertRule = true;
}

void UcMessageBody::__set_groupClose(const DiscussionClose& val) {
  this->groupClose = val;
__isset.groupClose = true;
}

void UcMessageBody::__set_msgNotify(const MsgNotifyContent& val) {
  this->msgNotify = val;
__isset.msgNotify = true;
}

void UcMessageBody::__set_groupKick(const GroupMemberKickContent& val) {
  this->groupKick = val;
__isset.groupKick = true;
}

void UcMessageBody::__set_codeCreate(const CodeCreateContent& val) {
  this->codeCreate = val;
__isset.codeCreate = true;
}

void UcMessageBody::__set_codeDel(const CodeDelContent& val) {
  this->codeDel = val;
__isset.codeDel = true;
}

void UcMessageBody::__set_docDel(const DocumentDelContent& val) {
  this->docDel = val;
__isset.docDel = true;
}

void UcMessageBody::__set_commentCreate(const CommentCreateContent& val) {
  this->commentCreate = val;
__isset.commentCreate = true;
}

void UcMessageBody::__set_commentDel(const CommentDelContent& val) {
  this->commentDel = val;
__isset.commentDel = true;
}

void UcMessageBody::__set_groupAvatarUpdate(const GroupAvatarUpdateContent& val) {
  this->groupAvatarUpdate = val;
__isset.groupAvatarUpdate = true;
}

void UcMessageBody::__set_groupState(const GroupStateUpdateContent& val) {
  this->groupState = val;
__isset.groupState = true;
}

void UcMessageBody::__set_cloudFile(const CloudFileContent& val) {
  this->cloudFile = val;
__isset.cloudFile = true;
}

void UcMessageBody::__set_memberRole(const MemberRoleUpdateContent& val) {
  this->memberRole = val;
__isset.memberRole = true;
}

void UcMessageBody::__set_report(const ReportContent& val) {
  this->report = val;
__isset.report = true;
}

void UcMessageBody::__set_revocation(const RevocationContent& val) {
  this->revocation = val;
__isset.revocation = true;
}

void UcMessageBody::__set_groupScope(const GroupScopeContent& val) {
  this->groupScope = val;
__isset.groupScope = true;
}

void UcMessageBody::__set_welcome(const SystemWelcomeContent& val) {
  this->welcome = val;
__isset.welcome = true;
}

void UcMessageBody::__set_clientUpdate(const ClientUpdateContent& val) {
  this->clientUpdate = val;
__isset.clientUpdate = true;
}

void UcMessageBody::__set_completeInfo(const CompleteInfoContent& val) {
  this->completeInfo = val;
__isset.completeInfo = true;
}

void UcMessageBody::__set_pwdComplexUpdate(const PwdComplexUpdateContent& val) {
  this->pwdComplexUpdate = val;
__isset.pwdComplexUpdate = true;
}

void UcMessageBody::__set_pwdExpire(const PwdExpireContent& val) {
  this->pwdExpire = val;
__isset.pwdExpire = true;
}

void UcMessageBody::__set_pcGuide(const PCClientGuide& val) {
  this->pcGuide = val;
__isset.pcGuide = true;
}

void UcMessageBody::__set_mobileGuide(const MobileClientGuide& val) {
  this->mobileGuide = val;
__isset.mobileGuide = true;
}

void UcMessageBody::__set_pwdModify(const PasswordModifyContent& val) {
  this->pwdModify = val;
__isset.pwdModify = true;
}

void UcMessageBody::__set_tagDel(const TagDelContent& val) {
  this->tagDel = val;
__isset.tagDel = true;
}

void UcMessageBody::__set_remind(const GroupRemindContent& val) {
  this->remind = val;
__isset.remind = true;
}

void UcMessageBody::__set_deptUpdate(const DeptUpdateContent& val) {
  this->deptUpdate = val;
__isset.deptUpdate = true;
}

void UcMessageBody::__set_deptTransfer(const DeptTransferContent& val) {
  this->deptTransfer = val;
__isset.deptTransfer = true;
}

void UcMessageBody::__set_positionUpdate(const PositionUpdateContent& val) {
  this->positionUpdate = val;
__isset.positionUpdate = true;
}

void UcMessageBody::__set_employeeEntry(const EmployeeEntryContent& val) {
  this->employeeEntry = val;
__isset.employeeEntry = true;
}

void UcMessageBody::__set_employeeLeave(const EmployeeLeaveContent& val) {
  this->employeeLeave = val;
__isset.employeeLeave = true;
}

void UcMessageBody::__set_employeeRights(const EmployeeRightsChangeContent& val) {
  this->employeeRights = val;
__isset.employeeRights = true;
}

void UcMessageBody::__set_deprtParentChange(const DeptParentChangeContent& val) {
  this->deprtParentChange = val;
__isset.deprtParentChange = true;
}

void UcMessageBody::__set_companyJoin(const CompanyJoinContent& val) {
  this->companyJoin = val;
__isset.companyJoin = true;
}

void UcMessageBody::__set_deptDelete(const DeptDeleteContent& val) {
  this->deptDelete = val;
__isset.deptDelete = true;
}

void UcMessageBody::__set_entryConfirm(const EmployeeEntryConfirmContent& val) {
  this->entryConfirm = val;
__isset.entryConfirm = true;
}

void UcMessageBody::__set_leaveConfirm(const EmployeeLeaveConfirmContent& val) {
  this->leaveConfirm = val;
__isset.leaveConfirm = true;
}

void UcMessageBody::__set_deptConfirm(const DeptTransferConfirmContent& val) {
  this->deptConfirm = val;
__isset.deptConfirm = true;
}

void UcMessageBody::__set_instantInvite(const InstantIQInviteContent& val) {
  this->instantInvite = val;
__isset.instantInvite = true;
}

void UcMessageBody::__set_confInvite(const IQInviteContent& val) {
  this->confInvite = val;
__isset.confInvite = true;
}

void UcMessageBody::__set_confReceive(const IQReceiveContent& val) {
  this->confReceive = val;
__isset.confReceive = true;
}

void UcMessageBody::__set_confReject(const IQRejectContent& val) {
  this->confReject = val;
__isset.confReject = true;
}

void UcMessageBody::__set_confCancel(const ConfCancelContent& val) {
  this->confCancel = val;
__isset.confCancel = true;
}

void UcMessageBody::__set_confAlert(const ConfAlertContent& val) {
  this->confAlert = val;
__isset.confAlert = true;
}

void UcMessageBody::__set_instantReceive(const InstantIQReceiveContent& val) {
  this->instantReceive = val;
__isset.instantReceive = true;
}

void UcMessageBody::__set_instantReject(const InstantIQRejectContent& val) {
  this->instantReject = val;
__isset.instantReject = true;
}

void UcMessageBody::__set_confChat(const ConfChatContent& val) {
  this->confChat = val;
__isset.confChat = true;
}

void UcMessageBody::__set_confSummary(const ConfSummaryContent& val) {
  this->confSummary = val;
__isset.confSummary = true;
}

void UcMessageBody::__set_callState(const CallStateContent& val) {
  this->callState = val;
__isset.callState = true;
}

void UcMessageBody::__set_confUpload(const ConfUploadContent& val) {
  this->confUpload = val;
__isset.confUpload = true;
}

void UcMessageBody::__set_confDocDel(const ConfDelDocContent& val) {
  this->confDocDel = val;
__isset.confDocDel = true;
}

void UcMessageBody::__set_cardUpdate(const CardUpdateContent& val) {
  this->cardUpdate = val;
__isset.cardUpdate = true;
}

void UcMessageBody::__set_contacterAdd(const ContacterAddContent& val) {
  this->contacterAdd = val;
__isset.contacterAdd = true;
}

void UcMessageBody::__set_contacterDel(const ContacterDelContent& val) {
  this->contacterDel = val;
__isset.contacterDel = true;
}

void UcMessageBody::__set_attentionCreate(const AttentionCreateContent& val) {
  this->attentionCreate = val;
__isset.attentionCreate = true;
}

void UcMessageBody::__set_attentionCancel(const AttentionCancelContent& val) {
  this->attentionCancel = val;
__isset.attentionCancel = true;
}

void UcMessageBody::__set_transInvite(const FileTransmissionInviteContent& val) {
  this->transInvite = val;
__isset.transInvite = true;
}

void UcMessageBody::__set_transReceive(const FileTransmissionReceiveContent& val) {
  this->transReceive = val;
__isset.transReceive = true;
}

void UcMessageBody::__set_transReject(const FileTransmissionRejectContent& val) {
  this->transReject = val;
__isset.transReject = true;
}

void UcMessageBody::__set_transStop(const FileTransmissionStopContent& val) {
  this->transStop = val;
__isset.transStop = true;
}

void UcMessageBody::__set_audioInvite(const AudioInviteContent& val) {
  this->audioInvite = val;
__isset.audioInvite = true;
}

void UcMessageBody::__set_audioReceive(const AudioReceiveContent& val) {
  this->audioReceive = val;
__isset.audioReceive = true;
}

void UcMessageBody::__set_audioReject(const AudioRejectContent& val) {
  this->audioReject = val;
__isset.audioReject = true;
}

void UcMessageBody::__set_audioStop(const AudioStopContent& val) {
  this->audioStop = val;
__isset.audioStop = true;
}

void UcMessageBody::__set_callRecent(const AudioRecentCallContent& val) {
  this->callRecent = val;
__isset.callRecent = true;
}

void UcMessageBody::__set_callBlock(const AudioBlockCallContent& val) {
  this->callBlock = val;
__isset.callBlock = true;
}

void UcMessageBody::__set_callReject(const AudioRejectCallContent& val) {
  this->callReject = val;
__isset.callReject = true;
}

void UcMessageBody::__set_callCancel(const AudioCancelCallContent& val) {
  this->callCancel = val;
__isset.callCancel = true;
}

void UcMessageBody::__set_confShare(const ConfShareContent& val) {
  this->confShare = val;
__isset.confShare = true;
}

void UcMessageBody::__set_wbContent(const WBMessageContent& val) {
  this->wbContent = val;
__isset.wbContent = true;
}

void UcMessageBody::__set_remoteAssistanceInvite(const RemoteAssistanceInviteContent& val) {
  this->remoteAssistanceInvite = val;
__isset.remoteAssistanceInvite = true;
}

void UcMessageBody::__set_remoteAssistanceAccept(const RemoteAssistanceAcceptContent& val) {
  this->remoteAssistanceAccept = val;
__isset.remoteAssistanceAccept = true;
}

void UcMessageBody::__set_remoteAssistanceReject(const RemoteAssistanceRejectContent& val) {
  this->remoteAssistanceReject = val;
__isset.remoteAssistanceReject = true;
}

void UcMessageBody::__set_remoteAssistanceEnd(const RemoteAssistanceEndContent& val) {
  this->remoteAssistanceEnd = val;
__isset.remoteAssistanceEnd = true;
}

void UcMessageBody::__set_sessionTop(const SessionTopContent& val) {
  this->sessionTop = val;
__isset.sessionTop = true;
}

void UcMessageBody::__set_atMessageReaded(const AtMessageReadedContent& val) {
  this->atMessageReaded = val;
__isset.atMessageReaded = true;
}

void UcMessageBody::__set_loginNotify(const UserLoginNotifyContent& val) {
  this->loginNotify = val;
__isset.loginNotify = true;
}

void UcMessageBody::__set_apiText(const APITextContent& val) {
  this->apiText = val;
__isset.apiText = true;
}

void UcMessageBody::__set_apiImage(const APIImageContent& val) {
  this->apiImage = val;
__isset.apiImage = true;
}

void UcMessageBody::__set_apiFile(const APIFileContent& val) {
  this->apiFile = val;
__isset.apiFile = true;
}

void UcMessageBody::__set_apiAckSent(const APIAckSentContent& val) {
  this->apiAckSent = val;
__isset.apiAckSent = true;
}

void UcMessageBody::__set_apiOA(const APIOAContent& val) {
  this->apiOA = val;
__isset.apiOA = true;
}

void UcMessageBody::__set_apiOAStatusChange(const APIOAStatusChangeContent& val) {
  this->apiOAStatusChange = val;
__isset.apiOAStatusChange = true;
}

void UcMessageBody::__set_apiChangeNotify(const APIAppChangeNotifyContent& val) {
  this->apiChangeNotify = val;
__isset.apiChangeNotify = true;
}

void UcMessageBody::__set_apiEventNotify(const APIAppEventChangeNotify& val) {
  this->apiEventNotify = val;
__isset.apiEventNotify = true;
}

void UcMessageBody::__set_apiCustomized(const APICustomizedContent& val) {
  this->apiCustomized = val;
__isset.apiCustomized = true;
}

const char* UcMessageBody::ascii_fingerprint = "A5C8691123356F11F2FB48CAF9D11A5B";
const uint8_t UcMessageBody::binary_fingerprint[16] = {0xA5,0xC8,0x69,0x11,0x23,0x35,0x6F,0x11,0xF2,0xFB,0x48,0xCA,0xF9,0xD1,0x1A,0x5B};

uint32_t UcMessageBody::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->presence.read(iprot);
          this->__isset.presence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ping.read(iprot);
          this->__isset.ping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ackSent.read(iprot);
          this->__isset.ackSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ackReceived.read(iprot);
          this->__isset.ackReceived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ackRead.read(iprot);
          this->__isset.ackRead = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sleep.read(iprot);
          this->__isset.sleep = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wakeupConfirm.read(iprot);
          this->__isset.wakeupConfirm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ackPlay.read(iprot);
          this->__isset.ackPlay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->batchAckRead.read(iprot);
          this->__isset.batchAckRead = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->text.read(iprot);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->media.read(iprot);
          this->__isset.media = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupAdd.read(iprot);
          this->__isset.groupAdd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupDel.read(iprot);
          this->__isset.groupDel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupUpdate.read(iprot);
          this->__isset.groupUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupCreate.read(iprot);
          this->__isset.groupCreate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupTop.read(iprot);
          this->__isset.groupTop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->summaryCreate.read(iprot);
          this->__isset.summaryCreate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->docSend.read(iprot);
          this->__isset.docSend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alertRule.read(iprot);
          this->__isset.alertRule = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupClose.read(iprot);
          this->__isset.groupClose = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->msgNotify.read(iprot);
          this->__isset.msgNotify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupKick.read(iprot);
          this->__isset.groupKick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->codeCreate.read(iprot);
          this->__isset.codeCreate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->codeDel.read(iprot);
          this->__isset.codeDel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->docDel.read(iprot);
          this->__isset.docDel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 66:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->commentCreate.read(iprot);
          this->__isset.commentCreate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 67:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->commentDel.read(iprot);
          this->__isset.commentDel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 68:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupAvatarUpdate.read(iprot);
          this->__isset.groupAvatarUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 69:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupState.read(iprot);
          this->__isset.groupState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cloudFile.read(iprot);
          this->__isset.cloudFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->memberRole.read(iprot);
          this->__isset.memberRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->report.read(iprot);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 73:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->revocation.read(iprot);
          this->__isset.revocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupScope.read(iprot);
          this->__isset.groupScope = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->welcome.read(iprot);
          this->__isset.welcome = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->clientUpdate.read(iprot);
          this->__isset.clientUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 102:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->completeInfo.read(iprot);
          this->__isset.completeInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 103:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pwdComplexUpdate.read(iprot);
          this->__isset.pwdComplexUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 104:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pwdExpire.read(iprot);
          this->__isset.pwdExpire = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 105:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pcGuide.read(iprot);
          this->__isset.pcGuide = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 106:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mobileGuide.read(iprot);
          this->__isset.mobileGuide = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 107:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pwdModify.read(iprot);
          this->__isset.pwdModify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 108:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tagDel.read(iprot);
          this->__isset.tagDel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 109:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->remind.read(iprot);
          this->__isset.remind = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 150:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deptUpdate.read(iprot);
          this->__isset.deptUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 151:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deptTransfer.read(iprot);
          this->__isset.deptTransfer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 152:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->positionUpdate.read(iprot);
          this->__isset.positionUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 153:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->employeeEntry.read(iprot);
          this->__isset.employeeEntry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 154:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->employeeLeave.read(iprot);
          this->__isset.employeeLeave = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 155:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->employeeRights.read(iprot);
          this->__isset.employeeRights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 156:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deprtParentChange.read(iprot);
          this->__isset.deprtParentChange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 157:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->companyJoin.read(iprot);
          this->__isset.companyJoin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 158:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deptDelete.read(iprot);
          this->__isset.deptDelete = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 159:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entryConfirm.read(iprot);
          this->__isset.entryConfirm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 160:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->leaveConfirm.read(iprot);
          this->__isset.leaveConfirm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 161:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deptConfirm.read(iprot);
          this->__isset.deptConfirm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->instantInvite.read(iprot);
          this->__isset.instantInvite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 201:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confInvite.read(iprot);
          this->__isset.confInvite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 202:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confReceive.read(iprot);
          this->__isset.confReceive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 203:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confReject.read(iprot);
          this->__isset.confReject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 204:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confCancel.read(iprot);
          this->__isset.confCancel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 205:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confAlert.read(iprot);
          this->__isset.confAlert = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 207:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->instantReceive.read(iprot);
          this->__isset.instantReceive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 208:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->instantReject.read(iprot);
          this->__isset.instantReject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 209:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confChat.read(iprot);
          this->__isset.confChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 210:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confSummary.read(iprot);
          this->__isset.confSummary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 211:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->callState.read(iprot);
          this->__isset.callState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 212:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confUpload.read(iprot);
          this->__isset.confUpload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 213:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confDocDel.read(iprot);
          this->__isset.confDocDel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 250:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cardUpdate.read(iprot);
          this->__isset.cardUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 251:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contacterAdd.read(iprot);
          this->__isset.contacterAdd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 252:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contacterDel.read(iprot);
          this->__isset.contacterDel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 253:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attentionCreate.read(iprot);
          this->__isset.attentionCreate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 254:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attentionCancel.read(iprot);
          this->__isset.attentionCancel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 300:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->transInvite.read(iprot);
          this->__isset.transInvite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 301:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->transReceive.read(iprot);
          this->__isset.transReceive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 302:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->transReject.read(iprot);
          this->__isset.transReject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 303:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->transStop.read(iprot);
          this->__isset.transStop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 350:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->audioInvite.read(iprot);
          this->__isset.audioInvite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 351:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->audioReceive.read(iprot);
          this->__isset.audioReceive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 352:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->audioReject.read(iprot);
          this->__isset.audioReject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 353:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->audioStop.read(iprot);
          this->__isset.audioStop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 354:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->callRecent.read(iprot);
          this->__isset.callRecent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 355:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->callBlock.read(iprot);
          this->__isset.callBlock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 356:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->callReject.read(iprot);
          this->__isset.callReject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 357:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->callCancel.read(iprot);
          this->__isset.callCancel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 400:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confShare.read(iprot);
          this->__isset.confShare = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 450:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wbContent.read(iprot);
          this->__isset.wbContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 601:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->remoteAssistanceInvite.read(iprot);
          this->__isset.remoteAssistanceInvite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 602:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->remoteAssistanceAccept.read(iprot);
          this->__isset.remoteAssistanceAccept = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 603:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->remoteAssistanceReject.read(iprot);
          this->__isset.remoteAssistanceReject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 604:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->remoteAssistanceEnd.read(iprot);
          this->__isset.remoteAssistanceEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 800:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sessionTop.read(iprot);
          this->__isset.sessionTop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 801:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->atMessageReaded.read(iprot);
          this->__isset.atMessageReaded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 802:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->loginNotify.read(iprot);
          this->__isset.loginNotify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10000:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->apiText.read(iprot);
          this->__isset.apiText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10001:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->apiImage.read(iprot);
          this->__isset.apiImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10002:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->apiFile.read(iprot);
          this->__isset.apiFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10003:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->apiAckSent.read(iprot);
          this->__isset.apiAckSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10004:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->apiOA.read(iprot);
          this->__isset.apiOA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10005:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->apiOAStatusChange.read(iprot);
          this->__isset.apiOAStatusChange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10006:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->apiChangeNotify.read(iprot);
          this->__isset.apiChangeNotify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10007:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->apiEventNotify.read(iprot);
          this->__isset.apiEventNotify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10008:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->apiCustomized.read(iprot);
          this->__isset.apiCustomized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UcMessageBody::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UcMessageBody");

  if (this->__isset.presence) {
    xfer += oprot->writeFieldBegin("presence", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->presence.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ping) {
    xfer += oprot->writeFieldBegin("ping", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->ping.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ackSent) {
    xfer += oprot->writeFieldBegin("ackSent", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->ackSent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ackReceived) {
    xfer += oprot->writeFieldBegin("ackReceived", ::apache::thrift::protocol::T_STRUCT, 21);
    xfer += this->ackReceived.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ackRead) {
    xfer += oprot->writeFieldBegin("ackRead", ::apache::thrift::protocol::T_STRUCT, 22);
    xfer += this->ackRead.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sleep) {
    xfer += oprot->writeFieldBegin("sleep", ::apache::thrift::protocol::T_STRUCT, 23);
    xfer += this->sleep.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wakeupConfirm) {
    xfer += oprot->writeFieldBegin("wakeupConfirm", ::apache::thrift::protocol::T_STRUCT, 24);
    xfer += this->wakeupConfirm.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ackPlay) {
    xfer += oprot->writeFieldBegin("ackPlay", ::apache::thrift::protocol::T_STRUCT, 25);
    xfer += this->ackPlay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.batchAckRead) {
    xfer += oprot->writeFieldBegin("batchAckRead", ::apache::thrift::protocol::T_STRUCT, 26);
    xfer += this->batchAckRead.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.text) {
    xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRUCT, 50);
    xfer += this->text.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.media) {
    xfer += oprot->writeFieldBegin("media", ::apache::thrift::protocol::T_STRUCT, 51);
    xfer += this->media.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupAdd) {
    xfer += oprot->writeFieldBegin("groupAdd", ::apache::thrift::protocol::T_STRUCT, 52);
    xfer += this->groupAdd.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupDel) {
    xfer += oprot->writeFieldBegin("groupDel", ::apache::thrift::protocol::T_STRUCT, 53);
    xfer += this->groupDel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupUpdate) {
    xfer += oprot->writeFieldBegin("groupUpdate", ::apache::thrift::protocol::T_STRUCT, 54);
    xfer += this->groupUpdate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupCreate) {
    xfer += oprot->writeFieldBegin("groupCreate", ::apache::thrift::protocol::T_STRUCT, 55);
    xfer += this->groupCreate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupTop) {
    xfer += oprot->writeFieldBegin("groupTop", ::apache::thrift::protocol::T_STRUCT, 56);
    xfer += this->groupTop.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.summaryCreate) {
    xfer += oprot->writeFieldBegin("summaryCreate", ::apache::thrift::protocol::T_STRUCT, 57);
    xfer += this->summaryCreate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.docSend) {
    xfer += oprot->writeFieldBegin("docSend", ::apache::thrift::protocol::T_STRUCT, 58);
    xfer += this->docSend.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alertRule) {
    xfer += oprot->writeFieldBegin("alertRule", ::apache::thrift::protocol::T_STRUCT, 59);
    xfer += this->alertRule.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupClose) {
    xfer += oprot->writeFieldBegin("groupClose", ::apache::thrift::protocol::T_STRUCT, 60);
    xfer += this->groupClose.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.msgNotify) {
    xfer += oprot->writeFieldBegin("msgNotify", ::apache::thrift::protocol::T_STRUCT, 61);
    xfer += this->msgNotify.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupKick) {
    xfer += oprot->writeFieldBegin("groupKick", ::apache::thrift::protocol::T_STRUCT, 62);
    xfer += this->groupKick.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.codeCreate) {
    xfer += oprot->writeFieldBegin("codeCreate", ::apache::thrift::protocol::T_STRUCT, 63);
    xfer += this->codeCreate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.codeDel) {
    xfer += oprot->writeFieldBegin("codeDel", ::apache::thrift::protocol::T_STRUCT, 64);
    xfer += this->codeDel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.docDel) {
    xfer += oprot->writeFieldBegin("docDel", ::apache::thrift::protocol::T_STRUCT, 65);
    xfer += this->docDel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commentCreate) {
    xfer += oprot->writeFieldBegin("commentCreate", ::apache::thrift::protocol::T_STRUCT, 66);
    xfer += this->commentCreate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commentDel) {
    xfer += oprot->writeFieldBegin("commentDel", ::apache::thrift::protocol::T_STRUCT, 67);
    xfer += this->commentDel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupAvatarUpdate) {
    xfer += oprot->writeFieldBegin("groupAvatarUpdate", ::apache::thrift::protocol::T_STRUCT, 68);
    xfer += this->groupAvatarUpdate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupState) {
    xfer += oprot->writeFieldBegin("groupState", ::apache::thrift::protocol::T_STRUCT, 69);
    xfer += this->groupState.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cloudFile) {
    xfer += oprot->writeFieldBegin("cloudFile", ::apache::thrift::protocol::T_STRUCT, 70);
    xfer += this->cloudFile.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.memberRole) {
    xfer += oprot->writeFieldBegin("memberRole", ::apache::thrift::protocol::T_STRUCT, 71);
    xfer += this->memberRole.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.report) {
    xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRUCT, 72);
    xfer += this->report.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.revocation) {
    xfer += oprot->writeFieldBegin("revocation", ::apache::thrift::protocol::T_STRUCT, 73);
    xfer += this->revocation.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupScope) {
    xfer += oprot->writeFieldBegin("groupScope", ::apache::thrift::protocol::T_STRUCT, 74);
    xfer += this->groupScope.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.welcome) {
    xfer += oprot->writeFieldBegin("welcome", ::apache::thrift::protocol::T_STRUCT, 100);
    xfer += this->welcome.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientUpdate) {
    xfer += oprot->writeFieldBegin("clientUpdate", ::apache::thrift::protocol::T_STRUCT, 101);
    xfer += this->clientUpdate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.completeInfo) {
    xfer += oprot->writeFieldBegin("completeInfo", ::apache::thrift::protocol::T_STRUCT, 102);
    xfer += this->completeInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pwdComplexUpdate) {
    xfer += oprot->writeFieldBegin("pwdComplexUpdate", ::apache::thrift::protocol::T_STRUCT, 103);
    xfer += this->pwdComplexUpdate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pwdExpire) {
    xfer += oprot->writeFieldBegin("pwdExpire", ::apache::thrift::protocol::T_STRUCT, 104);
    xfer += this->pwdExpire.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pcGuide) {
    xfer += oprot->writeFieldBegin("pcGuide", ::apache::thrift::protocol::T_STRUCT, 105);
    xfer += this->pcGuide.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mobileGuide) {
    xfer += oprot->writeFieldBegin("mobileGuide", ::apache::thrift::protocol::T_STRUCT, 106);
    xfer += this->mobileGuide.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pwdModify) {
    xfer += oprot->writeFieldBegin("pwdModify", ::apache::thrift::protocol::T_STRUCT, 107);
    xfer += this->pwdModify.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagDel) {
    xfer += oprot->writeFieldBegin("tagDel", ::apache::thrift::protocol::T_STRUCT, 108);
    xfer += this->tagDel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remind) {
    xfer += oprot->writeFieldBegin("remind", ::apache::thrift::protocol::T_STRUCT, 109);
    xfer += this->remind.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deptUpdate) {
    xfer += oprot->writeFieldBegin("deptUpdate", ::apache::thrift::protocol::T_STRUCT, 150);
    xfer += this->deptUpdate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deptTransfer) {
    xfer += oprot->writeFieldBegin("deptTransfer", ::apache::thrift::protocol::T_STRUCT, 151);
    xfer += this->deptTransfer.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.positionUpdate) {
    xfer += oprot->writeFieldBegin("positionUpdate", ::apache::thrift::protocol::T_STRUCT, 152);
    xfer += this->positionUpdate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.employeeEntry) {
    xfer += oprot->writeFieldBegin("employeeEntry", ::apache::thrift::protocol::T_STRUCT, 153);
    xfer += this->employeeEntry.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.employeeLeave) {
    xfer += oprot->writeFieldBegin("employeeLeave", ::apache::thrift::protocol::T_STRUCT, 154);
    xfer += this->employeeLeave.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.employeeRights) {
    xfer += oprot->writeFieldBegin("employeeRights", ::apache::thrift::protocol::T_STRUCT, 155);
    xfer += this->employeeRights.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deprtParentChange) {
    xfer += oprot->writeFieldBegin("deprtParentChange", ::apache::thrift::protocol::T_STRUCT, 156);
    xfer += this->deprtParentChange.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.companyJoin) {
    xfer += oprot->writeFieldBegin("companyJoin", ::apache::thrift::protocol::T_STRUCT, 157);
    xfer += this->companyJoin.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deptDelete) {
    xfer += oprot->writeFieldBegin("deptDelete", ::apache::thrift::protocol::T_STRUCT, 158);
    xfer += this->deptDelete.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.entryConfirm) {
    xfer += oprot->writeFieldBegin("entryConfirm", ::apache::thrift::protocol::T_STRUCT, 159);
    xfer += this->entryConfirm.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leaveConfirm) {
    xfer += oprot->writeFieldBegin("leaveConfirm", ::apache::thrift::protocol::T_STRUCT, 160);
    xfer += this->leaveConfirm.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deptConfirm) {
    xfer += oprot->writeFieldBegin("deptConfirm", ::apache::thrift::protocol::T_STRUCT, 161);
    xfer += this->deptConfirm.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.instantInvite) {
    xfer += oprot->writeFieldBegin("instantInvite", ::apache::thrift::protocol::T_STRUCT, 200);
    xfer += this->instantInvite.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confInvite) {
    xfer += oprot->writeFieldBegin("confInvite", ::apache::thrift::protocol::T_STRUCT, 201);
    xfer += this->confInvite.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confReceive) {
    xfer += oprot->writeFieldBegin("confReceive", ::apache::thrift::protocol::T_STRUCT, 202);
    xfer += this->confReceive.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confReject) {
    xfer += oprot->writeFieldBegin("confReject", ::apache::thrift::protocol::T_STRUCT, 203);
    xfer += this->confReject.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confCancel) {
    xfer += oprot->writeFieldBegin("confCancel", ::apache::thrift::protocol::T_STRUCT, 204);
    xfer += this->confCancel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confAlert) {
    xfer += oprot->writeFieldBegin("confAlert", ::apache::thrift::protocol::T_STRUCT, 205);
    xfer += this->confAlert.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.instantReceive) {
    xfer += oprot->writeFieldBegin("instantReceive", ::apache::thrift::protocol::T_STRUCT, 207);
    xfer += this->instantReceive.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.instantReject) {
    xfer += oprot->writeFieldBegin("instantReject", ::apache::thrift::protocol::T_STRUCT, 208);
    xfer += this->instantReject.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confChat) {
    xfer += oprot->writeFieldBegin("confChat", ::apache::thrift::protocol::T_STRUCT, 209);
    xfer += this->confChat.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confSummary) {
    xfer += oprot->writeFieldBegin("confSummary", ::apache::thrift::protocol::T_STRUCT, 210);
    xfer += this->confSummary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.callState) {
    xfer += oprot->writeFieldBegin("callState", ::apache::thrift::protocol::T_STRUCT, 211);
    xfer += this->callState.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confUpload) {
    xfer += oprot->writeFieldBegin("confUpload", ::apache::thrift::protocol::T_STRUCT, 212);
    xfer += this->confUpload.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confDocDel) {
    xfer += oprot->writeFieldBegin("confDocDel", ::apache::thrift::protocol::T_STRUCT, 213);
    xfer += this->confDocDel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cardUpdate) {
    xfer += oprot->writeFieldBegin("cardUpdate", ::apache::thrift::protocol::T_STRUCT, 250);
    xfer += this->cardUpdate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contacterAdd) {
    xfer += oprot->writeFieldBegin("contacterAdd", ::apache::thrift::protocol::T_STRUCT, 251);
    xfer += this->contacterAdd.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contacterDel) {
    xfer += oprot->writeFieldBegin("contacterDel", ::apache::thrift::protocol::T_STRUCT, 252);
    xfer += this->contacterDel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attentionCreate) {
    xfer += oprot->writeFieldBegin("attentionCreate", ::apache::thrift::protocol::T_STRUCT, 253);
    xfer += this->attentionCreate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attentionCancel) {
    xfer += oprot->writeFieldBegin("attentionCancel", ::apache::thrift::protocol::T_STRUCT, 254);
    xfer += this->attentionCancel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transInvite) {
    xfer += oprot->writeFieldBegin("transInvite", ::apache::thrift::protocol::T_STRUCT, 300);
    xfer += this->transInvite.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transReceive) {
    xfer += oprot->writeFieldBegin("transReceive", ::apache::thrift::protocol::T_STRUCT, 301);
    xfer += this->transReceive.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transReject) {
    xfer += oprot->writeFieldBegin("transReject", ::apache::thrift::protocol::T_STRUCT, 302);
    xfer += this->transReject.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transStop) {
    xfer += oprot->writeFieldBegin("transStop", ::apache::thrift::protocol::T_STRUCT, 303);
    xfer += this->transStop.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.audioInvite) {
    xfer += oprot->writeFieldBegin("audioInvite", ::apache::thrift::protocol::T_STRUCT, 350);
    xfer += this->audioInvite.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.audioReceive) {
    xfer += oprot->writeFieldBegin("audioReceive", ::apache::thrift::protocol::T_STRUCT, 351);
    xfer += this->audioReceive.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.audioReject) {
    xfer += oprot->writeFieldBegin("audioReject", ::apache::thrift::protocol::T_STRUCT, 352);
    xfer += this->audioReject.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.audioStop) {
    xfer += oprot->writeFieldBegin("audioStop", ::apache::thrift::protocol::T_STRUCT, 353);
    xfer += this->audioStop.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.callRecent) {
    xfer += oprot->writeFieldBegin("callRecent", ::apache::thrift::protocol::T_STRUCT, 354);
    xfer += this->callRecent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.callBlock) {
    xfer += oprot->writeFieldBegin("callBlock", ::apache::thrift::protocol::T_STRUCT, 355);
    xfer += this->callBlock.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.callReject) {
    xfer += oprot->writeFieldBegin("callReject", ::apache::thrift::protocol::T_STRUCT, 356);
    xfer += this->callReject.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.callCancel) {
    xfer += oprot->writeFieldBegin("callCancel", ::apache::thrift::protocol::T_STRUCT, 357);
    xfer += this->callCancel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confShare) {
    xfer += oprot->writeFieldBegin("confShare", ::apache::thrift::protocol::T_STRUCT, 400);
    xfer += this->confShare.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wbContent) {
    xfer += oprot->writeFieldBegin("wbContent", ::apache::thrift::protocol::T_STRUCT, 450);
    xfer += this->wbContent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remoteAssistanceInvite) {
    xfer += oprot->writeFieldBegin("remoteAssistanceInvite", ::apache::thrift::protocol::T_STRUCT, 601);
    xfer += this->remoteAssistanceInvite.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remoteAssistanceAccept) {
    xfer += oprot->writeFieldBegin("remoteAssistanceAccept", ::apache::thrift::protocol::T_STRUCT, 602);
    xfer += this->remoteAssistanceAccept.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remoteAssistanceReject) {
    xfer += oprot->writeFieldBegin("remoteAssistanceReject", ::apache::thrift::protocol::T_STRUCT, 603);
    xfer += this->remoteAssistanceReject.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remoteAssistanceEnd) {
    xfer += oprot->writeFieldBegin("remoteAssistanceEnd", ::apache::thrift::protocol::T_STRUCT, 604);
    xfer += this->remoteAssistanceEnd.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sessionTop) {
    xfer += oprot->writeFieldBegin("sessionTop", ::apache::thrift::protocol::T_STRUCT, 800);
    xfer += this->sessionTop.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.atMessageReaded) {
    xfer += oprot->writeFieldBegin("atMessageReaded", ::apache::thrift::protocol::T_STRUCT, 801);
    xfer += this->atMessageReaded.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.loginNotify) {
    xfer += oprot->writeFieldBegin("loginNotify", ::apache::thrift::protocol::T_STRUCT, 802);
    xfer += this->loginNotify.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiText) {
    xfer += oprot->writeFieldBegin("apiText", ::apache::thrift::protocol::T_STRUCT, 10000);
    xfer += this->apiText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiImage) {
    xfer += oprot->writeFieldBegin("apiImage", ::apache::thrift::protocol::T_STRUCT, 10001);
    xfer += this->apiImage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiFile) {
    xfer += oprot->writeFieldBegin("apiFile", ::apache::thrift::protocol::T_STRUCT, 10002);
    xfer += this->apiFile.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiAckSent) {
    xfer += oprot->writeFieldBegin("apiAckSent", ::apache::thrift::protocol::T_STRUCT, 10003);
    xfer += this->apiAckSent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiOA) {
    xfer += oprot->writeFieldBegin("apiOA", ::apache::thrift::protocol::T_STRUCT, 10004);
    xfer += this->apiOA.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiOAStatusChange) {
    xfer += oprot->writeFieldBegin("apiOAStatusChange", ::apache::thrift::protocol::T_STRUCT, 10005);
    xfer += this->apiOAStatusChange.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiChangeNotify) {
    xfer += oprot->writeFieldBegin("apiChangeNotify", ::apache::thrift::protocol::T_STRUCT, 10006);
    xfer += this->apiChangeNotify.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiEventNotify) {
    xfer += oprot->writeFieldBegin("apiEventNotify", ::apache::thrift::protocol::T_STRUCT, 10007);
    xfer += this->apiEventNotify.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiCustomized) {
    xfer += oprot->writeFieldBegin("apiCustomized", ::apache::thrift::protocol::T_STRUCT, 10008);
    xfer += this->apiCustomized.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UcMessageBody &a, UcMessageBody &b) {
  using ::std::swap;
  swap(a.presence, b.presence);
  swap(a.ping, b.ping);
  swap(a.ackSent, b.ackSent);
  swap(a.ackReceived, b.ackReceived);
  swap(a.ackRead, b.ackRead);
  swap(a.sleep, b.sleep);
  swap(a.wakeupConfirm, b.wakeupConfirm);
  swap(a.ackPlay, b.ackPlay);
  swap(a.batchAckRead, b.batchAckRead);
  swap(a.text, b.text);
  swap(a.media, b.media);
  swap(a.groupAdd, b.groupAdd);
  swap(a.groupDel, b.groupDel);
  swap(a.groupUpdate, b.groupUpdate);
  swap(a.groupCreate, b.groupCreate);
  swap(a.groupTop, b.groupTop);
  swap(a.summaryCreate, b.summaryCreate);
  swap(a.docSend, b.docSend);
  swap(a.alertRule, b.alertRule);
  swap(a.groupClose, b.groupClose);
  swap(a.msgNotify, b.msgNotify);
  swap(a.groupKick, b.groupKick);
  swap(a.codeCreate, b.codeCreate);
  swap(a.codeDel, b.codeDel);
  swap(a.docDel, b.docDel);
  swap(a.commentCreate, b.commentCreate);
  swap(a.commentDel, b.commentDel);
  swap(a.groupAvatarUpdate, b.groupAvatarUpdate);
  swap(a.groupState, b.groupState);
  swap(a.cloudFile, b.cloudFile);
  swap(a.memberRole, b.memberRole);
  swap(a.report, b.report);
  swap(a.revocation, b.revocation);
  swap(a.groupScope, b.groupScope);
  swap(a.welcome, b.welcome);
  swap(a.clientUpdate, b.clientUpdate);
  swap(a.completeInfo, b.completeInfo);
  swap(a.pwdComplexUpdate, b.pwdComplexUpdate);
  swap(a.pwdExpire, b.pwdExpire);
  swap(a.pcGuide, b.pcGuide);
  swap(a.mobileGuide, b.mobileGuide);
  swap(a.pwdModify, b.pwdModify);
  swap(a.tagDel, b.tagDel);
  swap(a.remind, b.remind);
  swap(a.deptUpdate, b.deptUpdate);
  swap(a.deptTransfer, b.deptTransfer);
  swap(a.positionUpdate, b.positionUpdate);
  swap(a.employeeEntry, b.employeeEntry);
  swap(a.employeeLeave, b.employeeLeave);
  swap(a.employeeRights, b.employeeRights);
  swap(a.deprtParentChange, b.deprtParentChange);
  swap(a.companyJoin, b.companyJoin);
  swap(a.deptDelete, b.deptDelete);
  swap(a.entryConfirm, b.entryConfirm);
  swap(a.leaveConfirm, b.leaveConfirm);
  swap(a.deptConfirm, b.deptConfirm);
  swap(a.instantInvite, b.instantInvite);
  swap(a.confInvite, b.confInvite);
  swap(a.confReceive, b.confReceive);
  swap(a.confReject, b.confReject);
  swap(a.confCancel, b.confCancel);
  swap(a.confAlert, b.confAlert);
  swap(a.instantReceive, b.instantReceive);
  swap(a.instantReject, b.instantReject);
  swap(a.confChat, b.confChat);
  swap(a.confSummary, b.confSummary);
  swap(a.callState, b.callState);
  swap(a.confUpload, b.confUpload);
  swap(a.confDocDel, b.confDocDel);
  swap(a.cardUpdate, b.cardUpdate);
  swap(a.contacterAdd, b.contacterAdd);
  swap(a.contacterDel, b.contacterDel);
  swap(a.attentionCreate, b.attentionCreate);
  swap(a.attentionCancel, b.attentionCancel);
  swap(a.transInvite, b.transInvite);
  swap(a.transReceive, b.transReceive);
  swap(a.transReject, b.transReject);
  swap(a.transStop, b.transStop);
  swap(a.audioInvite, b.audioInvite);
  swap(a.audioReceive, b.audioReceive);
  swap(a.audioReject, b.audioReject);
  swap(a.audioStop, b.audioStop);
  swap(a.callRecent, b.callRecent);
  swap(a.callBlock, b.callBlock);
  swap(a.callReject, b.callReject);
  swap(a.callCancel, b.callCancel);
  swap(a.confShare, b.confShare);
  swap(a.wbContent, b.wbContent);
  swap(a.remoteAssistanceInvite, b.remoteAssistanceInvite);
  swap(a.remoteAssistanceAccept, b.remoteAssistanceAccept);
  swap(a.remoteAssistanceReject, b.remoteAssistanceReject);
  swap(a.remoteAssistanceEnd, b.remoteAssistanceEnd);
  swap(a.sessionTop, b.sessionTop);
  swap(a.atMessageReaded, b.atMessageReaded);
  swap(a.loginNotify, b.loginNotify);
  swap(a.apiText, b.apiText);
  swap(a.apiImage, b.apiImage);
  swap(a.apiFile, b.apiFile);
  swap(a.apiAckSent, b.apiAckSent);
  swap(a.apiOA, b.apiOA);
  swap(a.apiOAStatusChange, b.apiOAStatusChange);
  swap(a.apiChangeNotify, b.apiChangeNotify);
  swap(a.apiEventNotify, b.apiEventNotify);
  swap(a.apiCustomized, b.apiCustomized);
  swap(a.__isset, b.__isset);
}

UcMessageBody::UcMessageBody(const UcMessageBody& other287) {
  presence = other287.presence;
  ping = other287.ping;
  ackSent = other287.ackSent;
  ackReceived = other287.ackReceived;
  ackRead = other287.ackRead;
  sleep = other287.sleep;
  wakeupConfirm = other287.wakeupConfirm;
  ackPlay = other287.ackPlay;
  batchAckRead = other287.batchAckRead;
  text = other287.text;
  media = other287.media;
  groupAdd = other287.groupAdd;
  groupDel = other287.groupDel;
  groupUpdate = other287.groupUpdate;
  groupCreate = other287.groupCreate;
  groupTop = other287.groupTop;
  summaryCreate = other287.summaryCreate;
  docSend = other287.docSend;
  alertRule = other287.alertRule;
  groupClose = other287.groupClose;
  msgNotify = other287.msgNotify;
  groupKick = other287.groupKick;
  codeCreate = other287.codeCreate;
  codeDel = other287.codeDel;
  docDel = other287.docDel;
  commentCreate = other287.commentCreate;
  commentDel = other287.commentDel;
  groupAvatarUpdate = other287.groupAvatarUpdate;
  groupState = other287.groupState;
  cloudFile = other287.cloudFile;
  memberRole = other287.memberRole;
  report = other287.report;
  revocation = other287.revocation;
  groupScope = other287.groupScope;
  welcome = other287.welcome;
  clientUpdate = other287.clientUpdate;
  completeInfo = other287.completeInfo;
  pwdComplexUpdate = other287.pwdComplexUpdate;
  pwdExpire = other287.pwdExpire;
  pcGuide = other287.pcGuide;
  mobileGuide = other287.mobileGuide;
  pwdModify = other287.pwdModify;
  tagDel = other287.tagDel;
  remind = other287.remind;
  deptUpdate = other287.deptUpdate;
  deptTransfer = other287.deptTransfer;
  positionUpdate = other287.positionUpdate;
  employeeEntry = other287.employeeEntry;
  employeeLeave = other287.employeeLeave;
  employeeRights = other287.employeeRights;
  deprtParentChange = other287.deprtParentChange;
  companyJoin = other287.companyJoin;
  deptDelete = other287.deptDelete;
  entryConfirm = other287.entryConfirm;
  leaveConfirm = other287.leaveConfirm;
  deptConfirm = other287.deptConfirm;
  instantInvite = other287.instantInvite;
  confInvite = other287.confInvite;
  confReceive = other287.confReceive;
  confReject = other287.confReject;
  confCancel = other287.confCancel;
  confAlert = other287.confAlert;
  instantReceive = other287.instantReceive;
  instantReject = other287.instantReject;
  confChat = other287.confChat;
  confSummary = other287.confSummary;
  callState = other287.callState;
  confUpload = other287.confUpload;
  confDocDel = other287.confDocDel;
  cardUpdate = other287.cardUpdate;
  contacterAdd = other287.contacterAdd;
  contacterDel = other287.contacterDel;
  attentionCreate = other287.attentionCreate;
  attentionCancel = other287.attentionCancel;
  transInvite = other287.transInvite;
  transReceive = other287.transReceive;
  transReject = other287.transReject;
  transStop = other287.transStop;
  audioInvite = other287.audioInvite;
  audioReceive = other287.audioReceive;
  audioReject = other287.audioReject;
  audioStop = other287.audioStop;
  callRecent = other287.callRecent;
  callBlock = other287.callBlock;
  callReject = other287.callReject;
  callCancel = other287.callCancel;
  confShare = other287.confShare;
  wbContent = other287.wbContent;
  remoteAssistanceInvite = other287.remoteAssistanceInvite;
  remoteAssistanceAccept = other287.remoteAssistanceAccept;
  remoteAssistanceReject = other287.remoteAssistanceReject;
  remoteAssistanceEnd = other287.remoteAssistanceEnd;
  sessionTop = other287.sessionTop;
  atMessageReaded = other287.atMessageReaded;
  loginNotify = other287.loginNotify;
  apiText = other287.apiText;
  apiImage = other287.apiImage;
  apiFile = other287.apiFile;
  apiAckSent = other287.apiAckSent;
  apiOA = other287.apiOA;
  apiOAStatusChange = other287.apiOAStatusChange;
  apiChangeNotify = other287.apiChangeNotify;
  apiEventNotify = other287.apiEventNotify;
  apiCustomized = other287.apiCustomized;
  __isset = other287.__isset;
}
UcMessageBody& UcMessageBody::operator=(const UcMessageBody& other288) {
  presence = other288.presence;
  ping = other288.ping;
  ackSent = other288.ackSent;
  ackReceived = other288.ackReceived;
  ackRead = other288.ackRead;
  sleep = other288.sleep;
  wakeupConfirm = other288.wakeupConfirm;
  ackPlay = other288.ackPlay;
  batchAckRead = other288.batchAckRead;
  text = other288.text;
  media = other288.media;
  groupAdd = other288.groupAdd;
  groupDel = other288.groupDel;
  groupUpdate = other288.groupUpdate;
  groupCreate = other288.groupCreate;
  groupTop = other288.groupTop;
  summaryCreate = other288.summaryCreate;
  docSend = other288.docSend;
  alertRule = other288.alertRule;
  groupClose = other288.groupClose;
  msgNotify = other288.msgNotify;
  groupKick = other288.groupKick;
  codeCreate = other288.codeCreate;
  codeDel = other288.codeDel;
  docDel = other288.docDel;
  commentCreate = other288.commentCreate;
  commentDel = other288.commentDel;
  groupAvatarUpdate = other288.groupAvatarUpdate;
  groupState = other288.groupState;
  cloudFile = other288.cloudFile;
  memberRole = other288.memberRole;
  report = other288.report;
  revocation = other288.revocation;
  groupScope = other288.groupScope;
  welcome = other288.welcome;
  clientUpdate = other288.clientUpdate;
  completeInfo = other288.completeInfo;
  pwdComplexUpdate = other288.pwdComplexUpdate;
  pwdExpire = other288.pwdExpire;
  pcGuide = other288.pcGuide;
  mobileGuide = other288.mobileGuide;
  pwdModify = other288.pwdModify;
  tagDel = other288.tagDel;
  remind = other288.remind;
  deptUpdate = other288.deptUpdate;
  deptTransfer = other288.deptTransfer;
  positionUpdate = other288.positionUpdate;
  employeeEntry = other288.employeeEntry;
  employeeLeave = other288.employeeLeave;
  employeeRights = other288.employeeRights;
  deprtParentChange = other288.deprtParentChange;
  companyJoin = other288.companyJoin;
  deptDelete = other288.deptDelete;
  entryConfirm = other288.entryConfirm;
  leaveConfirm = other288.leaveConfirm;
  deptConfirm = other288.deptConfirm;
  instantInvite = other288.instantInvite;
  confInvite = other288.confInvite;
  confReceive = other288.confReceive;
  confReject = other288.confReject;
  confCancel = other288.confCancel;
  confAlert = other288.confAlert;
  instantReceive = other288.instantReceive;
  instantReject = other288.instantReject;
  confChat = other288.confChat;
  confSummary = other288.confSummary;
  callState = other288.callState;
  confUpload = other288.confUpload;
  confDocDel = other288.confDocDel;
  cardUpdate = other288.cardUpdate;
  contacterAdd = other288.contacterAdd;
  contacterDel = other288.contacterDel;
  attentionCreate = other288.attentionCreate;
  attentionCancel = other288.attentionCancel;
  transInvite = other288.transInvite;
  transReceive = other288.transReceive;
  transReject = other288.transReject;
  transStop = other288.transStop;
  audioInvite = other288.audioInvite;
  audioReceive = other288.audioReceive;
  audioReject = other288.audioReject;
  audioStop = other288.audioStop;
  callRecent = other288.callRecent;
  callBlock = other288.callBlock;
  callReject = other288.callReject;
  callCancel = other288.callCancel;
  confShare = other288.confShare;
  wbContent = other288.wbContent;
  remoteAssistanceInvite = other288.remoteAssistanceInvite;
  remoteAssistanceAccept = other288.remoteAssistanceAccept;
  remoteAssistanceReject = other288.remoteAssistanceReject;
  remoteAssistanceEnd = other288.remoteAssistanceEnd;
  sessionTop = other288.sessionTop;
  atMessageReaded = other288.atMessageReaded;
  loginNotify = other288.loginNotify;
  apiText = other288.apiText;
  apiImage = other288.apiImage;
  apiFile = other288.apiFile;
  apiAckSent = other288.apiAckSent;
  apiOA = other288.apiOA;
  apiOAStatusChange = other288.apiOAStatusChange;
  apiChangeNotify = other288.apiChangeNotify;
  apiEventNotify = other288.apiEventNotify;
  apiCustomized = other288.apiCustomized;
  __isset = other288.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UcMessageBody& obj) {
  using apache::thrift::to_string;
  out << "UcMessageBody(";
  out << "presence="; (obj.__isset.presence ? (out << to_string(obj.presence)) : (out << "<null>"));
  out << ", " << "ping="; (obj.__isset.ping ? (out << to_string(obj.ping)) : (out << "<null>"));
  out << ", " << "ackSent="; (obj.__isset.ackSent ? (out << to_string(obj.ackSent)) : (out << "<null>"));
  out << ", " << "ackReceived="; (obj.__isset.ackReceived ? (out << to_string(obj.ackReceived)) : (out << "<null>"));
  out << ", " << "ackRead="; (obj.__isset.ackRead ? (out << to_string(obj.ackRead)) : (out << "<null>"));
  out << ", " << "sleep="; (obj.__isset.sleep ? (out << to_string(obj.sleep)) : (out << "<null>"));
  out << ", " << "wakeupConfirm="; (obj.__isset.wakeupConfirm ? (out << to_string(obj.wakeupConfirm)) : (out << "<null>"));
  out << ", " << "ackPlay="; (obj.__isset.ackPlay ? (out << to_string(obj.ackPlay)) : (out << "<null>"));
  out << ", " << "batchAckRead="; (obj.__isset.batchAckRead ? (out << to_string(obj.batchAckRead)) : (out << "<null>"));
  out << ", " << "text="; (obj.__isset.text ? (out << to_string(obj.text)) : (out << "<null>"));
  out << ", " << "media="; (obj.__isset.media ? (out << to_string(obj.media)) : (out << "<null>"));
  out << ", " << "groupAdd="; (obj.__isset.groupAdd ? (out << to_string(obj.groupAdd)) : (out << "<null>"));
  out << ", " << "groupDel="; (obj.__isset.groupDel ? (out << to_string(obj.groupDel)) : (out << "<null>"));
  out << ", " << "groupUpdate="; (obj.__isset.groupUpdate ? (out << to_string(obj.groupUpdate)) : (out << "<null>"));
  out << ", " << "groupCreate="; (obj.__isset.groupCreate ? (out << to_string(obj.groupCreate)) : (out << "<null>"));
  out << ", " << "groupTop="; (obj.__isset.groupTop ? (out << to_string(obj.groupTop)) : (out << "<null>"));
  out << ", " << "summaryCreate="; (obj.__isset.summaryCreate ? (out << to_string(obj.summaryCreate)) : (out << "<null>"));
  out << ", " << "docSend="; (obj.__isset.docSend ? (out << to_string(obj.docSend)) : (out << "<null>"));
  out << ", " << "alertRule="; (obj.__isset.alertRule ? (out << to_string(obj.alertRule)) : (out << "<null>"));
  out << ", " << "groupClose="; (obj.__isset.groupClose ? (out << to_string(obj.groupClose)) : (out << "<null>"));
  out << ", " << "msgNotify="; (obj.__isset.msgNotify ? (out << to_string(obj.msgNotify)) : (out << "<null>"));
  out << ", " << "groupKick="; (obj.__isset.groupKick ? (out << to_string(obj.groupKick)) : (out << "<null>"));
  out << ", " << "codeCreate="; (obj.__isset.codeCreate ? (out << to_string(obj.codeCreate)) : (out << "<null>"));
  out << ", " << "codeDel="; (obj.__isset.codeDel ? (out << to_string(obj.codeDel)) : (out << "<null>"));
  out << ", " << "docDel="; (obj.__isset.docDel ? (out << to_string(obj.docDel)) : (out << "<null>"));
  out << ", " << "commentCreate="; (obj.__isset.commentCreate ? (out << to_string(obj.commentCreate)) : (out << "<null>"));
  out << ", " << "commentDel="; (obj.__isset.commentDel ? (out << to_string(obj.commentDel)) : (out << "<null>"));
  out << ", " << "groupAvatarUpdate="; (obj.__isset.groupAvatarUpdate ? (out << to_string(obj.groupAvatarUpdate)) : (out << "<null>"));
  out << ", " << "groupState="; (obj.__isset.groupState ? (out << to_string(obj.groupState)) : (out << "<null>"));
  out << ", " << "cloudFile="; (obj.__isset.cloudFile ? (out << to_string(obj.cloudFile)) : (out << "<null>"));
  out << ", " << "memberRole="; (obj.__isset.memberRole ? (out << to_string(obj.memberRole)) : (out << "<null>"));
  out << ", " << "report="; (obj.__isset.report ? (out << to_string(obj.report)) : (out << "<null>"));
  out << ", " << "revocation="; (obj.__isset.revocation ? (out << to_string(obj.revocation)) : (out << "<null>"));
  out << ", " << "groupScope="; (obj.__isset.groupScope ? (out << to_string(obj.groupScope)) : (out << "<null>"));
  out << ", " << "welcome="; (obj.__isset.welcome ? (out << to_string(obj.welcome)) : (out << "<null>"));
  out << ", " << "clientUpdate="; (obj.__isset.clientUpdate ? (out << to_string(obj.clientUpdate)) : (out << "<null>"));
  out << ", " << "completeInfo="; (obj.__isset.completeInfo ? (out << to_string(obj.completeInfo)) : (out << "<null>"));
  out << ", " << "pwdComplexUpdate="; (obj.__isset.pwdComplexUpdate ? (out << to_string(obj.pwdComplexUpdate)) : (out << "<null>"));
  out << ", " << "pwdExpire="; (obj.__isset.pwdExpire ? (out << to_string(obj.pwdExpire)) : (out << "<null>"));
  out << ", " << "pcGuide="; (obj.__isset.pcGuide ? (out << to_string(obj.pcGuide)) : (out << "<null>"));
  out << ", " << "mobileGuide="; (obj.__isset.mobileGuide ? (out << to_string(obj.mobileGuide)) : (out << "<null>"));
  out << ", " << "pwdModify="; (obj.__isset.pwdModify ? (out << to_string(obj.pwdModify)) : (out << "<null>"));
  out << ", " << "tagDel="; (obj.__isset.tagDel ? (out << to_string(obj.tagDel)) : (out << "<null>"));
  out << ", " << "remind="; (obj.__isset.remind ? (out << to_string(obj.remind)) : (out << "<null>"));
  out << ", " << "deptUpdate="; (obj.__isset.deptUpdate ? (out << to_string(obj.deptUpdate)) : (out << "<null>"));
  out << ", " << "deptTransfer="; (obj.__isset.deptTransfer ? (out << to_string(obj.deptTransfer)) : (out << "<null>"));
  out << ", " << "positionUpdate="; (obj.__isset.positionUpdate ? (out << to_string(obj.positionUpdate)) : (out << "<null>"));
  out << ", " << "employeeEntry="; (obj.__isset.employeeEntry ? (out << to_string(obj.employeeEntry)) : (out << "<null>"));
  out << ", " << "employeeLeave="; (obj.__isset.employeeLeave ? (out << to_string(obj.employeeLeave)) : (out << "<null>"));
  out << ", " << "employeeRights="; (obj.__isset.employeeRights ? (out << to_string(obj.employeeRights)) : (out << "<null>"));
  out << ", " << "deprtParentChange="; (obj.__isset.deprtParentChange ? (out << to_string(obj.deprtParentChange)) : (out << "<null>"));
  out << ", " << "companyJoin="; (obj.__isset.companyJoin ? (out << to_string(obj.companyJoin)) : (out << "<null>"));
  out << ", " << "deptDelete="; (obj.__isset.deptDelete ? (out << to_string(obj.deptDelete)) : (out << "<null>"));
  out << ", " << "entryConfirm="; (obj.__isset.entryConfirm ? (out << to_string(obj.entryConfirm)) : (out << "<null>"));
  out << ", " << "leaveConfirm="; (obj.__isset.leaveConfirm ? (out << to_string(obj.leaveConfirm)) : (out << "<null>"));
  out << ", " << "deptConfirm="; (obj.__isset.deptConfirm ? (out << to_string(obj.deptConfirm)) : (out << "<null>"));
  out << ", " << "instantInvite="; (obj.__isset.instantInvite ? (out << to_string(obj.instantInvite)) : (out << "<null>"));
  out << ", " << "confInvite="; (obj.__isset.confInvite ? (out << to_string(obj.confInvite)) : (out << "<null>"));
  out << ", " << "confReceive="; (obj.__isset.confReceive ? (out << to_string(obj.confReceive)) : (out << "<null>"));
  out << ", " << "confReject="; (obj.__isset.confReject ? (out << to_string(obj.confReject)) : (out << "<null>"));
  out << ", " << "confCancel="; (obj.__isset.confCancel ? (out << to_string(obj.confCancel)) : (out << "<null>"));
  out << ", " << "confAlert="; (obj.__isset.confAlert ? (out << to_string(obj.confAlert)) : (out << "<null>"));
  out << ", " << "instantReceive="; (obj.__isset.instantReceive ? (out << to_string(obj.instantReceive)) : (out << "<null>"));
  out << ", " << "instantReject="; (obj.__isset.instantReject ? (out << to_string(obj.instantReject)) : (out << "<null>"));
  out << ", " << "confChat="; (obj.__isset.confChat ? (out << to_string(obj.confChat)) : (out << "<null>"));
  out << ", " << "confSummary="; (obj.__isset.confSummary ? (out << to_string(obj.confSummary)) : (out << "<null>"));
  out << ", " << "callState="; (obj.__isset.callState ? (out << to_string(obj.callState)) : (out << "<null>"));
  out << ", " << "confUpload="; (obj.__isset.confUpload ? (out << to_string(obj.confUpload)) : (out << "<null>"));
  out << ", " << "confDocDel="; (obj.__isset.confDocDel ? (out << to_string(obj.confDocDel)) : (out << "<null>"));
  out << ", " << "cardUpdate="; (obj.__isset.cardUpdate ? (out << to_string(obj.cardUpdate)) : (out << "<null>"));
  out << ", " << "contacterAdd="; (obj.__isset.contacterAdd ? (out << to_string(obj.contacterAdd)) : (out << "<null>"));
  out << ", " << "contacterDel="; (obj.__isset.contacterDel ? (out << to_string(obj.contacterDel)) : (out << "<null>"));
  out << ", " << "attentionCreate="; (obj.__isset.attentionCreate ? (out << to_string(obj.attentionCreate)) : (out << "<null>"));
  out << ", " << "attentionCancel="; (obj.__isset.attentionCancel ? (out << to_string(obj.attentionCancel)) : (out << "<null>"));
  out << ", " << "transInvite="; (obj.__isset.transInvite ? (out << to_string(obj.transInvite)) : (out << "<null>"));
  out << ", " << "transReceive="; (obj.__isset.transReceive ? (out << to_string(obj.transReceive)) : (out << "<null>"));
  out << ", " << "transReject="; (obj.__isset.transReject ? (out << to_string(obj.transReject)) : (out << "<null>"));
  out << ", " << "transStop="; (obj.__isset.transStop ? (out << to_string(obj.transStop)) : (out << "<null>"));
  out << ", " << "audioInvite="; (obj.__isset.audioInvite ? (out << to_string(obj.audioInvite)) : (out << "<null>"));
  out << ", " << "audioReceive="; (obj.__isset.audioReceive ? (out << to_string(obj.audioReceive)) : (out << "<null>"));
  out << ", " << "audioReject="; (obj.__isset.audioReject ? (out << to_string(obj.audioReject)) : (out << "<null>"));
  out << ", " << "audioStop="; (obj.__isset.audioStop ? (out << to_string(obj.audioStop)) : (out << "<null>"));
  out << ", " << "callRecent="; (obj.__isset.callRecent ? (out << to_string(obj.callRecent)) : (out << "<null>"));
  out << ", " << "callBlock="; (obj.__isset.callBlock ? (out << to_string(obj.callBlock)) : (out << "<null>"));
  out << ", " << "callReject="; (obj.__isset.callReject ? (out << to_string(obj.callReject)) : (out << "<null>"));
  out << ", " << "callCancel="; (obj.__isset.callCancel ? (out << to_string(obj.callCancel)) : (out << "<null>"));
  out << ", " << "confShare="; (obj.__isset.confShare ? (out << to_string(obj.confShare)) : (out << "<null>"));
  out << ", " << "wbContent="; (obj.__isset.wbContent ? (out << to_string(obj.wbContent)) : (out << "<null>"));
  out << ", " << "remoteAssistanceInvite="; (obj.__isset.remoteAssistanceInvite ? (out << to_string(obj.remoteAssistanceInvite)) : (out << "<null>"));
  out << ", " << "remoteAssistanceAccept="; (obj.__isset.remoteAssistanceAccept ? (out << to_string(obj.remoteAssistanceAccept)) : (out << "<null>"));
  out << ", " << "remoteAssistanceReject="; (obj.__isset.remoteAssistanceReject ? (out << to_string(obj.remoteAssistanceReject)) : (out << "<null>"));
  out << ", " << "remoteAssistanceEnd="; (obj.__isset.remoteAssistanceEnd ? (out << to_string(obj.remoteAssistanceEnd)) : (out << "<null>"));
  out << ", " << "sessionTop="; (obj.__isset.sessionTop ? (out << to_string(obj.sessionTop)) : (out << "<null>"));
  out << ", " << "atMessageReaded="; (obj.__isset.atMessageReaded ? (out << to_string(obj.atMessageReaded)) : (out << "<null>"));
  out << ", " << "loginNotify="; (obj.__isset.loginNotify ? (out << to_string(obj.loginNotify)) : (out << "<null>"));
  out << ", " << "apiText="; (obj.__isset.apiText ? (out << to_string(obj.apiText)) : (out << "<null>"));
  out << ", " << "apiImage="; (obj.__isset.apiImage ? (out << to_string(obj.apiImage)) : (out << "<null>"));
  out << ", " << "apiFile="; (obj.__isset.apiFile ? (out << to_string(obj.apiFile)) : (out << "<null>"));
  out << ", " << "apiAckSent="; (obj.__isset.apiAckSent ? (out << to_string(obj.apiAckSent)) : (out << "<null>"));
  out << ", " << "apiOA="; (obj.__isset.apiOA ? (out << to_string(obj.apiOA)) : (out << "<null>"));
  out << ", " << "apiOAStatusChange="; (obj.__isset.apiOAStatusChange ? (out << to_string(obj.apiOAStatusChange)) : (out << "<null>"));
  out << ", " << "apiChangeNotify="; (obj.__isset.apiChangeNotify ? (out << to_string(obj.apiChangeNotify)) : (out << "<null>"));
  out << ", " << "apiEventNotify="; (obj.__isset.apiEventNotify ? (out << to_string(obj.apiEventNotify)) : (out << "<null>"));
  out << ", " << "apiCustomized="; (obj.__isset.apiCustomized ? (out << to_string(obj.apiCustomized)) : (out << "<null>"));
  out << ")";
  return out;
}

} // namespace
