#pragma once

#ifndef TANG_ERROR_CODE
#define TANG_ERROR_CODE
//////////////////////////////////////////////////////////////////////////////
//Generated by the Message compiler from the GNetTangErrorCode.mc;
//Don't edit directly, any change will be digarded.
//////////////////////////////////////////////////////////////////////////////

// Tang Client Error Code type;
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//


//
// Define the severity codes
//


//
// MessageId: TANG_S_OK
//
// MessageText:
//
//  Success.
//
#define TANG_S_OK                        ((DWORD)0x02010000L)


//////////////////////////////////////////////////////////////////////////////
// The section of the common error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: TANG_S_FALSE
//
// MessageText:
//
//  Success.
//
#define TANG_S_FALSE                     ((DWORD)0x82010001L)

// #if defined(WIN32) || defined(WIN64)
// 
// 
// #else
//
// MessageId: E_COM_INVALID_PARAMS
//
// MessageText:
//
//  Invalid Param.
//
#define E_COM_INVALID_PARAMS             ((DWORD)0x82010190L)

//
// MessageId: E_COM_CANNOT_DOWNLOAD_DLL
//
// MessageText:
//
//  Can not download dll.
//
#define E_COM_CANNOT_DOWNLOAD_DLL        ((DWORD)0x82010191L)

//
// MessageId: E_COM_CANNOT_LOAD_DLL
//
// MessageText:
//
//  Load dll failed.
//
#define E_COM_CANNOT_LOAD_DLL            ((DWORD)0x82010192L)

//
// MessageId: E_COM_SESSION_KEY_DUPLICATE
//
// MessageText:
//
//  The key of session item is duplicate.
//
#define E_COM_SESSION_KEY_DUPLICATE      ((DWORD)0x82010193L)

//
// MessageId: E_COM_LENGTH_VALUE_OVERFLOW
//
// MessageText:
//
//  The Lenght of content is overflow.
//
#define E_COM_LENGTH_VALUE_OVERFLOW      ((DWORD)0x82010194L)

//
// MessageId: E_NOTIMPL
//
// MessageText:
//
//  The function is not implemented.
//
#define E_NOTIMPL                        ((DWORD)0x82010195L)

//
// MessageId: E_FAIL
//
// MessageText:
//
//  The function is failed to be calleds.
//
#define E_FAIL                           ((DWORD)0x82010196L)

//
// MessageId: E_INVALIDARG
//
// MessageText:
//
//  agrments is invalid.
//
#define E_INVALIDARG                     ((DWORD)0x82010197L)

//
// MessageId: E_UNEXPECTED
//
// MessageText:
//
//  error of unexpected.
//
#define E_UNEXPECTED                     ((DWORD)0x82010198L)

//
// MessageId: E_OUTOFMEMORY
//
// MessageText:
//
//  error for out memory.
//
#define E_OUTOFMEMORY                    ((DWORD)0x82010199L)
//#endif

//
// MessageId: TANG_LOG_ALREADY_INIT
//
// MessageText:
//
//  error for log alreay init
//
#define TANG_LOG_ALREADY_INIT            ((DWORD)0x8201019AL)

//
// MessageId: TANG_LOG_ALREADY_UNINIT
//
// MessageText:
//
//  error for log  uninit
//
#define TANG_LOG_ALREADY_UNINIT          ((DWORD)0x8201019BL)

//
// MessageId: TANG_LOG_EMPTY_DIR
//
// MessageText:
//
//  The directory to create log is empty.
//
#define TANG_LOG_EMPTY_DIR               ((DWORD)0x8201019CL)

//
// MessageId: TANG_LOG_LEVEL_NOT_RECORD
//
// MessageText:
//
//  Does not record this level of log.
//
#define TANG_LOG_LEVEL_NOT_RECORD        ((DWORD)0x8201019DL)

//
// MessageId: TANG_NOT_ENOUGH_ALLOCK
//
// MessageText:
//
//  Allocate memory is not enough.
//
#define TANG_NOT_ENOUGH_ALLOCK           ((DWORD)0x8201019EL)

//
// MessageId: TANG_LOG_ERR_LEVEL_RANGE
//
// MessageText:
//
//  Log level range error.
//
#define TANG_LOG_ERR_LEVEL_RANGE         ((DWORD)0x8201019FL)

//
// MessageId: TANG_LOG_ERR_CREATE_FILE
//
// MessageText:
//
//  Failed to create the log file.
//
#define TANG_LOG_ERR_CREATE_FILE         ((DWORD)0x820101A0L)

//
// MessageId: TANG_LOG_ERR_WRITE_HEADER_INFO
//
// MessageText:
//
//  Failed to write the log file's header information.
//
#define TANG_LOG_ERR_WRITE_HEADER_INFO   ((DWORD)0x820101A1L)

//
// MessageId: TANG_LOG_ERR_WRITE_CONTENT
//
// MessageText:
//
//  Failed to write log.
//
#define TANG_LOG_ERR_WRITE_CONTENT       ((DWORD)0x820101A2L)

//
// MessageId: TANG_LOG_INVALID_DIR
//
// MessageText:
//
//  The directory to create log is invalid.
//
#define TANG_LOG_INVALID_DIR             ((DWORD)0x820101A3L)

//
// MessageId: TANG_LOG_ERR_CREATE_DIR
//
// MessageText:
//
//  Failed to create the log file directory .
//
#define TANG_LOG_ERR_CREATE_DIR          ((DWORD)0x820101A4L)


//////////////////////////////////////////////////////////////////////////////
// The section of the Pstn module error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: S_TANG_PSTN_OK
//
// MessageText:
//
//  Audio sharing module startups successfully.
//
#define S_TANG_PSTN_OK                   ((DWORD)0x020A0900L)

//
// MessageId: E_TANG_PSTN_FAILED
//
// MessageText:
//
//  Audio sharing module startups failed.
//
#define E_TANG_PSTN_FAILED               ((DWORD)0x820A0901L)

//
// MessageId: E_TANG_PSTN_PRIVILLIGE_LESS
//
// MessageText:
//
//  Audio sharing module startups failed.
//
#define E_TANG_PSTN_PRIVILLIGE_LESS      ((DWORD)0x820A0902L)

//
// MessageId: E_TANG_PSTN_ARGUMENTS_INVALID
//
// MessageText:
//
//  Argument is invalid.
//
#define E_TANG_PSTN_ARGUMENTS_INVALID    ((DWORD)0x820A0903L)

//
// MessageId: E_TANG_PSTN_CONFERENCE_RUNNING
//
// MessageText:
//
//  Phone conference is running.
//
#define E_TANG_PSTN_CONFERENCE_RUNNING   ((DWORD)0x820A0904L)

//
// MessageId: E_TANG_PSTN_CONFERENCE_STOP
//
// MessageText:
//
//  Phone conference is stop.
//
#define E_TANG_PSTN_CONFERENCE_STOP      ((DWORD)0x820A0905L)

//
// MessageId: E_TANG_PSTN_CONFERENCE_LOCK
//
// MessageText:
//
//  Phone conference is lock.
//
#define E_TANG_PSTN_CONFERENCE_LOCK      ((DWORD)0x820A0906L)

//
// MessageId: E_TANG_PSTN_CONFERENCE_UNLOCK
//
// MessageText:
//
//  Phone conference is unlock.
//
#define E_TANG_PSTN_CONFERENCE_UNLOCK    ((DWORD)0x820A0907L)

//
// MessageId: E_TANG_PSTN_USER_INVALID
//
// MessageText:
//
//  Phone user is invalid.
//
#define E_TANG_PSTN_USER_INVALID         ((DWORD)0x820A0908L)

//
// MessageId: E_TANG_PSTN_USER_BIND
//
// MessageText:
//
//  Phone user is binded.
//
#define E_TANG_PSTN_USER_BIND            ((DWORD)0x820A0909L)

//
// MessageId: E_TANG_PSTN_USER_UNBIND
//
// MessageText:
//
//  Phone user is unbinded.
//
#define E_TANG_PSTN_USER_UNBIND          ((DWORD)0x820A090AL)

//
// MessageId: E_TANG_PSTN_CONFERENCE_STATE_RECORD
//
// MessageText:
//
//  Phone conference is record state.
//
#define E_TANG_PSTN_CONFERENCE_STATE_RECORD ((DWORD)0x820A090BL)

//
// MessageId: E_TANG_PSTN_CONFERENCE_STATE_NOT_HELP
//
// MessageText:
//
//  Phone conference is not help state.
//
#define E_TANG_PSTN_CONFERENCE_STATE_NOT_HELP ((DWORD)0x820A090CL)

//
// MessageId: E_TANG_PSTN_CONFERENCE_DONT_SUPPORT
//
// MessageText:
//
//  Phone conference is not supprot operator.
//
#define E_TANG_PSTN_CONFERENCE_DONT_SUPPORT ((DWORD)0x820A090DL)

//
// MessageId: E_TANG_PSTN_CONFERENCE_UNUSEABLE
//
// MessageText:
//
//  Phone conference is unuseable.
//
#define E_TANG_PSTN_CONFERENCE_UNUSEABLE ((DWORD)0x820A090EL)

//
// MessageId: E_TANG_PSTN_REPEATED
//
// MessageText:
//
//  The operator is repeated.
//
#define E_TANG_PSTN_REPEATED             ((DWORD)0x820A090FL)

//
// MessageId: E_TANG_PSTN_CONFERENCE_NO_USER
//
// MessageText:
//
//  None in current phone conference.
//
#define E_TANG_PSTN_CONFERENCE_NO_USER   ((DWORD)0x820A0910L)


//////////////////////////////////////////////////////////////////////////////
// The section of the conference management error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: TANG_CONFERENCE_INVALID_CONFER_ID
//
// MessageText:
//
//  Invalid conference ID.
//
#define TANG_CONFERENCE_INVALID_CONFER_ID ((DWORD)0x82020001L)

//
// MessageId: E_CONFMGR_NO_CONFERENCE
//
// MessageText:
//
//  No Conference.
//
#define E_CONFMGR_NO_CONFERENCE          ((DWORD)0x82020002L)

//
// MessageId: E_CONFMGR_NO_USER
//
// MessageText:
//
//  User is not existed.
//
#define E_CONFMGR_NO_USER                ((DWORD)0x82020003L)

//
// MessageId: E_CONFMGR_PRIVILLIGE_LESS
//
// MessageText:
//
//  User privileges is less.
//
#define E_CONFMGR_PRIVILLIGE_LESS        ((DWORD)0x82020004L)

//
// MessageId: E_CONFMGR_RESOURCE_LESS
//
// MessageText:
//
//  Resource is Less.
//
#define E_CONFMGR_RESOURCE_LESS          ((DWORD)0x82020005L)

//
// MessageId: E_CONFMGR_CONF_STATUS_CONFLICT
//
// MessageText:
//
//  Conference status is wrong.
//
#define E_CONFMGR_CONF_STATUS_CONFLICT   ((DWORD)0x82020006L)

//
// MessageId: E_CONFMGR_ADD_USER_FAILED
//
// MessageText:
//
//  Add user failed.
//
#define E_CONFMGR_ADD_USER_FAILED        ((DWORD)0x82020007L)

//
// MessageId: E_CONFMGR_CONFERENCE_EXISTED
//
// MessageText:
//
//  Conference is existed.
//
#define E_CONFMGR_CONFERENCE_EXISTED     ((DWORD)0x82020008L)

//
// MessageId: E_CONFMGR_ADD_BLACKLIST_FAILED
//
// MessageText:
//
//  Add user into blacklist failed.
//
#define E_CONFMGR_ADD_BLACKLIST_FAILED   ((DWORD)0x82020009L)

//
// MessageId: E_CONFMGR_REMOVE_BLIST_FAILED
//
// MessageText:
//
//  Remove user from blacklist failed.
//
#define E_CONFMGR_REMOVE_BLIST_FAILED    ((DWORD)0x8202000AL)

//
// MessageId: E_CONFMGR_NO_OPERATER
//
// MessageText:
//
//  Operator is not found.
//
#define E_CONFMGR_NO_OPERATER            ((DWORD)0x8202000BL)

//
// MessageId: E_CONFMGR_DTS_CHANNELID_NOT_EXIST
//
// MessageText:
//
//  The specific dts channel id is not found.
//
#define E_CONFMGR_DTS_CHANNELID_NOT_EXIST ((DWORD)0x8202000CL)

//
// MessageId: E_CONFMGR_INVALID_SERVICE_TYPE
//
// MessageText:
//
//  The service type is invalid.
//
#define E_CONFMGR_INVALID_SERVICE_TYPE   ((DWORD)0x8202000DL)

//
// MessageId: E_CONFMGR_INVALID_ROLE_ID
//
// MessageText:
//
//  The role id is invalid.
//
#define E_CONFMGR_INVALID_ROLE_ID        ((DWORD)0x8202000EL)

//
// MessageId: E_CONFMGR_CTSIP_NULL
//
// MessageText:
//
//  The cts or backup ip is null.
//
#define E_CONFMGR_CTSIP_NULL             ((DWORD)0x8202000FL)

//
// MessageId: E_CONFMGR_DTSIP_NULL
//
// MessageText:
//
//  The dts ip is null.
//
#define E_CONFMGR_DTSIP_NULL             ((DWORD)0x82020010L)

//
// MessageId: E_CONFMGR_CONFERENCEUSER_IS_LOCKED
//
// MessageText:
//
//  The conference already has an user lock.
//
#define E_CONFMGR_CONFERENCEUSER_IS_LOCKED ((DWORD)0x82020011L)

//
// MessageId: E_CONFMGR_USER_LOCK_NOTEXIST
//
// MessageText:
//
//  The conference has no user lock.
//
#define E_CONFMGR_USER_LOCK_NOTEXIST     ((DWORD)0x82020012L)

//
// MessageId: E_CONFMGR_RUNMODE_INCORRECT
//
// MessageText:
//
//  The conference run mode is wrong. For example, you can't send message in a offline mode.
//
#define E_CONFMGR_RUNMODE_INCORRECT      ((DWORD)0x82020013L)

//
// MessageId: E_CONFMGR_INVALID_CONFERENCE_ID
//
// MessageText:
//
//  Invalid service type.
//
#define E_CONFMGR_INVALID_CONFERENCE_ID  ((DWORD)0x82020014L)

//
// MessageId: E_CONFMGR_CREATE_SERVICE_FAILED
//
// MessageText:
//
//  Invalid service type.
//
#define E_CONFMGR_CREATE_SERVICE_FAILED  ((DWORD)0x82020015L)

//
// MessageId: E_CONFMGR_INVALIDE_CHANNEL_STATUS
//
// MessageText:
//
//  Invalid service type.
//
#define E_CONFMGR_INVALIDE_CHANNEL_STATUS ((DWORD)0x82020016L)

//
// MessageId: E_UPLOADLOG_COLLECTFAILED
//
// MessageText:
//
//  Upload log collect log failed.
//
#define E_UPLOADLOG_COLLECTFAILED        ((DWORD)0x82020017L)

//
// MessageId: E_UPLOADLOG_CANCEL
//
// MessageText:
//
//  UI canceled upload log.
//
#define E_UPLOADLOG_CANCEL               ((DWORD)0x82020018L)

//
// MessageId: E_UPLOADLOG_ALREAD
//
// MessageText:
//
//  Already Uploading log.
//
#define E_UPLOADLOG_ALREAD               ((DWORD)0x82020019L)

//
// MessageId: E_NotUploadLog
//
// MessageText:
//
//  Not upload log yet.
//
#define E_NotUploadLog                   ((DWORD)0x8202001AL)

//
// MessageId: E_UPLOADLOG_ZIPFAILED
//
// MessageText:
//
//  Zip log file failed.
//
#define E_UPLOADLOG_ZIPFAILED            ((DWORD)0x8202001BL)

//
// MessageId: E_RECORD_ALREADY
//
// MessageText:
//
//  already record screen.
//
#define E_RECORD_ALREADY                 ((DWORD)0x8202001CL)

//
// MessageId: E_RECORD_NOTRECORD
//
// MessageText:
//
//  not record screen yet.
//
#define E_RECORD_NOTRECORD               ((DWORD)0x8202001DL)

//
// MessageId: E_RECORD_NOTPAUSE
//
// MessageText:
//
//  screen record not puased.
//
#define E_RECORD_NOTPAUSE                ((DWORD)0x8202001EL)

//
// MessageId: E_RECORDPROCESS_NOTEXIST
//
// MessageText:
//
//  screen record process not exist.
//
#define E_RECORDPROCESS_NOTEXIST         ((DWORD)0x8202001FL)

//
// MessageId: E_SCRRECORD_INVALIDARG
//
// MessageText:
//
//  screen record invalid argument.
//
#define E_SCRRECORD_INVALIDARG           ((DWORD)0x82020020L)

//
// MessageId: TANG_CONFERENCE_RUNMODE_INCORRECT
//
// MessageText:
//
//  The conference run mode is wrong. For example, you can't send message in a offline mode.
//
#define TANG_CONFERENCE_RUNMODE_INCORRECT ((DWORD)0x82020021L)

//
// MessageId: TANG_CONFERENCE_CONFER_STATUS_ILLEGALITY
//
// MessageText:
//
//  Conference status is wrong.
//
#define TANG_CONFERENCE_CONFER_STATUS_ILLEGALITY ((DWORD)0x82020022L)

//
// MessageId: TANG_CONFERENCE_INVALIDE_CHANNEL_STATUS
//
// MessageText:
//
//  Invalid channel status.
//
#define TANG_CONFERENCE_INVALIDE_CHANNEL_STATUS ((DWORD)0x82020023L)

//
// MessageId: TANG_CONFERENCE_CTS_CHANNELID_NOT_EXIST
//
// MessageText:
//
//  The specific cts channel id is not found.
//
#define TANG_CONFERENCE_CTS_CHANNELID_NOT_EXIST ((DWORD)0x82020024L)

//
// MessageId: TANG_CONFERENCE_PRIVILLIGE_LESS
//
// MessageText:
//
//  User privileges is less.
//
#define TANG_CONFERENCE_PRIVILLIGE_LESS  ((DWORD)0x82020025L)

//
// MessageId: TANG_CONFERENCE_NO_VALID_USER
//
// MessageText:
//
//  Not find valid user.
//
#define TANG_CONFERENCE_NO_VALID_USER    ((DWORD)0x82020026L)

//
// MessageId: TANG_CONFERENCE_INVALID_SERVICE_TYPE
//
// MessageText:
//
//  The service type is invalid.
//
#define TANG_CONFERENCE_INVALID_SERVICE_TYPE ((DWORD)0x82020027L)

//
// MessageId: E_CONFMGR_CTS_CHANNELID_NOT_EXIST
//
// MessageText:
//
//  The comnference cts channel id not exist.
//
#define E_CONFMGR_CTS_CHANNELID_NOT_EXIST ((DWORD)0x82020028L)

//
// MessageId: TANG_CONFERENCE_SERVICE_ALREADY_STARTED
//
// MessageText:
//
//  Service has already started.
//
#define TANG_CONFERENCE_SERVICE_ALREADY_STARTED ((DWORD)0x82020029L)

//
// MessageId: TANG_CONFERENCE_USERLOCK_IS_LOCKED
//
// MessageText:
//
//  conference user is locked.
//
#define TANG_CONFERENCE_USERLOCK_IS_LOCKED ((DWORD)0x8202002AL)

//
// MessageId: TANG_CONFERENCE_USERLOCK_NOTEXIST
//
// MessageText:
//
//  conference user lock is not existed.
//
#define TANG_CONFERENCE_USERLOCK_NOTEXIST ((DWORD)0x8202002BL)

//
// MessageId: TANG_CONFERENCE_INVALID_ROLE_ID
//
// MessageText:
//
//  The role id is invalid.
//
#define TANG_CONFERENCE_INVALID_ROLE_ID  ((DWORD)0x8202002CL)


//////////////////////////////////////////////////////////////////////////////
// The section of the desktop share module error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: TANG_DESKTOP_START_OK
//
// MessageText:
//
//  Desktop sharing module successed to startup.
//
#define TANG_DESKTOP_START_OK            ((DWORD)0x02032000L)

//
// MessageId: TANG_DESKTOP_E_ALREADY_INITIALIZE
//
// MessageText:
//
//  Error to intialize the Desktop sharing module twice.
//
#define TANG_DESKTOP_E_ALREADY_INITIALIZE ((DWORD)0x82032001L)

//
// MessageId: TANG_DESKTOP_E_START_FAILED
//
// MessageText:
//
//  Desktop sharing module has been started up.
//
#define TANG_DESKTOP_E_START_FAILED      ((DWORD)0x82032002L)

//
// MessageId: TANG_DESKTOP_E_IS_ALREADY_SHARING
//
// MessageText:
//
//  One client can only share one desktop.
//
#define TANG_DESKTOP_E_IS_ALREADY_SHARING ((DWORD)0x82032003L)

//
// MessageId: TANG_DESKTOP_E_NOT_FIND_INSTANCE
//
// MessageText:
//
//  The desktop share or view instance is not finded.
//
#define TANG_DESKTOP_E_NOT_FIND_INSTANCE ((DWORD)0x82032004L)

//
// MessageId: TANG_COMMENT_SERVICE_IS_NOT_STARTED
//
// MessageText:
//
//  Comment need whiteboard service, but it is not started.
//
#define TANG_COMMENT_SERVICE_IS_NOT_STARTED ((DWORD)0x82032005L)

//
// MessageId: TANG_COMMENT_ALREADY_EXIST
//
// MessageText:
//
//  The comment is already existed.
//
#define TANG_COMMENT_ALREADY_EXIST       ((DWORD)0x82032006L)

//
// MessageId: TANG_SHARER_ALREADY_EXIST
//
// MessageText:
//
//  The share is already existed.
//
#define TANG_SHARER_ALREADY_EXIST        ((DWORD)0x82032007L)

//
// MessageId: TANG_SHARER_INSURFFICIANT_PRIVILIEGE
//
// MessageText:
//
//  The user's privilege is insurfficiant.
//
#define TANG_SHARER_INSURFFICIANT_PRIVILIEGE ((DWORD)0x82032008L)

//
// MessageId: TANG_VNC_NOT_READY
//
// MessageText:
//
//  VNC was not ready for this action.
//
#define TANG_VNC_NOT_READY               ((DWORD)0x82032009L)

//
// MessageId: TANG_STARTVIEW_WHEN_SHARING
//
// MessageText:
//
//  Try to start view when share desktop.
//
#define TANG_STARTVIEW_WHEN_SHARING      ((DWORD)0x8203200AL)


//UI error code;

//conference is not exist
//
// MessageId: TANG_DTSHARE_CONFERENCE_NOT_EXIST
//
// MessageText:
//
//  The conference is not exist.
//
#define TANG_DTSHARE_CONFERENCE_NOT_EXIST ((DWORD)0x82030191L)

//user is not exist
//
// MessageId: TANG_DTSHARE_USER_NOT_EXIST
//
// MessageText:
//
//  The user is not exist.
//
#define TANG_DTSHARE_USER_NOT_EXIST      ((DWORD)0x82030192L)

//user's privilege is not allowed
//
// MessageId: TANG_DTSHARE_PRIVILEGE_NOT_ENOUGH
//
// MessageText:
//
//  The user's privilege is not allowed
//
#define TANG_DTSHARE_PRIVILEGE_NOT_ENOUGH ((DWORD)0x82030193L)

// User is blacked
//
// MessageId: TANG_DTSHARE_USER_IS_BLACKED
//
// MessageText:
//
//  The user is blacked
//
#define TANG_DTSHARE_USER_IS_BLACKED     ((DWORD)0x82030194L)

// The instance is not exist
//
// MessageId: TANG_DTSHARE_INSTANCE_IS_NOT_EXIST
//
// MessageText:
//
//  The instance is not exist.
//
#define TANG_DTSHARE_INSTANCE_IS_NOT_EXIST ((DWORD)0x82030195L)

// The status is invalid
//
// MessageId: TANG_DTSHARE_INVALID_STATUS
//
// MessageText:
//
//  The status is invalid
//
#define TANG_DTSHARE_INVALID_STATUS      ((DWORD)0x82030197L)


//////////////////////////////////////////////////////////////////////////////
// The error code for the UI.
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: TANG_DS_E_SEND_MESSAGE
//
// MessageText:
//
//  The comment is already existed.
//
#define TANG_DS_E_SEND_MESSAGE           ((DWORD)0x82032500L)

//
// MessageId: TANG_DS_E_REQUEST_SHARE_FAILED
//
// MessageText:
//
//  The comment is already existed.
//
#define TANG_DS_E_REQUEST_SHARE_FAILED   ((DWORD)0x82032501L)


//////////////////////////////////////////////////////////////////////////////
// The section of the document share module error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: TANG_DOCUMENT_START_OK
//
// MessageText:
//
//  Document sharing module successed to startup.
//
#define TANG_DOCUMENT_START_OK           ((DWORD)0x02043000L)

//
// MessageId: TANG_DOCUMENT_START_FAILED
//
// MessageText:
//
//  Document sharing module failed to startup.
//
#define TANG_DOCUMENT_START_FAILED       ((DWORD)0x82043001L)

//
// MessageId: TANG_DOCUMENT_STOP_OK
//
// MessageText:
//
//  Document sharing module successed to stop.
//
#define TANG_DOCUMENT_STOP_OK            ((DWORD)0x02043002L)

//
// MessageId: TANG_DOCUMENT_STOP_FAILED
//
// MessageText:
//
//  Document sharing module failed to stop.
//
#define TANG_DOCUMENT_STOP_FAILED        ((DWORD)0x82043003L)

//
// MessageId: TANG_DOCUMENT_PRIVILLIGE_LESS
//
// MessageText:
//
//  User privileges is less.
//
#define TANG_DOCUMENT_PRIVILLIGE_LESS    ((DWORD)0x82043004L)

//
// MessageId: TANG_DOCUMENT_OPERATION_NOT_ALLOWED
//
// MessageText:
//
//  User privileges is less and this user must follow the manipulator.
//
#define TANG_DOCUMENT_OPERATION_NOT_ALLOWED ((DWORD)0x82043005L)

//
// MessageId: TANG_DOCUMENT_PRINT_FAILED
//
// MessageText:
//
//  print document failed.
//
#define TANG_DOCUMENT_PRINT_FAILED       ((DWORD)0x82043006L)

//
// MessageId: TANG_DOCUMENT_CONVERT_FAILED
//
// MessageText:
//
//  convert document failed.
//
#define TANG_DOCUMENT_CONVERT_FAILED     ((DWORD)0x82043007L)

//
// MessageId: TANG_DOCUMENT_PAGE_NOT_CONVERTED
//
// MessageText:
//
//  convert document failed.
//
#define TANG_DOCUMENT_PAGE_NOT_CONVERTED ((DWORD)0x82043008L)

//
// MessageId: TANG_DOCUMENT_SERVICE_CONTROL_CHANNEL_AUTHENTICATE_FAILED
//
// MessageText:
//
//  Service control channel authenticate failed.
//
#define TANG_DOCUMENT_SERVICE_CONTROL_CHANNEL_AUTHENTICATE_FAILED ((DWORD)0x82043009L)

//
// MessageId: TANG_DOCUMENT_INSTANCE_DATA_CHANNEL_AUTHENTICATE_FAILED
//
// MessageText:
//
//  Document sharing instance data channel authenticate failed.
//
#define TANG_DOCUMENT_INSTANCE_DATA_CHANNEL_AUTHENTICATE_FAILED ((DWORD)0x8204300AL)

//
// MessageId: TANG_DOCUMENT_SAVE_DOC_FAILED
//
// MessageText:
//
//  save document failed.
//
#define TANG_DOCUMENT_SAVE_DOC_FAILED    ((DWORD)0x8204300BL)

//
// MessageId: TANG_DOCUMENT_DOC_ISSAVING
//
// MessageText:
//
//  the document is beening saved now.
//
#define TANG_DOCUMENT_DOC_ISSAVING       ((DWORD)0x8204300CL)

//
// MessageId: TANG_DOCUMENT_START_COMMENT_FAILED
//
// MessageText:
//
//  start comment failed.
//
#define TANG_DOCUMENT_START_COMMENT_FAILED ((DWORD)0x8204300DL)

//
// MessageId: TANG_DOCUMENT_STOP_COMMENT_FAILED
//
// MessageText:
//
//  stop comment failed.
//
#define TANG_DOCUMENT_STOP_COMMENT_FAILED ((DWORD)0x8204300EL)

//
// MessageId: TANG_DOCUMENT_TURN_OVERT_COMMENT_FAILED
//
// MessageText:
//
//  turn over comment failed.
//
#define TANG_DOCUMENT_TURN_OVERT_COMMENT_FAILED ((DWORD)0x8204300FL)

//
// MessageId: TANG_DOCUMENT_SAVE_COMMENT_FAILED
//
// MessageText:
//
//  save comment failed.
//
#define TANG_DOCUMENT_SAVE_COMMENT_FAILED ((DWORD)0x82043010L)

//
// MessageId: TANG_DOCUMENT_PRINT_COMMENT_FAILED
//
// MessageText:
//
//  print comment failed.
//
#define TANG_DOCUMENT_PRINT_COMMENT_FAILED ((DWORD)0x82043011L)

//
// MessageId: TANG_DOCUMENT_OUT_OF_SIZE
//
// MessageText:
//
//  the size of the sharing document too large.
//
#define TANG_DOCUMENT_OUT_OF_SIZE        ((DWORD)0x82043012L)


//////////////////////////////////////////////////////////////////////////////
// The section of the Whiteboard share module error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: S_TANG_WHITEBOARD_START_OK
//
// MessageText:
//
//  Whiteboard sharing module is succeeded to startup.
//
#define S_TANG_WHITEBOARD_START_OK       ((DWORD)0x02054000L)

//
// MessageId: E_TANG_WHITEBOARD_START_FAILED
//
// MessageText:
//
//  Whiteboard sharing module is failed to startup.
//
#define E_TANG_WHITEBOARD_START_FAILED   ((DWORD)0x82054001L)

//
// MessageId: E_TANG_WHITEBOARD_SEND_NET_MESSAGE
//
// MessageText:
//
//  Whiteboard module failed to send net message.
//
#define E_TANG_WHITEBOARD_SEND_NET_MESSAGE ((DWORD)0x82054002L)

//
// MessageId: E_TANG_WHITEBOARD_SERVICE_UNAVAILABLE
//
// MessageText:
//
//  Service is unavailable.
//
#define E_TANG_WHITEBOARD_SERVICE_UNAVAILABLE ((DWORD)0x82054003L)

//
// MessageId: E_TANG_WHITEBOARD_WRONG_SERVICE_MODE
//
// MessageText:
//
//  Api is used in a wrong service mode.
//
#define E_TANG_WHITEBOARD_WRONG_SERVICE_MODE ((DWORD)0x82054004L)

//
// MessageId: E_TANG_WHITEBOARD_IS_EXIST
//
// MessageText:
//
//  Whiteboard is already exist.
//
#define E_TANG_WHITEBOARD_IS_EXIST       ((DWORD)0x82054005L)

//
// MessageId: E_TANG_WHITEBOARD_PAGE_NOT_EXIST
//
// MessageText:
//
//  Whiteboard page is not exist.
//
#define E_TANG_WHITEBOARD_PAGE_NOT_EXIST ((DWORD)0x82054006L)

//
// MessageId: E_TANG_WHITEBOARD_PAGE_IS_EXIST
//
// MessageText:
//
//  Whiteboard page is already exist.
//
#define E_TANG_WHITEBOARD_PAGE_IS_EXIST  ((DWORD)0x82054007L)

//
// MessageId: E_TANG_WHITEBOARD_VIEW_IS_ATTACHED
//
// MessageText:
//
//  Whiteboard view is attached on this position.
//
#define E_TANG_WHITEBOARD_VIEW_IS_ATTACHED ((DWORD)0x82054008L)

//
// MessageId: E_TANG_WHITEBOARD_FILENAME_MAX
//
// MessageText:
//
//  File name by saved is too long.
//
#define E_TANG_WHITEBOARD_FILENAME_MAX   ((DWORD)0x82054009L)

//
// MessageId: E_TANG_WHITEBOARD_REPEAT
//
// MessageText:
//
//  The operator is repeat.
//
#define E_TANG_WHITEBOARD_REPEAT         ((DWORD)0x8205400AL)


//////////////////////////////////////////////////////////////////////////////
// The Whiteboard error code for UI;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: E_TANG_WHITEBOARD_INVALID_ARG
//
// MessageText:
//
//  The argument is invalid.
//
#define E_TANG_WHITEBOARD_INVALID_ARG    ((DWORD)0x82050190L)

//
// MessageId: E_TANG_WHITEBOARD_CONFERENCE_NOT_EXIST
//
// MessageText:
//
//  The conference is not exist.
//
#define E_TANG_WHITEBOARD_CONFERENCE_NOT_EXIST ((DWORD)0x82050191L)

//
// MessageId: E_TANG_WHITEBOARD_USER_NOT_EXIST
//
// MessageText:
//
//  The user is not exist.
//
#define E_TANG_WHITEBOARD_USER_NOT_EXIST ((DWORD)0x82050192L)

//
// MessageId: E_TANG_WHITEBOARD_PRIVILLIGE_LESS
//
// MessageText:
//
//  User privileges is less.
//
#define E_TANG_WHITEBOARD_PRIVILLIGE_LESS ((DWORD)0x82050193L)

//
// MessageId: E_TANG_WHITEBOARD_USER_BLACK
//
// MessageText:
//
//  User is blacked.
//
#define E_TANG_WHITEBOARD_USER_BLACK     ((DWORD)0x82050194L)

//
// MessageId: E_TANG_WHITEBOARD_NOT_EXIST
//
// MessageText:
//
//  Whiteboard is not exist.
//
#define E_TANG_WHITEBOARD_NOT_EXIST      ((DWORD)0x82050195L)

//
// MessageId: E_TANG_WHITEBOARD_NO_SHAPELIST
//
// MessageText:
//
//  Don't fond shape list.
//
#define E_TANG_WHITEBOARD_NO_SHAPELIST   ((DWORD)0x82050196L)

//
// MessageId: E_TANG_WHITEBOARD_INVAILD_STATUS
//
// MessageText:
//
//  Whiteboard server invaild status.
//
#define E_TANG_WHITEBOARD_INVAILD_STATUS ((DWORD)0x82050197L)

//
// MessageId: E_TANG_WHITEBOARD_NOT_SUPORT
//
// MessageText:
//
//  Whiteboard server not suport.
//
#define E_TANG_WHITEBOARD_NOT_SUPORT     ((DWORD)0x82050198L)


//////////////////////////////////////////////////////////////////////////////
// The section of the Audio and Video share module error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: S_TANG_AUDIO_START_OK
//
// MessageText:
//
//  Audio sharing module startups successfully.
//
#define S_TANG_AUDIO_START_OK            ((DWORD)0x02065000L)

//
// MessageId: E_TANG_AUDIO_START_FAILED
//
// MessageText:
//
//  Audio sharing module startups failed.
//
#define E_TANG_AUDIO_START_FAILED        ((DWORD)0x82065001L)

//
// MessageId: E_TANG_AUDIO_SERVICE_UNAVAILABLE
//
// MessageText:
//
//  Audio service is current unavalable.
//
#define E_TANG_AUDIO_SERVICE_UNAVAILABLE ((DWORD)0x82065002L)

//
// MessageId: E_TANG_AUDIO_ALREAD_SHARING
//
// MessageText:
//
//  Already sharing audio.
//
#define E_TANG_AUDIO_ALREAD_SHARING      ((DWORD)0x82065003L)

//
// MessageId: E_TANG_AUDIO_NOT_MIKEDEVICE
//
// MessageText:
//
//  doesn't have microphone.
//
#define E_TANG_AUDIO_NOT_MIKEDEVICE      ((DWORD)0x82065004L)

//
// MessageId: E_TANG_AUDIO_NOT_SUPPORT_VOIP
//
// MessageText:
//
//  Not support VOIP service.
//
#define E_TANG_AUDIO_NOT_SUPPORT_VOIP    ((DWORD)0x82065005L)

//
// MessageId: E_TANG_AUDIO_NOT_SUPPORT_PSTN
//
// MessageText:
//
//  Not support PSTN service.
//
#define E_TANG_AUDIO_NOT_SUPPORT_PSTN    ((DWORD)0x82065006L)

//
// MessageId: E_TANG_AUDIO_SERVER_NOT_RETURN_AUDIO_INSTANCE
//
// MessageText:
//
//  Audio server do not returns audio instance while getting audio server init information.
//
#define E_TANG_AUDIO_SERVER_NOT_RETURN_AUDIO_INSTANCE ((DWORD)0x82065007L)

//
// MessageId: E_TANG_AVPLUGIN_PRIVILLIGE_LESS
//
// MessageText:
//
//  User privileges is less.
//
#define E_TANG_AVPLUGIN_PRIVILLIGE_LESS  ((DWORD)0x82065008L)

//
// MessageId: E_TANG_AUDIO_DISABLED
//
// MessageText:
//
//  Audio service is disabled.
//
#define E_TANG_AUDIO_DISABLED            ((DWORD)0x82065009L)

//
// MessageId: E_TANG_AUDIO_VOIP_ALREADY_STARTED
//
// MessageText:
//
//  voip service already started.
//
#define E_TANG_AUDIO_VOIP_ALREADY_STARTED ((DWORD)0x8206500AL)

//
// MessageId: E_TANG_AUDIO_VOIP_ALREADY_STOPPED
//
// MessageText:
//
//  voip service already stopped.
//
#define E_TANG_AUDIO_VOIP_ALREADY_STOPPED ((DWORD)0x8206500BL)

//
// MessageId: E_TANG_AUDIO_PSTN_ALREADY_STARTED
//
// MessageText:
//
//  pstn service already started.
//
#define E_TANG_AUDIO_PSTN_ALREADY_STARTED ((DWORD)0x8206500CL)

//
// MessageId: E_TANG_AUDIO_PSTN_ALREADY_STOPPED
//
// MessageText:
//
//  pstn service already stopped.
//
#define E_TANG_AUDIO_PSTN_ALREADY_STOPPED ((DWORD)0x8206500DL)

//
// MessageId: E_TANG_AUDIO_MUTED
//
// MessageText:
//
//  Already be muted.
//
#define E_TANG_AUDIO_MUTED               ((DWORD)0x8206500EL)

//
// MessageId: E_TANG_AUDIO_CODEC_INVALID
//
// MessageText:
//
//  Not support audio codec.
//
#define E_TANG_AUDIO_CODEC_INVALID       ((DWORD)0x8206500FL)

//
// MessageId: E_TANG_AUDIO_TRANSPORTPOLICY_INVALID
//
// MessageText:
//
//  Not support audio transportpolicy.
//
#define E_TANG_AUDIO_TRANSPORTPOLICY_INVALID ((DWORD)0x82065010L)

//
// MessageId: E_TANG_AUDIO_START_RECV_THREAD_FAILED
//
// MessageText:
//
//  Start audio receiving thread is failed.
//
#define E_TANG_AUDIO_START_RECV_THREAD_FAILED ((DWORD)0x82065011L)

//
// MessageId: E_TANG_AUDIO_WAIT_THREAD_TIMEDOUT
//
// MessageText:
//
//  Timed out while waiting the audio receiving thread to exit.
//
#define E_TANG_AUDIO_WAIT_THREAD_TIMEDOUT ((DWORD)0x82065012L)

//
// MessageId: E_TANG_AUDIO_WAIT_THREAD_FAILED
//
// MessageText:
//
//  Failed while waiting the audio receiving thread to exit.
//
#define E_TANG_AUDIO_WAIT_THREAD_FAILED  ((DWORD)0x82065013L)

//
// MessageId: E_TANG_AUDIO_RECEIVING_THREAD_ALREADY_RUNNING
//
// MessageText:
//
//  Receiving audio data thread is already running.
//
#define E_TANG_AUDIO_RECEIVING_THREAD_ALREADY_RUNNING ((DWORD)0x82065014L)

//
// MessageId: E_TANG_AUDIO_RECEIVING_THREAD_NOT_RUNNING
//
// MessageText:
//
//  Receiving audio data thread is not running yet.
//
#define E_TANG_AUDIO_RECEIVING_THREAD_NOT_RUNNING ((DWORD)0x82065015L)

//
// MessageId: E_TANG_AUDIO_NOTSHARED
//
// MessageText:
//
//  It does not share audio yet.
//
#define E_TANG_AUDIO_NOTSHARED           ((DWORD)0x82065016L)

//
// MessageId: E_TANG_AUDIO_CHANNEL_NOT_AUTHENTICAED
//
// MessageText:
//
//  The channel is not yet certified.
//
#define E_TANG_AUDIO_CHANNEL_NOT_AUTHENTICAED ((DWORD)0x82065017L)

//
// MessageId: E_TANG_AUDIO_ALREADY_RECORDING
//
// MessageText:
//
//  The audio service is already recording.
//
#define E_TANG_AUDIO_ALREADY_RECORDING   ((DWORD)0x82065018L)

//
// MessageId: E_TANG_AUDIO_ALREADY_STOPPED_RECORDING
//
// MessageText:
//
//  The audio service already stopped recording.
//
#define E_TANG_AUDIO_ALREADY_STOPPED_RECORDING ((DWORD)0x82065019L)

//
// MessageId: S_TANG_VIDEO_START_OK
//
// MessageText:
//
//  Video sharing module startups successfully.
//
#define S_TANG_VIDEO_START_OK            ((DWORD)0x0206501AL)

//
// MessageId: E_TANG_VIDEO_PACKAGESET_NOT_PACKAGE
//
// MessageText:
//
//  Video package set can not get rtp/rtcp any more.
//
#define E_TANG_VIDEO_PACKAGESET_NOT_PACKAGE ((DWORD)0x0206501BL)

//
// MessageId: E_TANG_VIDEO_START_FAILED
//
// MessageText:
//
//  Video sharing module startups failed.
//
#define E_TANG_VIDEO_START_FAILED        ((DWORD)0x8206501CL)

//
// MessageId: E_TANG_VIDEO_NOT_VIDEODEVICE
//
// MessageText:
//
//  Doesn't have video device.
//
#define E_TANG_VIDEO_NOT_VIDEODEVICE     ((DWORD)0x8206501DL)

//
// MessageId: E_TANG_VIDEO_SERVICE_UNAVAILABLE
//
// MessageText:
//
//  Video service is current unavalable.
//
#define E_TANG_VIDEO_SERVICE_UNAVAILABLE ((DWORD)0x8206501EL)

//
// MessageId: E_TANG_VIDEO_ALREAD_PREVIEWED
//
// MessageText:
//
//  Current previewing.
//
#define E_TANG_VIDEO_ALREAD_PREVIEWED    ((DWORD)0x8206501FL)

//
// MessageId: E_TANG_VIDEO_NOT_PREVIEWED
//
// MessageText:
//
//  Not previewed yet.
//
#define E_TANG_VIDEO_NOT_PREVIEWED       ((DWORD)0x82065020L)

//
// MessageId: E_TANG_VIDEO_ALREAD_SHARING
//
// MessageText:
//
//  Already sharing video.
//
#define E_TANG_VIDEO_ALREAD_SHARING      ((DWORD)0x82065021L)

//
// MessageId: E_TANG_VIDEO_NOT_SHARING_YET
//
// MessageText:
//
//  Not sharing video yet.
//
#define E_TANG_VIDEO_NOT_SHARING_YET     ((DWORD)0x82065022L)

//
// MessageId: E_TANG_VIDEO_CANNOT_BE_BOTH_POLLEE_AND_POLLER
//
// MessageText:
//
//  Can not start poll when let sb be both pollee and poller in a poll instance.
//
#define E_TANG_VIDEO_CANNOT_BE_BOTH_POLLEE_AND_POLLER ((DWORD)0x82065023L)

//
// MessageId: E_TANG_VIDEO_ALREAD_BE_POLLEE_IN_POLL_INSTANCE
//
// MessageText:
//
//  Can not start poll because already be pollee in a poll instance.
//
#define E_TANG_VIDEO_ALREAD_BE_POLLEE_IN_POLL_INSTANCE ((DWORD)0x82065024L)

//
// MessageId: E_TANG_VIDEO_ALREAD_FOLLOWING
//
// MessageText:
//
//  Already started following.
//
#define E_TANG_VIDEO_ALREAD_FOLLOWING    ((DWORD)0x82065025L)

//
// MessageId: E_TANG_VIDEO_NOT_FOLLOWING_YET
//
// MessageText:
//
//  Not following yet.
//
#define E_TANG_VIDEO_NOT_FOLLOWING_YET   ((DWORD)0x82065026L)

//
// MessageId: E_TANG_VIDEO_NOT_EXISTED_VIDEO_INSTANCE
//
// MessageText:
//
//  It does not existed corresponding video instance.
//
#define E_TANG_VIDEO_NOT_EXISTED_VIDEO_INSTANCE ((DWORD)0x82065027L)

//
// MessageId: E_TANG_VIDEO_RECEIVING_THREAD_ALREADY_RUNNING
//
// MessageText:
//
//  Receiving video data thread is already running.
//
#define E_TANG_VIDEO_RECEIVING_THREAD_ALREADY_RUNNING ((DWORD)0x82065028L)

//
// MessageId: E_TANG_VIDEO_RECEIVING_THREAD_NOT_RUNNING
//
// MessageText:
//
//  Receiving video data thread is not running yet.
//
#define E_TANG_VIDEO_RECEIVING_THREAD_NOT_RUNNING ((DWORD)0x82065029L)

//
// MessageId: E_TANG_VIDEO_NOT_SHARING_VIDEO_FILE_YET
//
// MessageText:
//
//  Not Sharing video file yet.
//
#define E_TANG_VIDEO_NOT_SHARING_VIDEO_FILE_YET ((DWORD)0x8206502AL)

//
// MessageId: E_TANG_VIDEO_DISABLED
//
// MessageText:
//
//  Video service is disabled.
//
#define E_TANG_VIDEO_DISABLED            ((DWORD)0x8206502BL)

//
// MessageId: E_TANG_VIDEO_NOT_EXISTED_FILE
//
// MessageText:
//
//  The file is not existed.
//
#define E_TANG_VIDEO_NOT_EXISTED_FILE    ((DWORD)0x8206502CL)

//
// MessageId: E_TANG_VIDEO_CODEC_INVALID
//
// MessageText:
//
//  Not support video codec.
//
#define E_TANG_VIDEO_CODEC_INVALID       ((DWORD)0x8206502DL)

//
// MessageId: E_TANG_VIDEO_RESOLUTION_INVALID
//
// MessageText:
//
//  Not support video resolution.
//
#define E_TANG_VIDEO_RESOLUTION_INVALID  ((DWORD)0x8206502EL)

//
// MessageId: E_TANG_VIDEO_TRANSPORTPOLICY_INVALID
//
// MessageText:
//
//  Not support video transportpolicy.
//
#define E_TANG_VIDEO_TRANSPORTPOLICY_INVALID ((DWORD)0x8206502FL)

//
// MessageId: E_TANG_VIDEO_NOT_EXISTED_VIDEODEVICENAME
//
// MessageText:
//
//  The video device not existed..
//
#define E_TANG_VIDEO_NOT_EXISTED_VIDEODEVICENAME ((DWORD)0x82065030L)

//
// MessageId: E_TANG_VIDEO_START_RECV_THREAD_FAILED
//
// MessageText:
//
//  Start video receiving thread is failed.
//
#define E_TANG_VIDEO_START_RECV_THREAD_FAILED ((DWORD)0x82065031L)

//
// MessageId: E_TANG_VIDEO_WAIT_THREAD_TIMEDOUT
//
// MessageText:
//
//  Timed out while waiting the video receiving thread to exit.
//
#define E_TANG_VIDEO_WAIT_THREAD_TIMEDOUT ((DWORD)0x82065032L)

//
// MessageId: E_TANG_VIDEO_WAIT_THREAD_FAILED
//
// MessageText:
//
//  Failed while waiting the video receiving thread to exit.
//
#define E_TANG_VIDEO_WAIT_THREAD_FAILED  ((DWORD)0x82065033L)

//
// MessageId: E_TANG_VIDEO_ALREADY_RECORDING
//
// MessageText:
//
//  The video service is already recording.
//
#define E_TANG_VIDEO_ALREADY_RECORDING   ((DWORD)0x82065034L)

//
// MessageId: E_TANG_VIDEO_ALREADY_STOPPED_RECORDING
//
// MessageText:
//
//  The video service already stopped recording.
//
#define E_TANG_VIDEO_ALREADY_STOPPED_RECORDING ((DWORD)0x82065035L)


//////////////////////////////////////////////////////////////////////////////
// The section of the Message dispatcher module error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: TANG_MESSAGE_DISPATCHER_START_OK
//
// MessageText:
//
//  Message dispatcher successed to startup.
//
#define TANG_MESSAGE_DISPATCHER_START_OK ((DWORD)0x02076000L)


//////////////////////////////////////////////////////////////////////////////
// The section of the channel manaagement module error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: TANG_CHANNELMGR_START_OK
//
// MessageText:
//
//  Channel manaagement modulesuccessed to startup.
//
#define TANG_CHANNELMGR_START_OK         ((DWORD)0x02087000L)

//
// MessageId: E_TANG_CHANNEL_IS_FULL
//
// MessageText:
//
//  The channel is full, and can't receive any message.
//
#define E_TANG_CHANNEL_IS_FULL           ((DWORD)0x82087001L)

//
// MessageId: E_TANG_CHANNEL_IS_FAILED_TO_AUTH
//
// MessageText:
//
//  The channel is authed failed, so it cann't be used.
//
#define E_TANG_CHANNEL_IS_FAILED_TO_AUTH ((DWORD)0x82087002L)

//
// MessageId: E_TANG_CHANNEL_NOT_EXIST
//
// MessageText:
//
//  The channel is authed failed, so it cann't be used.
//
#define E_TANG_CHANNEL_NOT_EXIST         ((DWORD)0x82087003L)


//////////////////////////////////////////////////////////////////////////////
// The section of the UI adapter module error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: TANG_UIADAPTER_START_OK
//
// MessageText:
//
//  UI adapter module successed to startup.
//
#define TANG_UIADAPTER_START_OK          ((DWORD)0x02098000L)


//////////////////////////////////////////////////////////////////////////////
// The section of the Audio and Video Engine module error code;
//////////////////////////////////////////////////////////////////////////////

//
// MessageId: S_TANG_AVENGINE_OK
//
// MessageText:
//
//  [AVEngine] AVEngine process successfully.
//
#define S_TANG_AVENGINE_OK               ((DWORD)0x020B9000L)

//
// MessageId: E_TANG_AVENGINE_FAIL
//
// MessageText:
//
//  [AVEngine] Unspecified/General failure.
//
#define E_TANG_AVENGINE_FAIL             ((DWORD)0x820B9001L)

//
// MessageId: E_TANG_AVENGINE_INIT
//
// MessageText:
//
//  [AVEngine] Client API was not initialized.
//
#define E_TANG_AVENGINE_INIT             ((DWORD)0x820B9002L)

//
// MessageId: E_TANG_AVENGINE_INVALID_ARG
//
// MessageText:
//
//  [AVEngine] Wrong argument passed to function.
//
#define E_TANG_AVENGINE_INVALID_ARG      ((DWORD)0x820B9003L)

//
// MessageId: E_TANG_AVENGINE_INVALID_CHANNEL
//
// MessageText:
//
//  [AVEngine] Wrong channel identifier passed to function.
//
#define E_TANG_AVENGINE_INVALID_CHANNEL  ((DWORD)0x820B9004L)

//
// MessageId: E_TANG_AVENGINE_INVALID_VALUE
//
// MessageText:
//
//  [AVEngine] Wrong argument value passed to function.
//
#define E_TANG_AVENGINE_INVALID_VALUE    ((DWORD)0x820B9005L)

//
// MessageId: E_TANG_AVENGINE_MEMORY
//
// MessageText:
//
//  [AVEngine] Out of memory.
//
#define E_TANG_AVENGINE_MEMORY           ((DWORD)0x820B9006L)

//
// MessageId: E_TANG_AVENGINE_NOT_IMPLEMENTED
//
// MessageText:
//
//  [AVEngine] This functionality is not implemented yet.
//
#define E_TANG_AVENGINE_NOT_IMPLEMENTED  ((DWORD)0x820B9007L)

//
// MessageId: E_TANG_AVENGINE_TRANSPORT
//
// MessageText:
//
//  [AVEngine] Transport error.
//
#define E_TANG_AVENGINE_TRANSPORT        ((DWORD)0x820B9008L)

//
// MessageId: E_TANG_AVENGINE_NO_ENCRYPT_CALLBACK
//
// MessageText:
//
//  [AVEngine] Missing encryption callback.
//
#define E_TANG_AVENGINE_NO_ENCRYPT_CALLBACK ((DWORD)0x820B9009L)

//
// MessageId: E_TANG_AVENGINE_NOT_STARTED
//
// MessageText:
//
//  [AVEngine] Something is not started.
//
#define E_TANG_AVENGINE_NOT_STARTED      ((DWORD)0x820B900AL)

//
// MessageId: E_TANG_AVENGINE_FILE
//
// MessageText:
//
//  [AVEngine] File open error.
//
#define E_TANG_AVENGINE_FILE             ((DWORD)0x820B900BL)

//
// MessageId: E_TANG_AVENGINE_ITS_NOT_DELIVERED
//
// MessageText:
//
//  [AVEngine] Functionality is switched off in this delivery.
//
#define E_TANG_AVENGINE_ITS_NOT_DELIVERED ((DWORD)0x820B900CL)

//
// MessageId: E_TANG_AVENGINE_CHANNEL_IS_HOLD
//
// MessageText:
//
//  [AVEngine] Channel is on hold.
//
#define E_TANG_AVENGINE_CHANNEL_IS_HOLD  ((DWORD)0x820B900DL)

//
// MessageId: E_TANG_AVENGINE_INVALID_PAYLOAD_TYPE
//
// MessageText:
//
//  [AVEngine] Invalid payload type.
//
#define E_TANG_AVENGINE_INVALID_PAYLOAD_TYPE ((DWORD)0x820B900EL)

//
// MessageId: E_TANG_AVENGINE_RTCP_DISABLED
//
// MessageText:
//
//  [AVEngine] RTCP protocol is switched off.
//
#define E_TANG_AVENGINE_RTCP_DISABLED    ((DWORD)0x820B900FL)

//
// MessageId: E_TANG_AVENGINE_INVALID_PARTICIPANT
//
// MessageText:
//
//  [AVEngine] Invalid participant id.
//
#define E_TANG_AVENGINE_INVALID_PARTICIPANT ((DWORD)0x820B9010L)

//
// MessageId: E_TANG_AVENGINE_UNEXPECTED
//
// MessageText:
//
//  [AVEngine] Operation is not allowed in this context.
//
#define E_TANG_AVENGINE_UNEXPECTED       ((DWORD)0x820B9011L)

//
// MessageId: E_TANG_AVENGINE_DEVICE_BUSY
//
// MessageText:
//
//  [AVEngine] Device is busy.
//
#define E_TANG_AVENGINE_DEVICE_BUSY      ((DWORD)0x820B9012L)

//
// MessageId: E_TANG_AVENGINE_NOT_SUPPORTED_BY_DEVICE
//
// MessageText:
//
//  [AVEngine] This functionality is not supported by device.
//
#define E_TANG_AVENGINE_NOT_SUPPORTED_BY_DEVICE ((DWORD)0x820B9013L)

//
// MessageId: E_TANG_AVENGINE_INVALID_CODEC_FOR_REDUNDANCY
//
// MessageText:
//
//  [AVEngine] Vocoder does not have internal redundancy.
//
#define E_TANG_AVENGINE_INVALID_CODEC_FOR_REDUNDANCY ((DWORD)0x820B9014L)

//
// MessageId: E_TANG_AVENGINE_CODEC_HAS_NOT_RED_BITRATES
//
// MessageText:
//
//  [AVEngine] Vocoder does not have redundancy bitrates.
//
#define E_TANG_AVENGINE_CODEC_HAS_NOT_RED_BITRATES ((DWORD)0x820B9015L)

//
// MessageId: E_TANG_AVENGINE_NO_DEVICE
//
// MessageText:
//
//  [AVEngine] There is no any available devices.
//
#define E_TANG_AVENGINE_NO_DEVICE        ((DWORD)0x820B9016L)

//
// MessageId: E_TANG_AVENGINE_ARS_ACTIVE
//
// MessageText:
//
//  [AVEngine] ARS is active. Settings cannot be changed.
//
#define E_TANG_AVENGINE_ARS_ACTIVE       ((DWORD)0x820B9017L)

//
// MessageId: E_TANG_AVENGINE_AUDIO
//
// MessageText:
//
//  [AVEngine] Failed to open audio device.
//
#define E_TANG_AVENGINE_AUDIO            ((DWORD)0x820B9018L)

//
// MessageId: E_TANG_AVENGINE_FALSE
//
// MessageText:
//
//  [AVEngine] Operation not completed / Not all setting are applied.
//
#define E_TANG_AVENGINE_FALSE            ((DWORD)0x820B9019L)

//
// MessageId: E_TANG_AVENGINE_SRTP_INIT_FAIL
//
// MessageText:
//
//  [AVEngine] Failed to initialize SRTP module.
//
#define E_TANG_AVENGINE_SRTP_INIT_FAIL   ((DWORD)0x820B901AL)

//
// MessageId: E_TANG_AVENGINE_ALREADY_STARTED
//
// MessageText:
//
//  [AVEngine] Something already started/in use.
//
#define E_TANG_AVENGINE_ALREADY_STARTED  ((DWORD)0x820B901BL)

//
// MessageId: E_TANG_AVENGINE_TRANSPORT_RECV
//
// MessageText:
//
//  [AVEngine] Receiver transport error
//
#define E_TANG_AVENGINE_TRANSPORT_RECV   ((DWORD)0x820B901CL)

//
// MessageId: E_TANG_SESSION_ALREADY_EXISTS
//
// MessageText:
//
//  [UC] Create Session Already Exists.
//
#define E_TANG_SESSION_ALREADY_EXISTS      ((DWORD)0x83000820L)

//
// MessageId: E_TANG_SESSION_IS_CREATING
//
// MessageText:
//
//  [UC] Create Session Is Creating.
//
#define E_TANG_SESSION_IS_CREATING         ((DWORD)0x83000821L)

//
// MessageId: E_TANG_SESSION_TYPE_IS_CREATING
//
// MessageText:
//
//  [UC] Create Session Type Is Creating.
//
#define E_TANG_SESSION_TYPE_IS_CREATING    ((DWORD)0x83000822L)

//
// MessageId: E_UC_SESSION_TYPE_ALREADY_EXISTS
//
// MessageText:
//
//  [UC] Create Session Type Already Exists.
//
#define E_TANG_SESSION_TYPE_ALREADY_EXISTS ((DWORD)0x83000823L)

#endif