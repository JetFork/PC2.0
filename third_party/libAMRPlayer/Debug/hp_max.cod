; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\hp_max.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_hp_max_id
CONST	SEGMENT
_hp_max_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_hp_max
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_negate:PROC
EXTRN	_extract_h:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_abs:PROC
EXTRN	_div_s:PROC
EXTRN	_norm_l:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\hp_max.c
;	COMDAT _hp_max
_TEXT	SEGMENT
_shift2$ = -140						; size = 2
_shift1$ = -128						; size = 2
_shift$ = -116						; size = 2
_cor_max$ = -104					; size = 2
_t016$ = -92						; size = 2
_max16$ = -80						; size = 2
_t1$ = -68						; size = 4
_t0$ = -56						; size = 4
_max$ = -44						; size = 4
_p1$ = -32						; size = 4
_p$ = -20						; size = 4
_i$ = -8						; size = 2
_corr$ = 8						; size = 4
_scal_sig$ = 12						; size = 4
_L_frame$ = 16						; size = 2
_lag_max$ = 20						; size = 2
_lag_min$ = 24						; size = 2
_cor_hp_max$ = 28					; size = 4
_hp_max	PROC						; COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd b0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-336]
  00012	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 51   :     Word16 i;
; 52   :     Word16 *p, *p1;
; 53   :     Word32 max, t0, t1;
; 54   :     Word16 max16, t016, cor_max;
; 55   :     Word16 shift, shift1, shift2;
; 56   :     
; 57   :     max = MIN_32;               move32 (); 

  0001e	c7 45 d4 00 00
	00 80		 mov	 DWORD PTR _max$[ebp], -2147483648 ; 80000000H
  00025	e8 00 00 00 00	 call	 _move32

; 58   :     t0 = 0L;                    move32 ();    

  0002a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _t0$[ebp], 0
  00031	e8 00 00 00 00	 call	 _move32

; 59   :    
; 60   :     for (i = lag_max-1; i > lag_min; i--)

  00036	0f bf 45 14	 movsx	 eax, WORD PTR _lag_max$[ebp]
  0003a	83 e8 01	 sub	 eax, 1
  0003d	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00041	eb 0c		 jmp	 SHORT $LN14@hp_max
$LN13@hp_max:
  00043	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00047	66 83 e8 01	 sub	 ax, 1
  0004b	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN14@hp_max:
  0004f	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00053	0f bf 4d 18	 movsx	 ecx, WORD PTR _lag_min$[ebp]
  00057	3b c1		 cmp	 eax, ecx
  00059	0f 8e 80 00 00
	00		 jle	 $LN12@hp_max

; 61   :     {
; 62   :        /* high-pass filtering */
; 63   :        t0 = L_sub (L_sub(L_shl(corr[-i], 1), corr[-i-1]), corr[-i+1]);   

  0005f	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00063	f7 d8		 neg	 eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _corr$[ebp]
  00068	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  0006c	52		 push	 edx
  0006d	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00071	f7 d8		 neg	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _corr$[ebp]
  00076	8b 54 81 fc	 mov	 edx, DWORD PTR [ecx+eax*4-4]
  0007a	52		 push	 edx
  0007b	6a 01		 push	 1
  0007d	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00081	f7 d8		 neg	 eax
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _corr$[ebp]
  00086	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 _L_shl
  0008f	83 c4 08	 add	 esp, 8
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _L_sub
  00098	83 c4 08	 add	 esp, 8
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _L_sub
  000a1	83 c4 08	 add	 esp, 8
  000a4	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 64   :        t0 = L_abs (t0);

  000a7	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _L_abs
  000b0	83 c4 04	 add	 esp, 4
  000b3	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 65   :        
; 66   :        test (); 

  000b6	e8 00 00 00 00	 call	 _test

; 67   :        if (L_sub (t0, max) >= 0)

  000bb	8b 45 d4	 mov	 eax, DWORD PTR _max$[ebp]
  000be	50		 push	 eax
  000bf	8b 4d c8	 mov	 ecx, DWORD PTR _t0$[ebp]
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 _L_sub
  000c8	83 c4 08	 add	 esp, 8
  000cb	85 c0		 test	 eax, eax
  000cd	7c 0b		 jl	 SHORT $LN11@hp_max

; 68   :        {
; 69   :           max = t0;             move32 (); 

  000cf	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  000d2	89 45 d4	 mov	 DWORD PTR _max$[ebp], eax
  000d5	e8 00 00 00 00	 call	 _move32
$LN11@hp_max:

; 70   :        }
; 71   :     }

  000da	e9 64 ff ff ff	 jmp	 $LN13@hp_max
$LN12@hp_max:

; 72   : 
; 73   :     /* compute energy */
; 74   :     p = scal_sig;               move16 (); 

  000df	8b 45 0c	 mov	 eax, DWORD PTR _scal_sig$[ebp]
  000e2	89 45 ec	 mov	 DWORD PTR _p$[ebp], eax
  000e5	e8 00 00 00 00	 call	 _move16

; 75   :     p1 = &scal_sig[0];          move16 (); 

  000ea	b8 02 00 00 00	 mov	 eax, 2
  000ef	6b c8 00	 imul	 ecx, eax, 0
  000f2	03 4d 0c	 add	 ecx, DWORD PTR _scal_sig$[ebp]
  000f5	89 4d e0	 mov	 DWORD PTR _p1$[ebp], ecx
  000f8	e8 00 00 00 00	 call	 _move16

; 76   :     t0 = 0L;                    move32 (); 

  000fd	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _t0$[ebp], 0
  00104	e8 00 00 00 00	 call	 _move32

; 77   :     for (i = 0; i < L_frame; i++, p++, p1++)

  00109	33 c0		 xor	 eax, eax
  0010b	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0010f	eb 1e		 jmp	 SHORT $LN10@hp_max
$LN9@hp_max:
  00111	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00115	66 83 c0 01	 add	 ax, 1
  00119	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _p$[ebp]
  00120	83 c1 02	 add	 ecx, 2
  00123	89 4d ec	 mov	 DWORD PTR _p$[ebp], ecx
  00126	8b 55 e0	 mov	 edx, DWORD PTR _p1$[ebp]
  00129	83 c2 02	 add	 edx, 2
  0012c	89 55 e0	 mov	 DWORD PTR _p1$[ebp], edx
$LN10@hp_max:
  0012f	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00133	0f bf 4d 10	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  00137	3b c1		 cmp	 eax, ecx
  00139	7d 1f		 jge	 SHORT $LN8@hp_max

; 78   :     {
; 79   :        t0 = L_mac (t0, *p, *p1);

  0013b	8b 45 e0	 mov	 eax, DWORD PTR _p1$[ebp]
  0013e	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00141	51		 push	 ecx
  00142	8b 55 ec	 mov	 edx, DWORD PTR _p$[ebp]
  00145	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00148	50		 push	 eax
  00149	8b 4d c8	 mov	 ecx, DWORD PTR _t0$[ebp]
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 _L_mac
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
  00155	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 80   :     }

  00158	eb b7		 jmp	 SHORT $LN9@hp_max
$LN8@hp_max:

; 81   : 
; 82   :     p = scal_sig;               move16 (); 

  0015a	8b 45 0c	 mov	 eax, DWORD PTR _scal_sig$[ebp]
  0015d	89 45 ec	 mov	 DWORD PTR _p$[ebp], eax
  00160	e8 00 00 00 00	 call	 _move16

; 83   :     p1 = &scal_sig[-1];         move16 (); 

  00165	b8 02 00 00 00	 mov	 eax, 2
  0016a	6b c8 ff	 imul	 ecx, eax, -1
  0016d	03 4d 0c	 add	 ecx, DWORD PTR _scal_sig$[ebp]
  00170	89 4d e0	 mov	 DWORD PTR _p1$[ebp], ecx
  00173	e8 00 00 00 00	 call	 _move16

; 84   :     t1 = 0L;                    move32 (); 

  00178	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _t1$[ebp], 0
  0017f	e8 00 00 00 00	 call	 _move32

; 85   :     for (i = 0; i < L_frame; i++, p++, p1++)

  00184	33 c0		 xor	 eax, eax
  00186	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0018a	eb 1e		 jmp	 SHORT $LN7@hp_max
$LN6@hp_max:
  0018c	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00190	66 83 c0 01	 add	 ax, 1
  00194	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00198	8b 4d ec	 mov	 ecx, DWORD PTR _p$[ebp]
  0019b	83 c1 02	 add	 ecx, 2
  0019e	89 4d ec	 mov	 DWORD PTR _p$[ebp], ecx
  001a1	8b 55 e0	 mov	 edx, DWORD PTR _p1$[ebp]
  001a4	83 c2 02	 add	 edx, 2
  001a7	89 55 e0	 mov	 DWORD PTR _p1$[ebp], edx
$LN7@hp_max:
  001aa	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  001ae	0f bf 4d 10	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  001b2	3b c1		 cmp	 eax, ecx
  001b4	7d 1f		 jge	 SHORT $LN5@hp_max

; 86   :     {
; 87   :        t1 = L_mac (t1, *p, *p1);

  001b6	8b 45 e0	 mov	 eax, DWORD PTR _p1$[ebp]
  001b9	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001bc	51		 push	 ecx
  001bd	8b 55 ec	 mov	 edx, DWORD PTR _p$[ebp]
  001c0	0f b7 02	 movzx	 eax, WORD PTR [edx]
  001c3	50		 push	 eax
  001c4	8b 4d bc	 mov	 ecx, DWORD PTR _t1$[ebp]
  001c7	51		 push	 ecx
  001c8	e8 00 00 00 00	 call	 _L_mac
  001cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d0	89 45 bc	 mov	 DWORD PTR _t1$[ebp], eax

; 88   :     }

  001d3	eb b7		 jmp	 SHORT $LN6@hp_max
$LN5@hp_max:

; 89   :     
; 90   :     /* high-pass filtering */
; 91   :     t0 = L_sub(L_shl(t0, 1), L_shl(t1, 1));

  001d5	6a 01		 push	 1
  001d7	8b 45 bc	 mov	 eax, DWORD PTR _t1$[ebp]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 _L_shl
  001e0	83 c4 08	 add	 esp, 8
  001e3	50		 push	 eax
  001e4	6a 01		 push	 1
  001e6	8b 4d c8	 mov	 ecx, DWORD PTR _t0$[ebp]
  001e9	51		 push	 ecx
  001ea	e8 00 00 00 00	 call	 _L_shl
  001ef	83 c4 08	 add	 esp, 8
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 _L_sub
  001f8	83 c4 08	 add	 esp, 8
  001fb	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 92   :     t0 = L_abs (t0);

  001fe	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 _L_abs
  00207	83 c4 04	 add	 esp, 4
  0020a	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 93   : 
; 94   :     /* max/t0 */
; 95   :     shift1 = sub(norm_l(max), 1);                 

  0020d	6a 01		 push	 1
  0020f	8b 45 d4	 mov	 eax, DWORD PTR _max$[ebp]
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 _norm_l
  00218	83 c4 04	 add	 esp, 4
  0021b	0f b7 c8	 movzx	 ecx, ax
  0021e	51		 push	 ecx
  0021f	e8 00 00 00 00	 call	 _sub
  00224	83 c4 08	 add	 esp, 8
  00227	66 89 45 80	 mov	 WORD PTR _shift1$[ebp], ax

; 96   :     max16  = extract_h(L_shl(max, shift1));       

  0022b	0f b7 45 80	 movzx	 eax, WORD PTR _shift1$[ebp]
  0022f	50		 push	 eax
  00230	8b 4d d4	 mov	 ecx, DWORD PTR _max$[ebp]
  00233	51		 push	 ecx
  00234	e8 00 00 00 00	 call	 _L_shl
  00239	83 c4 08	 add	 esp, 8
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 _extract_h
  00242	83 c4 04	 add	 esp, 4
  00245	66 89 45 b0	 mov	 WORD PTR _max16$[ebp], ax

; 97   :     shift2 = norm_l(t0);                          

  00249	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 _norm_l
  00252	83 c4 04	 add	 esp, 4
  00255	66 89 85 74 ff
	ff ff		 mov	 WORD PTR _shift2$[ebp], ax

; 98   :     t016 =  extract_h(L_shl(t0, shift2));         

  0025c	0f b7 85 74 ff
	ff ff		 movzx	 eax, WORD PTR _shift2$[ebp]
  00263	50		 push	 eax
  00264	8b 4d c8	 mov	 ecx, DWORD PTR _t0$[ebp]
  00267	51		 push	 ecx
  00268	e8 00 00 00 00	 call	 _L_shl
  0026d	83 c4 08	 add	 esp, 8
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 _extract_h
  00276	83 c4 04	 add	 esp, 4
  00279	66 89 45 a4	 mov	 WORD PTR _t016$[ebp], ax

; 99   : 
; 100  :     test ();

  0027d	e8 00 00 00 00	 call	 _test

; 101  :     if (t016 != 0)

  00282	0f bf 45 a4	 movsx	 eax, WORD PTR _t016$[ebp]
  00286	85 c0		 test	 eax, eax
  00288	74 18		 je	 SHORT $LN4@hp_max

; 102  :     {
; 103  :        cor_max = div_s(max16, t016);              

  0028a	0f b7 45 a4	 movzx	 eax, WORD PTR _t016$[ebp]
  0028e	50		 push	 eax
  0028f	0f b7 4d b0	 movzx	 ecx, WORD PTR _max16$[ebp]
  00293	51		 push	 ecx
  00294	e8 00 00 00 00	 call	 _div_s
  00299	83 c4 08	 add	 esp, 8
  0029c	66 89 45 98	 mov	 WORD PTR _cor_max$[ebp], ax

; 104  :     }
; 105  :     else

  002a0	eb 0b		 jmp	 SHORT $LN3@hp_max
$LN4@hp_max:

; 106  :     {
; 107  :        cor_max = 0;                                move16 ();

  002a2	33 c0		 xor	 eax, eax
  002a4	66 89 45 98	 mov	 WORD PTR _cor_max$[ebp], ax
  002a8	e8 00 00 00 00	 call	 _move16
$LN3@hp_max:

; 108  :     }
; 109  :     
; 110  :     shift = sub(shift1, shift2);       

  002ad	0f b7 85 74 ff
	ff ff		 movzx	 eax, WORD PTR _shift2$[ebp]
  002b4	50		 push	 eax
  002b5	0f b7 4d 80	 movzx	 ecx, WORD PTR _shift1$[ebp]
  002b9	51		 push	 ecx
  002ba	e8 00 00 00 00	 call	 _sub
  002bf	83 c4 08	 add	 esp, 8
  002c2	66 89 45 8c	 mov	 WORD PTR _shift$[ebp], ax

; 111  : 
; 112  :     test ();

  002c6	e8 00 00 00 00	 call	 _test

; 113  :     if (shift >= 0)

  002cb	0f bf 45 8c	 movsx	 eax, WORD PTR _shift$[ebp]
  002cf	85 c0		 test	 eax, eax
  002d1	7c 1f		 jl	 SHORT $LN2@hp_max

; 114  :     {
; 115  :        *cor_hp_max = shr(cor_max, shift);          move16 (); /* Q15 */

  002d3	0f b7 45 8c	 movzx	 eax, WORD PTR _shift$[ebp]
  002d7	50		 push	 eax
  002d8	0f b7 4d 98	 movzx	 ecx, WORD PTR _cor_max$[ebp]
  002dc	51		 push	 ecx
  002dd	e8 00 00 00 00	 call	 _shr
  002e2	83 c4 08	 add	 esp, 8
  002e5	8b 55 1c	 mov	 edx, DWORD PTR _cor_hp_max$[ebp]
  002e8	66 89 02	 mov	 WORD PTR [edx], ax
  002eb	e8 00 00 00 00	 call	 _move16

; 116  :     }
; 117  :     else

  002f0	eb 29		 jmp	 SHORT $LN1@hp_max
$LN2@hp_max:

; 118  :     {
; 119  :        *cor_hp_max = shl(cor_max, negate(shift));  move16 (); /* Q15 */

  002f2	0f b7 45 8c	 movzx	 eax, WORD PTR _shift$[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 _negate
  002fc	83 c4 04	 add	 esp, 4
  002ff	0f b7 c8	 movzx	 ecx, ax
  00302	51		 push	 ecx
  00303	0f b7 55 98	 movzx	 edx, WORD PTR _cor_max$[ebp]
  00307	52		 push	 edx
  00308	e8 00 00 00 00	 call	 _shl
  0030d	83 c4 08	 add	 esp, 8
  00310	8b 4d 1c	 mov	 ecx, DWORD PTR _cor_hp_max$[ebp]
  00313	66 89 01	 mov	 WORD PTR [ecx], ax
  00316	e8 00 00 00 00	 call	 _move16
$LN1@hp_max:

; 120  :     }
; 121  : 
; 122  :     return 0;

  0031b	33 c0		 xor	 eax, eax

; 123  : }

  0031d	5f		 pop	 edi
  0031e	5e		 pop	 esi
  0031f	5b		 pop	 ebx
  00320	81 c4 50 01 00
	00		 add	 esp, 336		; 00000150H
  00326	3b ec		 cmp	 ebp, esp
  00328	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032d	8b e5		 mov	 esp, ebp
  0032f	5d		 pop	 ebp
  00330	c3		 ret	 0
_hp_max	ENDP
_TEXT	ENDS
END
