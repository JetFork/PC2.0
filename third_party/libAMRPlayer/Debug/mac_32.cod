; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\mac_32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_mac_32_id
CONST	SEGMENT
_mac_32_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Mac_32
PUBLIC	_Mac_32_16
EXTRN	_mult:PROC
EXTRN	_L_mac:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\mac_32.c
;	COMDAT _Mac_32_16
_TEXT	SEGMENT
_L_32$ = 8						; size = 4
_hi$ = 12						; size = 2
_lo$ = 16						; size = 2
_n$ = 20						; size = 2
_Mac_32_16 PROC						; COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 91   :     L_32 = L_mac (L_32, hi, n);

  0001e	0f b7 45 14	 movzx	 eax, WORD PTR _n$[ebp]
  00022	50		 push	 eax
  00023	0f b7 4d 0c	 movzx	 ecx, WORD PTR _hi$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 08	 mov	 edx, DWORD PTR _L_32$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 _L_mac
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	89 45 08	 mov	 DWORD PTR _L_32$[ebp], eax

; 92   :     L_32 = L_mac (L_32, mult (lo, n), 1);

  00037	6a 01		 push	 1
  00039	0f b7 45 14	 movzx	 eax, WORD PTR _n$[ebp]
  0003d	50		 push	 eax
  0003e	0f b7 4d 10	 movzx	 ecx, WORD PTR _lo$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _mult
  00048	83 c4 08	 add	 esp, 8
  0004b	0f b7 d0	 movzx	 edx, ax
  0004e	52		 push	 edx
  0004f	8b 45 08	 mov	 eax, DWORD PTR _L_32$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _L_mac
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	89 45 08	 mov	 DWORD PTR _L_32$[ebp], eax

; 93   : 
; 94   :     return (L_32);

  0005e	8b 45 08	 mov	 eax, DWORD PTR _L_32$[ebp]

; 95   : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_Mac_32_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\mac_32.c
;	COMDAT _Mac_32
_TEXT	SEGMENT
_L_32$ = 8						; size = 4
_hi1$ = 12						; size = 2
_lo1$ = 16						; size = 2
_hi2$ = 20						; size = 2
_lo2$ = 24						; size = 2
_Mac_32	PROC						; COMDAT

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 64   :     L_32 = L_mac (L_32, hi1, hi2);

  0001e	0f b7 45 14	 movzx	 eax, WORD PTR _hi2$[ebp]
  00022	50		 push	 eax
  00023	0f b7 4d 0c	 movzx	 ecx, WORD PTR _hi1$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 08	 mov	 edx, DWORD PTR _L_32$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 _L_mac
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	89 45 08	 mov	 DWORD PTR _L_32$[ebp], eax

; 65   :     L_32 = L_mac (L_32, mult (hi1, lo2), 1);

  00037	6a 01		 push	 1
  00039	0f b7 45 18	 movzx	 eax, WORD PTR _lo2$[ebp]
  0003d	50		 push	 eax
  0003e	0f b7 4d 0c	 movzx	 ecx, WORD PTR _hi1$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _mult
  00048	83 c4 08	 add	 esp, 8
  0004b	0f b7 d0	 movzx	 edx, ax
  0004e	52		 push	 edx
  0004f	8b 45 08	 mov	 eax, DWORD PTR _L_32$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _L_mac
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	89 45 08	 mov	 DWORD PTR _L_32$[ebp], eax

; 66   :     L_32 = L_mac (L_32, mult (lo1, hi2), 1);

  0005e	6a 01		 push	 1
  00060	0f b7 45 14	 movzx	 eax, WORD PTR _hi2$[ebp]
  00064	50		 push	 eax
  00065	0f b7 4d 10	 movzx	 ecx, WORD PTR _lo1$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 _mult
  0006f	83 c4 08	 add	 esp, 8
  00072	0f b7 d0	 movzx	 edx, ax
  00075	52		 push	 edx
  00076	8b 45 08	 mov	 eax, DWORD PTR _L_32$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _L_mac
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	89 45 08	 mov	 DWORD PTR _L_32$[ebp], eax

; 67   : 
; 68   :     return (L_32);

  00085	8b 45 08	 mov	 eax, DWORD PTR _L_32$[ebp]

; 69   : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00091	3b ec		 cmp	 ebp, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_Mac_32	ENDP
_TEXT	ENDS
END
