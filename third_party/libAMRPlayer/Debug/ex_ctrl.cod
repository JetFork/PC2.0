; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\ex_ctrl.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ex_ctrl_id
CONST	SEGMENT
_ex_ctrl_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Ex_ctrl
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_shr:PROC
EXTRN	_norm_s:PROC
EXTRN	_div_s:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	_gmed_n:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\ex_ctrl.c
;	COMDAT _Ex_ctrl
_TEXT	SEGMENT
_t0$ = -80						; size = 4
_prevEnergy$ = -68					; size = 2
_avgEnergy$ = -56					; size = 2
_scaleFactor$ = -44					; size = 2
_testEnergy$ = -32					; size = 2
_exp$ = -20						; size = 2
_i$ = -8						; size = 2
_excitation$ = 8					; size = 4
_excEnergy$ = 12					; size = 2
_exEnergyHist$ = 16					; size = 4
_voicedHangover$ = 20					; size = 2
_prevBFI$ = 24						; size = 2
_carefulFlag$ = 28					; size = 2
_Ex_ctrl PROC						; COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00012	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 69   :    Word16 i, exp;
; 70   :    Word16 testEnergy, scaleFactor, avgEnergy, prevEnergy;
; 71   :    Word32 t0;
; 72   : 
; 73   :    /* get target level */
; 74   :    avgEnergy = gmed_n(exEnergyHist, 9);                    move16();

  0001e	6a 09		 push	 9
  00020	8b 45 10	 mov	 eax, DWORD PTR _exEnergyHist$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _gmed_n
  00029	83 c4 08	 add	 esp, 8
  0002c	66 89 45 c8	 mov	 WORD PTR _avgEnergy$[ebp], ax
  00030	e8 00 00 00 00	 call	 _move16

; 75   : 
; 76   :    prevEnergy = shr( add (exEnergyHist[7], exEnergyHist[8]) ,1);

  00035	6a 01		 push	 1
  00037	b8 02 00 00 00	 mov	 eax, 2
  0003c	c1 e0 03	 shl	 eax, 3
  0003f	8b 4d 10	 mov	 ecx, DWORD PTR _exEnergyHist$[ebp]
  00042	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00046	52		 push	 edx
  00047	b8 02 00 00 00	 mov	 eax, 2
  0004c	6b c8 07	 imul	 ecx, eax, 7
  0004f	8b 55 10	 mov	 edx, DWORD PTR _exEnergyHist$[ebp]
  00052	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _add
  0005c	83 c4 08	 add	 esp, 8
  0005f	0f b7 c8	 movzx	 ecx, ax
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _shr
  00068	83 c4 08	 add	 esp, 8
  0006b	66 89 45 bc	 mov	 WORD PTR _prevEnergy$[ebp], ax

; 77   : 
; 78   :    test ();

  0006f	e8 00 00 00 00	 call	 _test

; 79   :    if ( sub (exEnergyHist[8], prevEnergy) < 0)

  00074	0f b7 45 bc	 movzx	 eax, WORD PTR _prevEnergy$[ebp]
  00078	50		 push	 eax
  00079	b9 02 00 00 00	 mov	 ecx, 2
  0007e	c1 e1 03	 shl	 ecx, 3
  00081	8b 55 10	 mov	 edx, DWORD PTR _exEnergyHist$[ebp]
  00084	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _sub
  0008e	83 c4 08	 add	 esp, 8
  00091	0f bf c8	 movsx	 ecx, ax
  00094	85 c9		 test	 ecx, ecx
  00096	7d 18		 jge	 SHORT $LN10@Ex_ctrl

; 80   :    {
; 81   :       prevEnergy = exEnergyHist[8];         move16 ();

  00098	b8 02 00 00 00	 mov	 eax, 2
  0009d	c1 e0 03	 shl	 eax, 3
  000a0	8b 4d 10	 mov	 ecx, DWORD PTR _exEnergyHist$[ebp]
  000a3	66 8b 14 01	 mov	 dx, WORD PTR [ecx+eax]
  000a7	66 89 55 bc	 mov	 WORD PTR _prevEnergy$[ebp], dx
  000ab	e8 00 00 00 00	 call	 _move16
$LN10@Ex_ctrl:

; 82   :    }
; 83   : 
; 84   :    /* upscaling to avoid too rapid energy rises  for some cases */
; 85   :    test (); test ();

  000b0	e8 00 00 00 00	 call	 _test
  000b5	e8 00 00 00 00	 call	 _test

; 86   :    if ( sub (excEnergy, avgEnergy) < 0 && sub (excEnergy, 5) > 0)

  000ba	0f b7 45 c8	 movzx	 eax, WORD PTR _avgEnergy$[ebp]
  000be	50		 push	 eax
  000bf	0f b7 4d 0c	 movzx	 ecx, WORD PTR _excEnergy$[ebp]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 _sub
  000c9	83 c4 08	 add	 esp, 8
  000cc	0f bf d0	 movsx	 edx, ax
  000cf	85 d2		 test	 edx, edx
  000d1	0f 8d d7 01 00
	00		 jge	 $LN9@Ex_ctrl
  000d7	6a 05		 push	 5
  000d9	0f b7 45 0c	 movzx	 eax, WORD PTR _excEnergy$[ebp]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _sub
  000e3	83 c4 08	 add	 esp, 8
  000e6	0f bf c8	 movsx	 ecx, ax
  000e9	85 c9		 test	 ecx, ecx
  000eb	0f 8e bd 01 00
	00		 jle	 $LN9@Ex_ctrl

; 87   :    {
; 88   :       testEnergy = shl(prevEnergy, 2);  /* testEnergy = 4*prevEnergy; */

  000f1	6a 02		 push	 2
  000f3	0f b7 45 bc	 movzx	 eax, WORD PTR _prevEnergy$[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 _shl
  000fd	83 c4 08	 add	 esp, 8
  00100	66 89 45 e0	 mov	 WORD PTR _testEnergy$[ebp], ax

; 89   : 
; 90   :       test (); test ();

  00104	e8 00 00 00 00	 call	 _test
  00109	e8 00 00 00 00	 call	 _test

; 91   :       if ( sub (voicedHangover, 7) < 0 || prevBFI != 0 )

  0010e	6a 07		 push	 7
  00110	0f b7 45 14	 movzx	 eax, WORD PTR _voicedHangover$[ebp]
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 _sub
  0011a	83 c4 08	 add	 esp, 8
  0011d	0f bf c8	 movsx	 ecx, ax
  00120	85 c9		 test	 ecx, ecx
  00122	7c 08		 jl	 SHORT $LN7@Ex_ctrl
  00124	0f bf 45 18	 movsx	 eax, WORD PTR _prevBFI$[ebp]
  00128	85 c0		 test	 eax, eax
  0012a	74 16		 je	 SHORT $LN8@Ex_ctrl
$LN7@Ex_ctrl:

; 92   :       {
; 93   :          /* testEnergy = 3*prevEnergy */
; 94   :          testEnergy = sub (testEnergy, prevEnergy);  

  0012c	0f b7 45 bc	 movzx	 eax, WORD PTR _prevEnergy$[ebp]
  00130	50		 push	 eax
  00131	0f b7 4d e0	 movzx	 ecx, WORD PTR _testEnergy$[ebp]
  00135	51		 push	 ecx
  00136	e8 00 00 00 00	 call	 _sub
  0013b	83 c4 08	 add	 esp, 8
  0013e	66 89 45 e0	 mov	 WORD PTR _testEnergy$[ebp], ax
$LN8@Ex_ctrl:

; 95   :       }
; 96   : 
; 97   :       test ();

  00142	e8 00 00 00 00	 call	 _test

; 98   :       if ( sub (avgEnergy, testEnergy) > 0)

  00147	0f b7 45 e0	 movzx	 eax, WORD PTR _testEnergy$[ebp]
  0014b	50		 push	 eax
  0014c	0f b7 4d c8	 movzx	 ecx, WORD PTR _avgEnergy$[ebp]
  00150	51		 push	 ecx
  00151	e8 00 00 00 00	 call	 _sub
  00156	83 c4 08	 add	 esp, 8
  00159	0f bf d0	 movsx	 edx, ax
  0015c	85 d2		 test	 edx, edx
  0015e	7e 0d		 jle	 SHORT $LN6@Ex_ctrl

; 99   :       {
; 100  :          avgEnergy = testEnergy;         move16 ();

  00160	66 8b 45 e0	 mov	 ax, WORD PTR _testEnergy$[ebp]
  00164	66 89 45 c8	 mov	 WORD PTR _avgEnergy$[ebp], ax
  00168	e8 00 00 00 00	 call	 _move16
$LN6@Ex_ctrl:

; 101  :       }
; 102  : 
; 103  :       /* scaleFactor=avgEnergy/excEnergy in Q0 (const 29 below)*/
; 104  :       exp = norm_s (excEnergy);

  0016d	0f b7 45 0c	 movzx	 eax, WORD PTR _excEnergy$[ebp]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _norm_s
  00177	83 c4 04	 add	 esp, 4
  0017a	66 89 45 ec	 mov	 WORD PTR _exp$[ebp], ax

; 105  :       excEnergy = shl (excEnergy, exp);

  0017e	0f b7 45 ec	 movzx	 eax, WORD PTR _exp$[ebp]
  00182	50		 push	 eax
  00183	0f b7 4d 0c	 movzx	 ecx, WORD PTR _excEnergy$[ebp]
  00187	51		 push	 ecx
  00188	e8 00 00 00 00	 call	 _shl
  0018d	83 c4 08	 add	 esp, 8
  00190	66 89 45 0c	 mov	 WORD PTR _excEnergy$[ebp], ax

; 106  :       excEnergy = div_s ((Word16) 16383, excEnergy);

  00194	0f b7 45 0c	 movzx	 eax, WORD PTR _excEnergy$[ebp]
  00198	50		 push	 eax
  00199	68 ff 3f 00 00	 push	 16383			; 00003fffH
  0019e	e8 00 00 00 00	 call	 _div_s
  001a3	83 c4 08	 add	 esp, 8
  001a6	66 89 45 0c	 mov	 WORD PTR _excEnergy$[ebp], ax

; 107  :       t0 = L_mult (avgEnergy, excEnergy);

  001aa	0f b7 45 0c	 movzx	 eax, WORD PTR _excEnergy$[ebp]
  001ae	50		 push	 eax
  001af	0f b7 4d c8	 movzx	 ecx, WORD PTR _avgEnergy$[ebp]
  001b3	51		 push	 ecx
  001b4	e8 00 00 00 00	 call	 _L_mult
  001b9	83 c4 08	 add	 esp, 8
  001bc	89 45 b0	 mov	 DWORD PTR _t0$[ebp], eax

; 108  :       t0 = L_shr (t0, sub (20, exp));  /* const=30 for t0 in Q0, 20 for Q10 */

  001bf	0f b7 45 ec	 movzx	 eax, WORD PTR _exp$[ebp]
  001c3	50		 push	 eax
  001c4	6a 14		 push	 20			; 00000014H
  001c6	e8 00 00 00 00	 call	 _sub
  001cb	83 c4 08	 add	 esp, 8
  001ce	0f b7 c8	 movzx	 ecx, ax
  001d1	51		 push	 ecx
  001d2	8b 55 b0	 mov	 edx, DWORD PTR _t0$[ebp]
  001d5	52		 push	 edx
  001d6	e8 00 00 00 00	 call	 _L_shr
  001db	83 c4 08	 add	 esp, 8
  001de	89 45 b0	 mov	 DWORD PTR _t0$[ebp], eax

; 109  :       if ( L_sub(t0, 32767) > 0 )

  001e1	68 ff 7f 00 00	 push	 32767			; 00007fffH
  001e6	8b 45 b0	 mov	 eax, DWORD PTR _t0$[ebp]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 _L_sub
  001ef	83 c4 08	 add	 esp, 8
  001f2	85 c0		 test	 eax, eax
  001f4	7e 0c		 jle	 SHORT $LN5@Ex_ctrl

; 110  :       {
; 111  :          t0 = 32767; move32 ();   /* saturate  */

  001f6	c7 45 b0 ff 7f
	00 00		 mov	 DWORD PTR _t0$[ebp], 32767 ; 00007fffH
  001fd	e8 00 00 00 00	 call	 _move32
$LN5@Ex_ctrl:

; 112  :       }
; 113  :       scaleFactor = extract_l (t0); 

  00202	8b 45 b0	 mov	 eax, DWORD PTR _t0$[ebp]
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 _extract_l
  0020b	83 c4 04	 add	 esp, 4
  0020e	66 89 45 d4	 mov	 WORD PTR _scaleFactor$[ebp], ax

; 114  : 
; 115  :       /* test if scaleFactor > 3.0 */
; 116  :       test (); test ();

  00212	e8 00 00 00 00	 call	 _test
  00217	e8 00 00 00 00	 call	 _test

; 117  :       if ( carefulFlag != 0 && sub(scaleFactor, 3072) > 0 ) 

  0021c	0f bf 45 1c	 movsx	 eax, WORD PTR _carefulFlag$[ebp]
  00220	85 c0		 test	 eax, eax
  00222	74 27		 je	 SHORT $LN4@Ex_ctrl
  00224	68 00 0c 00 00	 push	 3072			; 00000c00H
  00229	0f b7 45 d4	 movzx	 eax, WORD PTR _scaleFactor$[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 _sub
  00233	83 c4 08	 add	 esp, 8
  00236	0f bf c8	 movsx	 ecx, ax
  00239	85 c9		 test	 ecx, ecx
  0023b	7e 0e		 jle	 SHORT $LN4@Ex_ctrl

; 118  :       {
; 119  :          scaleFactor = 3072;              move16 ();

  0023d	b8 00 0c 00 00	 mov	 eax, 3072		; 00000c00H
  00242	66 89 45 d4	 mov	 WORD PTR _scaleFactor$[ebp], ax
  00246	e8 00 00 00 00	 call	 _move16
$LN4@Ex_ctrl:

; 120  :       }
; 121  : 
; 122  :       /* scale the excitation by scaleFactor */
; 123  :       for (i = 0; i < L_SUBFR; i++)

  0024b	33 c0		 xor	 eax, eax
  0024d	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00251	eb 0c		 jmp	 SHORT $LN3@Ex_ctrl
$LN2@Ex_ctrl:
  00253	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00257	66 83 c0 01	 add	 ax, 1
  0025b	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@Ex_ctrl:
  0025f	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00263	83 f8 28	 cmp	 eax, 40			; 00000028H
  00266	7d 46		 jge	 SHORT $LN9@Ex_ctrl

; 124  :       {
; 125  :          t0 = L_mult (scaleFactor, excitation[i]);

  00268	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0026c	8b 4d 08	 mov	 ecx, DWORD PTR _excitation$[ebp]
  0026f	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00273	52		 push	 edx
  00274	0f b7 45 d4	 movzx	 eax, WORD PTR _scaleFactor$[ebp]
  00278	50		 push	 eax
  00279	e8 00 00 00 00	 call	 _L_mult
  0027e	83 c4 08	 add	 esp, 8
  00281	89 45 b0	 mov	 DWORD PTR _t0$[ebp], eax

; 126  :          t0 = L_shr (t0, 11);

  00284	6a 0b		 push	 11			; 0000000bH
  00286	8b 45 b0	 mov	 eax, DWORD PTR _t0$[ebp]
  00289	50		 push	 eax
  0028a	e8 00 00 00 00	 call	 _L_shr
  0028f	83 c4 08	 add	 esp, 8
  00292	89 45 b0	 mov	 DWORD PTR _t0$[ebp], eax

; 127  :          excitation[i] = extract_l (t0);

  00295	8b 45 b0	 mov	 eax, DWORD PTR _t0$[ebp]
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 _extract_l
  0029e	83 c4 04	 add	 esp, 4
  002a1	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  002a5	8b 55 08	 mov	 edx, DWORD PTR _excitation$[ebp]
  002a8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 128  :       } 

  002ac	eb a5		 jmp	 SHORT $LN2@Ex_ctrl
$LN9@Ex_ctrl:

; 129  :    }
; 130  : 
; 131  :    return 0;

  002ae	33 c0		 xor	 eax, eax

; 132  : }

  002b0	5f		 pop	 edi
  002b1	5e		 pop	 esi
  002b2	5b		 pop	 ebx
  002b3	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  002b9	3b ec		 cmp	 ebp, esp
  002bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c3		 ret	 0
_Ex_ctrl ENDP
_TEXT	ENDS
END
