; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\lsp_az.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_lsp_az_id
CONST	SEGMENT
_lsp_az_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Lsp_Az
EXTRN	_L_mult:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_msu:PROC
EXTRN	_L_add:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr_r:PROC
EXTRN	_L_Extract:PROC
EXTRN	_Mpy_32_16:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lsp_az.c
;	COMDAT _Get_lsp_pol
_TEXT	SEGMENT
_t0$ = -56						; size = 4
_lo$ = -44						; size = 2
_hi$ = -32						; size = 2
_j$ = -20						; size = 2
_i$ = -8						; size = 2
_lsp$ = 8						; size = 4
_f$ = 12						; size = 4
_Get_lsp_pol PROC					; COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 83   :     Word16 i, j, hi, lo;
; 84   :     Word32 t0;
; 85   :     
; 86   :     /* f[0] = 1.0;             */
; 87   :     *f = L_mult (4096, 2048);              move32 (); 

  0001e	68 00 08 00 00	 push	 2048			; 00000800H
  00023	68 00 10 00 00	 push	 4096			; 00001000H
  00028	e8 00 00 00 00	 call	 _L_mult
  0002d	83 c4 08	 add	 esp, 8
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  00033	89 01		 mov	 DWORD PTR [ecx], eax
  00035	e8 00 00 00 00	 call	 _move32

; 88   :     f++;                                   move32 (); 

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _f$[ebp]
  0003d	83 c0 04	 add	 eax, 4
  00040	89 45 0c	 mov	 DWORD PTR _f$[ebp], eax
  00043	e8 00 00 00 00	 call	 _move32

; 89   :     *f = L_msu ((Word32) 0, *lsp, 512);    /* f[1] =  -2.0 * lsp[0];  */

  00048	68 00 02 00 00	 push	 512			; 00000200H
  0004d	8b 45 08	 mov	 eax, DWORD PTR _lsp$[ebp]
  00050	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00053	51		 push	 ecx
  00054	6a 00		 push	 0
  00056	e8 00 00 00 00	 call	 _L_msu
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	8b 55 0c	 mov	 edx, DWORD PTR _f$[ebp]
  00061	89 02		 mov	 DWORD PTR [edx], eax

; 90   :     f++;                                   move32 (); 

  00063	8b 45 0c	 mov	 eax, DWORD PTR _f$[ebp]
  00066	83 c0 04	 add	 eax, 4
  00069	89 45 0c	 mov	 DWORD PTR _f$[ebp], eax
  0006c	e8 00 00 00 00	 call	 _move32

; 91   :     lsp += 2;                              /* Advance lsp pointer     */

  00071	8b 45 08	 mov	 eax, DWORD PTR _lsp$[ebp]
  00074	83 c0 04	 add	 eax, 4
  00077	89 45 08	 mov	 DWORD PTR _lsp$[ebp], eax

; 92   : 
; 93   :     for (i = 2; i <= 5; i++)

  0007a	b8 02 00 00 00	 mov	 eax, 2
  0007f	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00083	eb 0c		 jmp	 SHORT $LN6@Get_lsp_po
$LN5@Get_lsp_po:
  00085	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00089	66 83 c0 01	 add	 ax, 1
  0008d	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN6@Get_lsp_po:
  00091	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00095	83 f8 05	 cmp	 eax, 5
  00098	0f 8f 1b 01 00
	00		 jg	 $LN7@Get_lsp_po

; 94   :     {
; 95   :         *f = f[-2];                        move32 (); 

  0009e	b8 04 00 00 00	 mov	 eax, 4
  000a3	6b c8 fe	 imul	 ecx, eax, -2
  000a6	8b 55 0c	 mov	 edx, DWORD PTR _f$[ebp]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _f$[ebp]
  000ac	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  000af	89 0a		 mov	 DWORD PTR [edx], ecx
  000b1	e8 00 00 00 00	 call	 _move32

; 96   : 
; 97   :         for (j = 1; j < i; j++, f--)

  000b6	b8 01 00 00 00	 mov	 eax, 1
  000bb	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
  000bf	eb 15		 jmp	 SHORT $LN3@Get_lsp_po
$LN2@Get_lsp_po:
  000c1	66 8b 45 ec	 mov	 ax, WORD PTR _j$[ebp]
  000c5	66 83 c0 01	 add	 ax, 1
  000c9	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
  000cd	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  000d0	83 e9 04	 sub	 ecx, 4
  000d3	89 4d 0c	 mov	 DWORD PTR _f$[ebp], ecx
$LN3@Get_lsp_po:
  000d6	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  000da	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000de	3b c1		 cmp	 eax, ecx
  000e0	0f 8d 94 00 00
	00		 jge	 $LN1@Get_lsp_po

; 98   :         {
; 99   :             L_Extract (f[-1], &hi, &lo);

  000e6	8d 45 d4	 lea	 eax, DWORD PTR _lo$[ebp]
  000e9	50		 push	 eax
  000ea	8d 4d e0	 lea	 ecx, DWORD PTR _hi$[ebp]
  000ed	51		 push	 ecx
  000ee	ba 04 00 00 00	 mov	 edx, 4
  000f3	6b c2 ff	 imul	 eax, edx, -1
  000f6	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  000f9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000fc	52		 push	 edx
  000fd	e8 00 00 00 00	 call	 _L_Extract
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  :             t0 = Mpy_32_16 (hi, lo, *lsp); /* t0 = f[-1] * lsp    */

  00105	8b 45 08	 mov	 eax, DWORD PTR _lsp$[ebp]
  00108	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0010b	51		 push	 ecx
  0010c	0f b7 55 d4	 movzx	 edx, WORD PTR _lo$[ebp]
  00110	52		 push	 edx
  00111	0f b7 45 e0	 movzx	 eax, WORD PTR _hi$[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _Mpy_32_16
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011e	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 101  :             t0 = L_shl (t0, 1);

  00121	6a 01		 push	 1
  00123	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 _L_shl
  0012c	83 c4 08	 add	 esp, 8
  0012f	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 102  :             *f = L_add (*f, f[-2]);        move32 (); /* *f += f[-2]      */

  00132	b8 04 00 00 00	 mov	 eax, 4
  00137	6b c8 fe	 imul	 ecx, eax, -2
  0013a	8b 55 0c	 mov	 edx, DWORD PTR _f$[ebp]
  0013d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00140	50		 push	 eax
  00141	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  00144	8b 11		 mov	 edx, DWORD PTR [ecx]
  00146	52		 push	 edx
  00147	e8 00 00 00 00	 call	 _L_add
  0014c	83 c4 08	 add	 esp, 8
  0014f	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  00152	89 01		 mov	 DWORD PTR [ecx], eax
  00154	e8 00 00 00 00	 call	 _move32

; 103  :             *f = L_sub (*f, t0);move32 (); /* *f -= t0            */

  00159	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  0015c	50		 push	 eax
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  00160	8b 11		 mov	 edx, DWORD PTR [ecx]
  00162	52		 push	 edx
  00163	e8 00 00 00 00	 call	 _L_sub
  00168	83 c4 08	 add	 esp, 8
  0016b	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  0016e	89 01		 mov	 DWORD PTR [ecx], eax
  00170	e8 00 00 00 00	 call	 _move32

; 104  :         }

  00175	e9 47 ff ff ff	 jmp	 $LN2@Get_lsp_po
$LN1@Get_lsp_po:

; 105  :         *f = L_msu (*f, *lsp, 512);        move32 (); /* *f -= lsp<<9     */

  0017a	68 00 02 00 00	 push	 512			; 00000200H
  0017f	8b 45 08	 mov	 eax, DWORD PTR _lsp$[ebp]
  00182	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00185	51		 push	 ecx
  00186	8b 55 0c	 mov	 edx, DWORD PTR _f$[ebp]
  00189	8b 02		 mov	 eax, DWORD PTR [edx]
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 _L_msu
  00191	83 c4 0c	 add	 esp, 12			; 0000000cH
  00194	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  00197	89 01		 mov	 DWORD PTR [ecx], eax
  00199	e8 00 00 00 00	 call	 _move32

; 106  :         f += i;                            /* Advance f pointer   */

  0019e	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  001a2	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  001a5	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  001a8	89 55 0c	 mov	 DWORD PTR _f$[ebp], edx

; 107  :         lsp += 2;                          /* Advance lsp pointer */

  001ab	8b 45 08	 mov	 eax, DWORD PTR _lsp$[ebp]
  001ae	83 c0 04	 add	 eax, 4
  001b1	89 45 08	 mov	 DWORD PTR _lsp$[ebp], eax

; 108  :     }

  001b4	e9 cc fe ff ff	 jmp	 $LN5@Get_lsp_po
$LN7@Get_lsp_po:

; 109  : 
; 110  :     return;
; 111  : }

  001b9	52		 push	 edx
  001ba	8b cd		 mov	 ecx, ebp
  001bc	50		 push	 eax
  001bd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Get_lsp_po
  001c3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001c8	58		 pop	 eax
  001c9	5a		 pop	 edx
  001ca	5f		 pop	 edi
  001cb	5e		 pop	 esi
  001cc	5b		 pop	 ebx
  001cd	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  001d3	3b ec		 cmp	 ebp, esp
  001d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c3		 ret	 0
  001de	8b ff		 npad	 2
$LN12@Get_lsp_po:
  001e0	02 00 00 00	 DD	 2
  001e4	00 00 00 00	 DD	 $LN11@Get_lsp_po
$LN11@Get_lsp_po:
  001e8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001ec	02 00 00 00	 DD	 2
  001f0	00 00 00 00	 DD	 $LN9@Get_lsp_po
  001f4	d4 ff ff ff	 DD	 -44			; ffffffd4H
  001f8	02 00 00 00	 DD	 2
  001fc	00 00 00 00	 DD	 $LN10@Get_lsp_po
$LN10@Get_lsp_po:
  00200	6c		 DB	 108			; 0000006cH
  00201	6f		 DB	 111			; 0000006fH
  00202	00		 DB	 0
$LN9@Get_lsp_po:
  00203	68		 DB	 104			; 00000068H
  00204	69		 DB	 105			; 00000069H
  00205	00		 DB	 0
_Get_lsp_pol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lsp_az.c
;	COMDAT _Lsp_Az
_TEXT	SEGMENT
_t0$ = -100						; size = 4
_f2$ = -88						; size = 24
_f1$ = -56						; size = 24
_j$ = -24						; size = 2
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_lsp$ = 8						; size = 4
_a$ = 12						; size = 4
_Lsp_Az	PROC						; COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00012	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 136  :     Word16 i, j;
; 137  :     Word32 f1[6], f2[6];
; 138  :     Word32 t0;
; 139  : 
; 140  :     Get_lsp_pol (&lsp[0], f1);

  00028	8d 45 c8	 lea	 eax, DWORD PTR _f1$[ebp]
  0002b	50		 push	 eax
  0002c	b9 02 00 00 00	 mov	 ecx, 2
  00031	6b d1 00	 imul	 edx, ecx, 0
  00034	03 55 08	 add	 edx, DWORD PTR _lsp$[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _Get_lsp_pol
  0003d	83 c4 08	 add	 esp, 8

; 141  :     Get_lsp_pol (&lsp[1], f2);

  00040	8d 45 a8	 lea	 eax, DWORD PTR _f2$[ebp]
  00043	50		 push	 eax
  00044	b9 02 00 00 00	 mov	 ecx, 2
  00049	c1 e1 00	 shl	 ecx, 0
  0004c	03 4d 08	 add	 ecx, DWORD PTR _lsp$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 _Get_lsp_pol
  00055	83 c4 08	 add	 esp, 8

; 142  : 
; 143  :     for (i = 5; i > 0; i--)

  00058	b8 05 00 00 00	 mov	 eax, 5
  0005d	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00061	eb 0c		 jmp	 SHORT $LN6@Lsp_Az
$LN5@Lsp_Az:
  00063	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00067	66 83 e8 01	 sub	 ax, 1
  0006b	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN6@Lsp_Az:
  0006f	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00073	85 c0		 test	 eax, eax
  00075	7e 50		 jle	 SHORT $LN4@Lsp_Az

; 144  :     {
; 145  :         f1[i] = L_add (f1[i], f1[i - 1]);    move32 (); /* f1[i] += f1[i-1]; */

  00077	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0007b	8b 4c 85 c4	 mov	 ecx, DWORD PTR _f1$[ebp+eax*4-4]
  0007f	51		 push	 ecx
  00080	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  00084	8b 44 95 c8	 mov	 eax, DWORD PTR _f1$[ebp+edx*4]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _L_add
  0008e	83 c4 08	 add	 esp, 8
  00091	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00095	89 44 8d c8	 mov	 DWORD PTR _f1$[ebp+ecx*4], eax
  00099	e8 00 00 00 00	 call	 _move32

; 146  :         f2[i] = L_sub (f2[i], f2[i - 1]);    move32 (); /* f2[i] -= f2[i-1]; */

  0009e	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000a2	8b 4c 85 a4	 mov	 ecx, DWORD PTR _f2$[ebp+eax*4-4]
  000a6	51		 push	 ecx
  000a7	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  000ab	8b 44 95 a8	 mov	 eax, DWORD PTR _f2$[ebp+edx*4]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _L_sub
  000b5	83 c4 08	 add	 esp, 8
  000b8	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  000bc	89 44 8d a8	 mov	 DWORD PTR _f2$[ebp+ecx*4], eax
  000c0	e8 00 00 00 00	 call	 _move32

; 147  :     }

  000c5	eb 9c		 jmp	 SHORT $LN5@Lsp_Az
$LN4@Lsp_Az:

; 148  : 
; 149  :     a[0] = 4096;                             move16 (); 

  000c7	b8 02 00 00 00	 mov	 eax, 2
  000cc	6b c8 00	 imul	 ecx, eax, 0
  000cf	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  000d4	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  000d7	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx
  000db	e8 00 00 00 00	 call	 _move16

; 150  :     for (i = 1, j = 10; i <= 5; i++, j--)

  000e0	b8 01 00 00 00	 mov	 eax, 1
  000e5	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  000e9	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000ee	66 89 4d e8	 mov	 WORD PTR _j$[ebp], cx
  000f2	eb 18		 jmp	 SHORT $LN3@Lsp_Az
$LN2@Lsp_Az:
  000f4	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  000f8	66 83 c0 01	 add	 ax, 1
  000fc	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00100	66 8b 4d e8	 mov	 cx, WORD PTR _j$[ebp]
  00104	66 83 e9 01	 sub	 cx, 1
  00108	66 89 4d e8	 mov	 WORD PTR _j$[ebp], cx
$LN3@Lsp_Az:
  0010c	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00110	83 f8 05	 cmp	 eax, 5
  00113	0f 8f 8d 00 00
	00		 jg	 $LN7@Lsp_Az

; 151  :     {
; 152  :         t0 = L_add (f1[i], f2[i]);           /* f1[i] + f2[i] */

  00119	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0011d	8b 4c 85 a8	 mov	 ecx, DWORD PTR _f2$[ebp+eax*4]
  00121	51		 push	 ecx
  00122	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  00126	8b 44 95 c8	 mov	 eax, DWORD PTR _f1$[ebp+edx*4]
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 _L_add
  00130	83 c4 08	 add	 esp, 8
  00133	89 45 9c	 mov	 DWORD PTR _t0$[ebp], eax

; 153  :         a[i] = extract_l (L_shr_r (t0, 13)); move16 (); 

  00136	6a 0d		 push	 13			; 0000000dH
  00138	8b 45 9c	 mov	 eax, DWORD PTR _t0$[ebp]
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 _L_shr_r
  00141	83 c4 08	 add	 esp, 8
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 _extract_l
  0014a	83 c4 04	 add	 esp, 4
  0014d	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00151	8b 55 0c	 mov	 edx, DWORD PTR _a$[ebp]
  00154	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00158	e8 00 00 00 00	 call	 _move16

; 154  :         t0 = L_sub (f1[i], f2[i]);           /* f1[i] - f2[i] */

  0015d	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00161	8b 4c 85 a8	 mov	 ecx, DWORD PTR _f2$[ebp+eax*4]
  00165	51		 push	 ecx
  00166	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  0016a	8b 44 95 c8	 mov	 eax, DWORD PTR _f1$[ebp+edx*4]
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 _L_sub
  00174	83 c4 08	 add	 esp, 8
  00177	89 45 9c	 mov	 DWORD PTR _t0$[ebp], eax

; 155  :         a[j] = extract_l (L_shr_r (t0, 13)); move16 (); 

  0017a	6a 0d		 push	 13			; 0000000dH
  0017c	8b 45 9c	 mov	 eax, DWORD PTR _t0$[ebp]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 _L_shr_r
  00185	83 c4 08	 add	 esp, 8
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 _extract_l
  0018e	83 c4 04	 add	 esp, 4
  00191	0f bf 4d e8	 movsx	 ecx, WORD PTR _j$[ebp]
  00195	8b 55 0c	 mov	 edx, DWORD PTR _a$[ebp]
  00198	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0019c	e8 00 00 00 00	 call	 _move16

; 156  :     }

  001a1	e9 4e ff ff ff	 jmp	 $LN2@Lsp_Az
$LN7@Lsp_Az:

; 157  : 
; 158  :     return;
; 159  : }

  001a6	52		 push	 edx
  001a7	8b cd		 mov	 ecx, ebp
  001a9	50		 push	 eax
  001aa	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Lsp_Az
  001b0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001b5	58		 pop	 eax
  001b6	5a		 pop	 edx
  001b7	5f		 pop	 edi
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx
  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  001ca	3b ec		 cmp	 ebp, esp
  001cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c3		 ret	 0
  001d5	8d 49 00	 npad	 3
$LN12@Lsp_Az:
  001d8	02 00 00 00	 DD	 2
  001dc	00 00 00 00	 DD	 $LN11@Lsp_Az
$LN11@Lsp_Az:
  001e0	c8 ff ff ff	 DD	 -56			; ffffffc8H
  001e4	18 00 00 00	 DD	 24			; 00000018H
  001e8	00 00 00 00	 DD	 $LN9@Lsp_Az
  001ec	a8 ff ff ff	 DD	 -88			; ffffffa8H
  001f0	18 00 00 00	 DD	 24			; 00000018H
  001f4	00 00 00 00	 DD	 $LN10@Lsp_Az
$LN10@Lsp_Az:
  001f8	66		 DB	 102			; 00000066H
  001f9	32		 DB	 50			; 00000032H
  001fa	00		 DB	 0
$LN9@Lsp_Az:
  001fb	66		 DB	 102			; 00000066H
  001fc	31		 DB	 49			; 00000031H
  001fd	00		 DB	 0
_Lsp_Az	ENDP
_TEXT	ENDS
END
