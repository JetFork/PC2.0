; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\spstproc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_spstproc_id
CONST	SEGMENT
_spstproc_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_subframePostProc
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shr:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_h:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_shl:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	_Syn_filt:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\spstproc.c
;	COMDAT _subframePostProc
_TEXT	SEGMENT
_pitch_fac$ = -92					; size = 2
_kShift$ = -80						; size = 2
_tempShift$ = -68					; size = 2
_L_temp$ = -56						; size = 4
_temp$ = -44						; size = 2
_k$ = -32						; size = 2
_j$ = -20						; size = 2
_i$ = -8						; size = 2
_speech$ = 8						; size = 4
_mode$ = 12						; size = 4
_i_subfr$ = 16						; size = 2
_gain_pit$ = 20						; size = 2
_gain_code$ = 24					; size = 2
_Aq$ = 28						; size = 4
_synth$ = 32						; size = 4
_xn$ = 36						; size = 4
_code$ = 40						; size = 4
_y1$ = 44						; size = 4
_y2$ = 48						; size = 4
_mem_syn$ = 52						; size = 4
_mem_err$ = 56						; size = 4
_mem_w0$ = 60						; size = 4
_exc$ = 64						; size = 4
_sharp$ = 68						; size = 4
_subframePostProc PROC					; COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  00012	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 68   :    Word16 i, j, k;
; 69   :    Word16 temp;
; 70   :    Word32 L_temp;
; 71   :    Word16 tempShift;
; 72   :    Word16 kShift;
; 73   :    Word16 pitch_fac;
; 74   : 
; 75   :    test ();

  0001e	e8 00 00 00 00	 call	 _test

; 76   :    if (sub(mode, MR122) != 0)

  00023	6a 07		 push	 7
  00025	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _sub
  0002f	83 c4 08	 add	 esp, 8
  00032	0f bf c8	 movsx	 ecx, ax
  00035	85 c9		 test	 ecx, ecx
  00037	74 2b		 je	 SHORT $LN9@subframePo

; 77   :    {
; 78   :       tempShift = 1;                     move16 ();

  00039	b8 01 00 00 00	 mov	 eax, 1
  0003e	66 89 45 bc	 mov	 WORD PTR _tempShift$[ebp], ax
  00042	e8 00 00 00 00	 call	 _move16

; 79   :       kShift = 2;                        move16 ();

  00047	b8 02 00 00 00	 mov	 eax, 2
  0004c	66 89 45 b0	 mov	 WORD PTR _kShift$[ebp], ax
  00050	e8 00 00 00 00	 call	 _move16

; 80   :       pitch_fac = gain_pit;              move16 ();

  00055	66 8b 45 14	 mov	 ax, WORD PTR _gain_pit$[ebp]
  00059	66 89 45 a4	 mov	 WORD PTR _pitch_fac$[ebp], ax
  0005d	e8 00 00 00 00	 call	 _move16

; 81   :    }
; 82   :    else

  00062	eb 2f		 jmp	 SHORT $LN8@subframePo
$LN9@subframePo:

; 83   :    {
; 84   :       tempShift = 2;                     move16 ();

  00064	b8 02 00 00 00	 mov	 eax, 2
  00069	66 89 45 bc	 mov	 WORD PTR _tempShift$[ebp], ax
  0006d	e8 00 00 00 00	 call	 _move16

; 85   :       kShift = 4;                        move16 ();

  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	66 89 45 b0	 mov	 WORD PTR _kShift$[ebp], ax
  0007b	e8 00 00 00 00	 call	 _move16

; 86   :       pitch_fac = shr (gain_pit, 1);

  00080	6a 01		 push	 1
  00082	0f b7 45 14	 movzx	 eax, WORD PTR _gain_pit$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _shr
  0008c	83 c4 08	 add	 esp, 8
  0008f	66 89 45 a4	 mov	 WORD PTR _pitch_fac$[ebp], ax
$LN8@subframePo:

; 87   :    }
; 88   :    
; 89   :    /*------------------------------------------------------------*
; 90   :     * - Update pitch sharpening "sharp" with quantized gain_pit  *
; 91   :     *------------------------------------------------------------*/
; 92   :    
; 93   :    *sharp = gain_pit;                    move16 ();

  00093	8b 45 44	 mov	 eax, DWORD PTR _sharp$[ebp]
  00096	66 8b 4d 14	 mov	 cx, WORD PTR _gain_pit$[ebp]
  0009a	66 89 08	 mov	 WORD PTR [eax], cx
  0009d	e8 00 00 00 00	 call	 _move16

; 94   :    test ();

  000a2	e8 00 00 00 00	 call	 _test

; 95   :    if (sub(*sharp, SHARPMAX) > 0)

  000a7	68 d9 32 00 00	 push	 13017			; 000032d9H
  000ac	8b 45 44	 mov	 eax, DWORD PTR _sharp$[ebp]
  000af	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _sub
  000b8	83 c4 08	 add	 esp, 8
  000bb	0f bf d0	 movsx	 edx, ax
  000be	85 d2		 test	 edx, edx
  000c0	7e 10		 jle	 SHORT $LN7@subframePo

; 96   :    {
; 97   :       *sharp = SHARPMAX;                 move16 ();

  000c2	b8 d9 32 00 00	 mov	 eax, 13017		; 000032d9H
  000c7	8b 4d 44	 mov	 ecx, DWORD PTR _sharp$[ebp]
  000ca	66 89 01	 mov	 WORD PTR [ecx], ax
  000cd	e8 00 00 00 00	 call	 _move16
$LN7@subframePo:

; 98   :    }
; 99   :    /*------------------------------------------------------*
; 100  :     * - Find the total excitation                          *
; 101  :     * - find synthesis speech corresponding to exc[]       *
; 102  :     * - update filters memories for finding the target     *
; 103  :     *   vector in the next subframe                        *
; 104  :     *   (update error[-m..-1] and mem_w_err[])             *
; 105  :     *------------------------------------------------------*/
; 106  : 
; 107  :    for (i = 0; i < L_SUBFR; i++) {

  000d2	33 c0		 xor	 eax, eax
  000d4	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  000d8	eb 0c		 jmp	 SHORT $LN6@subframePo
$LN5@subframePo:
  000da	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  000de	66 83 c0 01	 add	 ax, 1
  000e2	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN6@subframePo:
  000e6	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000ea	83 f8 28	 cmp	 eax, 40			; 00000028H
  000ed	7d 7d		 jge	 SHORT $LN4@subframePo

; 108  :       /* exc[i] = gain_pit*exc[i] + gain_code*code[i]; */
; 109  : 
; 110  :       /*
; 111  :        *                      12k2  others
; 112  :        * ---------------------------------
; 113  :        * exc                   Q0      Q0
; 114  :        * gain_pit              Q14     Q14
; 115  :        * pitch_fac             Q13     Q14
; 116  :        *    product:           Q14     Q15
; 117  :        *                               
; 118  :        * code                  Q12     Q13
; 119  :        * gain_code             Q1      Q1
; 120  :        *    product            Q14     Q15
; 121  :        *    sum                Q14     Q15
; 122  :        *                               
; 123  :        * tempShift             2       1
; 124  :        *    sum<<tempShift     Q16     Q16
; 125  :        * result -> exc         Q0      Q0
; 126  :        */
; 127  :       L_temp = L_mult (exc[i + i_subfr], pitch_fac);

  000ef	0f b7 45 a4	 movzx	 eax, WORD PTR _pitch_fac$[ebp]
  000f3	50		 push	 eax
  000f4	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000f8	0f bf 55 10	 movsx	 edx, WORD PTR _i_subfr$[ebp]
  000fc	03 ca		 add	 ecx, edx
  000fe	8b 45 40	 mov	 eax, DWORD PTR _exc$[ebp]
  00101	0f b7 0c 48	 movzx	 ecx, WORD PTR [eax+ecx*2]
  00105	51		 push	 ecx
  00106	e8 00 00 00 00	 call	 _L_mult
  0010b	83 c4 08	 add	 esp, 8
  0010e	89 45 c8	 mov	 DWORD PTR _L_temp$[ebp], eax

; 128  :       L_temp = L_mac (L_temp, code[i], gain_code);

  00111	0f b7 45 18	 movzx	 eax, WORD PTR _gain_code$[ebp]
  00115	50		 push	 eax
  00116	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  0011a	8b 55 28	 mov	 edx, DWORD PTR _code$[ebp]
  0011d	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00121	50		 push	 eax
  00122	8b 4d c8	 mov	 ecx, DWORD PTR _L_temp$[ebp]
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 _L_mac
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012e	89 45 c8	 mov	 DWORD PTR _L_temp$[ebp], eax

; 129  :       L_temp = L_shl (L_temp, tempShift);

  00131	0f b7 45 bc	 movzx	 eax, WORD PTR _tempShift$[ebp]
  00135	50		 push	 eax
  00136	8b 4d c8	 mov	 ecx, DWORD PTR _L_temp$[ebp]
  00139	51		 push	 ecx
  0013a	e8 00 00 00 00	 call	 _L_shl
  0013f	83 c4 08	 add	 esp, 8
  00142	89 45 c8	 mov	 DWORD PTR _L_temp$[ebp], eax

; 130  :       exc[i + i_subfr] = round (L_temp);              move16 ();

  00145	8b 45 c8	 mov	 eax, DWORD PTR _L_temp$[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _round
  0014e	83 c4 04	 add	 esp, 4
  00151	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00155	0f bf 55 10	 movsx	 edx, WORD PTR _i_subfr$[ebp]
  00159	03 ca		 add	 ecx, edx
  0015b	8b 55 40	 mov	 edx, DWORD PTR _exc$[ebp]
  0015e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00162	e8 00 00 00 00	 call	 _move16

; 131  :    }

  00167	e9 6e ff ff ff	 jmp	 $LN5@subframePo
$LN4@subframePo:

; 132  : 
; 133  :    Syn_filt(Aq, &exc[i_subfr], &synth[i_subfr], L_SUBFR,
; 134  :             mem_syn, 1);

  0016c	6a 01		 push	 1
  0016e	8b 45 34	 mov	 eax, DWORD PTR _mem_syn$[ebp]
  00171	50		 push	 eax
  00172	6a 28		 push	 40			; 00000028H
  00174	0f bf 4d 10	 movsx	 ecx, WORD PTR _i_subfr$[ebp]
  00178	8b 55 20	 mov	 edx, DWORD PTR _synth$[ebp]
  0017b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0017e	50		 push	 eax
  0017f	0f bf 4d 10	 movsx	 ecx, WORD PTR _i_subfr$[ebp]
  00183	8b 55 40	 mov	 edx, DWORD PTR _exc$[ebp]
  00186	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00189	50		 push	 eax
  0018a	8b 4d 1c	 mov	 ecx, DWORD PTR _Aq$[ebp]
  0018d	51		 push	 ecx
  0018e	e8 00 00 00 00	 call	 _Syn_filt
  00193	83 c4 18	 add	 esp, 24			; 00000018H

; 135  : 
; 136  :    for (i = L_SUBFR - M, j = 0; i < L_SUBFR; i++, j++) {

  00196	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  0019b	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0019f	33 c9		 xor	 ecx, ecx
  001a1	66 89 4d ec	 mov	 WORD PTR _j$[ebp], cx
  001a5	eb 18		 jmp	 SHORT $LN3@subframePo
$LN2@subframePo:
  001a7	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  001ab	66 83 c0 01	 add	 ax, 1
  001af	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  001b3	66 8b 4d ec	 mov	 cx, WORD PTR _j$[ebp]
  001b7	66 83 c1 01	 add	 cx, 1
  001bb	66 89 4d ec	 mov	 WORD PTR _j$[ebp], cx
$LN3@subframePo:
  001bf	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  001c3	83 f8 28	 cmp	 eax, 40			; 00000028H
  001c6	0f 8d e0 00 00
	00		 jge	 $LN1@subframePo

; 137  :        mem_err[j] = sub(speech[i_subfr + i],
; 138  :                         synth[i_subfr + i]);          move16 ();

  001cc	0f bf 45 10	 movsx	 eax, WORD PTR _i_subfr$[ebp]
  001d0	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  001d4	03 c1		 add	 eax, ecx
  001d6	8b 55 20	 mov	 edx, DWORD PTR _synth$[ebp]
  001d9	0f b7 04 42	 movzx	 eax, WORD PTR [edx+eax*2]
  001dd	50		 push	 eax
  001de	0f bf 4d 10	 movsx	 ecx, WORD PTR _i_subfr$[ebp]
  001e2	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  001e6	03 ca		 add	 ecx, edx
  001e8	8b 45 08	 mov	 eax, DWORD PTR _speech$[ebp]
  001eb	0f b7 0c 48	 movzx	 ecx, WORD PTR [eax+ecx*2]
  001ef	51		 push	 ecx
  001f0	e8 00 00 00 00	 call	 _sub
  001f5	83 c4 08	 add	 esp, 8
  001f8	0f bf 55 ec	 movsx	 edx, WORD PTR _j$[ebp]
  001fc	8b 4d 38	 mov	 ecx, DWORD PTR _mem_err$[ebp]
  001ff	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00203	e8 00 00 00 00	 call	 _move16

; 139  :       /*
; 140  :        *                      12k2  others
; 141  :        * ---------------------------------
; 142  :        * y1                    Q0      Q0
; 143  :        * gain_pit              Q14     Q14
; 144  :        *    product            Q15     Q15
; 145  :        *    shifted prod.      Q16     Q16
; 146  :        * temp                  Q0      Q0
; 147  :        *                                
; 148  :        * y2                    Q10     Q12
; 149  :        * gain_code             Q1      Q1
; 150  :        *    product            Q12     Q14
; 151  :        * kshift                 4       2
; 152  :        *    shifted prod.      Q16     Q16
; 153  :        * k                     Q0      Q0
; 154  :        * mem_w0,xn,sum         Q0      Q0
; 155  :        */
; 156  :       temp = extract_h(L_shl(L_mult(y1[i], gain_pit), 1));

  00208	6a 01		 push	 1
  0020a	0f b7 45 14	 movzx	 eax, WORD PTR _gain_pit$[ebp]
  0020e	50		 push	 eax
  0020f	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00213	8b 55 2c	 mov	 edx, DWORD PTR _y1$[ebp]
  00216	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 _L_mult
  00220	83 c4 08	 add	 esp, 8
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 _L_shl
  00229	83 c4 08	 add	 esp, 8
  0022c	50		 push	 eax
  0022d	e8 00 00 00 00	 call	 _extract_h
  00232	83 c4 04	 add	 esp, 4
  00235	66 89 45 d4	 mov	 WORD PTR _temp$[ebp], ax

; 157  :       k = extract_h(L_shl(L_mult(y2[i], gain_code), kShift));

  00239	0f b7 45 b0	 movzx	 eax, WORD PTR _kShift$[ebp]
  0023d	50		 push	 eax
  0023e	0f b7 4d 18	 movzx	 ecx, WORD PTR _gain_code$[ebp]
  00242	51		 push	 ecx
  00243	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  00247	8b 45 30	 mov	 eax, DWORD PTR _y2$[ebp]
  0024a	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  0024e	51		 push	 ecx
  0024f	e8 00 00 00 00	 call	 _L_mult
  00254	83 c4 08	 add	 esp, 8
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 _L_shl
  0025d	83 c4 08	 add	 esp, 8
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 _extract_h
  00266	83 c4 04	 add	 esp, 4
  00269	66 89 45 e0	 mov	 WORD PTR _k$[ebp], ax

; 158  :       mem_w0[j] = sub(xn[i], add(temp, k));          move16 ();

  0026d	0f b7 45 e0	 movzx	 eax, WORD PTR _k$[ebp]
  00271	50		 push	 eax
  00272	0f b7 4d d4	 movzx	 ecx, WORD PTR _temp$[ebp]
  00276	51		 push	 ecx
  00277	e8 00 00 00 00	 call	 _add
  0027c	83 c4 08	 add	 esp, 8
  0027f	0f b7 d0	 movzx	 edx, ax
  00282	52		 push	 edx
  00283	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00287	8b 4d 24	 mov	 ecx, DWORD PTR _xn$[ebp]
  0028a	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0028e	52		 push	 edx
  0028f	e8 00 00 00 00	 call	 _sub
  00294	83 c4 08	 add	 esp, 8
  00297	0f bf 4d ec	 movsx	 ecx, WORD PTR _j$[ebp]
  0029b	8b 55 3c	 mov	 edx, DWORD PTR _mem_w0$[ebp]
  0029e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002a2	e8 00 00 00 00	 call	 _move16

; 159  :    }

  002a7	e9 fb fe ff ff	 jmp	 $LN2@subframePo
$LN1@subframePo:

; 160  : 
; 161  :    return 0;

  002ac	33 c0		 xor	 eax, eax

; 162  : }

  002ae	5f		 pop	 edi
  002af	5e		 pop	 esi
  002b0	5b		 pop	 ebx
  002b1	81 c4 20 01 00
	00		 add	 esp, 288		; 00000120H
  002b7	3b ec		 cmp	 ebp, esp
  002b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002be	8b e5		 mov	 esp, ebp
  002c0	5d		 pop	 ebp
  002c1	c3		 ret	 0
_subframePostProc ENDP
_TEXT	ENDS
END
