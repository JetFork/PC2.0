; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\cbsearch.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_cbsearch_id
CONST	SEGMENT
_cbsearch_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_cbsearch
EXTRN	_code_2i40_9bits:PROC
EXTRN	_code_2i40_11bits:PROC
EXTRN	_code_3i40_14bits:PROC
EXTRN	_code_4i40_17bits:PROC
EXTRN	_code_8i40_31bits:PROC
EXTRN	_code_10i40_35bits:PROC
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_mult:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\cbsearch.c
;	COMDAT _cbsearch
_TEXT	SEGMENT
_pit_sharpTmp$ = -44					; size = 2
_temp$ = -32						; size = 2
_i$ = -20						; size = 2
_index$ = -8						; size = 2
_x$ = 8							; size = 4
_h$ = 12						; size = 4
_T0$ = 16						; size = 2
_pitch_sharp$ = 20					; size = 2
_gain_pit$ = 24						; size = 2
_res2$ = 28						; size = 4
_code$ = 32						; size = 4
_y$ = 36						; size = 4
_anap$ = 40						; size = 4
_mode$ = 44						; size = 4
_subNr$ = 48						; size = 2
_cbsearch PROC						; COMDAT

; 61   :              {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 62   :    Word16 index;
; 63   :    Word16 i, temp, pit_sharpTmp;
; 64   :    
; 65   :    /* For MR74, the pre and post CB pitch sharpening is included in the
; 66   :     * codebook search routine, while for MR122 is it not.
; 67   :     */
; 68   :    
; 69   :    test (); test (); 

  0001e	e8 00 00 00 00	 call	 _test
  00023	e8 00 00 00 00	 call	 _test

; 70   :    if ((sub (mode, MR475) == 0) || (sub (mode, MR515) == 0))

  00028	6a 00		 push	 0
  0002a	0f b7 45 2c	 movzx	 eax, WORD PTR _mode$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _sub
  00034	83 c4 08	 add	 esp, 8
  00037	0f bf c8	 movsx	 ecx, ax
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 16		 je	 SHORT $LN23@cbsearch
  0003e	6a 01		 push	 1
  00040	0f b7 45 2c	 movzx	 eax, WORD PTR _mode$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _sub
  0004a	83 c4 08	 add	 esp, 8
  0004d	0f bf c8	 movsx	 ecx, ax
  00050	85 c9		 test	 ecx, ecx
  00052	75 68		 jne	 SHORT $LN24@cbsearch
$LN23@cbsearch:

; 71   :    {   /* MR475, MR515 */ move16 ();

  00054	e8 00 00 00 00	 call	 _move16

; 72   :       *(*anap)++ = code_2i40_9bits(subNr, x, h, T0, pitch_sharp,
; 73   :                                    code, y, &index);

  00059	8d 45 f8	 lea	 eax, DWORD PTR _index$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 24	 mov	 ecx, DWORD PTR _y$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 20	 mov	 edx, DWORD PTR _code$[ebp]
  00064	52		 push	 edx
  00065	0f b7 45 14	 movzx	 eax, WORD PTR _pitch_sharp$[ebp]
  00069	50		 push	 eax
  0006a	0f b7 4d 10	 movzx	 ecx, WORD PTR _T0$[ebp]
  0006e	51		 push	 ecx
  0006f	8b 55 0c	 mov	 edx, DWORD PTR _h$[ebp]
  00072	52		 push	 edx
  00073	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00076	50		 push	 eax
  00077	0f b7 4d 30	 movzx	 ecx, WORD PTR _subNr$[ebp]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 _code_2i40_9bits
  00081	83 c4 20	 add	 esp, 32			; 00000020H
  00084	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  00087	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00089	66 89 01	 mov	 WORD PTR [ecx], ax
  0008c	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  0008f	8b 02		 mov	 eax, DWORD PTR [edx]
  00091	83 c0 02	 add	 eax, 2
  00094	8b 4d 28	 mov	 ecx, DWORD PTR _anap$[ebp]
  00097	89 01		 mov	 DWORD PTR [ecx], eax

; 74   :       *(*anap)++ = index;    /* sign index */                  move16 ();

  00099	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	66 8b 55 f8	 mov	 dx, WORD PTR _index$[ebp]
  000a2	66 89 11	 mov	 WORD PTR [ecx], dx
  000a5	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	83 c1 02	 add	 ecx, 2
  000ad	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  000b0	89 0a		 mov	 DWORD PTR [edx], ecx
  000b2	e8 00 00 00 00	 call	 _move16
  000b7	e9 2c 04 00 00	 jmp	 $LN22@cbsearch
$LN24@cbsearch:

; 75   :    }
; 76   :    else if (sub (mode, MR59) == 0)

  000bc	6a 02		 push	 2
  000be	0f b7 45 2c	 movzx	 eax, WORD PTR _mode$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _sub
  000c8	83 c4 08	 add	 esp, 8
  000cb	0f bf c8	 movsx	 ecx, ax
  000ce	85 c9		 test	 ecx, ecx
  000d0	75 68		 jne	 SHORT $LN21@cbsearch

; 77   :    {   /* MR59 */
; 78   :       test (); move16 ();

  000d2	e8 00 00 00 00	 call	 _test
  000d7	e8 00 00 00 00	 call	 _move16

; 79   :       *(*anap)++ = code_2i40_11bits(x, h, T0, pitch_sharp, code, y, &index);

  000dc	8d 45 f8	 lea	 eax, DWORD PTR _index$[ebp]
  000df	50		 push	 eax
  000e0	8b 4d 24	 mov	 ecx, DWORD PTR _y$[ebp]
  000e3	51		 push	 ecx
  000e4	8b 55 20	 mov	 edx, DWORD PTR _code$[ebp]
  000e7	52		 push	 edx
  000e8	0f b7 45 14	 movzx	 eax, WORD PTR _pitch_sharp$[ebp]
  000ec	50		 push	 eax
  000ed	0f b7 4d 10	 movzx	 ecx, WORD PTR _T0$[ebp]
  000f1	51		 push	 ecx
  000f2	8b 55 0c	 mov	 edx, DWORD PTR _h$[ebp]
  000f5	52		 push	 edx
  000f6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _code_2i40_11bits
  000ff	83 c4 1c	 add	 esp, 28			; 0000001cH
  00102	8b 4d 28	 mov	 ecx, DWORD PTR _anap$[ebp]
  00105	8b 11		 mov	 edx, DWORD PTR [ecx]
  00107	66 89 02	 mov	 WORD PTR [edx], ax
  0010a	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  0010d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010f	83 c1 02	 add	 ecx, 2
  00112	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  00115	89 0a		 mov	 DWORD PTR [edx], ecx

; 80   :       *(*anap)++ = index;    /* sign index */                  move16 ();

  00117	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  0011a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011c	66 8b 55 f8	 mov	 dx, WORD PTR _index$[ebp]
  00120	66 89 11	 mov	 WORD PTR [ecx], dx
  00123	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  00126	8b 08		 mov	 ecx, DWORD PTR [eax]
  00128	83 c1 02	 add	 ecx, 2
  0012b	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  0012e	89 0a		 mov	 DWORD PTR [edx], ecx
  00130	e8 00 00 00 00	 call	 _move16
  00135	e9 ae 03 00 00	 jmp	 $LN22@cbsearch
$LN21@cbsearch:

; 81   :    }
; 82   :    else if (sub (mode, MR67) == 0)

  0013a	6a 03		 push	 3
  0013c	0f b7 45 2c	 movzx	 eax, WORD PTR _mode$[ebp]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 _sub
  00146	83 c4 08	 add	 esp, 8
  00149	0f bf c8	 movsx	 ecx, ax
  0014c	85 c9		 test	 ecx, ecx
  0014e	75 6d		 jne	 SHORT $LN19@cbsearch

; 83   :    {   /* MR67 */
; 84   :       test (); test (); move16 ();

  00150	e8 00 00 00 00	 call	 _test
  00155	e8 00 00 00 00	 call	 _test
  0015a	e8 00 00 00 00	 call	 _move16

; 85   :       *(*anap)++ = code_3i40_14bits(x, h, T0, pitch_sharp, code, y, &index);

  0015f	8d 45 f8	 lea	 eax, DWORD PTR _index$[ebp]
  00162	50		 push	 eax
  00163	8b 4d 24	 mov	 ecx, DWORD PTR _y$[ebp]
  00166	51		 push	 ecx
  00167	8b 55 20	 mov	 edx, DWORD PTR _code$[ebp]
  0016a	52		 push	 edx
  0016b	0f b7 45 14	 movzx	 eax, WORD PTR _pitch_sharp$[ebp]
  0016f	50		 push	 eax
  00170	0f b7 4d 10	 movzx	 ecx, WORD PTR _T0$[ebp]
  00174	51		 push	 ecx
  00175	8b 55 0c	 mov	 edx, DWORD PTR _h$[ebp]
  00178	52		 push	 edx
  00179	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 _code_3i40_14bits
  00182	83 c4 1c	 add	 esp, 28			; 0000001cH
  00185	8b 4d 28	 mov	 ecx, DWORD PTR _anap$[ebp]
  00188	8b 11		 mov	 edx, DWORD PTR [ecx]
  0018a	66 89 02	 mov	 WORD PTR [edx], ax
  0018d	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  00190	8b 08		 mov	 ecx, DWORD PTR [eax]
  00192	83 c1 02	 add	 ecx, 2
  00195	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  00198	89 0a		 mov	 DWORD PTR [edx], ecx

; 86   :       *(*anap)++ = index;    /* sign index */                  move16 ();

  0019a	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  0019d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019f	66 8b 55 f8	 mov	 dx, WORD PTR _index$[ebp]
  001a3	66 89 11	 mov	 WORD PTR [ecx], dx
  001a6	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  001a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ab	83 c1 02	 add	 ecx, 2
  001ae	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  001b1	89 0a		 mov	 DWORD PTR [edx], ecx
  001b3	e8 00 00 00 00	 call	 _move16
  001b8	e9 2b 03 00 00	 jmp	 $LN22@cbsearch
$LN19@cbsearch:

; 87   :    }
; 88   :    else if (sub (mode, MR74) == 0 || sub (mode, MR795) == 0)

  001bd	6a 04		 push	 4
  001bf	0f b7 45 2c	 movzx	 eax, WORD PTR _mode$[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _sub
  001c9	83 c4 08	 add	 esp, 8
  001cc	0f bf c8	 movsx	 ecx, ax
  001cf	85 c9		 test	 ecx, ecx
  001d1	74 16		 je	 SHORT $LN16@cbsearch
  001d3	6a 05		 push	 5
  001d5	0f b7 45 2c	 movzx	 eax, WORD PTR _mode$[ebp]
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 _sub
  001df	83 c4 08	 add	 esp, 8
  001e2	0f bf c8	 movsx	 ecx, ax
  001e5	85 c9		 test	 ecx, ecx
  001e7	75 72		 jne	 SHORT $LN17@cbsearch
$LN16@cbsearch:

; 89   :    {   /* MR74, MR795 */
; 90   :       test (); test (); test (); move16 ();

  001e9	e8 00 00 00 00	 call	 _test
  001ee	e8 00 00 00 00	 call	 _test
  001f3	e8 00 00 00 00	 call	 _test
  001f8	e8 00 00 00 00	 call	 _move16

; 91   :       *(*anap)++ = code_4i40_17bits(x, h, T0, pitch_sharp, code, y, &index);

  001fd	8d 45 f8	 lea	 eax, DWORD PTR _index$[ebp]
  00200	50		 push	 eax
  00201	8b 4d 24	 mov	 ecx, DWORD PTR _y$[ebp]
  00204	51		 push	 ecx
  00205	8b 55 20	 mov	 edx, DWORD PTR _code$[ebp]
  00208	52		 push	 edx
  00209	0f b7 45 14	 movzx	 eax, WORD PTR _pitch_sharp$[ebp]
  0020d	50		 push	 eax
  0020e	0f b7 4d 10	 movzx	 ecx, WORD PTR _T0$[ebp]
  00212	51		 push	 ecx
  00213	8b 55 0c	 mov	 edx, DWORD PTR _h$[ebp]
  00216	52		 push	 edx
  00217	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 _code_4i40_17bits
  00220	83 c4 1c	 add	 esp, 28			; 0000001cH
  00223	8b 4d 28	 mov	 ecx, DWORD PTR _anap$[ebp]
  00226	8b 11		 mov	 edx, DWORD PTR [ecx]
  00228	66 89 02	 mov	 WORD PTR [edx], ax
  0022b	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  0022e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00230	83 c1 02	 add	 ecx, 2
  00233	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  00236	89 0a		 mov	 DWORD PTR [edx], ecx

; 92   :       *(*anap)++ = index;    /* sign index */                  move16 ();

  00238	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  0023b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023d	66 8b 55 f8	 mov	 dx, WORD PTR _index$[ebp]
  00241	66 89 11	 mov	 WORD PTR [ecx], dx
  00244	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  00247	8b 08		 mov	 ecx, DWORD PTR [eax]
  00249	83 c1 02	 add	 ecx, 2
  0024c	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  0024f	89 0a		 mov	 DWORD PTR [edx], ecx
  00251	e8 00 00 00 00	 call	 _move16
  00256	e9 8d 02 00 00	 jmp	 $LN22@cbsearch
$LN17@cbsearch:

; 93   :    }
; 94   :    else if (sub (mode, MR102) == 0)

  0025b	6a 06		 push	 6
  0025d	0f b7 45 2c	 movzx	 eax, WORD PTR _mode$[ebp]
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 _sub
  00267	83 c4 08	 add	 esp, 8
  0026a	0f bf c8	 movsx	 ecx, ax
  0026d	85 c9		 test	 ecx, ecx
  0026f	0f 85 3c 01 00
	00		 jne	 $LN14@cbsearch

; 95   :    {   /* MR102 */
; 96   :       test (); test (); test ();

  00275	e8 00 00 00 00	 call	 _test
  0027a	e8 00 00 00 00	 call	 _test
  0027f	e8 00 00 00 00	 call	 _test

; 97   :       /*-------------------------------------------------------------*
; 98   :        * - include pitch contribution into impulse resp. h1[]        *
; 99   :        *-------------------------------------------------------------*/
; 100  :       /* pit_sharpTmp = pit_sharp;                     */
; 101  :       /* if (pit_sharpTmp > 1.0) pit_sharpTmp = 1.0;   */
; 102  :       pit_sharpTmp = shl (pitch_sharp, 1);

  00284	6a 01		 push	 1
  00286	0f b7 45 14	 movzx	 eax, WORD PTR _pitch_sharp$[ebp]
  0028a	50		 push	 eax
  0028b	e8 00 00 00 00	 call	 _shl
  00290	83 c4 08	 add	 esp, 8
  00293	66 89 45 d4	 mov	 WORD PTR _pit_sharpTmp$[ebp], ax

; 103  :       for (i = T0; i < L_SUBFR; i++)

  00297	66 8b 45 10	 mov	 ax, WORD PTR _T0$[ebp]
  0029b	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
  0029f	eb 0c		 jmp	 SHORT $LN13@cbsearch
$LN12@cbsearch:
  002a1	66 8b 45 ec	 mov	 ax, WORD PTR _i$[ebp]
  002a5	66 83 c0 01	 add	 ax, 1
  002a9	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
$LN13@cbsearch:
  002ad	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  002b1	83 f8 28	 cmp	 eax, 40			; 00000028H
  002b4	7d 4e		 jge	 SHORT $LN11@cbsearch

; 104  :       {
; 105  :          temp = mult(h[i - T0], pit_sharpTmp);

  002b6	0f b7 45 d4	 movzx	 eax, WORD PTR _pit_sharpTmp$[ebp]
  002ba	50		 push	 eax
  002bb	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  002bf	0f bf 55 10	 movsx	 edx, WORD PTR _T0$[ebp]
  002c3	2b ca		 sub	 ecx, edx
  002c5	8b 45 0c	 mov	 eax, DWORD PTR _h$[ebp]
  002c8	0f b7 0c 48	 movzx	 ecx, WORD PTR [eax+ecx*2]
  002cc	51		 push	 ecx
  002cd	e8 00 00 00 00	 call	 _mult
  002d2	83 c4 08	 add	 esp, 8
  002d5	66 89 45 e0	 mov	 WORD PTR _temp$[ebp], ax

; 106  :          h[i] = add(h[i], temp);                               move16 ();

  002d9	0f b7 45 e0	 movzx	 eax, WORD PTR _temp$[ebp]
  002dd	50		 push	 eax
  002de	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  002e2	8b 55 0c	 mov	 edx, DWORD PTR _h$[ebp]
  002e5	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  002e9	50		 push	 eax
  002ea	e8 00 00 00 00	 call	 _add
  002ef	83 c4 08	 add	 esp, 8
  002f2	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  002f6	8b 55 0c	 mov	 edx, DWORD PTR _h$[ebp]
  002f9	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002fd	e8 00 00 00 00	 call	 _move16

; 107  :       }

  00302	eb 9d		 jmp	 SHORT $LN12@cbsearch
$LN11@cbsearch:

; 108  : 
; 109  :       /*--------------------------------------------------------------*
; 110  :        * - Innovative codebook search (find index and gain)           *
; 111  :        *--------------------------------------------------------------*/
; 112  :       code_8i40_31bits (x, res2, h, code, y, *anap);

  00304	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  00307	8b 08		 mov	 ecx, DWORD PTR [eax]
  00309	51		 push	 ecx
  0030a	8b 55 24	 mov	 edx, DWORD PTR _y$[ebp]
  0030d	52		 push	 edx
  0030e	8b 45 20	 mov	 eax, DWORD PTR _code$[ebp]
  00311	50		 push	 eax
  00312	8b 4d 0c	 mov	 ecx, DWORD PTR _h$[ebp]
  00315	51		 push	 ecx
  00316	8b 55 1c	 mov	 edx, DWORD PTR _res2$[ebp]
  00319	52		 push	 edx
  0031a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0031d	50		 push	 eax
  0031e	e8 00 00 00 00	 call	 _code_8i40_31bits
  00323	83 c4 18	 add	 esp, 24			; 00000018H

; 113  :       *anap += 7;                                              add(0,0);

  00326	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  00329	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032b	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0032e	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  00331	89 0a		 mov	 DWORD PTR [edx], ecx
  00333	6a 00		 push	 0
  00335	6a 00		 push	 0
  00337	e8 00 00 00 00	 call	 _add
  0033c	83 c4 08	 add	 esp, 8

; 114  : 
; 115  :       /*-------------------------------------------------------*
; 116  :        * - Add the pitch contribution to code[].               *
; 117  :        *-------------------------------------------------------*/ 
; 118  :       for (i = T0; i < L_SUBFR; i++)

  0033f	66 8b 45 10	 mov	 ax, WORD PTR _T0$[ebp]
  00343	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
  00347	eb 0c		 jmp	 SHORT $LN10@cbsearch
$LN9@cbsearch:
  00349	66 8b 45 ec	 mov	 ax, WORD PTR _i$[ebp]
  0034d	66 83 c0 01	 add	 ax, 1
  00351	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
$LN10@cbsearch:
  00355	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  00359	83 f8 28	 cmp	 eax, 40			; 00000028H
  0035c	7d 4e		 jge	 SHORT $LN8@cbsearch

; 119  :       {
; 120  :          temp = mult (code[i - T0], pit_sharpTmp);

  0035e	0f b7 45 d4	 movzx	 eax, WORD PTR _pit_sharpTmp$[ebp]
  00362	50		 push	 eax
  00363	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  00367	0f bf 55 10	 movsx	 edx, WORD PTR _T0$[ebp]
  0036b	2b ca		 sub	 ecx, edx
  0036d	8b 45 20	 mov	 eax, DWORD PTR _code$[ebp]
  00370	0f b7 0c 48	 movzx	 ecx, WORD PTR [eax+ecx*2]
  00374	51		 push	 ecx
  00375	e8 00 00 00 00	 call	 _mult
  0037a	83 c4 08	 add	 esp, 8
  0037d	66 89 45 e0	 mov	 WORD PTR _temp$[ebp], ax

; 121  :          code[i] = add (code[i], temp);                        move16 ();

  00381	0f b7 45 e0	 movzx	 eax, WORD PTR _temp$[ebp]
  00385	50		 push	 eax
  00386	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  0038a	8b 55 20	 mov	 edx, DWORD PTR _code$[ebp]
  0038d	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00391	50		 push	 eax
  00392	e8 00 00 00 00	 call	 _add
  00397	83 c4 08	 add	 esp, 8
  0039a	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  0039e	8b 55 20	 mov	 edx, DWORD PTR _code$[ebp]
  003a1	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  003a5	e8 00 00 00 00	 call	 _move16

; 122  :       }

  003aa	eb 9d		 jmp	 SHORT $LN9@cbsearch
$LN8@cbsearch:

; 123  :    }
; 124  :    else

  003ac	e9 37 01 00 00	 jmp	 $LN22@cbsearch
$LN14@cbsearch:

; 125  :    {  /* MR122 */
; 126  :       /*-------------------------------------------------------------*
; 127  :        * - include pitch contribution into impulse resp. h1[]        *
; 128  :        *-------------------------------------------------------------*/
; 129  :       test (); test (); test ();

  003b1	e8 00 00 00 00	 call	 _test
  003b6	e8 00 00 00 00	 call	 _test
  003bb	e8 00 00 00 00	 call	 _test

; 130  :       
; 131  :       /* pit_sharpTmp = gain_pit;                      */
; 132  :       /* if (pit_sharpTmp > 1.0) pit_sharpTmp = 1.0;   */
; 133  :       pit_sharpTmp = shl (gain_pit, 1);

  003c0	6a 01		 push	 1
  003c2	0f b7 45 18	 movzx	 eax, WORD PTR _gain_pit$[ebp]
  003c6	50		 push	 eax
  003c7	e8 00 00 00 00	 call	 _shl
  003cc	83 c4 08	 add	 esp, 8
  003cf	66 89 45 d4	 mov	 WORD PTR _pit_sharpTmp$[ebp], ax

; 134  :       
; 135  :       for (i = T0; i < L_SUBFR; i++)

  003d3	66 8b 45 10	 mov	 ax, WORD PTR _T0$[ebp]
  003d7	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
  003db	eb 0c		 jmp	 SHORT $LN6@cbsearch
$LN5@cbsearch:
  003dd	66 8b 45 ec	 mov	 ax, WORD PTR _i$[ebp]
  003e1	66 83 c0 01	 add	 ax, 1
  003e5	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
$LN6@cbsearch:
  003e9	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  003ed	83 f8 28	 cmp	 eax, 40			; 00000028H
  003f0	7d 4e		 jge	 SHORT $LN4@cbsearch

; 136  :       {
; 137  :          temp = mult(h[i - T0], pit_sharpTmp);

  003f2	0f b7 45 d4	 movzx	 eax, WORD PTR _pit_sharpTmp$[ebp]
  003f6	50		 push	 eax
  003f7	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  003fb	0f bf 55 10	 movsx	 edx, WORD PTR _T0$[ebp]
  003ff	2b ca		 sub	 ecx, edx
  00401	8b 45 0c	 mov	 eax, DWORD PTR _h$[ebp]
  00404	0f b7 0c 48	 movzx	 ecx, WORD PTR [eax+ecx*2]
  00408	51		 push	 ecx
  00409	e8 00 00 00 00	 call	 _mult
  0040e	83 c4 08	 add	 esp, 8
  00411	66 89 45 e0	 mov	 WORD PTR _temp$[ebp], ax

; 138  :          h[i] = add(h[i], temp);                               move16 ();

  00415	0f b7 45 e0	 movzx	 eax, WORD PTR _temp$[ebp]
  00419	50		 push	 eax
  0041a	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  0041e	8b 55 0c	 mov	 edx, DWORD PTR _h$[ebp]
  00421	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00425	50		 push	 eax
  00426	e8 00 00 00 00	 call	 _add
  0042b	83 c4 08	 add	 esp, 8
  0042e	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  00432	8b 55 0c	 mov	 edx, DWORD PTR _h$[ebp]
  00435	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00439	e8 00 00 00 00	 call	 _move16

; 139  :       }

  0043e	eb 9d		 jmp	 SHORT $LN5@cbsearch
$LN4@cbsearch:

; 140  :       /*--------------------------------------------------------------*
; 141  :        * - Innovative codebook search (find index and gain)           *
; 142  :        *--------------------------------------------------------------*/
; 143  :       
; 144  :       code_10i40_35bits (x, res2, h, code, y, *anap);

  00440	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  00443	8b 08		 mov	 ecx, DWORD PTR [eax]
  00445	51		 push	 ecx
  00446	8b 55 24	 mov	 edx, DWORD PTR _y$[ebp]
  00449	52		 push	 edx
  0044a	8b 45 20	 mov	 eax, DWORD PTR _code$[ebp]
  0044d	50		 push	 eax
  0044e	8b 4d 0c	 mov	 ecx, DWORD PTR _h$[ebp]
  00451	51		 push	 ecx
  00452	8b 55 1c	 mov	 edx, DWORD PTR _res2$[ebp]
  00455	52		 push	 edx
  00456	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00459	50		 push	 eax
  0045a	e8 00 00 00 00	 call	 _code_10i40_35bits
  0045f	83 c4 18	 add	 esp, 24			; 00000018H

; 145  :       *anap += 10;      	                                   add(0,0);

  00462	8b 45 28	 mov	 eax, DWORD PTR _anap$[ebp]
  00465	8b 08		 mov	 ecx, DWORD PTR [eax]
  00467	83 c1 14	 add	 ecx, 20			; 00000014H
  0046a	8b 55 28	 mov	 edx, DWORD PTR _anap$[ebp]
  0046d	89 0a		 mov	 DWORD PTR [edx], ecx
  0046f	6a 00		 push	 0
  00471	6a 00		 push	 0
  00473	e8 00 00 00 00	 call	 _add
  00478	83 c4 08	 add	 esp, 8

; 146  :       
; 147  :       /*-------------------------------------------------------*
; 148  :        * - Add the pitch contribution to code[].               *
; 149  :        *-------------------------------------------------------*/ 
; 150  :       for (i = T0; i < L_SUBFR; i++)

  0047b	66 8b 45 10	 mov	 ax, WORD PTR _T0$[ebp]
  0047f	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
  00483	eb 0c		 jmp	 SHORT $LN3@cbsearch
$LN2@cbsearch:
  00485	66 8b 45 ec	 mov	 ax, WORD PTR _i$[ebp]
  00489	66 83 c0 01	 add	 ax, 1
  0048d	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
$LN3@cbsearch:
  00491	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  00495	83 f8 28	 cmp	 eax, 40			; 00000028H
  00498	7d 4e		 jge	 SHORT $LN22@cbsearch

; 151  :       {
; 152  :          temp = mult (code[i - T0], pit_sharpTmp);

  0049a	0f b7 45 d4	 movzx	 eax, WORD PTR _pit_sharpTmp$[ebp]
  0049e	50		 push	 eax
  0049f	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  004a3	0f bf 55 10	 movsx	 edx, WORD PTR _T0$[ebp]
  004a7	2b ca		 sub	 ecx, edx
  004a9	8b 45 20	 mov	 eax, DWORD PTR _code$[ebp]
  004ac	0f b7 0c 48	 movzx	 ecx, WORD PTR [eax+ecx*2]
  004b0	51		 push	 ecx
  004b1	e8 00 00 00 00	 call	 _mult
  004b6	83 c4 08	 add	 esp, 8
  004b9	66 89 45 e0	 mov	 WORD PTR _temp$[ebp], ax

; 153  :          code[i] = add (code[i], temp);                        move16 ();

  004bd	0f b7 45 e0	 movzx	 eax, WORD PTR _temp$[ebp]
  004c1	50		 push	 eax
  004c2	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  004c6	8b 55 20	 mov	 edx, DWORD PTR _code$[ebp]
  004c9	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  004cd	50		 push	 eax
  004ce	e8 00 00 00 00	 call	 _add
  004d3	83 c4 08	 add	 esp, 8
  004d6	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  004da	8b 55 20	 mov	 edx, DWORD PTR _code$[ebp]
  004dd	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  004e1	e8 00 00 00 00	 call	 _move16

; 154  :       }     

  004e6	eb 9d		 jmp	 SHORT $LN2@cbsearch
$LN22@cbsearch:

; 155  :    }
; 156  : 
; 157  :    return 0;

  004e8	33 c0		 xor	 eax, eax

; 158  : }

  004ea	52		 push	 edx
  004eb	8b cd		 mov	 ecx, ebp
  004ed	50		 push	 eax
  004ee	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN29@cbsearch
  004f4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004f9	58		 pop	 eax
  004fa	5a		 pop	 edx
  004fb	5f		 pop	 edi
  004fc	5e		 pop	 esi
  004fd	5b		 pop	 ebx
  004fe	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00504	3b ec		 cmp	 ebp, esp
  00506	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0050b	8b e5		 mov	 esp, ebp
  0050d	5d		 pop	 ebp
  0050e	c3		 ret	 0
  0050f	90		 npad	 1
$LN29@cbsearch:
  00510	01 00 00 00	 DD	 1
  00514	00 00 00 00	 DD	 $LN28@cbsearch
$LN28@cbsearch:
  00518	f8 ff ff ff	 DD	 -8			; fffffff8H
  0051c	02 00 00 00	 DD	 2
  00520	00 00 00 00	 DD	 $LN27@cbsearch
$LN27@cbsearch:
  00524	69		 DB	 105			; 00000069H
  00525	6e		 DB	 110			; 0000006eH
  00526	64		 DB	 100			; 00000064H
  00527	65		 DB	 101			; 00000065H
  00528	78		 DB	 120			; 00000078H
  00529	00		 DB	 0
_cbsearch ENDP
_TEXT	ENDS
END
