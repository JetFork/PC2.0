; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\copy.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_copy_id
CONST	SEGMENT
_copy_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Copy
EXTRN	_move16:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\copy.c
;	COMDAT _Copy
_TEXT	SEGMENT
_i$ = -8						; size = 2
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_L$ = 16						; size = 2
_Copy	PROC						; COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 58   :     Word16 i;
; 59   : 
; 60   :     for (i = 0; i < L; i++)

  0001e	33 c0		 xor	 eax, eax
  00020	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00024	eb 0c		 jmp	 SHORT $LN3@Copy
$LN2@Copy:
  00026	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0002a	66 83 c0 01	 add	 ax, 1
  0002e	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@Copy:
  00032	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00036	0f bf 4d 10	 movsx	 ecx, WORD PTR _L$[ebp]
  0003a	3b c1		 cmp	 eax, ecx
  0003c	7d 1d		 jge	 SHORT $LN4@Copy

; 61   :     {
; 62   :         y[i] = x[i];            move16 (); 

  0003e	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00042	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00046	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00049	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0004c	66 8b 04 46	 mov	 ax, WORD PTR [esi+eax*2]
  00050	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00054	e8 00 00 00 00	 call	 _move16

; 63   :     }

  00059	eb cb		 jmp	 SHORT $LN2@Copy
$LN4@Copy:

; 64   : 
; 65   :     return;
; 66   : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_Copy	ENDP
_TEXT	ENDS
END
