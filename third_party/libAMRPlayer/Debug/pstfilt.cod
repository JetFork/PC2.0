; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\pstfilt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_pstfilt_id
CONST	SEGMENT
_pstfilt_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_gamma3_MR122 DW 0599aH
	DW	03eb9H
	DW	02be8H
	DW	01ebcH
	DW	01584H
	DW	0f10H
	DW	0a8bH
	DW	0761H
	DW	052aH
	DW	039dH
_gamma3	DW	04666H
	DW	026b8H
	DW	0154bH
	DW	0bb6H
	DW	0671H
	DW	038bH
	DW	01f3H
	DW	0112H
	DW	097H
	DW	053H
_gamma4_MR122 DW 06000H
	DW	04800H
	DW	03600H
	DW	02880H
	DW	01e60H
	DW	016c8H
	DW	01116H
	DW	0cd1H
	DW	099dH
	DW	0736H
_gamma4	DW	0599aH
	DW	03eb9H
	DW	02be8H
	DW	01ebcH
	DW	01584H
	DW	0f10H
	DW	0a8bH
	DW	0761H
	DW	052aH
	DW	039dH
CONST	ENDS
PUBLIC	_Post_Filter_init
PUBLIC	_Post_Filter_reset
PUBLIC	_Post_Filter_exit
PUBLIC	_Post_Filter
PUBLIC	??_C@_0CF@BGIDGKEK@Post_Filter_init?3?5invalid?5parame@ ; `string'
PUBLIC	??_C@_0DC@EBNJDLEA@Post_Filter_init?3?5can?5not?5malloc@ ; `string'
PUBLIC	??_C@_0CG@ILBBKIP@Post_Filter_reset?3?5invalid?5param@ ; `string'
EXTRN	_preemphasis_init:PROC
EXTRN	_preemphasis_reset:PROC
EXTRN	_preemphasis_exit:PROC
EXTRN	_preemphasis:PROC
EXTRN	_agc_init:PROC
EXTRN	_agc_reset:PROC
EXTRN	_agc_exit:PROC
EXTRN	_agc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	_sub:PROC
EXTRN	_mult:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_h:PROC
EXTRN	_L_mac:PROC
EXTRN	_div_s:PROC
EXTRN	_Set_zero:PROC
EXTRN	_Weight_Ai:PROC
EXTRN	_Residu:PROC
EXTRN	_Copy:PROC
EXTRN	_Syn_filt:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CG@ILBBKIP@Post_Filter_reset?3?5invalid?5param@
CONST	SEGMENT
??_C@_0CG@ILBBKIP@Post_Filter_reset?3?5invalid?5param@ DB 'Post_Filter_re'
	DB	'set: invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EBNJDLEA@Post_Filter_init?3?5can?5not?5malloc@
CONST	SEGMENT
??_C@_0DC@EBNJDLEA@Post_Filter_init?3?5can?5not?5malloc@ DB 'Post_Filter_'
	DB	'init: can not malloc state structure', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BGIDGKEK@Post_Filter_init?3?5invalid?5parame@
CONST	SEGMENT
??_C@_0CF@BGIDGKEK@Post_Filter_init?3?5invalid?5parame@ DB 'Post_Filter_i'
	DB	'nit: invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pstfilt.c
;	COMDAT _Post_Filter
_TEXT	SEGMENT
_syn_work$ = -200					; size = 4
_L_tmp$ = -188						; size = 4
_temp2$ = -176						; size = 2
_temp1$ = -164						; size = 2
_i$ = -152						; size = 2
_h$ = -140						; size = 44
_i_subfr$ = -88						; size = 2
_Az$ = -76						; size = 4
_Ap4$ = -64						; size = 22
_Ap3$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_st$ = 8						; size = 4
_mode$ = 12						; size = 4
_syn$ = 16						; size = 4
_Az_4$ = 20						; size = 4
_Post_Filter PROC					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 74 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-396]
  00012	b9 63 00 00 00	 mov	 ecx, 99			; 00000063H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 189  :     /*-------------------------------------------------------------------*
; 190  :      *           Declaration of parameters                               *
; 191  :      *-------------------------------------------------------------------*/
; 192  : 
; 193  :     Word16 Ap3[MP1], Ap4[MP1];  /* bandwidth expanded LP parameters */
; 194  :     Word16 *Az;                 /* pointer to Az_4:                 */
; 195  :                                 /*  LPC parameters in each subframe */
; 196  :     Word16 i_subfr;             /* index for beginning of subframe  */
; 197  :     Word16 h[L_H];
; 198  : 
; 199  :     Word16 i;
; 200  :     Word16 temp1, temp2;
; 201  :     Word32 L_tmp;
; 202  :     Word16 *syn_work = &st->synth_buf[M]; move16 ();

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	6b c8 0a	 imul	 ecx, eax, 10
  00030	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00033	8d 44 0a 6c	 lea	 eax, DWORD PTR [edx+ecx+108]
  00037	89 85 38 ff ff
	ff		 mov	 DWORD PTR _syn_work$[ebp], eax
  0003d	e8 00 00 00 00	 call	 _move16

; 203  :     
; 204  : 
; 205  :     /*-----------------------------------------------------*
; 206  :      * Post filtering                                      *
; 207  :      *-----------------------------------------------------*/
; 208  : 
; 209  :     Copy (syn, syn_work , L_FRAME);

  00042	68 a0 00 00 00	 push	 160			; 000000a0H
  00047	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _syn_work$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 10	 mov	 ecx, DWORD PTR _syn$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _Copy
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 210  : 
; 211  :     Az = Az_4;

  0005a	8b 45 14	 mov	 eax, DWORD PTR _Az_4$[ebp]
  0005d	89 45 b4	 mov	 DWORD PTR _Az$[ebp], eax

; 212  : 
; 213  :     for (i_subfr = 0; i_subfr < L_FRAME; i_subfr += L_SUBFR)

  00060	33 c0		 xor	 eax, eax
  00062	66 89 45 a8	 mov	 WORD PTR _i_subfr$[ebp], ax
  00066	eb 0b		 jmp	 SHORT $LN14@Post_Filte
$LN13@Post_Filte:
  00068	0f bf 45 a8	 movsx	 eax, WORD PTR _i_subfr$[ebp]
  0006c	83 c0 28	 add	 eax, 40			; 00000028H
  0006f	66 89 45 a8	 mov	 WORD PTR _i_subfr$[ebp], ax
$LN14@Post_Filte:
  00073	0f bf 45 a8	 movsx	 eax, WORD PTR _i_subfr$[ebp]
  00077	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  0007c	0f 8d 36 03 00
	00		 jge	 $LN12@Post_Filte

; 214  :     {
; 215  :        /* Find weighted filter coefficients Ap3[] and ap[4] */
; 216  : 
; 217  :        test (); test ();

  00082	e8 00 00 00 00	 call	 _test
  00087	e8 00 00 00 00	 call	 _test

; 218  :        if (sub(mode, MR122) == 0 || sub(mode, MR102) == 0)

  0008c	6a 07		 push	 7
  0008e	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _sub
  00098	83 c4 08	 add	 esp, 8
  0009b	0f bf c8	 movsx	 ecx, ax
  0009e	85 c9		 test	 ecx, ecx
  000a0	74 16		 je	 SHORT $LN10@Post_Filte
  000a2	6a 06		 push	 6
  000a4	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _sub
  000ae	83 c4 08	 add	 esp, 8
  000b1	0f bf c8	 movsx	 ecx, ax
  000b4	85 c9		 test	 ecx, ecx
  000b6	75 2c		 jne	 SHORT $LN11@Post_Filte
$LN10@Post_Filte:

; 219  :        {
; 220  :           Weight_Ai (Az, gamma3_MR122, Ap3);

  000b8	8d 45 e0	 lea	 eax, DWORD PTR _Ap3$[ebp]
  000bb	50		 push	 eax
  000bc	68 00 00 00 00	 push	 OFFSET _gamma3_MR122
  000c1	8b 4d b4	 mov	 ecx, DWORD PTR _Az$[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 _Weight_Ai
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 221  :           Weight_Ai (Az, gamma4_MR122, Ap4);

  000cd	8d 45 c0	 lea	 eax, DWORD PTR _Ap4$[ebp]
  000d0	50		 push	 eax
  000d1	68 00 00 00 00	 push	 OFFSET _gamma4_MR122
  000d6	8b 4d b4	 mov	 ecx, DWORD PTR _Az$[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 _Weight_Ai
  000df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 222  :        }
; 223  :        else

  000e2	eb 2a		 jmp	 SHORT $LN9@Post_Filte
$LN11@Post_Filte:

; 224  :        {
; 225  :           Weight_Ai (Az, gamma3, Ap3);

  000e4	8d 45 e0	 lea	 eax, DWORD PTR _Ap3$[ebp]
  000e7	50		 push	 eax
  000e8	68 00 00 00 00	 push	 OFFSET _gamma3
  000ed	8b 4d b4	 mov	 ecx, DWORD PTR _Az$[ebp]
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 _Weight_Ai
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 226  :           Weight_Ai (Az, gamma4, Ap4);

  000f9	8d 45 c0	 lea	 eax, DWORD PTR _Ap4$[ebp]
  000fc	50		 push	 eax
  000fd	68 00 00 00 00	 push	 OFFSET _gamma4
  00102	8b 4d b4	 mov	 ecx, DWORD PTR _Az$[ebp]
  00105	51		 push	 ecx
  00106	e8 00 00 00 00	 call	 _Weight_Ai
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@Post_Filte:

; 227  :        }
; 228  :        
; 229  :        /* filtering of synthesis speech by A(z/0.7) to find res2[] */
; 230  :        
; 231  :        Residu (Ap3, &syn_work[i_subfr], st->res2, L_SUBFR);

  0010e	6a 28		 push	 40			; 00000028H
  00110	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00113	50		 push	 eax
  00114	0f bf 4d a8	 movsx	 ecx, WORD PTR _i_subfr$[ebp]
  00118	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _syn_work$[ebp]
  0011e	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00121	50		 push	 eax
  00122	8d 4d e0	 lea	 ecx, DWORD PTR _Ap3$[ebp]
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 _Residu
  0012b	83 c4 10	 add	 esp, 16			; 00000010H

; 232  :        
; 233  :        /* tilt compensation filter */
; 234  :        
; 235  :        /* impulse response of A(z/0.7)/A(z/0.75) */
; 236  : 
; 237  :        Copy (Ap3, h, M + 1);

  0012e	6a 0b		 push	 11			; 0000000bH
  00130	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _h$[ebp]
  00136	50		 push	 eax
  00137	8d 4d e0	 lea	 ecx, DWORD PTR _Ap3$[ebp]
  0013a	51		 push	 ecx
  0013b	e8 00 00 00 00	 call	 _Copy
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH

; 238  :        Set_zero (&h[M + 1], L_H - M - 1);

  00143	6a 0b		 push	 11			; 0000000bH
  00145	b8 02 00 00 00	 mov	 eax, 2
  0014a	6b c8 0b	 imul	 ecx, eax, 11
  0014d	8d 94 0d 74 ff
	ff ff		 lea	 edx, DWORD PTR _h$[ebp+ecx]
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 _Set_zero
  0015a	83 c4 08	 add	 esp, 8

; 239  :        Syn_filt (Ap4, h, h, L_H, &h[M + 1], 0);

  0015d	6a 00		 push	 0
  0015f	b8 02 00 00 00	 mov	 eax, 2
  00164	6b c8 0b	 imul	 ecx, eax, 11
  00167	8d 94 0d 74 ff
	ff ff		 lea	 edx, DWORD PTR _h$[ebp+ecx]
  0016e	52		 push	 edx
  0016f	6a 16		 push	 22			; 00000016H
  00171	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _h$[ebp]
  00177	50		 push	 eax
  00178	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _h$[ebp]
  0017e	51		 push	 ecx
  0017f	8d 55 c0	 lea	 edx, DWORD PTR _Ap4$[ebp]
  00182	52		 push	 edx
  00183	e8 00 00 00 00	 call	 _Syn_filt
  00188	83 c4 18	 add	 esp, 24			; 00000018H

; 240  :         
; 241  :        /* 1st correlation of h[] */
; 242  :        
; 243  :        L_tmp = L_mult (h[0], h[0]);

  0018b	b8 02 00 00 00	 mov	 eax, 2
  00190	6b c8 00	 imul	 ecx, eax, 0
  00193	0f b7 94 0d 74
	ff ff ff	 movzx	 edx, WORD PTR _h$[ebp+ecx]
  0019b	52		 push	 edx
  0019c	b8 02 00 00 00	 mov	 eax, 2
  001a1	6b c8 00	 imul	 ecx, eax, 0
  001a4	0f b7 94 0d 74
	ff ff ff	 movzx	 edx, WORD PTR _h$[ebp+ecx]
  001ac	52		 push	 edx
  001ad	e8 00 00 00 00	 call	 _L_mult
  001b2	83 c4 08	 add	 esp, 8
  001b5	89 85 44 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 244  :        for (i = 1; i < L_H; i++)

  001bb	b8 01 00 00 00	 mov	 eax, 1
  001c0	66 89 85 68 ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
  001c7	eb 12		 jmp	 SHORT $LN8@Post_Filte
$LN7@Post_Filte:
  001c9	66 8b 85 68 ff
	ff ff		 mov	 ax, WORD PTR _i$[ebp]
  001d0	66 83 c0 01	 add	 ax, 1
  001d4	66 89 85 68 ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
$LN8@Post_Filte:
  001db	0f bf 85 68 ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  001e2	83 f8 16	 cmp	 eax, 22			; 00000016H
  001e5	7d 37		 jge	 SHORT $LN6@Post_Filte

; 245  :        {
; 246  :           L_tmp = L_mac (L_tmp, h[i], h[i]);

  001e7	0f bf 85 68 ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  001ee	0f b7 8c 45 74
	ff ff ff	 movzx	 ecx, WORD PTR _h$[ebp+eax*2]
  001f6	51		 push	 ecx
  001f7	0f bf 95 68 ff
	ff ff		 movsx	 edx, WORD PTR _i$[ebp]
  001fe	0f b7 84 55 74
	ff ff ff	 movzx	 eax, WORD PTR _h$[ebp+edx*2]
  00206	50		 push	 eax
  00207	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  0020d	51		 push	 ecx
  0020e	e8 00 00 00 00	 call	 _L_mac
  00213	83 c4 0c	 add	 esp, 12			; 0000000cH
  00216	89 85 44 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 247  :        }

  0021c	eb ab		 jmp	 SHORT $LN7@Post_Filte
$LN6@Post_Filte:

; 248  :        temp1 = extract_h (L_tmp);

  0021e	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _L_tmp$[ebp]
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 _extract_h
  0022a	83 c4 04	 add	 esp, 4
  0022d	66 89 85 5c ff
	ff ff		 mov	 WORD PTR _temp1$[ebp], ax

; 249  :        
; 250  :        L_tmp = L_mult (h[0], h[1]);

  00234	b8 02 00 00 00	 mov	 eax, 2
  00239	c1 e0 00	 shl	 eax, 0
  0023c	0f b7 8c 05 74
	ff ff ff	 movzx	 ecx, WORD PTR _h$[ebp+eax]
  00244	51		 push	 ecx
  00245	ba 02 00 00 00	 mov	 edx, 2
  0024a	6b c2 00	 imul	 eax, edx, 0
  0024d	0f b7 8c 05 74
	ff ff ff	 movzx	 ecx, WORD PTR _h$[ebp+eax]
  00255	51		 push	 ecx
  00256	e8 00 00 00 00	 call	 _L_mult
  0025b	83 c4 08	 add	 esp, 8
  0025e	89 85 44 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 251  :        for (i = 1; i < L_H - 1; i++)

  00264	b8 01 00 00 00	 mov	 eax, 1
  00269	66 89 85 68 ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
  00270	eb 12		 jmp	 SHORT $LN5@Post_Filte
$LN4@Post_Filte:
  00272	66 8b 85 68 ff
	ff ff		 mov	 ax, WORD PTR _i$[ebp]
  00279	66 83 c0 01	 add	 ax, 1
  0027d	66 89 85 68 ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
$LN5@Post_Filte:
  00284	0f bf 85 68 ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  0028b	83 f8 15	 cmp	 eax, 21			; 00000015H
  0028e	7d 37		 jge	 SHORT $LN3@Post_Filte

; 252  :        {
; 253  :           L_tmp = L_mac (L_tmp, h[i], h[i + 1]);

  00290	0f bf 85 68 ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  00297	0f b7 8c 45 76
	ff ff ff	 movzx	 ecx, WORD PTR _h$[ebp+eax*2+2]
  0029f	51		 push	 ecx
  002a0	0f bf 95 68 ff
	ff ff		 movsx	 edx, WORD PTR _i$[ebp]
  002a7	0f b7 84 55 74
	ff ff ff	 movzx	 eax, WORD PTR _h$[ebp+edx*2]
  002af	50		 push	 eax
  002b0	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  002b6	51		 push	 ecx
  002b7	e8 00 00 00 00	 call	 _L_mac
  002bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  002bf	89 85 44 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 254  :        }

  002c5	eb ab		 jmp	 SHORT $LN4@Post_Filte
$LN3@Post_Filte:

; 255  :        temp2 = extract_h (L_tmp);

  002c7	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _L_tmp$[ebp]
  002cd	50		 push	 eax
  002ce	e8 00 00 00 00	 call	 _extract_h
  002d3	83 c4 04	 add	 esp, 4
  002d6	66 89 85 50 ff
	ff ff		 mov	 WORD PTR _temp2$[ebp], ax

; 256  :        
; 257  :        test (); 

  002dd	e8 00 00 00 00	 call	 _test

; 258  :        if (temp2 <= 0)

  002e2	0f bf 85 50 ff
	ff ff		 movsx	 eax, WORD PTR _temp2$[ebp]
  002e9	85 c0		 test	 eax, eax
  002eb	7f 10		 jg	 SHORT $LN2@Post_Filte

; 259  :        {
; 260  :           temp2 = 0;          move16 (); 

  002ed	33 c0		 xor	 eax, eax
  002ef	66 89 85 50 ff
	ff ff		 mov	 WORD PTR _temp2$[ebp], ax
  002f6	e8 00 00 00 00	 call	 _move16

; 261  :        }
; 262  :        else

  002fb	eb 3b		 jmp	 SHORT $LN1@Post_Filte
$LN2@Post_Filte:

; 263  :        {
; 264  :           temp2 = mult (temp2, MU);

  002fd	68 66 66 00 00	 push	 26214			; 00006666H
  00302	0f b7 85 50 ff
	ff ff		 movzx	 eax, WORD PTR _temp2$[ebp]
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 _mult
  0030f	83 c4 08	 add	 esp, 8
  00312	66 89 85 50 ff
	ff ff		 mov	 WORD PTR _temp2$[ebp], ax

; 265  :           temp2 = div_s (temp2, temp1);

  00319	0f b7 85 5c ff
	ff ff		 movzx	 eax, WORD PTR _temp1$[ebp]
  00320	50		 push	 eax
  00321	0f b7 8d 50 ff
	ff ff		 movzx	 ecx, WORD PTR _temp2$[ebp]
  00328	51		 push	 ecx
  00329	e8 00 00 00 00	 call	 _div_s
  0032e	83 c4 08	 add	 esp, 8
  00331	66 89 85 50 ff
	ff ff		 mov	 WORD PTR _temp2$[ebp], ax
$LN1@Post_Filte:

; 266  :        }
; 267  :        
; 268  :        preemphasis (st->preemph_state, st->res2, temp2, L_SUBFR);

  00338	6a 28		 push	 40			; 00000028H
  0033a	0f b7 85 50 ff
	ff ff		 movzx	 eax, WORD PTR _temp2$[ebp]
  00341	50		 push	 eax
  00342	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00345	51		 push	 ecx
  00346	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00349	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0034c	50		 push	 eax
  0034d	e8 00 00 00 00	 call	 _preemphasis
  00352	83 c4 10	 add	 esp, 16			; 00000010H

; 269  :        
; 270  :        /* filtering through  1/A(z/0.75) */
; 271  :        
; 272  :        Syn_filt (Ap4, st->res2, &syn[i_subfr], L_SUBFR, st->mem_syn_pst, 1);

  00355	6a 01		 push	 1
  00357	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0035a	83 c0 50	 add	 eax, 80			; 00000050H
  0035d	50		 push	 eax
  0035e	6a 28		 push	 40			; 00000028H
  00360	0f bf 4d a8	 movsx	 ecx, WORD PTR _i_subfr$[ebp]
  00364	8b 55 10	 mov	 edx, DWORD PTR _syn$[ebp]
  00367	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0036a	50		 push	 eax
  0036b	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0036e	51		 push	 ecx
  0036f	8d 55 c0	 lea	 edx, DWORD PTR _Ap4$[ebp]
  00372	52		 push	 edx
  00373	e8 00 00 00 00	 call	 _Syn_filt
  00378	83 c4 18	 add	 esp, 24			; 00000018H

; 273  :        
; 274  :        /* scale output to input */
; 275  : 
; 276  :        agc (st->agc_state, &syn_work[i_subfr], &syn[i_subfr],
; 277  :             AGC_FAC, L_SUBFR);

  0037b	6a 28		 push	 40			; 00000028H
  0037d	68 33 73 00 00	 push	 29491			; 00007333H
  00382	0f bf 45 a8	 movsx	 eax, WORD PTR _i_subfr$[ebp]
  00386	8b 4d 10	 mov	 ecx, DWORD PTR _syn$[ebp]
  00389	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0038c	52		 push	 edx
  0038d	0f bf 45 a8	 movsx	 eax, WORD PTR _i_subfr$[ebp]
  00391	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _syn_work$[ebp]
  00397	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0039a	52		 push	 edx
  0039b	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0039e	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  003a1	51		 push	 ecx
  003a2	e8 00 00 00 00	 call	 _agc
  003a7	83 c4 14	 add	 esp, 20			; 00000014H

; 278  :        
; 279  :        Az += MP1;

  003aa	8b 45 b4	 mov	 eax, DWORD PTR _Az$[ebp]
  003ad	83 c0 16	 add	 eax, 22			; 00000016H
  003b0	89 45 b4	 mov	 DWORD PTR _Az$[ebp], eax

; 280  :     }

  003b3	e9 b0 fc ff ff	 jmp	 $LN13@Post_Filte
$LN12@Post_Filte:

; 281  :     
; 282  :     /* update syn_work[] buffer */
; 283  :     
; 284  :     Copy (&syn_work[L_FRAME - M], &syn_work[-M], M);

  003b8	6a 0a		 push	 10			; 0000000aH
  003ba	b8 02 00 00 00	 mov	 eax, 2
  003bf	6b c8 f6	 imul	 ecx, eax, -10
  003c2	03 8d 38 ff ff
	ff		 add	 ecx, DWORD PTR _syn_work$[ebp]
  003c8	51		 push	 ecx
  003c9	ba 02 00 00 00	 mov	 edx, 2
  003ce	69 c2 96 00 00
	00		 imul	 eax, edx, 150
  003d4	03 85 38 ff ff
	ff		 add	 eax, DWORD PTR _syn_work$[ebp]
  003da	50		 push	 eax
  003db	e8 00 00 00 00	 call	 _Copy
  003e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 285  :     
; 286  :     return 0;

  003e3	33 c0		 xor	 eax, eax

; 287  : }

  003e5	52		 push	 edx
  003e6	8b cd		 mov	 ecx, ebp
  003e8	50		 push	 eax
  003e9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@Post_Filte
  003ef	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003f4	58		 pop	 eax
  003f5	5a		 pop	 edx
  003f6	5f		 pop	 edi
  003f7	5e		 pop	 esi
  003f8	5b		 pop	 ebx
  003f9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003fc	33 cd		 xor	 ecx, ebp
  003fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00403	81 c4 8c 01 00
	00		 add	 esp, 396		; 0000018cH
  00409	3b ec		 cmp	 ebp, esp
  0040b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00410	8b e5		 mov	 esp, ebp
  00412	5d		 pop	 ebp
  00413	c3		 ret	 0
$LN21@Post_Filte:
  00414	03 00 00 00	 DD	 3
  00418	00 00 00 00	 DD	 $LN20@Post_Filte
$LN20@Post_Filte:
  0041c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00420	16 00 00 00	 DD	 22			; 00000016H
  00424	00 00 00 00	 DD	 $LN17@Post_Filte
  00428	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0042c	16 00 00 00	 DD	 22			; 00000016H
  00430	00 00 00 00	 DD	 $LN18@Post_Filte
  00434	74 ff ff ff	 DD	 -140			; ffffff74H
  00438	2c 00 00 00	 DD	 44			; 0000002cH
  0043c	00 00 00 00	 DD	 $LN19@Post_Filte
$LN19@Post_Filte:
  00440	68		 DB	 104			; 00000068H
  00441	00		 DB	 0
$LN18@Post_Filte:
  00442	41		 DB	 65			; 00000041H
  00443	70		 DB	 112			; 00000070H
  00444	34		 DB	 52			; 00000034H
  00445	00		 DB	 0
$LN17@Post_Filte:
  00446	41		 DB	 65			; 00000041H
  00447	70		 DB	 112			; 00000070H
  00448	33		 DB	 51			; 00000033H
  00449	00		 DB	 0
_Post_Filter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pstfilt.c
;	COMDAT _Post_Filter_exit
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Post_Filter_exit PROC					; COMDAT

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 155  :   if (state == NULL || *state == NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	74 08		 je	 SHORT $LN1@Post_Filte
  00024	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 02		 jne	 SHORT $LN2@Post_Filte
$LN1@Post_Filte:

; 156  :       return;

  0002c	eb 43		 jmp	 SHORT $LN3@Post_Filte
$LN2@Post_Filte:

; 157  : 
; 158  :   agc_exit(&(*state)->agc_state);

  0002e	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	83 c1 68	 add	 ecx, 104		; 00000068H
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 _agc_exit
  0003c	83 c4 04	 add	 esp, 4

; 159  :   preemphasis_exit(&(*state)->preemph_state);

  0003f	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	83 c1 64	 add	 ecx, 100		; 00000064H
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _preemphasis_exit
  0004d	83 c4 04	 add	 esp, 4

; 160  :   
; 161  :   /* deallocate memory */
; 162  :   free(*state);

  00050	8b f4		 mov	 esi, esp
  00052	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	51		 push	 ecx
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0005e	83 c4 04	 add	 esp, 4
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 163  :   *state = NULL;

  00068	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0006b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@Post_Filte:

; 164  :   
; 165  :   return;
; 166  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
_Post_Filter_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pstfilt.c
;	COMDAT _Post_Filter_reset
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Post_Filter_reset PROC					; COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 132  :   if (state == (Post_FilterState *) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 35		 jne	 SHORT $LN1@Post_Filte

; 133  :       fprintf(stderr, "Post_Filter_reset: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@ILBBKIP@Post_Filter_reset?3?5invalid?5param@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 134  :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 53		 jmp	 SHORT $LN2@Post_Filte
$LN1@Post_Filte:

; 135  :   }
; 136  :   
; 137  :   Set_zero (state->mem_syn_pst, M);

  00059	6a 0a		 push	 10			; 0000000aH
  0005b	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005e	83 c0 50	 add	 eax, 80			; 00000050H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _Set_zero
  00067	83 c4 08	 add	 esp, 8

; 138  :   Set_zero (state->res2, L_SUBFR);

  0006a	6a 28		 push	 40			; 00000028H
  0006c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _Set_zero
  00075	83 c4 08	 add	 esp, 8

; 139  :   Set_zero (state->synth_buf, L_FRAME + M);

  00078	68 aa 00 00 00	 push	 170			; 000000aaH
  0007d	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00080	83 c0 6c	 add	 eax, 108		; 0000006cH
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _Set_zero
  00089	83 c4 08	 add	 esp, 8

; 140  :   agc_reset(state->agc_state);

  0008c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0008f	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 _agc_reset
  00098	83 c4 04	 add	 esp, 4

; 141  :   preemphasis_reset(state->preemph_state);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0009e	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _preemphasis_reset
  000a7	83 c4 04	 add	 esp, 4

; 142  : 
; 143  :   return 0;

  000aa	33 c0		 xor	 eax, eax
$LN2@Post_Filte:

; 144  : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_Post_Filter_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pstfilt.c
;	COMDAT _Post_Filter_init
_TEXT	SEGMENT
_s$ = -8						; size = 4
_state$ = 8						; size = 4
_Post_Filter_init PROC					; COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 96   :   Post_FilterState* s;
; 97   : 
; 98   :   if (state == (Post_FilterState **) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 38		 jne	 SHORT $LN4@Post_Filte

; 99   :       fprintf(stderr, "Post_Filter_init: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BGIDGKEK@Post_Filter_init?3?5invalid?5parame@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 100  :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	e9 bf 00 00 00	 jmp	 $LN5@Post_Filte
$LN4@Post_Filte:

; 101  :   }
; 102  :   *state = NULL;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 103  : 
; 104  :   /* allocate memory */
; 105  :   if ((s= (Post_FilterState *) malloc(sizeof(Post_FilterState))) == NULL){

  00065	8b f4		 mov	 esi, esp
  00067	68 c0 01 00 00	 push	 448			; 000001c0H
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00072	83 c4 04	 add	 esp, 4
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  0007f	83 7d f8 00	 cmp	 DWORD PTR _s$[ebp], 0
  00083	75 35		 jne	 SHORT $LN3@Post_Filte

; 106  :       fprintf(stderr, "Post_Filter_init: can not malloc state structure\n");

  00085	8b f4		 mov	 esi, esp
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@EBNJDLEA@Post_Filter_init?3?5can?5not?5malloc@
  0008c	8b fc		 mov	 edi, esp
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00094	3b fc		 cmp	 edi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000a0	d1 e1		 shl	 ecx, 1
  000a2	03 c1		 add	 eax, ecx
  000a4	50		 push	 eax
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  000ab	83 c4 08	 add	 esp, 8
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 107  :       return -1;

  000b5	83 c8 ff	 or	 eax, -1
  000b8	eb 61		 jmp	 SHORT $LN5@Post_Filte
$LN3@Post_Filte:

; 108  :   }
; 109  :   s->preemph_state = NULL;

  000ba	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000bd	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0

; 110  :   s->agc_state = NULL;

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000c7	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0

; 111  : 
; 112  :   if (preemphasis_init(&s->preemph_state) || agc_init(&s->agc_state)) {

  000ce	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000d1	83 c0 64	 add	 eax, 100		; 00000064H
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _preemphasis_init
  000da	83 c4 04	 add	 esp, 4
  000dd	85 c0		 test	 eax, eax
  000df	75 13		 jne	 SHORT $LN1@Post_Filte
  000e1	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000e4	83 c0 68	 add	 eax, 104		; 00000068H
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 _agc_init
  000ed	83 c4 04	 add	 esp, 4
  000f0	85 c0		 test	 eax, eax
  000f2	74 11		 je	 SHORT $LN2@Post_Filte
$LN1@Post_Filte:

; 113  :       Post_Filter_exit(&s);

  000f4	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 _Post_Filter_exit
  000fd	83 c4 04	 add	 esp, 4

; 114  :       return -1;

  00100	83 c8 ff	 or	 eax, -1
  00103	eb 16		 jmp	 SHORT $LN5@Post_Filte
$LN2@Post_Filte:

; 115  :   }
; 116  :       
; 117  :   Post_Filter_reset(s);

  00105	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _Post_Filter_reset
  0010e	83 c4 04	 add	 esp, 4

; 118  :   *state = s;

  00111	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00114	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00117	89 08		 mov	 DWORD PTR [eax], ecx

; 119  :   
; 120  :   return 0;

  00119	33 c0		 xor	 eax, eax
$LN5@Post_Filte:

; 121  : }

  0011b	52		 push	 edx
  0011c	8b cd		 mov	 ecx, ebp
  0011e	50		 push	 eax
  0011f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Post_Filte
  00125	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0012a	58		 pop	 eax
  0012b	5a		 pop	 edx
  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00135	3b ec		 cmp	 ebp, esp
  00137	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
$LN9@Post_Filte:
  00140	01 00 00 00	 DD	 1
  00144	00 00 00 00	 DD	 $LN8@Post_Filte
$LN8@Post_Filte:
  00148	f8 ff ff ff	 DD	 -8			; fffffff8H
  0014c	04 00 00 00	 DD	 4
  00150	00 00 00 00	 DD	 $LN7@Post_Filte
$LN7@Post_Filte:
  00154	73		 DB	 115			; 00000073H
  00155	00		 DB	 0
_Post_Filter_init ENDP
_TEXT	ENDS
END
