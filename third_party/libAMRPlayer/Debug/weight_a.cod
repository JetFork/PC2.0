; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\weight_a.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_weight_a_id
CONST	SEGMENT
_weight_a_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Weight_Ai
EXTRN	_L_mult:PROC
EXTRN	_round:PROC
EXTRN	_move16:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\weight_a.c
;	COMDAT _Weight_Ai
_TEXT	SEGMENT
_i$ = -8						; size = 2
_a$ = 8							; size = 4
_fac$ = 12						; size = 4
_a_exp$ = 16						; size = 4
_Weight_Ai PROC						; COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 58   :     Word16 i;
; 59   : 
; 60   :     a_exp[0] = a[0];                                    move16 (); 

  0001e	b8 02 00 00 00	 mov	 eax, 2
  00023	6b c8 00	 imul	 ecx, eax, 0
  00026	ba 02 00 00 00	 mov	 edx, 2
  0002b	6b c2 00	 imul	 eax, edx, 0
  0002e	8b 55 10	 mov	 edx, DWORD PTR _a_exp$[ebp]
  00031	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00034	66 8b 0c 0e	 mov	 cx, WORD PTR [esi+ecx]
  00038	66 89 0c 02	 mov	 WORD PTR [edx+eax], cx
  0003c	e8 00 00 00 00	 call	 _move16

; 61   :     for (i = 1; i <= M; i++)

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0004a	eb 0c		 jmp	 SHORT $LN3@Weight_Ai
$LN2@Weight_Ai:
  0004c	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00050	66 83 c0 01	 add	 ax, 1
  00054	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@Weight_Ai:
  00058	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0005c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0005f	7f 3c		 jg	 SHORT $LN4@Weight_Ai

; 62   :     {
; 63   :         a_exp[i] = round (L_mult (a[i], fac[i - 1]));   move16 (); 

  00061	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _fac$[ebp]
  00068	0f b7 54 41 fe	 movzx	 edx, WORD PTR [ecx+eax*2-2]
  0006d	52		 push	 edx
  0006e	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00075	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 _L_mult
  0007f	83 c4 08	 add	 esp, 8
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _round
  00088	83 c4 04	 add	 esp, 4
  0008b	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  0008f	8b 55 10	 mov	 edx, DWORD PTR _a_exp$[ebp]
  00092	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00096	e8 00 00 00 00	 call	 _move16

; 64   :     }

  0009b	eb af		 jmp	 SHORT $LN2@Weight_Ai
$LN4@Weight_Ai:

; 65   : 
; 66   :     return;
; 67   : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
_Weight_Ai ENDP
_TEXT	ENDS
END
