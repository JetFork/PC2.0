; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\spreproc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_spreproc_id
CONST	SEGMENT
_spreproc_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_subframePreProc
EXTRN	_sub:PROC
EXTRN	_Weight_Ai:PROC
EXTRN	_Syn_filt:PROC
EXTRN	_Residu:PROC
EXTRN	_Copy:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\spreproc.c
;	COMDAT _subframePreProc
_TEXT	SEGMENT
_g1$ = -88						; size = 4
_Ap2$ = -76						; size = 22
_Ap1$ = -44						; size = 22
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_gamma1$ = 12						; size = 4
_gamma1_12k2$ = 16					; size = 4
_gamma2$ = 20						; size = 4
_A$ = 24						; size = 4
_Aq$ = 28						; size = 4
_speech$ = 32						; size = 4
_mem_err$ = 36						; size = 4
_mem_w0$ = 40						; size = 4
_zero$ = 44						; size = 4
_ai_zero$ = 48						; size = 4
_exc$ = 52						; size = 4
_h1$ = 56						; size = 4
_xn$ = 60						; size = 4
_res2$ = 64						; size = 4
_error$ = 68						; size = 4
_subframePreProc PROC					; COMDAT

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-284]
  00012	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 64   :    Word16 i;
; 65   :    Word16 Ap1[MP1];              /* A(z) with spectral expansion         */
; 66   :    Word16 Ap2[MP1];              /* A(z) with spectral expansion         */
; 67   :    const Word16 *g1;             /* Pointer to correct gammma1 vector    */
; 68   : 
; 69   :    /*---------------------------------------------------------------*
; 70   :     * mode specific pointer to gamma1 values                        *
; 71   :     *---------------------------------------------------------------*/
; 72   : 	test (); test ();

  00028	e8 00 00 00 00	 call	 _test
  0002d	e8 00 00 00 00	 call	 _test

; 73   : 	if ( sub(mode, MR122) == 0 || sub(mode, MR102) == 0 )

  00032	6a 07		 push	 7
  00034	0f b7 45 08	 movzx	 eax, WORD PTR _mode$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _sub
  0003e	83 c4 08	 add	 esp, 8
  00041	0f bf c8	 movsx	 ecx, ax
  00044	85 c9		 test	 ecx, ecx
  00046	74 16		 je	 SHORT $LN5@subframePr
  00048	6a 06		 push	 6
  0004a	0f b7 45 08	 movzx	 eax, WORD PTR _mode$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _sub
  00054	83 c4 08	 add	 esp, 8
  00057	0f bf c8	 movsx	 ecx, ax
  0005a	85 c9		 test	 ecx, ecx
  0005c	75 0d		 jne	 SHORT $LN6@subframePr
$LN5@subframePr:

; 74   :         {
; 75   :            g1 = gamma1_12k2; move16 (); 

  0005e	8b 45 10	 mov	 eax, DWORD PTR _gamma1_12k2$[ebp]
  00061	89 45 a8	 mov	 DWORD PTR _g1$[ebp], eax
  00064	e8 00 00 00 00	 call	 _move16

; 76   : 	}
; 77   :         else

  00069	eb 0b		 jmp	 SHORT $LN4@subframePr
$LN6@subframePr:

; 78   :         {
; 79   :            g1 = gamma1;      move16 (); 

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _gamma1$[ebp]
  0006e	89 45 a8	 mov	 DWORD PTR _g1$[ebp], eax
  00071	e8 00 00 00 00	 call	 _move16
$LN4@subframePr:

; 80   : 	}
; 81   :    /*---------------------------------------------------------------*
; 82   :     * Find the weighted LPC coefficients for the weighting filter.  *
; 83   :     *---------------------------------------------------------------*/
; 84   :    Weight_Ai(A, g1, Ap1);

  00076	8d 45 d4	 lea	 eax, DWORD PTR _Ap1$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d a8	 mov	 ecx, DWORD PTR _g1$[ebp]
  0007d	51		 push	 ecx
  0007e	8b 55 18	 mov	 edx, DWORD PTR _A$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 _Weight_Ai
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 85   :    Weight_Ai(A, gamma2, Ap2);

  0008a	8d 45 b4	 lea	 eax, DWORD PTR _Ap2$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 14	 mov	 ecx, DWORD PTR _gamma2$[ebp]
  00091	51		 push	 ecx
  00092	8b 55 18	 mov	 edx, DWORD PTR _A$[ebp]
  00095	52		 push	 edx
  00096	e8 00 00 00 00	 call	 _Weight_Ai
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 86   :    
; 87   :    /*---------------------------------------------------------------*
; 88   :     * Compute impulse response, h1[], of weighted synthesis filter  *
; 89   :     *---------------------------------------------------------------*/
; 90   :    for (i = 0; i <= M; i++)

  0009e	33 c0		 xor	 eax, eax
  000a0	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  000a4	eb 0c		 jmp	 SHORT $LN3@subframePr
$LN2@subframePr:
  000a6	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  000aa	66 83 c0 01	 add	 ax, 1
  000ae	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN3@subframePr:
  000b2	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000b6	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b9	7f 1b		 jg	 SHORT $LN1@subframePr

; 91   :    {
; 92   :       ai_zero[i] = Ap1[i];        move16 ();

  000bb	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000bf	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  000c3	8b 55 30	 mov	 edx, DWORD PTR _ai_zero$[ebp]
  000c6	66 8b 44 45 d4	 mov	 ax, WORD PTR _Ap1$[ebp+eax*2]
  000cb	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000cf	e8 00 00 00 00	 call	 _move16

; 93   :    }

  000d4	eb d0		 jmp	 SHORT $LN2@subframePr
$LN1@subframePr:

; 94   : 
; 95   :    Syn_filt(Aq, ai_zero, h1, L_SUBFR, zero, 0);

  000d6	6a 00		 push	 0
  000d8	8b 45 2c	 mov	 eax, DWORD PTR _zero$[ebp]
  000db	50		 push	 eax
  000dc	6a 28		 push	 40			; 00000028H
  000de	8b 4d 38	 mov	 ecx, DWORD PTR _h1$[ebp]
  000e1	51		 push	 ecx
  000e2	8b 55 30	 mov	 edx, DWORD PTR _ai_zero$[ebp]
  000e5	52		 push	 edx
  000e6	8b 45 1c	 mov	 eax, DWORD PTR _Aq$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _Syn_filt
  000ef	83 c4 18	 add	 esp, 24			; 00000018H

; 96   :    Syn_filt(Ap2, h1, h1, L_SUBFR, zero, 0);

  000f2	6a 00		 push	 0
  000f4	8b 45 2c	 mov	 eax, DWORD PTR _zero$[ebp]
  000f7	50		 push	 eax
  000f8	6a 28		 push	 40			; 00000028H
  000fa	8b 4d 38	 mov	 ecx, DWORD PTR _h1$[ebp]
  000fd	51		 push	 ecx
  000fe	8b 55 38	 mov	 edx, DWORD PTR _h1$[ebp]
  00101	52		 push	 edx
  00102	8d 45 b4	 lea	 eax, DWORD PTR _Ap2$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _Syn_filt
  0010b	83 c4 18	 add	 esp, 24			; 00000018H

; 97   :    
; 98   :    /*------------------------------------------------------------------------*
; 99   :     *                                                                        *
; 100  :     *          Find the target vector for pitch search:                      *
; 101  :     *                                                                        *
; 102  :     *------------------------------------------------------------------------*/
; 103  :    
; 104  :    /* LPC residual */
; 105  :    Residu(Aq, speech, res2, L_SUBFR); 

  0010e	6a 28		 push	 40			; 00000028H
  00110	8b 45 40	 mov	 eax, DWORD PTR _res2$[ebp]
  00113	50		 push	 eax
  00114	8b 4d 20	 mov	 ecx, DWORD PTR _speech$[ebp]
  00117	51		 push	 ecx
  00118	8b 55 1c	 mov	 edx, DWORD PTR _Aq$[ebp]
  0011b	52		 push	 edx
  0011c	e8 00 00 00 00	 call	 _Residu
  00121	83 c4 10	 add	 esp, 16			; 00000010H

; 106  :    Copy(res2, exc, L_SUBFR);

  00124	6a 28		 push	 40			; 00000028H
  00126	8b 45 34	 mov	 eax, DWORD PTR _exc$[ebp]
  00129	50		 push	 eax
  0012a	8b 4d 40	 mov	 ecx, DWORD PTR _res2$[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 _Copy
  00133	83 c4 0c	 add	 esp, 12			; 0000000cH

; 107  : 
; 108  :    Syn_filt(Aq, exc, error, L_SUBFR, mem_err, 0);

  00136	6a 00		 push	 0
  00138	8b 45 24	 mov	 eax, DWORD PTR _mem_err$[ebp]
  0013b	50		 push	 eax
  0013c	6a 28		 push	 40			; 00000028H
  0013e	8b 4d 44	 mov	 ecx, DWORD PTR _error$[ebp]
  00141	51		 push	 ecx
  00142	8b 55 34	 mov	 edx, DWORD PTR _exc$[ebp]
  00145	52		 push	 edx
  00146	8b 45 1c	 mov	 eax, DWORD PTR _Aq$[ebp]
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 _Syn_filt
  0014f	83 c4 18	 add	 esp, 24			; 00000018H

; 109  :    
; 110  :    Residu(Ap1, error, xn, L_SUBFR);

  00152	6a 28		 push	 40			; 00000028H
  00154	8b 45 3c	 mov	 eax, DWORD PTR _xn$[ebp]
  00157	50		 push	 eax
  00158	8b 4d 44	 mov	 ecx, DWORD PTR _error$[ebp]
  0015b	51		 push	 ecx
  0015c	8d 55 d4	 lea	 edx, DWORD PTR _Ap1$[ebp]
  0015f	52		 push	 edx
  00160	e8 00 00 00 00	 call	 _Residu
  00165	83 c4 10	 add	 esp, 16			; 00000010H

; 111  :    
; 112  :    /* target signal xn[]*/
; 113  :    Syn_filt(Ap2, xn, xn, L_SUBFR, mem_w0, 0);    

  00168	6a 00		 push	 0
  0016a	8b 45 28	 mov	 eax, DWORD PTR _mem_w0$[ebp]
  0016d	50		 push	 eax
  0016e	6a 28		 push	 40			; 00000028H
  00170	8b 4d 3c	 mov	 ecx, DWORD PTR _xn$[ebp]
  00173	51		 push	 ecx
  00174	8b 55 3c	 mov	 edx, DWORD PTR _xn$[ebp]
  00177	52		 push	 edx
  00178	8d 45 b4	 lea	 eax, DWORD PTR _Ap2$[ebp]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _Syn_filt
  00181	83 c4 18	 add	 esp, 24			; 00000018H

; 114  : 
; 115  :    return 0;

  00184	33 c0		 xor	 eax, eax

; 116  : }

  00186	52		 push	 edx
  00187	8b cd		 mov	 ecx, ebp
  00189	50		 push	 eax
  0018a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@subframePr
  00190	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00195	58		 pop	 eax
  00196	5a		 pop	 edx
  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019d	33 cd		 xor	 ecx, ebp
  0019f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a4	81 c4 1c 01 00
	00		 add	 esp, 284		; 0000011cH
  001aa	3b ec		 cmp	 ebp, esp
  001ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c3		 ret	 0
  001b5	8d 49 00	 npad	 3
$LN12@subframePr:
  001b8	02 00 00 00	 DD	 2
  001bc	00 00 00 00	 DD	 $LN11@subframePr
$LN11@subframePr:
  001c0	d4 ff ff ff	 DD	 -44			; ffffffd4H
  001c4	16 00 00 00	 DD	 22			; 00000016H
  001c8	00 00 00 00	 DD	 $LN9@subframePr
  001cc	b4 ff ff ff	 DD	 -76			; ffffffb4H
  001d0	16 00 00 00	 DD	 22			; 00000016H
  001d4	00 00 00 00	 DD	 $LN10@subframePr
$LN10@subframePr:
  001d8	41		 DB	 65			; 00000041H
  001d9	70		 DB	 112			; 00000070H
  001da	32		 DB	 50			; 00000032H
  001db	00		 DB	 0
$LN9@subframePr:
  001dc	41		 DB	 65			; 00000041H
  001dd	70		 DB	 112			; 00000070H
  001de	31		 DB	 49			; 00000031H
  001df	00		 DB	 0
_subframePreProc ENDP
_TEXT	ENDS
END
