; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\gmed_n.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_gmed_n_id
CONST	SEGMENT
_gmed_n_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_gmed_n
EXTRN	_sub:PROC
EXTRN	_shr:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\gmed_n.c
;	COMDAT _gmed_n
_TEXT	SEGMENT
_tmp2$ = -116						; size = 18
_tmp$ = -88						; size = 18
_medianIndex$ = -60					; size = 2
_max$ = -48						; size = 2
_ix$ = -36						; size = 2
_j$ = -24						; size = 2
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_ind$ = 8						; size = 4
_n$ = 12						; size = 2
_gmed_n	PROC						; COMDAT

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-312]
  00012	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 64   :     Word16 i, j, ix = 0;

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 dc	 mov	 WORD PTR _ix$[ebp], ax

; 65   :     Word16 max;
; 66   :     Word16 medianIndex;
; 67   :     Word16 tmp[NMAX];
; 68   :     Word16 tmp2[NMAX];
; 69   : 
; 70   :     for (i = 0; i < n; i++)

  0002e	33 c0		 xor	 eax, eax
  00030	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00034	eb 0c		 jmp	 SHORT $LN10@gmed_n
$LN9@gmed_n:
  00036	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0003a	66 83 c0 01	 add	 ax, 1
  0003e	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN10@gmed_n:
  00042	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00046	0f bf 4d 0c	 movsx	 ecx, WORD PTR _n$[ebp]
  0004a	3b c1		 cmp	 eax, ecx
  0004c	7d 1b		 jge	 SHORT $LN8@gmed_n

; 71   :     {
; 72   :         tmp2[i] = ind[i];                                      move16 (); 

  0004e	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00052	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00056	8b 55 08	 mov	 edx, DWORD PTR _ind$[ebp]
  00059	66 8b 04 42	 mov	 ax, WORD PTR [edx+eax*2]
  0005d	66 89 44 4d 8c	 mov	 WORD PTR _tmp2$[ebp+ecx*2], ax
  00062	e8 00 00 00 00	 call	 _move16

; 73   :     }

  00067	eb cd		 jmp	 SHORT $LN9@gmed_n
$LN8@gmed_n:

; 74   : 
; 75   :     for (i = 0; i < n; i++)

  00069	33 c0		 xor	 eax, eax
  0006b	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0006f	eb 0c		 jmp	 SHORT $LN7@gmed_n
$LN6@gmed_n:
  00071	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00075	66 83 c0 01	 add	 ax, 1
  00079	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN7@gmed_n:
  0007d	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00081	0f bf 4d 0c	 movsx	 ecx, WORD PTR _n$[ebp]
  00085	3b c1		 cmp	 eax, ecx
  00087	0f 8d 9a 00 00
	00		 jge	 $LN5@gmed_n

; 76   :     {
; 77   :         max = -32767;                                          move16 (); 

  0008d	b8 01 80 ff ff	 mov	 eax, -32767		; ffff8001H
  00092	66 89 45 d0	 mov	 WORD PTR _max$[ebp], ax
  00096	e8 00 00 00 00	 call	 _move16

; 78   :         for (j = 0; j < n; j++)

  0009b	33 c0		 xor	 eax, eax
  0009d	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax
  000a1	eb 0c		 jmp	 SHORT $LN4@gmed_n
$LN3@gmed_n:
  000a3	66 8b 45 e8	 mov	 ax, WORD PTR _j$[ebp]
  000a7	66 83 c0 01	 add	 ax, 1
  000ab	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax
$LN4@gmed_n:
  000af	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  000b3	0f bf 4d 0c	 movsx	 ecx, WORD PTR _n$[ebp]
  000b7	3b c1		 cmp	 eax, ecx
  000b9	7d 42		 jge	 SHORT $LN2@gmed_n

; 79   :         {
; 80   :             test (); 

  000bb	e8 00 00 00 00	 call	 _test

; 81   :             if (sub (tmp2[j], max) >= 0)

  000c0	0f b7 45 d0	 movzx	 eax, WORD PTR _max$[ebp]
  000c4	50		 push	 eax
  000c5	0f bf 4d e8	 movsx	 ecx, WORD PTR _j$[ebp]
  000c9	0f b7 54 4d 8c	 movzx	 edx, WORD PTR _tmp2$[ebp+ecx*2]
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 _sub
  000d4	83 c4 08	 add	 esp, 8
  000d7	98		 cwde
  000d8	85 c0		 test	 eax, eax
  000da	7c 1f		 jl	 SHORT $LN1@gmed_n

; 82   :             {
; 83   :                 max = tmp2[j];                                 move16 (); 

  000dc	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  000e0	66 8b 4c 45 8c	 mov	 cx, WORD PTR _tmp2$[ebp+eax*2]
  000e5	66 89 4d d0	 mov	 WORD PTR _max$[ebp], cx
  000e9	e8 00 00 00 00	 call	 _move16

; 84   :                 ix = j;                                        move16 (); 

  000ee	66 8b 45 e8	 mov	 ax, WORD PTR _j$[ebp]
  000f2	66 89 45 dc	 mov	 WORD PTR _ix$[ebp], ax
  000f6	e8 00 00 00 00	 call	 _move16
$LN1@gmed_n:

; 85   :             }
; 86   :         }

  000fb	eb a6		 jmp	 SHORT $LN3@gmed_n
$LN2@gmed_n:

; 87   :         tmp2[ix] = -32768;                                     move16 (); 

  000fd	0f bf 45 dc	 movsx	 eax, WORD PTR _ix$[ebp]
  00101	b9 00 80 ff ff	 mov	 ecx, -32768		; ffff8000H
  00106	66 89 4c 45 8c	 mov	 WORD PTR _tmp2$[ebp+eax*2], cx
  0010b	e8 00 00 00 00	 call	 _move16

; 88   :         tmp[i] = ix;                                           move16 (); 

  00110	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00114	66 8b 4d dc	 mov	 cx, WORD PTR _ix$[ebp]
  00118	66 89 4c 45 a8	 mov	 WORD PTR _tmp$[ebp+eax*2], cx
  0011d	e8 00 00 00 00	 call	 _move16

; 89   :     }

  00122	e9 4a ff ff ff	 jmp	 $LN6@gmed_n
$LN5@gmed_n:

; 90   : 
; 91   :     medianIndex=tmp[ shr(n,1) ]; move16 (); /* account for complex addressing */

  00127	6a 01		 push	 1
  00129	0f b7 45 0c	 movzx	 eax, WORD PTR _n$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _shr
  00133	83 c4 08	 add	 esp, 8
  00136	0f bf c8	 movsx	 ecx, ax
  00139	66 8b 54 4d a8	 mov	 dx, WORD PTR _tmp$[ebp+ecx*2]
  0013e	66 89 55 c4	 mov	 WORD PTR _medianIndex$[ebp], dx
  00142	e8 00 00 00 00	 call	 _move16

; 92   :     return (ind[medianIndex]);                                     

  00147	0f bf 45 c4	 movsx	 eax, WORD PTR _medianIndex$[ebp]
  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _ind$[ebp]
  0014e	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 93   : }

  00152	52		 push	 edx
  00153	8b cd		 mov	 ecx, ebp
  00155	50		 push	 eax
  00156	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@gmed_n
  0015c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00161	58		 pop	 eax
  00162	5a		 pop	 edx
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00169	33 cd		 xor	 ecx, ebp
  0016b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00170	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  00176	3b ec		 cmp	 ebp, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c3		 ret	 0
  00181	8d 49 00	 npad	 3
$LN16@gmed_n:
  00184	02 00 00 00	 DD	 2
  00188	00 00 00 00	 DD	 $LN15@gmed_n
$LN15@gmed_n:
  0018c	a8 ff ff ff	 DD	 -88			; ffffffa8H
  00190	12 00 00 00	 DD	 18			; 00000012H
  00194	00 00 00 00	 DD	 $LN13@gmed_n
  00198	8c ff ff ff	 DD	 -116			; ffffff8cH
  0019c	12 00 00 00	 DD	 18			; 00000012H
  001a0	00 00 00 00	 DD	 $LN14@gmed_n
$LN14@gmed_n:
  001a4	74		 DB	 116			; 00000074H
  001a5	6d		 DB	 109			; 0000006dH
  001a6	70		 DB	 112			; 00000070H
  001a7	32		 DB	 50			; 00000032H
  001a8	00		 DB	 0
$LN13@gmed_n:
  001a9	74		 DB	 116			; 00000074H
  001aa	6d		 DB	 109			; 0000006dH
  001ab	70		 DB	 112			; 00000070H
  001ac	00		 DB	 0
_gmed_n	ENDP
_TEXT	ENDS
END
