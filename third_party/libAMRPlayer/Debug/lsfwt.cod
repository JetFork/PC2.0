; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\lsfwt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_lsfwt_id
CONST	SEGMENT
_lsfwt_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Lsf_wt
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_mult:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lsfwt.c
;	COMDAT _Lsf_wt
_TEXT	SEGMENT
_i$ = -20						; size = 2
_temp$ = -8						; size = 2
_lsf$ = 8						; size = 4
_wf$ = 12						; size = 4
_Lsf_wt	PROC						; COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 80   :     Word16 temp;
; 81   :     Word16 i;
; 82   :     /* wf[0] = lsf[1] - 0  */
; 83   :     wf[0] = lsf[1];                                     move16 (); 

  0001e	b8 02 00 00 00	 mov	 eax, 2
  00023	c1 e0 00	 shl	 eax, 0
  00026	b9 02 00 00 00	 mov	 ecx, 2
  0002b	6b d1 00	 imul	 edx, ecx, 0
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _wf$[ebp]
  00031	8b 75 08	 mov	 esi, DWORD PTR _lsf$[ebp]
  00034	66 8b 04 06	 mov	 ax, WORD PTR [esi+eax]
  00038	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  0003c	e8 00 00 00 00	 call	 _move16

; 84   :     for (i = 1; i < 9; i++)

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
  0004a	eb 0c		 jmp	 SHORT $LN8@Lsf_wt
$LN7@Lsf_wt:
  0004c	66 8b 45 ec	 mov	 ax, WORD PTR _i$[ebp]
  00050	66 83 c0 01	 add	 ax, 1
  00054	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
$LN8@Lsf_wt:
  00058	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  0005c	83 f8 09	 cmp	 eax, 9
  0005f	7d 34		 jge	 SHORT $LN6@Lsf_wt

; 85   :     {
; 86   :         wf[i] = sub (lsf[i + 1], lsf[i - 1]);           move16 (); 

  00061	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _lsf$[ebp]
  00068	0f b7 54 41 fe	 movzx	 edx, WORD PTR [ecx+eax*2-2]
  0006d	52		 push	 edx
  0006e	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _lsf$[ebp]
  00075	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 _sub
  00080	83 c4 08	 add	 esp, 8
  00083	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  00087	8b 55 0c	 mov	 edx, DWORD PTR _wf$[ebp]
  0008a	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0008e	e8 00 00 00 00	 call	 _move16

; 87   :     }

  00093	eb b7		 jmp	 SHORT $LN7@Lsf_wt
$LN6@Lsf_wt:

; 88   :     /* wf[9] = 0.5 - lsf[8] */    
; 89   :     wf[9] = sub (16384, lsf[8]);move16 ();      

  00095	b8 02 00 00 00	 mov	 eax, 2
  0009a	c1 e0 03	 shl	 eax, 3
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _lsf$[ebp]
  000a0	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  000a4	52		 push	 edx
  000a5	68 00 40 00 00	 push	 16384			; 00004000H
  000aa	e8 00 00 00 00	 call	 _sub
  000af	83 c4 08	 add	 esp, 8
  000b2	b9 02 00 00 00	 mov	 ecx, 2
  000b7	6b d1 09	 imul	 edx, ecx, 9
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _wf$[ebp]
  000bd	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  000c1	e8 00 00 00 00	 call	 _move16

; 90   : 
; 91   :     for (i = 0; i < 10; i++)

  000c6	33 c0		 xor	 eax, eax
  000c8	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
  000cc	eb 0c		 jmp	 SHORT $LN5@Lsf_wt
$LN4@Lsf_wt:
  000ce	66 8b 45 ec	 mov	 ax, WORD PTR _i$[ebp]
  000d2	66 83 c0 01	 add	 ax, 1
  000d6	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
$LN5@Lsf_wt:
  000da	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  000de	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000e1	0f 8d c4 00 00
	00		 jge	 $LN9@Lsf_wt

; 92   :     {
; 93   :         temp = sub (wf[i], 1843);

  000e7	68 33 07 00 00	 push	 1843			; 00000733H
  000ec	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  000f0	8b 4d 0c	 mov	 ecx, DWORD PTR _wf$[ebp]
  000f3	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 _sub
  000fd	83 c4 08	 add	 esp, 8
  00100	66 89 45 f8	 mov	 WORD PTR _temp$[ebp], ax

; 94   :         test (); 

  00104	e8 00 00 00 00	 call	 _test

; 95   :         if (temp < 0)

  00109	0f bf 45 f8	 movsx	 eax, WORD PTR _temp$[ebp]
  0010d	85 c0		 test	 eax, eax
  0010f	7d 3c		 jge	 SHORT $LN2@Lsf_wt

; 96   :         {
; 97   :             wf[i] = sub (3427, mult (wf[i], 28160));    move16 (); 

  00111	68 00 6e 00 00	 push	 28160			; 00006e00H
  00116	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  0011a	8b 4d 0c	 mov	 ecx, DWORD PTR _wf$[ebp]
  0011d	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 _mult
  00127	83 c4 08	 add	 esp, 8
  0012a	0f b7 c0	 movzx	 eax, ax
  0012d	50		 push	 eax
  0012e	68 63 0d 00 00	 push	 3427			; 00000d63H
  00133	e8 00 00 00 00	 call	 _sub
  00138	83 c4 08	 add	 esp, 8
  0013b	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  0013f	8b 55 0c	 mov	 edx, DWORD PTR _wf$[ebp]
  00142	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00146	e8 00 00 00 00	 call	 _move16

; 98   :         }
; 99   :         else

  0014b	eb 33		 jmp	 SHORT $LN1@Lsf_wt
$LN2@Lsf_wt:

; 100  :         {
; 101  :             wf[i] = sub (1843, mult (temp, 6242));      move16 (); 

  0014d	68 62 18 00 00	 push	 6242			; 00001862H
  00152	0f b7 45 f8	 movzx	 eax, WORD PTR _temp$[ebp]
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 _mult
  0015c	83 c4 08	 add	 esp, 8
  0015f	0f b7 c8	 movzx	 ecx, ax
  00162	51		 push	 ecx
  00163	68 33 07 00 00	 push	 1843			; 00000733H
  00168	e8 00 00 00 00	 call	 _sub
  0016d	83 c4 08	 add	 esp, 8
  00170	0f bf 55 ec	 movsx	 edx, WORD PTR _i$[ebp]
  00174	8b 4d 0c	 mov	 ecx, DWORD PTR _wf$[ebp]
  00177	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0017b	e8 00 00 00 00	 call	 _move16
$LN1@Lsf_wt:

; 102  :         }
; 103  : 
; 104  :         wf[i] = shl (wf[i], 3); move16 (); 

  00180	6a 03		 push	 3
  00182	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  00186	8b 4d 0c	 mov	 ecx, DWORD PTR _wf$[ebp]
  00189	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0018d	52		 push	 edx
  0018e	e8 00 00 00 00	 call	 _shl
  00193	83 c4 08	 add	 esp, 8
  00196	0f bf 4d ec	 movsx	 ecx, WORD PTR _i$[ebp]
  0019a	8b 55 0c	 mov	 edx, DWORD PTR _wf$[ebp]
  0019d	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001a1	e8 00 00 00 00	 call	 _move16

; 105  :     }

  001a6	e9 23 ff ff ff	 jmp	 $LN4@Lsf_wt
$LN9@Lsf_wt:

; 106  :     return;
; 107  : }

  001ab	5f		 pop	 edi
  001ac	5e		 pop	 esi
  001ad	5b		 pop	 ebx
  001ae	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  001b4	3b ec		 cmp	 ebp, esp
  001b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
_Lsf_wt	ENDP
_TEXT	ENDS
END
