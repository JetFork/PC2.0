; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\lsp_lsf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_lsp_lsf_id
CONST	SEGMENT
_lsp_lsf_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_table	DW	07fffH
	DW	07fd9H
	DW	07f62H
	DW	07e9dH
	DW	07d8aH
	DW	07c2aH
	DW	07a7dH
	DW	07885H
	DW	07642H
	DW	073b6H
	DW	070e3H
	DW	06dcaH
	DW	06a6eH
	DW	066d0H
	DW	062f2H
	DW	05ed7H
	DW	05a82H
	DW	055f6H
	DW	05134H
	DW	04c40H
	DW	0471dH
	DW	041ceH
	DW	03c57H
	DW	036baH
	DW	030fcH
	DW	02b1fH
	DW	02528H
	DW	01f1aH
	DW	018f9H
	DW	012c8H
	DW	0c8cH
	DW	0648H
	DW	00H
	DW	0f9b8H
	DW	0f374H
	DW	0ed38H
	DW	0e707H
	DW	0e0e6H
	DW	0dad8H
	DW	0d4e1H
	DW	0cf04H
	DW	0c946H
	DW	0c3a9H
	DW	0be32H
	DW	0b8e3H
	DW	0b3c0H
	DW	0aeccH
	DW	0aa0aH
	DW	0a57eH
	DW	0a129H
	DW	09d0eH
	DW	09930H
	DW	09592H
	DW	09236H
	DW	08f1dH
	DW	08c4aH
	DW	089beH
	DW	0877bH
	DW	08583H
	DW	083d6H
	DW	08276H
	DW	08163H
	DW	0809eH
	DW	08027H
	DW	08000H
	ORG $+6
_slope	DW	096f9H
	DW	0dd94H
	DW	0eb35H
	DW	0f11bH
	DW	0f45dH
	DW	0f674H
	DW	0f7dfH
	DW	0f8edH
	DW	0f9b8H
	DW	0fa56H
	DW	0fad6H
	DW	0fb3dH
	DW	0fb94H
	DW	0fbddH
	DW	0fc1aH
	DW	0fc4eH
	DW	0fc7bH
	DW	0fca3H
	DW	0fcc5H
	DW	0fce3H
	DW	0fcfcH
	DW	0fd12H
	DW	0fd26H
	DW	0fd37H
	DW	0fd45H
	DW	0fd51H
	DW	0fd5bH
	DW	0fd64H
	DW	0fd6aH
	DW	0fd6fH
	DW	0fd72H
	DW	0fd74H
	DW	0fd74H
	DW	0fd72H
	DW	0fd6fH
	DW	0fd6aH
	DW	0fd64H
	DW	0fd5bH
	DW	0fd51H
	DW	0fd45H
	DW	0fd37H
	DW	0fd26H
	DW	0fd12H
	DW	0fcfcH
	DW	0fce3H
	DW	0fcc5H
	DW	0fca3H
	DW	0fc7bH
	DW	0fc4eH
	DW	0fc1aH
	DW	0fbddH
	DW	0fb94H
	DW	0fb3dH
	DW	0fad6H
	DW	0fa56H
	DW	0f9b8H
	DW	0f8edH
	DW	0f7dfH
	DW	0f674H
	DW	0f45dH
	DW	0f11bH
	DW	0eb35H
	DW	0dd94H
	DW	096f9H
CONST	ENDS
PUBLIC	_Lsf_lsp
PUBLIC	_Lsp_lsf
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_l:PROC
EXTRN	_round:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr:PROC
EXTRN	_move16:PROC
EXTRN	_logic16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lsp_lsf.c
;	COMDAT _Lsp_lsf
_TEXT	SEGMENT
_L_tmp$ = -32						; size = 4
_ind$ = -20						; size = 2
_i$ = -8						; size = 2
_lsp$ = 8						; size = 4
_lsf$ = 12						; size = 4
_m$ = 16						; size = 2
_Lsp_lsf PROC						; COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 89   :     Word16 i, ind;
; 90   :     Word32 L_tmp;
; 91   : 
; 92   :     ind = 63;  move16 ();                      /* begin at end of table -1 */

  0001e	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  00023	66 89 45 ec	 mov	 WORD PTR _ind$[ebp], ax
  00027	e8 00 00 00 00	 call	 _move16

; 93   : 
; 94   :     for (i = m - 1; i >= 0; i--)

  0002c	0f bf 45 10	 movsx	 eax, WORD PTR _m$[ebp]
  00030	83 e8 01	 sub	 eax, 1
  00033	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00037	eb 0c		 jmp	 SHORT $LN5@Lsp_lsf
$LN4@Lsp_lsf:
  00039	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0003d	66 83 e8 01	 sub	 ax, 1
  00041	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN5@Lsp_lsf:
  00045	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00049	85 c0		 test	 eax, eax
  0004b	0f 8c e0 00 00
	00		 jl	 $LN6@Lsp_lsf

; 95   :     {
; 96   :         /* find value in table that is just greater than lsp[i] */
; 97   :         test (); 

  00051	e8 00 00 00 00	 call	 _test
$LN2@Lsp_lsf:

; 98   :         while (sub (table[ind], lsp[i]) < 0)

  00056	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _lsp$[ebp]
  0005d	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00061	52		 push	 edx
  00062	0f bf 45 ec	 movsx	 eax, WORD PTR _ind$[ebp]
  00066	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _table[eax*2]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _sub
  00074	83 c4 08	 add	 esp, 8
  00077	0f bf d0	 movsx	 edx, ax
  0007a	85 d2		 test	 edx, edx
  0007c	7d 13		 jge	 SHORT $LN1@Lsp_lsf

; 99   :         {
; 100  :             ind--;

  0007e	66 8b 45 ec	 mov	 ax, WORD PTR _ind$[ebp]
  00082	66 83 e8 01	 sub	 ax, 1
  00086	66 89 45 ec	 mov	 WORD PTR _ind$[ebp], ax

; 101  :             test (); 

  0008a	e8 00 00 00 00	 call	 _test

; 102  :         }

  0008f	eb c5		 jmp	 SHORT $LN2@Lsp_lsf
$LN1@Lsp_lsf:

; 103  : 
; 104  :         /* acos(lsp[i])= ind*256 + ( ( lsp[i]-table[ind] ) *
; 105  :            slope[ind] )/4096 */
; 106  : 
; 107  :         L_tmp = L_mult (sub (lsp[i], table[ind]), slope[ind]);

  00091	0f bf 45 ec	 movsx	 eax, WORD PTR _ind$[ebp]
  00095	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _slope[eax*2]
  0009d	51		 push	 ecx
  0009e	0f bf 55 ec	 movsx	 edx, WORD PTR _ind$[ebp]
  000a2	0f b7 04 55 00
	00 00 00	 movzx	 eax, WORD PTR _table[edx*2]
  000aa	50		 push	 eax
  000ab	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000af	8b 55 08	 mov	 edx, DWORD PTR _lsp$[ebp]
  000b2	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _sub
  000bc	83 c4 08	 add	 esp, 8
  000bf	0f b7 c8	 movzx	 ecx, ax
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 _L_mult
  000c8	83 c4 08	 add	 esp, 8
  000cb	89 45 e0	 mov	 DWORD PTR _L_tmp$[ebp], eax

; 108  :         /*(lsp[i]-table[ind])*slope[ind])>>12*/
; 109  :         lsf[i] = round (L_shl (L_tmp, 3));      move16 (); 

  000ce	6a 03		 push	 3
  000d0	8b 45 e0	 mov	 eax, DWORD PTR _L_tmp$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _L_shl
  000d9	83 c4 08	 add	 esp, 8
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _round
  000e2	83 c4 04	 add	 esp, 4
  000e5	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000e9	8b 55 0c	 mov	 edx, DWORD PTR _lsf$[ebp]
  000ec	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000f0	e8 00 00 00 00	 call	 _move16

; 110  :         lsf[i] = add (lsf[i], shl (ind, 8));    move16 (); 

  000f5	6a 08		 push	 8
  000f7	0f b7 45 ec	 movzx	 eax, WORD PTR _ind$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _shl
  00101	83 c4 08	 add	 esp, 8
  00104	0f b7 c8	 movzx	 ecx, ax
  00107	51		 push	 ecx
  00108	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  0010c	8b 45 0c	 mov	 eax, DWORD PTR _lsf$[ebp]
  0010f	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 _add
  00119	83 c4 08	 add	 esp, 8
  0011c	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  00120	8b 4d 0c	 mov	 ecx, DWORD PTR _lsf$[ebp]
  00123	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00127	e8 00 00 00 00	 call	 _move16

; 111  :     }

  0012c	e9 08 ff ff ff	 jmp	 $LN4@Lsp_lsf
$LN6@Lsp_lsf:

; 112  :     return;
; 113  : }

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
_Lsp_lsf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lsp_lsf.c
;	COMDAT _Lsf_lsp
_TEXT	SEGMENT
_L_tmp$ = -44						; size = 4
_offset$ = -32						; size = 2
_ind$ = -20						; size = 2
_i$ = -8						; size = 2
_lsf$ = 8						; size = 4
_lsp$ = 12						; size = 4
_m$ = 16						; size = 2
_Lsf_lsp PROC						; COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 66   :     Word16 i, ind, offset;
; 67   :     Word32 L_tmp;
; 68   : 
; 69   :     for (i = 0; i < m; i++)

  0001e	33 c0		 xor	 eax, eax
  00020	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00024	eb 0c		 jmp	 SHORT $LN3@Lsf_lsp
$LN2@Lsf_lsp:
  00026	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0002a	66 83 c0 01	 add	 ax, 1
  0002e	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@Lsf_lsp:
  00032	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00036	0f bf 4d 10	 movsx	 ecx, WORD PTR _m$[ebp]
  0003a	3b c1		 cmp	 eax, ecx
  0003c	0f 8d af 00 00
	00		 jge	 $LN4@Lsf_lsp

; 70   :     {
; 71   :         ind = shr (lsf[i], 8);      /* ind    = b8-b15 of lsf[i] */

  00042	6a 08		 push	 8
  00044	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _lsf$[ebp]
  0004b	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 _shr
  00055	83 c4 08	 add	 esp, 8
  00058	66 89 45 ec	 mov	 WORD PTR _ind$[ebp], ax

; 72   :         offset = lsf[i] & 0x00ff;   logic16 (); /* offset = b0-b7  of lsf[i] */

  0005c	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _lsf$[ebp]
  00063	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  00067	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0006d	66 89 55 e0	 mov	 WORD PTR _offset$[ebp], dx
  00071	e8 00 00 00 00	 call	 _logic16

; 73   : 
; 74   :         /* lsp[i] = table[ind]+ ((table[ind+1]-table[ind])*offset) / 256 */
; 75   : 
; 76   :         L_tmp = L_mult (sub (table[ind + 1], table[ind]), offset);

  00076	0f b7 45 e0	 movzx	 eax, WORD PTR _offset$[ebp]
  0007a	50		 push	 eax
  0007b	0f bf 4d ec	 movsx	 ecx, WORD PTR _ind$[ebp]
  0007f	0f b7 14 4d 00
	00 00 00	 movzx	 edx, WORD PTR _table[ecx*2]
  00087	52		 push	 edx
  00088	0f bf 45 ec	 movsx	 eax, WORD PTR _ind$[ebp]
  0008c	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _table[eax*2+2]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 _sub
  0009a	83 c4 08	 add	 esp, 8
  0009d	0f b7 d0	 movzx	 edx, ax
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 _L_mult
  000a6	83 c4 08	 add	 esp, 8
  000a9	89 45 d4	 mov	 DWORD PTR _L_tmp$[ebp], eax

; 77   :         lsp[i] = add (table[ind], extract_l (L_shr (L_tmp, 9)));

  000ac	6a 09		 push	 9
  000ae	8b 45 d4	 mov	 eax, DWORD PTR _L_tmp$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _L_shr
  000b7	83 c4 08	 add	 esp, 8
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _extract_l
  000c0	83 c4 04	 add	 esp, 4
  000c3	0f b7 c8	 movzx	 ecx, ax
  000c6	51		 push	 ecx
  000c7	0f bf 55 ec	 movsx	 edx, WORD PTR _ind$[ebp]
  000cb	0f b7 04 55 00
	00 00 00	 movzx	 eax, WORD PTR _table[edx*2]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _add
  000d9	83 c4 08	 add	 esp, 8
  000dc	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000e0	8b 55 0c	 mov	 edx, DWORD PTR _lsp$[ebp]
  000e3	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 78   :                                     move16 (); 

  000e7	e8 00 00 00 00	 call	 _move16

; 79   :     }

  000ec	e9 35 ff ff ff	 jmp	 $LN2@Lsf_lsp
$LN4@Lsf_lsp:

; 80   :     return;
; 81   : }

  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000fa	3b ec		 cmp	 ebp, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
_Lsf_lsp ENDP
_TEXT	ENDS
END
