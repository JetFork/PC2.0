; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\p_ol_wgh.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_p_ol_wgh_id
CONST	SEGMENT
_p_ol_wgh_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_corrweight DW	04ff9H
	DW	0501aH
	DW	0503bH
	DW	0505cH
	DW	0507dH
	DW	050a4H
	DW	050c5H
	DW	050ecH
	DW	0510dH
	DW	05134H
	DW	05155H
	DW	0517cH
	DW	0519dH
	DW	051c4H
	DW	051ecH
	DW	05213H
	DW	0523aH
	DW	05261H
	DW	05289H
	DW	052b0H
	DW	052d7H
	DW	052ffH
	DW	05326H
	DW	05354H
	DW	0537bH
	DW	053a9H
	DW	053d0H
	DW	053feH
	DW	05426H
	DW	05454H
	DW	05481H
	DW	054afH
	DW	054ddH
	DW	0550bH
	DW	05539H
	DW	05567H
	DW	05595H
	DW	055c9H
	DW	055f7H
	DW	0562bH
	DW	05659H
	DW	0568eH
	DW	056c2H
	DW	056f7H
	DW	0572bH
	DW	0575fH
	DW	05794H
	DW	057c8H
	DW	05803H
	DW	05838H
	DW	05873H
	DW	058aeH
	DW	058e9H
	DW	05924H
	DW	0595fH
	DW	0599aH
	DW	059dbH
	DW	05a16H
	DW	05a58H
	DW	05a99H
	DW	05ad4H
	DW	05b1cH
	DW	05b5eH
	DW	05b9fH
	DW	05be7H
	DW	05c30H
	DW	05c71H
	DW	05cc0H
	DW	05d08H
	DW	05d50H
	DW	05d9fH
	DW	05dedH
	DW	05e3cH
	DW	05e8aH
	DW	05ee0H
	DW	05f2eH
	DW	05f83H
	DW	05fd9H
	DW	06034H
	DW	0608aH
	DW	060e5H
	DW	06148H
	DW	061a3H
	DW	06206H
	DW	06268H
	DW	062d1H
	DW	06333H
	DW	0639cH
	DW	0640bH
	DW	0647bH
	DW	064eaH
	DW	06560H
	DW	065d6H
	DW	0664cH
	DW	066c9H
	DW	0674cH
	DW	067cfH
	DW	06852H
	DW	068dcH
	DW	0696cH
	DW	069fcH
	DW	06a93H
	DW	06b30H
	DW	06bcdH
	DW	06c71H
	DW	06d1bH
	DW	06dccH
	DW	06e7dH
	DW	06f3bH
	DW	06ff9H
	DW	070c5H
	DW	07196H
	DW	0726fH
	DW	07354H
	DW	07440H
	DW	07532H
	DW	07632H
	DW	0773fH
	DW	07858H
	DW	07ae1H
	DW	07fffH
	DW	07fffH
	DW	07fffH
	DW	07fffH
	DW	07fffH
	DW	07fffH
	DW	07fffH
	DW	07ae1H
	DW	07858H
	DW	0773fH
	DW	07632H
	DW	07532H
	DW	07440H
	DW	07354H
	DW	0726fH
	DW	07196H
	DW	070c5H
	DW	06ff9H
	DW	06f3bH
	DW	06e7dH
	DW	06dccH
	DW	06d1bH
	DW	06c71H
	DW	06bcdH
	DW	06b30H
	DW	06a93H
	DW	069fcH
	DW	0696cH
	DW	068dcH
	DW	06852H
	DW	067cfH
	DW	0674cH
	DW	066c9H
	DW	0664cH
	DW	065d6H
	DW	06560H
	DW	064eaH
	DW	0647bH
	DW	0640bH
	DW	0639cH
	DW	06333H
	DW	062d1H
	DW	06268H
	DW	06206H
	DW	061a3H
	DW	06148H
	DW	060e5H
	DW	0608aH
	DW	06034H
	DW	05fd9H
	DW	05f83H
	DW	05f2eH
	DW	05ee0H
	DW	05e8aH
	DW	05e3cH
	DW	05dedH
	DW	05d9fH
	DW	05d50H
	DW	05d08H
	DW	05cc0H
	DW	05c71H
	DW	05c30H
	DW	05be7H
	DW	05b9fH
	DW	05b5eH
	DW	05b1cH
	DW	05ad4H
	DW	05a99H
	DW	05a58H
	DW	05a16H
	DW	059dbH
	DW	0599aH
	DW	0595fH
	DW	05924H
	DW	058e9H
	DW	058aeH
	DW	05873H
	DW	05838H
	DW	05803H
	DW	057c8H
	DW	05794H
	DW	0575fH
	DW	0572bH
	DW	056f7H
	DW	056c2H
	DW	0568eH
	DW	05659H
	DW	0562bH
	DW	055f7H
	DW	055c9H
	DW	05595H
	DW	05567H
	DW	05539H
	DW	0550bH
	DW	054ddH
	DW	054afH
	DW	05481H
	DW	05454H
	DW	05426H
	DW	053feH
	DW	053d0H
	DW	053a9H
	DW	0537bH
	DW	05354H
	DW	05326H
	DW	052ffH
	DW	052d7H
	DW	052b0H
	DW	05289H
	DW	05261H
	DW	0523aH
	DW	05213H
	DW	051ecH
	DW	051c4H
	DW	0519dH
	DW	0517cH
	DW	05155H
	DW	05134H
	DW	0510dH
	DW	050ecH
	DW	050c5H
	DW	050a4H
	DW	0507dH
	DW	0505cH
	DW	0503bH
	DW	0501aH
	DW	04ff9H
	DW	04fd2H
	DW	04fb1H
	DW	04f91H
	DW	04f70H
CONST	ENDS
PUBLIC	_p_ol_wgh_init
PUBLIC	_p_ol_wgh_reset
PUBLIC	_p_ol_wgh_exit
PUBLIC	_Pitch_ol_wgh
PUBLIC	??_C@_0CC@EGMLDJJN@p_ol_wgh_init?3?5invalid?5parameter@ ; `string'
PUBLIC	??_C@_0CP@LDANJGA@p_ol_wgh_init?3?5can?5not?5malloc?5st@ ; `string'
PUBLIC	??_C@_0CD@BAFGBFKL@p_ol_wgh_reset?3?5invalid?5paramete@ ; `string'
EXTRN	_vad_complex_detection_update:PROC
EXTRN	_vad_tone_detection:PROC
EXTRN	_vad_tone_detection_update:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_mult:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_msu:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_Extract:PROC
EXTRN	_Mpy_32_16:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	_gmed_n:PROC
EXTRN	_comp_corr:PROC
EXTRN	_hp_max:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CD@BAFGBFKL@p_ol_wgh_reset?3?5invalid?5paramete@
CONST	SEGMENT
??_C@_0CD@BAFGBFKL@p_ol_wgh_reset?3?5invalid?5paramete@ DB 'p_ol_wgh_rese'
	DB	't: invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LDANJGA@p_ol_wgh_init?3?5can?5not?5malloc?5st@
CONST	SEGMENT
??_C@_0CP@LDANJGA@p_ol_wgh_init?3?5can?5not?5malloc?5st@ DB 'p_ol_wgh_ini'
	DB	't: can not malloc state structure', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EGMLDJJN@p_ol_wgh_init?3?5invalid?5parameter@
CONST	SEGMENT
??_C@_0CC@EGMLDJJN@p_ol_wgh_init?3?5invalid?5parameter@ DB 'p_ol_wgh_init'
	DB	': invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\p_ol_wgh.c
;	COMDAT _Lag_max
_TEXT	SEGMENT
_t1$ = -140						; size = 4
_we$ = -128						; size = 4
_ww$ = -116						; size = 4
_p_max$ = -104						; size = 2
_t0_l$ = -92						; size = 2
_t0_h$ = -80						; size = 2
_t0$ = -68						; size = 4
_max$ = -56						; size = 4
_p1$ = -44						; size = 4
_p$ = -32						; size = 4
_j$ = -20						; size = 2
_i$ = -8						; size = 2
_vadSt$ = 8						; size = 4
_corr$ = 12						; size = 4
_scal_sig$ = 16						; size = 4
_L_frame$ = 20						; size = 2
_lag_max$ = 24						; size = 2
_lag_min$ = 28						; size = 2
_old_lag$ = 32						; size = 2
_cor_max$ = 36						; size = 4
_wght_flg$ = 40						; size = 2
_gain_flg$ = 44						; size = 4
_dtx$ = 48						; size = 4
_Lag_max PROC						; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd b0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-336]
  00012	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 74   :     Word16 i, j;
; 75   :     Word16 *p, *p1;
; 76   :     Word32 max, t0;
; 77   :     Word16 t0_h, t0_l;
; 78   :     Word16 p_max;
; 79   :     const Word16 *ww, *we;
; 80   :     Word32 t1;
; 81   :     
; 82   :     ww = &corrweight[250];                                 move16 ();

  0001e	b8 02 00 00 00	 mov	 eax, 2
  00023	69 c8 fa 00 00
	00		 imul	 ecx, eax, 250
  00029	81 c1 00 00 00
	00		 add	 ecx, OFFSET _corrweight
  0002f	89 4d 8c	 mov	 DWORD PTR _ww$[ebp], ecx
  00032	e8 00 00 00 00	 call	 _move16

; 83   :     we = &corrweight[123 + lag_max - old_lag];             move16 ();

  00037	0f bf 45 18	 movsx	 eax, WORD PTR _lag_max$[ebp]
  0003b	83 c0 7b	 add	 eax, 123		; 0000007bH
  0003e	0f bf 4d 20	 movsx	 ecx, WORD PTR _old_lag$[ebp]
  00042	2b c1		 sub	 eax, ecx
  00044	8d 14 45 00 00
	00 00		 lea	 edx, DWORD PTR _corrweight[eax*2]
  0004b	89 55 80	 mov	 DWORD PTR _we$[ebp], edx
  0004e	e8 00 00 00 00	 call	 _move16

; 84   : 
; 85   :     max = MIN_32;                                          move32 ();

  00053	c7 45 c8 00 00
	00 80		 mov	 DWORD PTR _max$[ebp], -2147483648 ; 80000000H
  0005a	e8 00 00 00 00	 call	 _move32

; 86   :     p_max = lag_max;                                       move16 ();

  0005f	66 8b 45 18	 mov	 ax, WORD PTR _lag_max$[ebp]
  00063	66 89 45 98	 mov	 WORD PTR _p_max$[ebp], ax
  00067	e8 00 00 00 00	 call	 _move16

; 87   : 
; 88   :     for (i = lag_max; i >= lag_min; i--)

  0006c	66 8b 45 18	 mov	 ax, WORD PTR _lag_max$[ebp]
  00070	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00074	eb 0c		 jmp	 SHORT $LN9@Lag_max
$LN8@Lag_max:
  00076	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0007a	66 83 e8 01	 sub	 ax, 1
  0007e	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN9@Lag_max:
  00082	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00086	0f bf 4d 1c	 movsx	 ecx, WORD PTR _lag_min$[ebp]
  0008a	3b c1		 cmp	 eax, ecx
  0008c	0f 8c dc 00 00
	00		 jl	 $LN7@Lag_max

; 89   :     {
; 90   :        t0 = corr[-i];                                      move32 ();   

  00092	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00096	f7 d8		 neg	 eax
  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _corr$[ebp]
  0009b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0009e	89 55 bc	 mov	 DWORD PTR _t0$[ebp], edx
  000a1	e8 00 00 00 00	 call	 _move32

; 91   :        
; 92   :        /* Weighting of the correlation function.   */
; 93   :        L_Extract (corr[-i], &t0_h, &t0_l);

  000a6	8d 45 a4	 lea	 eax, DWORD PTR _t0_l$[ebp]
  000a9	50		 push	 eax
  000aa	8d 4d b0	 lea	 ecx, DWORD PTR _t0_h$[ebp]
  000ad	51		 push	 ecx
  000ae	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  000b2	f7 da		 neg	 edx
  000b4	8b 45 0c	 mov	 eax, DWORD PTR _corr$[ebp]
  000b7	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 _L_Extract
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 94   :        t0 = Mpy_32_16 (t0_h, t0_l, *ww);

  000c3	8b 45 8c	 mov	 eax, DWORD PTR _ww$[ebp]
  000c6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000c9	51		 push	 ecx
  000ca	0f b7 55 a4	 movzx	 edx, WORD PTR _t0_l$[ebp]
  000ce	52		 push	 edx
  000cf	0f b7 45 b0	 movzx	 eax, WORD PTR _t0_h$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _Mpy_32_16
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000dc	89 45 bc	 mov	 DWORD PTR _t0$[ebp], eax

; 95   :        ww--;                                               move16();

  000df	8b 45 8c	 mov	 eax, DWORD PTR _ww$[ebp]
  000e2	83 e8 02	 sub	 eax, 2
  000e5	89 45 8c	 mov	 DWORD PTR _ww$[ebp], eax
  000e8	e8 00 00 00 00	 call	 _move16

; 96   :        test ();

  000ed	e8 00 00 00 00	 call	 _test

; 97   :        if (wght_flg > 0) {

  000f2	0f bf 45 28	 movsx	 eax, WORD PTR _wght_flg$[ebp]
  000f6	85 c0		 test	 eax, eax
  000f8	7e 3e		 jle	 SHORT $LN6@Lag_max

; 98   :           /* Weight the neighbourhood of the old lag. */
; 99   :           L_Extract (t0, &t0_h, &t0_l);

  000fa	8d 45 a4	 lea	 eax, DWORD PTR _t0_l$[ebp]
  000fd	50		 push	 eax
  000fe	8d 4d b0	 lea	 ecx, DWORD PTR _t0_h$[ebp]
  00101	51		 push	 ecx
  00102	8b 55 bc	 mov	 edx, DWORD PTR _t0$[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _L_Extract
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  :           t0 = Mpy_32_16 (t0_h, t0_l, *we);

  0010e	8b 45 80	 mov	 eax, DWORD PTR _we$[ebp]
  00111	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00114	51		 push	 ecx
  00115	0f b7 55 a4	 movzx	 edx, WORD PTR _t0_l$[ebp]
  00119	52		 push	 edx
  0011a	0f b7 45 b0	 movzx	 eax, WORD PTR _t0_h$[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 _Mpy_32_16
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH
  00127	89 45 bc	 mov	 DWORD PTR _t0$[ebp], eax

; 101  :           we--;                                            move16();

  0012a	8b 45 80	 mov	 eax, DWORD PTR _we$[ebp]
  0012d	83 e8 02	 sub	 eax, 2
  00130	89 45 80	 mov	 DWORD PTR _we$[ebp], eax
  00133	e8 00 00 00 00	 call	 _move16
$LN6@Lag_max:

; 102  :        }
; 103  :        
; 104  :        test (); 

  00138	e8 00 00 00 00	 call	 _test

; 105  :        if (L_sub (t0, max) >= 0)

  0013d	8b 45 c8	 mov	 eax, DWORD PTR _max$[ebp]
  00140	50		 push	 eax
  00141	8b 4d bc	 mov	 ecx, DWORD PTR _t0$[ebp]
  00144	51		 push	 ecx
  00145	e8 00 00 00 00	 call	 _L_sub
  0014a	83 c4 08	 add	 esp, 8
  0014d	85 c0		 test	 eax, eax
  0014f	7c 18		 jl	 SHORT $LN5@Lag_max

; 106  :        {
; 107  :           max = t0;                                        move32 (); 

  00151	8b 45 bc	 mov	 eax, DWORD PTR _t0$[ebp]
  00154	89 45 c8	 mov	 DWORD PTR _max$[ebp], eax
  00157	e8 00 00 00 00	 call	 _move32

; 108  :           p_max = i;                                       move16 (); 

  0015c	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00160	66 89 45 98	 mov	 WORD PTR _p_max$[ebp], ax
  00164	e8 00 00 00 00	 call	 _move16
$LN5@Lag_max:

; 109  :        }
; 110  :     }

  00169	e9 08 ff ff ff	 jmp	 $LN8@Lag_max
$LN7@Lag_max:

; 111  :     
; 112  :     p  = &scal_sig[0];                                     move16 (); 

  0016e	b8 02 00 00 00	 mov	 eax, 2
  00173	6b c8 00	 imul	 ecx, eax, 0
  00176	03 4d 10	 add	 ecx, DWORD PTR _scal_sig$[ebp]
  00179	89 4d e0	 mov	 DWORD PTR _p$[ebp], ecx
  0017c	e8 00 00 00 00	 call	 _move16

; 113  :     p1 = &scal_sig[-p_max];                                move16 (); 

  00181	0f bf 45 98	 movsx	 eax, WORD PTR _p_max$[ebp]
  00185	f7 d8		 neg	 eax
  00187	8b 4d 10	 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  0018a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0018d	89 55 d4	 mov	 DWORD PTR _p1$[ebp], edx
  00190	e8 00 00 00 00	 call	 _move16

; 114  :     t0 = 0;                                                move32 (); 

  00195	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _t0$[ebp], 0
  0019c	e8 00 00 00 00	 call	 _move32

; 115  :     t1 = 0;                                                move32 (); 

  001a1	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _t1$[ebp], 0
  001ab	e8 00 00 00 00	 call	 _move32

; 116  :     
; 117  :     for (j = 0; j < L_frame; j++, p++, p1++)

  001b0	33 c0		 xor	 eax, eax
  001b2	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
  001b6	eb 1e		 jmp	 SHORT $LN4@Lag_max
$LN3@Lag_max:
  001b8	66 8b 45 ec	 mov	 ax, WORD PTR _j$[ebp]
  001bc	66 83 c0 01	 add	 ax, 1
  001c0	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
  001c4	8b 4d e0	 mov	 ecx, DWORD PTR _p$[ebp]
  001c7	83 c1 02	 add	 ecx, 2
  001ca	89 4d e0	 mov	 DWORD PTR _p$[ebp], ecx
  001cd	8b 55 d4	 mov	 edx, DWORD PTR _p1$[ebp]
  001d0	83 c2 02	 add	 edx, 2
  001d3	89 55 d4	 mov	 DWORD PTR _p1$[ebp], edx
$LN4@Lag_max:
  001d6	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  001da	0f bf 4d 14	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  001de	3b c1		 cmp	 eax, ecx
  001e0	7d 42		 jge	 SHORT $LN2@Lag_max

; 118  :     {
; 119  :        t0 = L_mac (t0, *p, *p1);               

  001e2	8b 45 d4	 mov	 eax, DWORD PTR _p1$[ebp]
  001e5	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001e8	51		 push	 ecx
  001e9	8b 55 e0	 mov	 edx, DWORD PTR _p$[ebp]
  001ec	0f b7 02	 movzx	 eax, WORD PTR [edx]
  001ef	50		 push	 eax
  001f0	8b 4d bc	 mov	 ecx, DWORD PTR _t0$[ebp]
  001f3	51		 push	 ecx
  001f4	e8 00 00 00 00	 call	 _L_mac
  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fc	89 45 bc	 mov	 DWORD PTR _t0$[ebp], eax

; 120  :        t1 = L_mac (t1, *p1, *p1);

  001ff	8b 45 d4	 mov	 eax, DWORD PTR _p1$[ebp]
  00202	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00205	51		 push	 ecx
  00206	8b 55 d4	 mov	 edx, DWORD PTR _p1$[ebp]
  00209	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0020c	50		 push	 eax
  0020d	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _t1$[ebp]
  00213	51		 push	 ecx
  00214	e8 00 00 00 00	 call	 _L_mac
  00219	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021c	89 85 74 ff ff
	ff		 mov	 DWORD PTR _t1$[ebp], eax

; 121  :     }

  00222	eb 94		 jmp	 SHORT $LN3@Lag_max
$LN2@Lag_max:

; 122  : 
; 123  :     if (dtx)

  00224	83 7d 30 00	 cmp	 DWORD PTR _dtx$[ebp], 0
  00228	74 25		 je	 SHORT $LN1@Lag_max

; 124  :     {  /* no test() call since this if is only in simulation env */
; 125  : #ifdef VAD2
; 126  :        vadSt->L_Rmax = L_add(vadSt->L_Rmax, t0);   /* Save max correlation */
; 127  :        vadSt->L_R0 =   L_add(vadSt->L_R0, t1);        /* Save max energy */
; 128  : #else
; 129  :        /* update and detect tone */
; 130  :        vad_tone_detection_update (vadSt, 0);

  0022a	6a 00		 push	 0
  0022c	8b 45 08	 mov	 eax, DWORD PTR _vadSt$[ebp]
  0022f	50		 push	 eax
  00230	e8 00 00 00 00	 call	 _vad_tone_detection_update
  00235	83 c4 08	 add	 esp, 8

; 131  :        vad_tone_detection (vadSt, t0, t1);

  00238	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _t1$[ebp]
  0023e	50		 push	 eax
  0023f	8b 4d bc	 mov	 ecx, DWORD PTR _t0$[ebp]
  00242	51		 push	 ecx
  00243	8b 55 08	 mov	 edx, DWORD PTR _vadSt$[ebp]
  00246	52		 push	 edx
  00247	e8 00 00 00 00	 call	 _vad_tone_detection
  0024c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Lag_max:

; 132  : #endif
; 133  :     }
; 134  :     
; 135  :     /* gain flag is set according to the open_loop gain */
; 136  :     /* is t2/t1 > 0.4 ? */    
; 137  :     *gain_flg = round(L_msu(t0, round(t1), 13107));        move16(); 

  0024f	68 33 33 00 00	 push	 13107			; 00003333H
  00254	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _t1$[ebp]
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 _round
  00260	83 c4 04	 add	 esp, 4
  00263	0f b7 c8	 movzx	 ecx, ax
  00266	51		 push	 ecx
  00267	8b 55 bc	 mov	 edx, DWORD PTR _t0$[ebp]
  0026a	52		 push	 edx
  0026b	e8 00 00 00 00	 call	 _L_msu
  00270	83 c4 0c	 add	 esp, 12			; 0000000cH
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 _round
  00279	83 c4 04	 add	 esp, 4
  0027c	8b 4d 2c	 mov	 ecx, DWORD PTR _gain_flg$[ebp]
  0027f	66 89 01	 mov	 WORD PTR [ecx], ax
  00282	e8 00 00 00 00	 call	 _move16

; 138  :     
; 139  :     *cor_max = 0;                                          move16 ();

  00287	33 c0		 xor	 eax, eax
  00289	8b 4d 24	 mov	 ecx, DWORD PTR _cor_max$[ebp]
  0028c	66 89 01	 mov	 WORD PTR [ecx], ax
  0028f	e8 00 00 00 00	 call	 _move16

; 140  : 
; 141  :     return (p_max);

  00294	66 8b 45 98	 mov	 ax, WORD PTR _p_max$[ebp]

; 142  : }

  00298	52		 push	 edx
  00299	8b cd		 mov	 ecx, ebp
  0029b	50		 push	 eax
  0029c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@Lag_max
  002a2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002a7	58		 pop	 eax
  002a8	5a		 pop	 edx
  002a9	5f		 pop	 edi
  002aa	5e		 pop	 esi
  002ab	5b		 pop	 ebx
  002ac	81 c4 50 01 00
	00		 add	 esp, 336		; 00000150H
  002b2	3b ec		 cmp	 ebp, esp
  002b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b9	8b e5		 mov	 esp, ebp
  002bb	5d		 pop	 ebp
  002bc	c3		 ret	 0
  002bd	8d 49 00	 npad	 3
$LN15@Lag_max:
  002c0	02 00 00 00	 DD	 2
  002c4	00 00 00 00	 DD	 $LN14@Lag_max
$LN14@Lag_max:
  002c8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  002cc	02 00 00 00	 DD	 2
  002d0	00 00 00 00	 DD	 $LN12@Lag_max
  002d4	a4 ff ff ff	 DD	 -92			; ffffffa4H
  002d8	02 00 00 00	 DD	 2
  002dc	00 00 00 00	 DD	 $LN13@Lag_max
$LN13@Lag_max:
  002e0	74		 DB	 116			; 00000074H
  002e1	30		 DB	 48			; 00000030H
  002e2	5f		 DB	 95			; 0000005fH
  002e3	6c		 DB	 108			; 0000006cH
  002e4	00		 DB	 0
$LN12@Lag_max:
  002e5	74		 DB	 116			; 00000074H
  002e6	30		 DB	 48			; 00000030H
  002e7	5f		 DB	 95			; 0000005fH
  002e8	68		 DB	 104			; 00000068H
  002e9	00		 DB	 0
_Lag_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\p_ol_wgh.c
;	COMDAT _Pitch_ol_wgh
_TEXT	SEGMENT
_scal_sig$ = -1284					; size = 4
_scaled_signal$ = -1272					; size = 606
_corr_ptr$ = -656					; size = 4
_corr$ = -644						; size = 576
_corr_hp_max$ = -60					; size = 2
_t0$ = -48						; size = 4
_p_max1$ = -36						; size = 2
_max1$ = -24						; size = 2
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_st$ = 8						; size = 4
_vadSt$ = 12						; size = 4
_signal$ = 16						; size = 4
_pit_min$ = 20						; size = 2
_pit_max$ = 24						; size = 2
_L_frame$ = 28						; size = 2
_old_lags$ = 32						; size = 4
_ol_gain_flg$ = 36					; size = 4
_idx$ = 40						; size = 2
_dtx$ = 44						; size = 4
_Pitch_ol_wgh PROC					; COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 05 00
	00		 sub	 esp, 1480		; 000005c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 fa ff
	ff		 lea	 edi, DWORD PTR [ebp-1480]
  00012	b9 72 01 00 00	 mov	 ecx, 370		; 00000172H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 241  :     Word16 i;
; 242  :     Word16 max1;
; 243  :     Word16 p_max1;
; 244  :     Word32 t0;
; 245  : #ifndef VAD2
; 246  :     Word16 corr_hp_max;
; 247  : #endif
; 248  :     Word32 corr[PIT_MAX+1], *corr_ptr;    
; 249  : 
; 250  :     /* Scaled signal */
; 251  :     Word16 scaled_signal[PIT_MAX + L_FRAME];
; 252  :     Word16 *scal_sig;
; 253  : 
; 254  :     scal_sig = &scaled_signal[pit_max];                          move16 (); 

  00028	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  0002c	8d 8c 45 08 fb
	ff ff		 lea	 ecx, DWORD PTR _scaled_signal$[ebp+eax*2]
  00033	89 8d fc fa ff
	ff		 mov	 DWORD PTR _scal_sig$[ebp], ecx
  00039	e8 00 00 00 00	 call	 _move16

; 255  : 
; 256  :     t0 = 0L;                                                     move32 (); 

  0003e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _t0$[ebp], 0
  00045	e8 00 00 00 00	 call	 _move32

; 257  :     for (i = -pit_max; i < L_frame; i++)

  0004a	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  0004e	f7 d8		 neg	 eax
  00050	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00054	eb 0c		 jmp	 SHORT $LN25@Pitch_ol_w
$LN24@Pitch_ol_w:
  00056	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0005a	66 83 c0 01	 add	 ax, 1
  0005e	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN25@Pitch_ol_w:
  00062	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00066	0f bf 4d 1c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  0006a	3b c1		 cmp	 eax, ecx
  0006c	7d 29		 jge	 SHORT $LN23@Pitch_ol_w

; 258  :     {
; 259  :         t0 = L_mac (t0, signal[i], signal[i]);

  0006e	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00072	8b 4d 10	 mov	 ecx, DWORD PTR _signal$[ebp]
  00075	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00079	52		 push	 edx
  0007a	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0007e	8b 4d 10	 mov	 ecx, DWORD PTR _signal$[ebp]
  00081	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00085	52		 push	 edx
  00086	8b 45 d0	 mov	 eax, DWORD PTR _t0$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _L_mac
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00092	89 45 d0	 mov	 DWORD PTR _t0$[ebp], eax

; 260  :     }

  00095	eb bf		 jmp	 SHORT $LN24@Pitch_ol_w
$LN23@Pitch_ol_w:

; 261  :     /*--------------------------------------------------------*
; 262  :      * Scaling of input signal.                               *
; 263  :      *                                                        *
; 264  :      *   if Overflow        -> scal_sig[i] = signal[i]>>2     *
; 265  :      *   else if t0 < 1^22  -> scal_sig[i] = signal[i]<<2     *
; 266  :      *   else               -> scal_sig[i] = signal[i]        *
; 267  :      *--------------------------------------------------------*/
; 268  : 
; 269  :     /*--------------------------------------------------------*
; 270  :      *  Verification for risk of overflow.                    *
; 271  :      *--------------------------------------------------------*/
; 272  : 
; 273  :     test (); test (); 

  00097	e8 00 00 00 00	 call	 _test
  0009c	e8 00 00 00 00	 call	 _test

; 274  :     if (L_sub (t0, MAX_32) == 0L)               /* Test for overflow */

  000a1	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  000a6	8b 45 d0	 mov	 eax, DWORD PTR _t0$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _L_sub
  000af	83 c4 08	 add	 esp, 8
  000b2	85 c0		 test	 eax, eax
  000b4	75 54		 jne	 SHORT $LN22@Pitch_ol_w

; 275  :     {
; 276  :         for (i = -pit_max; i < L_frame; i++)

  000b6	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  000ba	f7 d8		 neg	 eax
  000bc	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  000c0	eb 0c		 jmp	 SHORT $LN21@Pitch_ol_w
$LN20@Pitch_ol_w:
  000c2	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  000c6	66 83 c0 01	 add	 ax, 1
  000ca	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN21@Pitch_ol_w:
  000ce	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000d2	0f bf 4d 1c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  000d6	3b c1		 cmp	 eax, ecx
  000d8	7d 2b		 jge	 SHORT $LN19@Pitch_ol_w

; 277  :         {
; 278  :             scal_sig[i] = shr (signal[i], 3);   move16 (); 

  000da	6a 03		 push	 3
  000dc	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000e0	8b 4d 10	 mov	 ecx, DWORD PTR _signal$[ebp]
  000e3	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000e7	52		 push	 edx
  000e8	e8 00 00 00 00	 call	 _shr
  000ed	83 c4 08	 add	 esp, 8
  000f0	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  000f4	8b 95 fc fa ff
	ff		 mov	 edx, DWORD PTR _scal_sig$[ebp]
  000fa	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000fe	e8 00 00 00 00	 call	 _move16

; 279  :         }

  00103	eb bd		 jmp	 SHORT $LN20@Pitch_ol_w
$LN19@Pitch_ol_w:

; 280  :     }
; 281  :     else if (L_sub (t0, (Word32) 1048576L) < (Word32) 0)

  00105	e9 aa 00 00 00	 jmp	 $LN18@Pitch_ol_w
$LN22@Pitch_ol_w:
  0010a	68 00 00 10 00	 push	 1048576			; 00100000H
  0010f	8b 45 d0	 mov	 eax, DWORD PTR _t0$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 _L_sub
  00118	83 c4 08	 add	 esp, 8
  0011b	85 c0		 test	 eax, eax
  0011d	7d 51		 jge	 SHORT $LN17@Pitch_ol_w

; 282  :     {
; 283  :         for (i = -pit_max; i < L_frame; i++)

  0011f	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  00123	f7 d8		 neg	 eax
  00125	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00129	eb 0c		 jmp	 SHORT $LN16@Pitch_ol_w
$LN15@Pitch_ol_w:
  0012b	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0012f	66 83 c0 01	 add	 ax, 1
  00133	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN16@Pitch_ol_w:
  00137	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0013b	0f bf 4d 1c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  0013f	3b c1		 cmp	 eax, ecx
  00141	7d 2b		 jge	 SHORT $LN14@Pitch_ol_w

; 284  :         {
; 285  :             scal_sig[i] = shl (signal[i], 3);   move16 (); 

  00143	6a 03		 push	 3
  00145	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00149	8b 4d 10	 mov	 ecx, DWORD PTR _signal$[ebp]
  0014c	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 _shl
  00156	83 c4 08	 add	 esp, 8
  00159	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  0015d	8b 95 fc fa ff
	ff		 mov	 edx, DWORD PTR _scal_sig$[ebp]
  00163	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00167	e8 00 00 00 00	 call	 _move16

; 286  :         }

  0016c	eb bd		 jmp	 SHORT $LN15@Pitch_ol_w
$LN14@Pitch_ol_w:

; 287  :     }
; 288  :     else

  0016e	eb 44		 jmp	 SHORT $LN18@Pitch_ol_w
$LN17@Pitch_ol_w:

; 289  :     {
; 290  :         for (i = -pit_max; i < L_frame; i++)

  00170	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  00174	f7 d8		 neg	 eax
  00176	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0017a	eb 0c		 jmp	 SHORT $LN12@Pitch_ol_w
$LN11@Pitch_ol_w:
  0017c	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00180	66 83 c0 01	 add	 ax, 1
  00184	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN12@Pitch_ol_w:
  00188	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0018c	0f bf 4d 1c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  00190	3b c1		 cmp	 eax, ecx
  00192	7d 20		 jge	 SHORT $LN18@Pitch_ol_w

; 291  :         {
; 292  :             scal_sig[i] = signal[i];            move16 (); 

  00194	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00198	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  0019c	8b 95 fc fa ff
	ff		 mov	 edx, DWORD PTR _scal_sig$[ebp]
  001a2	8b 75 10	 mov	 esi, DWORD PTR _signal$[ebp]
  001a5	66 8b 04 46	 mov	 ax, WORD PTR [esi+eax*2]
  001a9	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ad	e8 00 00 00 00	 call	 _move16

; 293  :         }

  001b2	eb c8		 jmp	 SHORT $LN11@Pitch_ol_w
$LN18@Pitch_ol_w:

; 294  :     }
; 295  : 
; 296  :     /* calculate all coreelations of scal_sig, from pit_min to pit_max */
; 297  :     corr_ptr = &corr[pit_max];                  move32 ();

  001b4	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  001b8	8d 8c 85 7c fd
	ff ff		 lea	 ecx, DWORD PTR _corr$[ebp+eax*4]
  001bf	89 8d 70 fd ff
	ff		 mov	 DWORD PTR _corr_ptr$[ebp], ecx
  001c5	e8 00 00 00 00	 call	 _move32

; 298  :     comp_corr (scal_sig, L_frame, pit_max, pit_min, corr_ptr); 

  001ca	8b 85 70 fd ff
	ff		 mov	 eax, DWORD PTR _corr_ptr$[ebp]
  001d0	50		 push	 eax
  001d1	0f b7 4d 14	 movzx	 ecx, WORD PTR _pit_min$[ebp]
  001d5	51		 push	 ecx
  001d6	0f b7 55 18	 movzx	 edx, WORD PTR _pit_max$[ebp]
  001da	52		 push	 edx
  001db	0f b7 45 1c	 movzx	 eax, WORD PTR _L_frame$[ebp]
  001df	50		 push	 eax
  001e0	8b 8d fc fa ff
	ff		 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  001e6	51		 push	 ecx
  001e7	e8 00 00 00 00	 call	 _comp_corr
  001ec	83 c4 14	 add	 esp, 20			; 00000014H

; 299  : 
; 300  :     p_max1 = Lag_max (vadSt, corr_ptr, scal_sig, L_frame, pit_max, pit_min,
; 301  :                       st->old_T0_med, &max1, st->wght_flg, &ol_gain_flg[idx],
; 302  :                       dtx);

  001ef	8b 45 2c	 mov	 eax, DWORD PTR _dtx$[ebp]
  001f2	50		 push	 eax
  001f3	0f bf 4d 28	 movsx	 ecx, WORD PTR _idx$[ebp]
  001f7	8b 55 24	 mov	 edx, DWORD PTR _ol_gain_flg$[ebp]
  001fa	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  001fd	50		 push	 eax
  001fe	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00201	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  00205	52		 push	 edx
  00206	8d 45 e8	 lea	 eax, DWORD PTR _max1$[ebp]
  00209	50		 push	 eax
  0020a	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0020d	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00210	52		 push	 edx
  00211	0f b7 45 14	 movzx	 eax, WORD PTR _pit_min$[ebp]
  00215	50		 push	 eax
  00216	0f b7 4d 18	 movzx	 ecx, WORD PTR _pit_max$[ebp]
  0021a	51		 push	 ecx
  0021b	0f b7 55 1c	 movzx	 edx, WORD PTR _L_frame$[ebp]
  0021f	52		 push	 edx
  00220	8b 85 fc fa ff
	ff		 mov	 eax, DWORD PTR _scal_sig$[ebp]
  00226	50		 push	 eax
  00227	8b 8d 70 fd ff
	ff		 mov	 ecx, DWORD PTR _corr_ptr$[ebp]
  0022d	51		 push	 ecx
  0022e	8b 55 0c	 mov	 edx, DWORD PTR _vadSt$[ebp]
  00231	52		 push	 edx
  00232	e8 00 00 00 00	 call	 _Lag_max
  00237	83 c4 2c	 add	 esp, 44			; 0000002cH
  0023a	66 89 45 dc	 mov	 WORD PTR _p_max1$[ebp], ax

; 303  :     move16 ();

  0023e	e8 00 00 00 00	 call	 _move16

; 304  : 
; 305  :     test (); move16 ();

  00243	e8 00 00 00 00	 call	 _test
  00248	e8 00 00 00 00	 call	 _move16

; 306  :     if (ol_gain_flg[idx] > 0)

  0024d	0f bf 45 28	 movsx	 eax, WORD PTR _idx$[ebp]
  00251	8b 4d 24	 mov	 ecx, DWORD PTR _ol_gain_flg$[ebp]
  00254	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  00258	85 d2		 test	 edx, edx
  0025a	0f 8e 81 00 00
	00		 jle	 $LN9@Pitch_ol_w

; 307  :     {
; 308  :        /* Calculate 5-point median of previous lags */
; 309  :        for (i = 4; i > 0; i--) /* Shift buffer */

  00260	b8 04 00 00 00	 mov	 eax, 4
  00265	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00269	eb 0c		 jmp	 SHORT $LN8@Pitch_ol_w
$LN7@Pitch_ol_w:
  0026b	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0026f	66 83 e8 01	 sub	 ax, 1
  00273	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN8@Pitch_ol_w:
  00277	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0027b	85 c0		 test	 eax, eax
  0027d	7e 1e		 jle	 SHORT $LN6@Pitch_ol_w

; 310  :        {
; 311  :           old_lags[i] = old_lags[i-1];              move16 ();

  0027f	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00283	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00287	8b 55 20	 mov	 edx, DWORD PTR _old_lags$[ebp]
  0028a	8b 75 20	 mov	 esi, DWORD PTR _old_lags$[ebp]
  0028d	66 8b 44 46 fe	 mov	 ax, WORD PTR [esi+eax*2-2]
  00292	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00296	e8 00 00 00 00	 call	 _move16

; 312  :        }

  0029b	eb ce		 jmp	 SHORT $LN7@Pitch_ol_w
$LN6@Pitch_ol_w:

; 313  :        old_lags[0] = p_max1;                        move16 (); 

  0029d	b8 02 00 00 00	 mov	 eax, 2
  002a2	6b c8 00	 imul	 ecx, eax, 0
  002a5	8b 55 20	 mov	 edx, DWORD PTR _old_lags$[ebp]
  002a8	66 8b 45 dc	 mov	 ax, WORD PTR _p_max1$[ebp]
  002ac	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  002b0	e8 00 00 00 00	 call	 _move16

; 314  :        st->old_T0_med = gmed_n (old_lags, 5);       move16 ();

  002b5	6a 05		 push	 5
  002b7	8b 45 20	 mov	 eax, DWORD PTR _old_lags$[ebp]
  002ba	50		 push	 eax
  002bb	e8 00 00 00 00	 call	 _gmed_n
  002c0	83 c4 08	 add	 esp, 8
  002c3	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  002c6	66 89 01	 mov	 WORD PTR [ecx], ax
  002c9	e8 00 00 00 00	 call	 _move16

; 315  :        st->ada_w = 32767;                           move16 (); /* Q15 = 1.0 */

  002ce	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  002d3	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  002d6	66 89 41 02	 mov	 WORD PTR [ecx+2], ax
  002da	e8 00 00 00 00	 call	 _move16

; 316  :     }	
; 317  :     else

  002df	eb 2b		 jmp	 SHORT $LN5@Pitch_ol_w
$LN9@Pitch_ol_w:

; 318  :     {        
; 319  :        st->old_T0_med = p_max1;                     move16 ();

  002e1	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  002e4	66 8b 4d dc	 mov	 cx, WORD PTR _p_max1$[ebp]
  002e8	66 89 08	 mov	 WORD PTR [eax], cx
  002eb	e8 00 00 00 00	 call	 _move16

; 320  :        st->ada_w = mult(st->ada_w, 29491);      /* = ada_w = ada_w * 0.9 */

  002f0	68 33 73 00 00	 push	 29491			; 00007333H
  002f5	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  002f8	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  002fc	51		 push	 ecx
  002fd	e8 00 00 00 00	 call	 _mult
  00302	83 c4 08	 add	 esp, 8
  00305	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00308	66 89 42 02	 mov	 WORD PTR [edx+2], ax
$LN5@Pitch_ol_w:

; 321  :     }
; 322  :     
; 323  :     test ();

  0030c	e8 00 00 00 00	 call	 _test

; 324  :     if (sub(st->ada_w, 9830) < 0)  /* ada_w - 0.3 */

  00311	68 66 26 00 00	 push	 9830			; 00002666H
  00316	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00319	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0031d	51		 push	 ecx
  0031e	e8 00 00 00 00	 call	 _sub
  00323	83 c4 08	 add	 esp, 8
  00326	0f bf d0	 movsx	 edx, ax
  00329	85 d2		 test	 edx, edx
  0032b	7d 10		 jge	 SHORT $LN4@Pitch_ol_w

; 325  :     { 
; 326  :        st->wght_flg = 0;                            move16 ();

  0032d	33 c0		 xor	 eax, eax
  0032f	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00332	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  00336	e8 00 00 00 00	 call	 _move16

; 327  :     } 
; 328  :     else

  0033b	eb 11		 jmp	 SHORT $LN3@Pitch_ol_w
$LN4@Pitch_ol_w:

; 329  :     {
; 330  :        st->wght_flg = 1;                            move16 ();

  0033d	b8 01 00 00 00	 mov	 eax, 1
  00342	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00345	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  00349	e8 00 00 00 00	 call	 _move16
$LN3@Pitch_ol_w:

; 331  :     }
; 332  : 
; 333  : #ifndef VAD2
; 334  :     if (dtx)

  0034e	83 7d 2c 00	 cmp	 DWORD PTR _dtx$[ebp], 0
  00352	74 55		 je	 SHORT $LN2@Pitch_ol_w

; 335  :     {  /* no test() call since this if is only in simulation env */
; 336  :        test ();

  00354	e8 00 00 00 00	 call	 _test

; 337  :        if (sub(idx, 1) == 0)

  00359	6a 01		 push	 1
  0035b	0f b7 45 28	 movzx	 eax, WORD PTR _idx$[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 _sub
  00365	83 c4 08	 add	 esp, 8
  00368	0f bf c8	 movsx	 ecx, ax
  0036b	85 c9		 test	 ecx, ecx
  0036d	75 3a		 jne	 SHORT $LN2@Pitch_ol_w

; 338  :        {
; 339  :           /* calculate max high-passed filtered correlation of all lags */
; 340  :           hp_max (corr_ptr, scal_sig, L_frame, pit_max, pit_min, &corr_hp_max); 

  0036f	8d 45 c4	 lea	 eax, DWORD PTR _corr_hp_max$[ebp]
  00372	50		 push	 eax
  00373	0f b7 4d 14	 movzx	 ecx, WORD PTR _pit_min$[ebp]
  00377	51		 push	 ecx
  00378	0f b7 55 18	 movzx	 edx, WORD PTR _pit_max$[ebp]
  0037c	52		 push	 edx
  0037d	0f b7 45 1c	 movzx	 eax, WORD PTR _L_frame$[ebp]
  00381	50		 push	 eax
  00382	8b 8d fc fa ff
	ff		 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  00388	51		 push	 ecx
  00389	8b 95 70 fd ff
	ff		 mov	 edx, DWORD PTR _corr_ptr$[ebp]
  0038f	52		 push	 edx
  00390	e8 00 00 00 00	 call	 _hp_max
  00395	83 c4 18	 add	 esp, 24			; 00000018H

; 341  :           
; 342  :           /* update complex background detector */
; 343  :           vad_complex_detection_update(vadSt, corr_hp_max); 

  00398	0f b7 45 c4	 movzx	 eax, WORD PTR _corr_hp_max$[ebp]
  0039c	50		 push	 eax
  0039d	8b 4d 0c	 mov	 ecx, DWORD PTR _vadSt$[ebp]
  003a0	51		 push	 ecx
  003a1	e8 00 00 00 00	 call	 _vad_complex_detection_update
  003a6	83 c4 08	 add	 esp, 8
$LN2@Pitch_ol_w:

; 344  :        }
; 345  :     }
; 346  : #endif
; 347  :     
; 348  :     return (p_max1);

  003a9	66 8b 45 dc	 mov	 ax, WORD PTR _p_max1$[ebp]

; 349  : }

  003ad	52		 push	 edx
  003ae	8b cd		 mov	 ecx, ebp
  003b0	50		 push	 eax
  003b1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN33@Pitch_ol_w
  003b7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003bc	58		 pop	 eax
  003bd	5a		 pop	 edx
  003be	5f		 pop	 edi
  003bf	5e		 pop	 esi
  003c0	5b		 pop	 ebx
  003c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c4	33 cd		 xor	 ecx, ebp
  003c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003cb	81 c4 c8 05 00
	00		 add	 esp, 1480		; 000005c8H
  003d1	3b ec		 cmp	 ebp, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	8b e5		 mov	 esp, ebp
  003da	5d		 pop	 ebp
  003db	c3		 ret	 0
$LN33@Pitch_ol_w:
  003dc	04 00 00 00	 DD	 4
  003e0	00 00 00 00	 DD	 $LN32@Pitch_ol_w
$LN32@Pitch_ol_w:
  003e4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  003e8	02 00 00 00	 DD	 2
  003ec	00 00 00 00	 DD	 $LN28@Pitch_ol_w
  003f0	c4 ff ff ff	 DD	 -60			; ffffffc4H
  003f4	02 00 00 00	 DD	 2
  003f8	00 00 00 00	 DD	 $LN29@Pitch_ol_w
  003fc	7c fd ff ff	 DD	 -644			; fffffd7cH
  00400	40 02 00 00	 DD	 576			; 00000240H
  00404	00 00 00 00	 DD	 $LN30@Pitch_ol_w
  00408	08 fb ff ff	 DD	 -1272			; fffffb08H
  0040c	5e 02 00 00	 DD	 606			; 0000025eH
  00410	00 00 00 00	 DD	 $LN31@Pitch_ol_w
$LN31@Pitch_ol_w:
  00414	73		 DB	 115			; 00000073H
  00415	63		 DB	 99			; 00000063H
  00416	61		 DB	 97			; 00000061H
  00417	6c		 DB	 108			; 0000006cH
  00418	65		 DB	 101			; 00000065H
  00419	64		 DB	 100			; 00000064H
  0041a	5f		 DB	 95			; 0000005fH
  0041b	73		 DB	 115			; 00000073H
  0041c	69		 DB	 105			; 00000069H
  0041d	67		 DB	 103			; 00000067H
  0041e	6e		 DB	 110			; 0000006eH
  0041f	61		 DB	 97			; 00000061H
  00420	6c		 DB	 108			; 0000006cH
  00421	00		 DB	 0
$LN30@Pitch_ol_w:
  00422	63		 DB	 99			; 00000063H
  00423	6f		 DB	 111			; 0000006fH
  00424	72		 DB	 114			; 00000072H
  00425	72		 DB	 114			; 00000072H
  00426	00		 DB	 0
$LN29@Pitch_ol_w:
  00427	63		 DB	 99			; 00000063H
  00428	6f		 DB	 111			; 0000006fH
  00429	72		 DB	 114			; 00000072H
  0042a	72		 DB	 114			; 00000072H
  0042b	5f		 DB	 95			; 0000005fH
  0042c	68		 DB	 104			; 00000068H
  0042d	70		 DB	 112			; 00000070H
  0042e	5f		 DB	 95			; 0000005fH
  0042f	6d		 DB	 109			; 0000006dH
  00430	61		 DB	 97			; 00000061H
  00431	78		 DB	 120			; 00000078H
  00432	00		 DB	 0
$LN28@Pitch_ol_w:
  00433	6d		 DB	 109			; 0000006dH
  00434	61		 DB	 97			; 00000061H
  00435	78		 DB	 120			; 00000078H
  00436	31		 DB	 49			; 00000031H
  00437	00		 DB	 0
_Pitch_ol_wgh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\p_ol_wgh.c
;	COMDAT _p_ol_wgh_exit
_TEXT	SEGMENT
_state$ = 8						; size = 4
_p_ol_wgh_exit PROC					; COMDAT

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 210  :     if (state == NULL || *state == NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	74 08		 je	 SHORT $LN1@p_ol_wgh_e
  00024	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 02		 jne	 SHORT $LN2@p_ol_wgh_e
$LN1@p_ol_wgh_e:

; 211  :         return;

  0002c	eb 21		 jmp	 SHORT $LN3@p_ol_wgh_e
$LN2@p_ol_wgh_e:

; 212  :      
; 213  :     /* deallocate memory */
; 214  :     free(*state);

  0002e	8b f4		 mov	 esi, esp
  00030	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0003c	83 c4 04	 add	 esp, 4
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 215  :     *state = NULL;

  00046	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@p_ol_wgh_e:

; 216  :     
; 217  :     return;
; 218  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_p_ol_wgh_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\p_ol_wgh.c
;	COMDAT _p_ol_wgh_reset
_TEXT	SEGMENT
_st$ = 8						; size = 4
_p_ol_wgh_reset PROC					; COMDAT

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 188  :    if (st == (pitchOLWghtState *) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _st$[ebp], 0
  00022	75 35		 jne	 SHORT $LN1@p_ol_wgh_r

; 189  :       fprintf(stderr, "p_ol_wgh_reset: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BAFGBFKL@p_ol_wgh_reset?3?5invalid?5paramete@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 190  :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 1f		 jmp	 SHORT $LN2@p_ol_wgh_r
$LN1@p_ol_wgh_r:

; 191  :    }
; 192  :    
; 193  :    /* Reset pitch search states */
; 194  :    st->old_T0_med = 40;

  00059	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00061	66 89 01	 mov	 WORD PTR [ecx], ax

; 195  :    st->ada_w = 0;

  00064	33 c0		 xor	 eax, eax
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00069	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 196  :    st->wght_flg = 0; 

  0006d	33 c0		 xor	 eax, eax
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00072	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 197  :    
; 198  :    return 0;

  00076	33 c0		 xor	 eax, eax
$LN2@p_ol_wgh_r:

; 199  : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00081	3b ec		 cmp	 ebp, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_p_ol_wgh_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\p_ol_wgh.c
;	COMDAT _p_ol_wgh_init
_TEXT	SEGMENT
_s$ = -8						; size = 4
_state$ = 8						; size = 4
_p_ol_wgh_init PROC					; COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 158  :     pitchOLWghtState* s;
; 159  :     
; 160  :     if (state == (pitchOLWghtState **) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 35		 jne	 SHORT $LN2@p_ol_wgh_i

; 161  :         fprintf(stderr, "p_ol_wgh_init: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EGMLDJJN@p_ol_wgh_init?3?5invalid?5parameter@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 162  :         return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 71		 jmp	 SHORT $LN3@p_ol_wgh_i
$LN2@p_ol_wgh_i:

; 163  :     }
; 164  :     *state = NULL;

  00059	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 165  :     
; 166  :     /* allocate memory */
; 167  :     if ((s= (pitchOLWghtState *) malloc(sizeof(pitchOLWghtState))) == NULL){

  00062	8b f4		 mov	 esi, esp
  00064	6a 06		 push	 6
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006c	83 c4 04	 add	 esp, 4
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  00079	83 7d f8 00	 cmp	 DWORD PTR _s$[ebp], 0
  0007d	75 35		 jne	 SHORT $LN1@p_ol_wgh_i

; 168  :         fprintf(stderr, "p_ol_wgh_init: can not malloc state structure\n");

  0007f	8b f4		 mov	 esi, esp
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@LDANJGA@p_ol_wgh_init?3?5can?5not?5malloc?5st@
  00086	8b fc		 mov	 edi, esp
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0008e	3b fc		 cmp	 edi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009a	d1 e1		 shl	 ecx, 1
  0009c	03 c1		 add	 eax, ecx
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  000a5	83 c4 08	 add	 esp, 8
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 169  :         return -1;

  000af	83 c8 ff	 or	 eax, -1
  000b2	eb 16		 jmp	 SHORT $LN3@p_ol_wgh_i
$LN1@p_ol_wgh_i:

; 170  :     }
; 171  : 
; 172  :     p_ol_wgh_reset(s);

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _p_ol_wgh_reset
  000bd	83 c4 04	 add	 esp, 4

; 173  :     
; 174  :     *state = s;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000c6	89 08		 mov	 DWORD PTR [eax], ecx

; 175  :     
; 176  :     return 0;

  000c8	33 c0		 xor	 eax, eax
$LN3@p_ol_wgh_i:

; 177  : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_p_ol_wgh_init ENDP
_TEXT	ENDS
END
