; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\inv_sqrt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_inv_sqrt_id
CONST	SEGMENT
_inv_sqrt_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_table	DW	07fffH
	DW	07c2eH
	DW	078aeH
	DW	07576H
	DW	0727dH
	DW	06fbaH
	DW	06d29H
	DW	06ac2H
	DW	06883H
	DW	06666H
	DW	06469H
	DW	06289H
	DW	060c2H
	DW	05f13H
	DW	05d7aH
	DW	05bf5H
	DW	05a82H
	DW	05921H
	DW	057cfH
	DW	0568bH
	DW	05555H
	DW	0542cH
	DW	0530fH
	DW	051fcH
	DW	050f4H
	DW	04ff6H
	DW	04f01H
	DW	04e14H
	DW	04d30H
	DW	04c53H
	DW	04b7eH
	DW	04aafH
	DW	049e7H
	DW	04925H
	DW	04868H
	DW	047b2H
	DW	04700H
	DW	04654H
	DW	045adH
	DW	0450aH
	DW	0446bH
	DW	043d1H
	DW	0433bH
	DW	042a8H
	DW	04219H
	DW	0418eH
	DW	04106H
	DW	04082H
	DW	04000H
CONST	ENDS
PUBLIC	_Inv_sqrt
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shr:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_msu:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr:PROC
EXTRN	_L_deposit_h:PROC
EXTRN	_norm_l:PROC
EXTRN	_logic16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\inv_sqrt.c
;	COMDAT _Inv_sqrt
_TEXT	SEGMENT
_L_y$ = -56						; size = 4
_tmp$ = -44						; size = 2
_a$ = -32						; size = 2
_i$ = -20						; size = 2
_exp$ = -8						; size = 2
_L_x$ = 8						; size = 4
_Inv_sqrt PROC						; COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 63   :     Word16 exp, i, a, tmp;
; 64   :     Word32 L_y;
; 65   : 
; 66   :     test (); 

  0001e	e8 00 00 00 00	 call	 _test

; 67   :     if (L_x <= (Word32) 0)

  00023	83 7d 08 00	 cmp	 DWORD PTR _L_x$[ebp], 0
  00027	7f 0a		 jg	 SHORT $LN2@Inv_sqrt

; 68   :         return ((Word32) 0x3fffffffL);

  00029	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0002e	e9 56 01 00 00	 jmp	 $LN3@Inv_sqrt
$LN2@Inv_sqrt:

; 69   : 
; 70   :     exp = norm_l (L_x);

  00033	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _norm_l
  0003c	83 c4 04	 add	 esp, 4
  0003f	66 89 45 f8	 mov	 WORD PTR _exp$[ebp], ax

; 71   :     L_x = L_shl (L_x, exp);     /* L_x is normalize */

  00043	0f b7 45 f8	 movzx	 eax, WORD PTR _exp$[ebp]
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _L_x$[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _L_shl
  00051	83 c4 08	 add	 esp, 8
  00054	89 45 08	 mov	 DWORD PTR _L_x$[ebp], eax

; 72   : 
; 73   :     exp = sub (30, exp);

  00057	0f b7 45 f8	 movzx	 eax, WORD PTR _exp$[ebp]
  0005b	50		 push	 eax
  0005c	6a 1e		 push	 30			; 0000001eH
  0005e	e8 00 00 00 00	 call	 _sub
  00063	83 c4 08	 add	 esp, 8
  00066	66 89 45 f8	 mov	 WORD PTR _exp$[ebp], ax

; 74   :     test (); logic16 (); 

  0006a	e8 00 00 00 00	 call	 _test
  0006f	e8 00 00 00 00	 call	 _logic16

; 75   :     if ((exp & 1) == 0)         /* If exponent even -> shift right */

  00074	0f bf 45 f8	 movsx	 eax, WORD PTR _exp$[ebp]
  00078	83 e0 01	 and	 eax, 1
  0007b	75 11		 jne	 SHORT $LN1@Inv_sqrt

; 76   :     {
; 77   :         L_x = L_shr (L_x, 1);

  0007d	6a 01		 push	 1
  0007f	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _L_shr
  00088	83 c4 08	 add	 esp, 8
  0008b	89 45 08	 mov	 DWORD PTR _L_x$[ebp], eax
$LN1@Inv_sqrt:

; 78   :     }
; 79   :     exp = shr (exp, 1);

  0008e	6a 01		 push	 1
  00090	0f b7 45 f8	 movzx	 eax, WORD PTR _exp$[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _shr
  0009a	83 c4 08	 add	 esp, 8
  0009d	66 89 45 f8	 mov	 WORD PTR _exp$[ebp], ax

; 80   :     exp = add (exp, 1);

  000a1	6a 01		 push	 1
  000a3	0f b7 45 f8	 movzx	 eax, WORD PTR _exp$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _add
  000ad	83 c4 08	 add	 esp, 8
  000b0	66 89 45 f8	 mov	 WORD PTR _exp$[ebp], ax

; 81   : 
; 82   :     L_x = L_shr (L_x, 9);

  000b4	6a 09		 push	 9
  000b6	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _L_shr
  000bf	83 c4 08	 add	 esp, 8
  000c2	89 45 08	 mov	 DWORD PTR _L_x$[ebp], eax

; 83   :     i = extract_h (L_x);        /* Extract b25-b31 */

  000c5	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 _extract_h
  000ce	83 c4 04	 add	 esp, 4
  000d1	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 84   :     L_x = L_shr (L_x, 1);

  000d5	6a 01		 push	 1
  000d7	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _L_shr
  000e0	83 c4 08	 add	 esp, 8
  000e3	89 45 08	 mov	 DWORD PTR _L_x$[ebp], eax

; 85   :     a = extract_l (L_x);        /* Extract b10-b24 */

  000e6	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _extract_l
  000ef	83 c4 04	 add	 esp, 4
  000f2	66 89 45 e0	 mov	 WORD PTR _a$[ebp], ax

; 86   :     a = a & (Word16) 0x7fff;    logic16 (); 

  000f6	0f bf 45 e0	 movsx	 eax, WORD PTR _a$[ebp]
  000fa	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  000ff	66 89 45 e0	 mov	 WORD PTR _a$[ebp], ax
  00103	e8 00 00 00 00	 call	 _logic16

; 87   : 
; 88   :     i = sub (i, 16);

  00108	6a 10		 push	 16			; 00000010H
  0010a	0f b7 45 ec	 movzx	 eax, WORD PTR _i$[ebp]
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 _sub
  00114	83 c4 08	 add	 esp, 8
  00117	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 89   : 
; 90   :     L_y = L_deposit_h (table[i]);       /* table[i] << 16          */

  0011b	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  0011f	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _table[eax*2]
  00127	51		 push	 ecx
  00128	e8 00 00 00 00	 call	 _L_deposit_h
  0012d	83 c4 04	 add	 esp, 4
  00130	89 45 c8	 mov	 DWORD PTR _L_y$[ebp], eax

; 91   :     tmp = sub (table[i], table[i + 1]); /* table[i] - table[i+1])  */

  00133	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  00137	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _table[eax*2+2]
  0013f	51		 push	 ecx
  00140	0f bf 55 ec	 movsx	 edx, WORD PTR _i$[ebp]
  00144	0f b7 04 55 00
	00 00 00	 movzx	 eax, WORD PTR _table[edx*2]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _sub
  00152	83 c4 08	 add	 esp, 8
  00155	66 89 45 d4	 mov	 WORD PTR _tmp$[ebp], ax

; 92   :     L_y = L_msu (L_y, tmp, a);  /* L_y -=  tmp*a*2         */

  00159	0f b7 45 e0	 movzx	 eax, WORD PTR _a$[ebp]
  0015d	50		 push	 eax
  0015e	0f b7 4d d4	 movzx	 ecx, WORD PTR _tmp$[ebp]
  00162	51		 push	 ecx
  00163	8b 55 c8	 mov	 edx, DWORD PTR _L_y$[ebp]
  00166	52		 push	 edx
  00167	e8 00 00 00 00	 call	 _L_msu
  0016c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016f	89 45 c8	 mov	 DWORD PTR _L_y$[ebp], eax

; 93   : 
; 94   :     L_y = L_shr (L_y, exp);     /* denormalization */

  00172	0f b7 45 f8	 movzx	 eax, WORD PTR _exp$[ebp]
  00176	50		 push	 eax
  00177	8b 4d c8	 mov	 ecx, DWORD PTR _L_y$[ebp]
  0017a	51		 push	 ecx
  0017b	e8 00 00 00 00	 call	 _L_shr
  00180	83 c4 08	 add	 esp, 8
  00183	89 45 c8	 mov	 DWORD PTR _L_y$[ebp], eax

; 95   : 
; 96   :     return (L_y);

  00186	8b 45 c8	 mov	 eax, DWORD PTR _L_y$[ebp]
$LN3@Inv_sqrt:

; 97   : }

  00189	5f		 pop	 edi
  0018a	5e		 pop	 esi
  0018b	5b		 pop	 ebx
  0018c	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00192	3b ec		 cmp	 ebp, esp
  00194	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00199	8b e5		 mov	 esp, ebp
  0019b	5d		 pop	 ebp
  0019c	c3		 ret	 0
_Inv_sqrt ENDP
_TEXT	ENDS
END
