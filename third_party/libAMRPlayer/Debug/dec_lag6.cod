; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\dec_lag6.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_dec_lag6_id
CONST	SEGMENT
_dec_lag6_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Dec_lag6
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_mult:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag6.c
;	COMDAT _Dec_lag6
_TEXT	SEGMENT
_T0_max$ = -32						; size = 2
_T0_min$ = -20						; size = 2
_i$ = -8						; size = 2
_index$ = 8						; size = 2
_pit_min$ = 12						; size = 2
_pit_max$ = 16						; size = 2
_i_subfr$ = 20						; size = 2
_T0$ = 24						; size = 4
_T0_frac$ = 28						; size = 4
_Dec_lag6 PROC						; COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 69   :     Word16 i;
; 70   :     Word16 T0_min, T0_max;
; 71   : 
; 72   :     test ();

  0001e	e8 00 00 00 00	 call	 _test

; 73   :     if (i_subfr == 0)          /* if 1st or 3rd subframe */

  00023	0f bf 45 14	 movsx	 eax, WORD PTR _i_subfr$[ebp]
  00027	85 c0		 test	 eax, eax
  00029	0f 85 eb 00 00
	00		 jne	 $LN6@Dec_lag6

; 74   :     {
; 75   :        test (); 

  0002f	e8 00 00 00 00	 call	 _test

; 76   :        if (sub (index, 463) < 0)

  00034	68 cf 01 00 00	 push	 463			; 000001cfH
  00039	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _sub
  00043	83 c4 08	 add	 esp, 8
  00046	0f bf c8	 movsx	 ecx, ax
  00049	85 c9		 test	 ecx, ecx
  0004b	0f 8d 9f 00 00
	00		 jge	 $LN5@Dec_lag6

; 77   :        {
; 78   :           /* T0 = (index+5)/6 + 17 */
; 79   :           *T0 = add (mult (add (index, 5), 5462), 17);

  00051	6a 11		 push	 17			; 00000011H
  00053	68 56 15 00 00	 push	 5462			; 00001556H
  00058	6a 05		 push	 5
  0005a	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _add
  00064	83 c4 08	 add	 esp, 8
  00067	0f b7 c8	 movzx	 ecx, ax
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 _mult
  00070	83 c4 08	 add	 esp, 8
  00073	0f b7 d0	 movzx	 edx, ax
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 _add
  0007c	83 c4 08	 add	 esp, 8
  0007f	8b 4d 18	 mov	 ecx, DWORD PTR _T0$[ebp]
  00082	66 89 01	 mov	 WORD PTR [ecx], ax

; 80   :           i = add (add (*T0, *T0), *T0);

  00085	8b 45 18	 mov	 eax, DWORD PTR _T0$[ebp]
  00088	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0008b	51		 push	 ecx
  0008c	8b 55 18	 mov	 edx, DWORD PTR _T0$[ebp]
  0008f	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00092	50		 push	 eax
  00093	8b 4d 18	 mov	 ecx, DWORD PTR _T0$[ebp]
  00096	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00099	52		 push	 edx
  0009a	e8 00 00 00 00	 call	 _add
  0009f	83 c4 08	 add	 esp, 8
  000a2	0f b7 c0	 movzx	 eax, ax
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _add
  000ab	83 c4 08	 add	 esp, 8
  000ae	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 81   :           /* *T0_frac = index - T0*6 + 105 */
; 82   :           *T0_frac = add (sub (index, add (i, i)), 105);

  000b2	6a 69		 push	 105			; 00000069H
  000b4	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  000b8	50		 push	 eax
  000b9	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _add
  000c3	83 c4 08	 add	 esp, 8
  000c6	0f b7 d0	 movzx	 edx, ax
  000c9	52		 push	 edx
  000ca	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _sub
  000d4	83 c4 08	 add	 esp, 8
  000d7	0f b7 c8	 movzx	 ecx, ax
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _add
  000e0	83 c4 08	 add	 esp, 8
  000e3	8b 55 1c	 mov	 edx, DWORD PTR _T0_frac$[ebp]
  000e6	66 89 02	 mov	 WORD PTR [edx], ax

; 83   :                                             move16 (); 

  000e9	e8 00 00 00 00	 call	 _move16

; 84   :        }
; 85   :        else

  000ee	eb 25		 jmp	 SHORT $LN4@Dec_lag6
$LN5@Dec_lag6:

; 86   :        {
; 87   :           *T0 = sub (index, 368);

  000f0	68 70 01 00 00	 push	 368			; 00000170H
  000f5	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _sub
  000ff	83 c4 08	 add	 esp, 8
  00102	8b 4d 18	 mov	 ecx, DWORD PTR _T0$[ebp]
  00105	66 89 01	 mov	 WORD PTR [ecx], ax

; 88   :           *T0_frac = 0;                     move16 (); 

  00108	33 c0		 xor	 eax, eax
  0010a	8b 4d 1c	 mov	 ecx, DWORD PTR _T0_frac$[ebp]
  0010d	66 89 01	 mov	 WORD PTR [ecx], ax
  00110	e8 00 00 00 00	 call	 _move16
$LN4@Dec_lag6:

; 89   :        }
; 90   :     }
; 91   :     else

  00115	e9 3e 01 00 00	 jmp	 $LN7@Dec_lag6
$LN6@Dec_lag6:

; 92   :        /* second or fourth subframe */
; 93   :     {
; 94   :        /* find T0_min and T0_max for 2nd (or 4th) subframe */
; 95   :         
; 96   :        T0_min = sub (*T0, 5);

  0011a	6a 05		 push	 5
  0011c	8b 45 18	 mov	 eax, DWORD PTR _T0$[ebp]
  0011f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00122	51		 push	 ecx
  00123	e8 00 00 00 00	 call	 _sub
  00128	83 c4 08	 add	 esp, 8
  0012b	66 89 45 ec	 mov	 WORD PTR _T0_min$[ebp], ax

; 97   : 
; 98   :        test (); 

  0012f	e8 00 00 00 00	 call	 _test

; 99   :        if (sub (T0_min, pit_min) < 0)

  00134	0f b7 45 0c	 movzx	 eax, WORD PTR _pit_min$[ebp]
  00138	50		 push	 eax
  00139	0f b7 4d ec	 movzx	 ecx, WORD PTR _T0_min$[ebp]
  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 _sub
  00143	83 c4 08	 add	 esp, 8
  00146	0f bf d0	 movsx	 edx, ax
  00149	85 d2		 test	 edx, edx
  0014b	7d 0d		 jge	 SHORT $LN2@Dec_lag6

; 100  :        {
; 101  :           T0_min = pit_min;                 move16 (); 

  0014d	66 8b 45 0c	 mov	 ax, WORD PTR _pit_min$[ebp]
  00151	66 89 45 ec	 mov	 WORD PTR _T0_min$[ebp], ax
  00155	e8 00 00 00 00	 call	 _move16
$LN2@Dec_lag6:

; 102  :        }
; 103  :        T0_max = add (T0_min, 9);

  0015a	6a 09		 push	 9
  0015c	0f b7 45 ec	 movzx	 eax, WORD PTR _T0_min$[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _add
  00166	83 c4 08	 add	 esp, 8
  00169	66 89 45 e0	 mov	 WORD PTR _T0_max$[ebp], ax

; 104  : 
; 105  :        test (); 

  0016d	e8 00 00 00 00	 call	 _test

; 106  :        if (sub (T0_max, pit_max) > 0)

  00172	0f b7 45 10	 movzx	 eax, WORD PTR _pit_max$[ebp]
  00176	50		 push	 eax
  00177	0f b7 4d e0	 movzx	 ecx, WORD PTR _T0_max$[ebp]
  0017b	51		 push	 ecx
  0017c	e8 00 00 00 00	 call	 _sub
  00181	83 c4 08	 add	 esp, 8
  00184	0f bf d0	 movsx	 edx, ax
  00187	85 d2		 test	 edx, edx
  00189	7e 20		 jle	 SHORT $LN1@Dec_lag6

; 107  :        {
; 108  :           T0_max = pit_max;                 move16 (); 

  0018b	66 8b 45 10	 mov	 ax, WORD PTR _pit_max$[ebp]
  0018f	66 89 45 e0	 mov	 WORD PTR _T0_max$[ebp], ax
  00193	e8 00 00 00 00	 call	 _move16

; 109  :           T0_min = sub (T0_max, 9);

  00198	6a 09		 push	 9
  0019a	0f b7 45 e0	 movzx	 eax, WORD PTR _T0_max$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 _sub
  001a4	83 c4 08	 add	 esp, 8
  001a7	66 89 45 ec	 mov	 WORD PTR _T0_min$[ebp], ax
$LN1@Dec_lag6:

; 110  :        }
; 111  :        
; 112  :        /* i = (index+5)/6 - 1 */
; 113  :        i = sub (mult (add (index, 5), 5462), 1);

  001ab	6a 01		 push	 1
  001ad	68 56 15 00 00	 push	 5462			; 00001556H
  001b2	6a 05		 push	 5
  001b4	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 _add
  001be	83 c4 08	 add	 esp, 8
  001c1	0f b7 c8	 movzx	 ecx, ax
  001c4	51		 push	 ecx
  001c5	e8 00 00 00 00	 call	 _mult
  001ca	83 c4 08	 add	 esp, 8
  001cd	0f b7 d0	 movzx	 edx, ax
  001d0	52		 push	 edx
  001d1	e8 00 00 00 00	 call	 _sub
  001d6	83 c4 08	 add	 esp, 8
  001d9	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 114  :        *T0 = add (i, T0_min);

  001dd	0f b7 45 ec	 movzx	 eax, WORD PTR _T0_min$[ebp]
  001e1	50		 push	 eax
  001e2	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  001e6	51		 push	 ecx
  001e7	e8 00 00 00 00	 call	 _add
  001ec	83 c4 08	 add	 esp, 8
  001ef	8b 55 18	 mov	 edx, DWORD PTR _T0$[ebp]
  001f2	66 89 02	 mov	 WORD PTR [edx], ax

; 115  :        i = add (add (i, i), i);

  001f5	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  001f9	50		 push	 eax
  001fa	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  001fe	51		 push	 ecx
  001ff	0f b7 55 f8	 movzx	 edx, WORD PTR _i$[ebp]
  00203	52		 push	 edx
  00204	e8 00 00 00 00	 call	 _add
  00209	83 c4 08	 add	 esp, 8
  0020c	0f b7 c0	 movzx	 eax, ax
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 _add
  00215	83 c4 08	 add	 esp, 8
  00218	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 116  :        *T0_frac = sub (sub (index, 3), add (i, i));

  0021c	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  00220	50		 push	 eax
  00221	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  00225	51		 push	 ecx
  00226	e8 00 00 00 00	 call	 _add
  0022b	83 c4 08	 add	 esp, 8
  0022e	0f b7 d0	 movzx	 edx, ax
  00231	52		 push	 edx
  00232	6a 03		 push	 3
  00234	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 _sub
  0023e	83 c4 08	 add	 esp, 8
  00241	0f b7 c8	 movzx	 ecx, ax
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 _sub
  0024a	83 c4 08	 add	 esp, 8
  0024d	8b 55 1c	 mov	 edx, DWORD PTR _T0_frac$[ebp]
  00250	66 89 02	 mov	 WORD PTR [edx], ax

; 117  :                                             move16 (); 

  00253	e8 00 00 00 00	 call	 _move16
$LN7@Dec_lag6:

; 118  :     }
; 119  : }

  00258	5f		 pop	 edi
  00259	5e		 pop	 esi
  0025a	5b		 pop	 ebx
  0025b	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00261	3b ec		 cmp	 ebp, esp
  00263	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00268	8b e5		 mov	 esp, ebp
  0026a	5d		 pop	 ebp
  0026b	c3		 ret	 0
_Dec_lag6 ENDP
_TEXT	ENDS
END
