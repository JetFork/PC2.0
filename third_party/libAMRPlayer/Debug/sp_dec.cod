; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\sp_dec.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_sp_dec_id
_DATA	SEGMENT
_bitno	DD	FLAT:_bitno_MR475
	DD	FLAT:_bitno_MR515
	DD	FLAT:_bitno_MR59
	DD	FLAT:_bitno_MR67
	DD	FLAT:_bitno_MR74
	DD	FLAT:_bitno_MR795
	DD	FLAT:_bitno_MR102
	DD	FLAT:_bitno_MR122
	DD	FLAT:_bitno_MRDTX
_toc_byte DB	04H
	DB	0cH
	DB	014H
	DB	01cH
	DB	024H
	DB	02cH
	DB	034H
	DB	03cH
	DB	044H
	DB	04cH
	DB	054H
	DB	05cH
	DB	064H
	DB	06cH
	DB	074H
	DB	07cH
_unpacked_size DW 05fH
	DW	067H
	DW	076H
	DW	086H
	DW	094H
	DW	09fH
	DW	0ccH
	DW	0f4H
	DW	023H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
_packed_size DW	0dH
	DW	0eH
	DW	010H
	DW	012H
	DW	014H
	DW	015H
	DW	01bH
	DW	020H
	DW	06H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01H
_unused_size DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	01H
	DW	04H
	DW	04H
	DW	01H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	ORG $+4
_sort_475 DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	030H
	DW	031H
	DW	03dH
	DW	03eH
	DW	052H
	DW	053H
	DW	02fH
	DW	02eH
	DW	02dH
	DW	02cH
	DW	051H
	DW	050H
	DW	04fH
	DW	04eH
	DW	011H
	DW	012H
	DW	014H
	DW	016H
	DW	04dH
	DW	04cH
	DW	04bH
	DW	04aH
	DW	01dH
	DW	01eH
	DW	02bH
	DW	02aH
	DW	029H
	DW	028H
	DW	026H
	DW	027H
	DW	010H
	DW	013H
	DW	015H
	DW	032H
	DW	033H
	DW	03bH
	DW	03cH
	DW	03fH
	DW	040H
	DW	048H
	DW	049H
	DW	054H
	DW	055H
	DW	05dH
	DW	05eH
	DW	020H
	DW	021H
	DW	023H
	DW	024H
	DW	035H
	DW	036H
	DW	038H
	DW	039H
	DW	042H
	DW	043H
	DW	045H
	DW	046H
	DW	057H
	DW	058H
	DW	05aH
	DW	05bH
	DW	022H
	DW	037H
	DW	044H
	DW	059H
	DW	025H
	DW	03aH
	DW	047H
	DW	05cH
	DW	01fH
	DW	034H
	DW	041H
	DW	056H
	ORG $+2
_sort_515 DW	07H
	DW	06H
	DW	05H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	00H
	DW	0fH
	DW	0eH
	DW	0dH
	DW	0cH
	DW	0bH
	DW	0aH
	DW	09H
	DW	08H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	02eH
	DW	041H
	DW	054H
	DW	02dH
	DW	02cH
	DW	02bH
	DW	040H
	DW	03fH
	DW	03eH
	DW	053H
	DW	052H
	DW	051H
	DW	066H
	DW	065H
	DW	064H
	DW	02aH
	DW	03dH
	DW	050H
	DW	063H
	DW	01cH
	DW	02fH
	DW	042H
	DW	055H
	DW	012H
	DW	029H
	DW	03cH
	DW	04fH
	DW	062H
	DW	01dH
	DW	030H
	DW	043H
	DW	011H
	DW	014H
	DW	016H
	DW	028H
	DW	03bH
	DW	04eH
	DW	061H
	DW	015H
	DW	01eH
	DW	031H
	DW	044H
	DW	056H
	DW	013H
	DW	010H
	DW	057H
	DW	027H
	DW	026H
	DW	03aH
	DW	039H
	DW	04dH
	DW	023H
	DW	036H
	DW	049H
	DW	05cH
	DW	04cH
	DW	060H
	DW	05fH
	DW	024H
	DW	037H
	DW	04aH
	DW	05dH
	DW	020H
	DW	033H
	DW	021H
	DW	034H
	DW	046H
	DW	047H
	DW	059H
	DW	05aH
	DW	01fH
	DW	032H
	DW	045H
	DW	058H
	DW	025H
	DW	038H
	DW	04bH
	DW	05eH
	DW	022H
	DW	035H
	DW	048H
	DW	05bH
	ORG $+2
_sort_59 DW	00H
	DW	01H
	DW	04H
	DW	05H
	DW	03H
	DW	06H
	DW	07H
	DW	02H
	DW	0dH
	DW	0fH
	DW	08H
	DW	09H
	DW	0bH
	DW	0cH
	DW	0eH
	DW	0aH
	DW	010H
	DW	01cH
	DW	04aH
	DW	01dH
	DW	04bH
	DW	01bH
	DW	049H
	DW	01aH
	DW	048H
	DW	01eH
	DW	04cH
	DW	033H
	DW	061H
	DW	032H
	DW	047H
	DW	060H
	DW	075H
	DW	01fH
	DW	04dH
	DW	034H
	DW	062H
	DW	031H
	DW	046H
	DW	05fH
	DW	074H
	DW	035H
	DW	063H
	DW	020H
	DW	04eH
	DW	021H
	DW	04fH
	DW	030H
	DW	045H
	DW	05eH
	DW	073H
	DW	02fH
	DW	044H
	DW	05dH
	DW	072H
	DW	02eH
	DW	043H
	DW	05cH
	DW	071H
	DW	013H
	DW	015H
	DW	017H
	DW	016H
	DW	012H
	DW	011H
	DW	014H
	DW	018H
	DW	06fH
	DW	02bH
	DW	059H
	DW	06eH
	DW	040H
	DW	041H
	DW	02cH
	DW	05aH
	DW	019H
	DW	02dH
	DW	042H
	DW	05bH
	DW	070H
	DW	036H
	DW	064H
	DW	028H
	DW	03dH
	DW	056H
	DW	06bH
	DW	027H
	DW	03cH
	DW	055H
	DW	06aH
	DW	024H
	DW	039H
	DW	052H
	DW	067H
	DW	023H
	DW	038H
	DW	051H
	DW	066H
	DW	022H
	DW	037H
	DW	050H
	DW	065H
	DW	02aH
	DW	03fH
	DW	058H
	DW	06dH
	DW	029H
	DW	03eH
	DW	057H
	DW	06cH
	DW	026H
	DW	03bH
	DW	054H
	DW	069H
	DW	025H
	DW	03aH
	DW	053H
	DW	068H
	ORG $+4
_sort_67 DW	00H
	DW	01H
	DW	04H
	DW	03H
	DW	05H
	DW	06H
	DW	0dH
	DW	07H
	DW	02H
	DW	08H
	DW	09H
	DW	0bH
	DW	0fH
	DW	0cH
	DW	0eH
	DW	0aH
	DW	01cH
	DW	052H
	DW	01dH
	DW	053H
	DW	01bH
	DW	051H
	DW	01aH
	DW	050H
	DW	01eH
	DW	054H
	DW	010H
	DW	037H
	DW	06dH
	DW	038H
	DW	06eH
	DW	01fH
	DW	055H
	DW	039H
	DW	06fH
	DW	030H
	DW	049H
	DW	066H
	DW	07fH
	DW	020H
	DW	056H
	DW	033H
	DW	04cH
	DW	069H
	DW	082H
	DW	034H
	DW	04dH
	DW	06aH
	DW	083H
	DW	03aH
	DW	070H
	DW	021H
	DW	057H
	DW	013H
	DW	017H
	DW	035H
	DW	04eH
	DW	06bH
	DW	084H
	DW	015H
	DW	016H
	DW	012H
	DW	011H
	DW	014H
	DW	018H
	DW	019H
	DW	032H
	DW	04bH
	DW	068H
	DW	081H
	DW	02fH
	DW	048H
	DW	065H
	DW	07eH
	DW	036H
	DW	04fH
	DW	06cH
	DW	085H
	DW	02eH
	DW	047H
	DW	064H
	DW	07dH
	DW	080H
	DW	067H
	DW	04aH
	DW	031H
	DW	02dH
	DW	046H
	DW	063H
	DW	07cH
	DW	02aH
	DW	043H
	DW	060H
	DW	079H
	DW	027H
	DW	040H
	DW	05dH
	DW	076H
	DW	026H
	DW	03fH
	DW	05cH
	DW	075H
	DW	023H
	DW	03cH
	DW	059H
	DW	072H
	DW	022H
	DW	03bH
	DW	058H
	DW	071H
	DW	02cH
	DW	045H
	DW	062H
	DW	07bH
	DW	02bH
	DW	044H
	DW	061H
	DW	07aH
	DW	029H
	DW	042H
	DW	05fH
	DW	078H
	DW	028H
	DW	041H
	DW	05eH
	DW	077H
	DW	025H
	DW	03eH
	DW	05bH
	DW	074H
	DW	024H
	DW	03dH
	DW	05aH
	DW	073H
	ORG $+4
_sort_74 DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	01aH
	DW	057H
	DW	01bH
	DW	058H
	DW	01cH
	DW	059H
	DW	01dH
	DW	05aH
	DW	01eH
	DW	05bH
	DW	033H
	DW	050H
	DW	070H
	DW	08dH
	DW	034H
	DW	051H
	DW	071H
	DW	08eH
	DW	036H
	DW	053H
	DW	073H
	DW	090H
	DW	037H
	DW	054H
	DW	074H
	DW	091H
	DW	03aH
	DW	077H
	DW	03bH
	DW	078H
	DW	015H
	DW	016H
	DW	017H
	DW	011H
	DW	012H
	DW	013H
	DW	01fH
	DW	03cH
	DW	05cH
	DW	079H
	DW	038H
	DW	055H
	DW	075H
	DW	092H
	DW	014H
	DW	018H
	DW	019H
	DW	032H
	DW	04fH
	DW	06fH
	DW	08cH
	DW	039H
	DW	056H
	DW	076H
	DW	093H
	DW	031H
	DW	04eH
	DW	06eH
	DW	08bH
	DW	030H
	DW	04dH
	DW	035H
	DW	052H
	DW	072H
	DW	08fH
	DW	06dH
	DW	08aH
	DW	02fH
	DW	04cH
	DW	06cH
	DW	089H
	DW	020H
	DW	021H
	DW	03dH
	DW	03eH
	DW	05dH
	DW	05eH
	DW	07aH
	DW	07bH
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	083H
	DW	084H
	DW	085H
	DW	086H
	DW	087H
	DW	088H
	DW	022H
	DW	03fH
	DW	05fH
	DW	07cH
	DW	023H
	DW	040H
	DW	060H
	DW	07dH
	DW	024H
	DW	041H
	DW	061H
	DW	07eH
	DW	025H
	DW	042H
	DW	062H
	DW	07fH
	DW	026H
	DW	043H
	DW	063H
	DW	080H
	DW	027H
	DW	044H
	DW	064H
	DW	081H
	DW	028H
	DW	045H
	DW	065H
	DW	082H
_sort_795 DW	08H
	DW	07H
	DW	06H
	DW	05H
	DW	04H
	DW	03H
	DW	02H
	DW	0eH
	DW	010H
	DW	09H
	DW	0aH
	DW	0cH
	DW	0dH
	DW	0fH
	DW	0bH
	DW	011H
	DW	014H
	DW	016H
	DW	018H
	DW	017H
	DW	013H
	DW	012H
	DW	015H
	DW	038H
	DW	058H
	DW	07aH
	DW	09aH
	DW	039H
	DW	059H
	DW	07bH
	DW	09bH
	DW	03aH
	DW	05aH
	DW	07cH
	DW	09cH
	DW	034H
	DW	054H
	DW	076H
	DW	096H
	DW	035H
	DW	055H
	DW	077H
	DW	097H
	DW	01bH
	DW	05dH
	DW	01cH
	DW	05eH
	DW	01dH
	DW	05fH
	DW	01eH
	DW	060H
	DW	01fH
	DW	061H
	DW	03dH
	DW	07fH
	DW	03eH
	DW	080H
	DW	03fH
	DW	081H
	DW	03bH
	DW	05bH
	DW	07dH
	DW	09dH
	DW	020H
	DW	062H
	DW	040H
	DW	082H
	DW	01H
	DW	00H
	DW	019H
	DW	01aH
	DW	021H
	DW	063H
	DW	022H
	DW	064H
	DW	041H
	DW	083H
	DW	042H
	DW	084H
	DW	036H
	DW	056H
	DW	078H
	DW	098H
	DW	03cH
	DW	05cH
	DW	07eH
	DW	09eH
	DW	037H
	DW	057H
	DW	079H
	DW	099H
	DW	075H
	DW	074H
	DW	073H
	DW	02eH
	DW	04eH
	DW	070H
	DW	090H
	DW	02bH
	DW	04bH
	DW	06dH
	DW	08dH
	DW	028H
	DW	048H
	DW	06aH
	DW	08aH
	DW	024H
	DW	044H
	DW	066H
	DW	086H
	DW	072H
	DW	095H
	DW	094H
	DW	093H
	DW	092H
	DW	053H
	DW	052H
	DW	051H
	DW	050H
	DW	033H
	DW	032H
	DW	031H
	DW	030H
	DW	02fH
	DW	02dH
	DW	02cH
	DW	02aH
	DW	027H
	DW	023H
	DW	04fH
	DW	04dH
	DW	04cH
	DW	04aH
	DW	047H
	DW	043H
	DW	071H
	DW	06fH
	DW	06eH
	DW	06cH
	DW	069H
	DW	065H
	DW	091H
	DW	08fH
	DW	08eH
	DW	08cH
	DW	089H
	DW	085H
	DW	029H
	DW	049H
	DW	06bH
	DW	08bH
	DW	025H
	DW	045H
	DW	067H
	DW	087H
	DW	026H
	DW	046H
	DW	068H
	DW	088H
	ORG $+2
_sort_102 DW	07H
	DW	06H
	DW	05H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	00H
	DW	010H
	DW	0fH
	DW	0eH
	DW	0dH
	DW	0cH
	DW	0bH
	DW	0aH
	DW	09H
	DW	08H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	048H
	DW	049H
	DW	0a1H
	DW	0a2H
	DW	041H
	DW	044H
	DW	045H
	DW	06cH
	DW	06fH
	DW	070H
	DW	09aH
	DW	09dH
	DW	09eH
	DW	0c5H
	DW	0c8H
	DW	0c9H
	DW	020H
	DW	021H
	DW	079H
	DW	07aH
	DW	04aH
	DW	04bH
	DW	0a3H
	DW	0a4H
	DW	042H
	DW	06dH
	DW	09bH
	DW	0c6H
	DW	013H
	DW	017H
	DW	015H
	DW	016H
	DW	012H
	DW	011H
	DW	014H
	DW	018H
	DW	019H
	DW	025H
	DW	024H
	DW	023H
	DW	022H
	DW	050H
	DW	04fH
	DW	04eH
	DW	04dH
	DW	07eH
	DW	07dH
	DW	07cH
	DW	07bH
	DW	0a9H
	DW	0a8H
	DW	0a7H
	DW	0a6H
	DW	046H
	DW	043H
	DW	047H
	DW	071H
	DW	06eH
	DW	072H
	DW	09fH
	DW	09cH
	DW	0a0H
	DW	0caH
	DW	0c7H
	DW	0cbH
	DW	04cH
	DW	0a5H
	DW	051H
	DW	052H
	DW	05cH
	DW	05bH
	DW	05dH
	DW	053H
	DW	05fH
	DW	055H
	DW	054H
	DW	05eH
	DW	065H
	DW	066H
	DW	060H
	DW	068H
	DW	056H
	DW	067H
	DW	057H
	DW	061H
	DW	07fH
	DW	080H
	DW	08aH
	DW	089H
	DW	08bH
	DW	081H
	DW	08dH
	DW	083H
	DW	082H
	DW	08cH
	DW	093H
	DW	094H
	DW	08eH
	DW	096H
	DW	084H
	DW	095H
	DW	085H
	DW	08fH
	DW	0aaH
	DW	0abH
	DW	0b5H
	DW	0b4H
	DW	0b6H
	DW	0acH
	DW	0b8H
	DW	0aeH
	DW	0adH
	DW	0b7H
	DW	0beH
	DW	0bfH
	DW	0b9H
	DW	0c1H
	DW	0afH
	DW	0c0H
	DW	0b0H
	DW	0baH
	DW	026H
	DW	027H
	DW	031H
	DW	030H
	DW	032H
	DW	028H
	DW	034H
	DW	02aH
	DW	029H
	DW	033H
	DW	03aH
	DW	03bH
	DW	035H
	DW	03dH
	DW	02bH
	DW	03cH
	DW	02cH
	DW	036H
	DW	0c2H
	DW	0b3H
	DW	0bdH
	DW	0c4H
	DW	0b1H
	DW	0c3H
	DW	0b2H
	DW	0bbH
	DW	0bcH
	DW	097H
	DW	088H
	DW	092H
	DW	099H
	DW	086H
	DW	098H
	DW	087H
	DW	090H
	DW	091H
	DW	069H
	DW	05aH
	DW	064H
	DW	06bH
	DW	058H
	DW	06aH
	DW	059H
	DW	062H
	DW	063H
	DW	03eH
	DW	02fH
	DW	039H
	DW	040H
	DW	02dH
	DW	03fH
	DW	02eH
	DW	037H
	DW	038H
_sort_122 DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	017H
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	026H
	DW	08dH
	DW	027H
	DW	08eH
	DW	028H
	DW	08fH
	DW	029H
	DW	090H
	DW	02aH
	DW	091H
	DW	02bH
	DW	092H
	DW	02cH
	DW	093H
	DW	02dH
	DW	094H
	DW	02eH
	DW	095H
	DW	02fH
	DW	061H
	DW	096H
	DW	0c8H
	DW	030H
	DW	062H
	DW	097H
	DW	0c9H
	DW	031H
	DW	063H
	DW	098H
	DW	0caH
	DW	056H
	DW	088H
	DW	0bdH
	DW	0efH
	DW	057H
	DW	089H
	DW	0beH
	DW	0f0H
	DW	058H
	DW	08aH
	DW	0bfH
	DW	0f1H
	DW	05bH
	DW	0c2H
	DW	05cH
	DW	0c3H
	DW	05dH
	DW	0c4H
	DW	05eH
	DW	0c5H
	DW	05fH
	DW	0c6H
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	032H
	DW	064H
	DW	099H
	DW	0cbH
	DW	059H
	DW	08bH
	DW	0c0H
	DW	0f2H
	DW	033H
	DW	065H
	DW	09aH
	DW	0ccH
	DW	037H
	DW	069H
	DW	09eH
	DW	0d0H
	DW	05aH
	DW	08cH
	DW	0c1H
	DW	0f3H
	DW	03bH
	DW	06dH
	DW	0a2H
	DW	0d4H
	DW	03fH
	DW	071H
	DW	0a6H
	DW	0d8H
	DW	043H
	DW	075H
	DW	0aaH
	DW	0dcH
	DW	024H
	DW	025H
	DW	036H
	DW	035H
	DW	034H
	DW	03aH
	DW	039H
	DW	038H
	DW	03eH
	DW	03dH
	DW	03cH
	DW	042H
	DW	041H
	DW	040H
	DW	046H
	DW	045H
	DW	044H
	DW	068H
	DW	067H
	DW	066H
	DW	06cH
	DW	06bH
	DW	06aH
	DW	070H
	DW	06fH
	DW	06eH
	DW	074H
	DW	073H
	DW	072H
	DW	078H
	DW	077H
	DW	076H
	DW	09dH
	DW	09cH
	DW	09bH
	DW	0a1H
	DW	0a0H
	DW	09fH
	DW	0a5H
	DW	0a4H
	DW	0a3H
	DW	0a9H
	DW	0a8H
	DW	0a7H
	DW	0adH
	DW	0acH
	DW	0abH
	DW	0cfH
	DW	0ceH
	DW	0cdH
	DW	0d3H
	DW	0d2H
	DW	0d1H
	DW	0d7H
	DW	0d6H
	DW	0d5H
	DW	0dbH
	DW	0daH
	DW	0d9H
	DW	0dfH
	DW	0deH
	DW	0ddH
	DW	049H
	DW	048H
	DW	047H
	DW	04cH
	DW	04bH
	DW	04aH
	DW	04fH
	DW	04eH
	DW	04dH
	DW	052H
	DW	051H
	DW	050H
	DW	055H
	DW	054H
	DW	053H
	DW	07bH
	DW	07aH
	DW	079H
	DW	07eH
	DW	07dH
	DW	07cH
	DW	081H
	DW	080H
	DW	07fH
	DW	084H
	DW	083H
	DW	082H
	DW	087H
	DW	086H
	DW	085H
	DW	0b0H
	DW	0afH
	DW	0aeH
	DW	0b3H
	DW	0b2H
	DW	0b1H
	DW	0b6H
	DW	0b5H
	DW	0b4H
	DW	0b9H
	DW	0b8H
	DW	0b7H
	DW	0bcH
	DW	0bbH
	DW	0baH
	DW	0e2H
	DW	0e1H
	DW	0e0H
	DW	0e5H
	DW	0e4H
	DW	0e3H
	DW	0e8H
	DW	0e7H
	DW	0e6H
	DW	0ebH
	DW	0eaH
	DW	0e9H
	DW	0eeH
	DW	0edH
	DW	0ecH
	DW	060H
	DW	0c7H
_sort_SID DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	ORG $+2
_sort_ptr DD	FLAT:_sort_475
	DD	FLAT:_sort_515
	DD	FLAT:_sort_59
	DD	FLAT:_sort_67
	DD	FLAT:_sort_74
	DD	FLAT:_sort_795
	DD	FLAT:_sort_102
	DD	FLAT:_sort_122
	DD	FLAT:_sort_SID
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
CONST	SEGMENT
_sp_dec_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_bitno_id DB	'@(#)$Id $', 00H
	ORG $+2
_prmno	DW	011H
	DW	013H
	DW	013H
	DW	013H
	DW	013H
	DW	017H
	DW	027H
	DW	039H
	DW	05H
	ORG $+2
_prmnofsf DW	07H
	DW	07H
	DW	07H
	DW	07H
	DW	07H
	DW	08H
	DW	0cH
	DW	012H
_bitno_MR475 DW	08H
	DW	08H
	DW	07H
	DW	08H
	DW	07H
	DW	02H
	DW	08H
	DW	04H
	DW	07H
	DW	02H
	DW	04H
	DW	07H
	DW	02H
	DW	08H
	DW	04H
	DW	07H
	DW	02H
	ORG $+2
_bitno_MR515 DW	08H
	DW	08H
	DW	07H
	DW	08H
	DW	07H
	DW	02H
	DW	06H
	DW	04H
	DW	07H
	DW	02H
	DW	06H
	DW	04H
	DW	07H
	DW	02H
	DW	06H
	DW	04H
	DW	07H
	DW	02H
	DW	06H
	ORG $+2
_bitno_MR59 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	09H
	DW	02H
	DW	06H
	DW	04H
	DW	09H
	DW	02H
	DW	06H
	DW	08H
	DW	09H
	DW	02H
	DW	06H
	DW	04H
	DW	09H
	DW	02H
	DW	06H
	ORG $+2
_bitno_MR67 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	0bH
	DW	03H
	DW	07H
	DW	04H
	DW	0bH
	DW	03H
	DW	07H
	DW	08H
	DW	0bH
	DW	03H
	DW	07H
	DW	04H
	DW	0bH
	DW	03H
	DW	07H
	ORG $+2
_bitno_MR74 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	0dH
	DW	04H
	DW	07H
	DW	05H
	DW	0dH
	DW	04H
	DW	07H
	DW	08H
	DW	0dH
	DW	04H
	DW	07H
	DW	05H
	DW	0dH
	DW	04H
	DW	07H
	ORG $+2
_bitno_MR795 DW	09H
	DW	09H
	DW	09H
	DW	08H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	DW	06H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	DW	08H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	DW	06H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	ORG $+6
_bitno_MR102 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	ORG $+2
_bitno_MR122 DW	07H
	DW	08H
	DW	09H
	DW	08H
	DW	06H
	DW	09H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	06H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	09H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	06H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	ORG $+2
_bitno_MRDTX DW	03H
	DW	08H
	DW	09H
	DW	09H
	DW	06H
CONST	ENDS
PUBLIC	_Speech_Decode_Frame_init
PUBLIC	_Speech_Decode_Frame_reset
PUBLIC	_Speech_Decode_Frame_exit
PUBLIC	_Speech_Decode_Frame
PUBLIC	_UnpackBits
PUBLIC	??_C@_0CN@DNBHMDPG@Speech_Decode_Frame_init?3?5invali@ ; `string'
PUBLIC	??_C@_0DK@EHFMLOPL@Speech_Decode_Frame_init?3?5can?5no@ ; `string'
PUBLIC	??_C@_0CO@MKENHBIB@Speech_Decode_Frame_reset?3?5inval@ ; `string'
EXTRN	_Decoder_amr_init:PROC
EXTRN	_Decoder_amr_reset:PROC
EXTRN	_Decoder_amr_exit:PROC
EXTRN	_Decoder_amr:PROC
EXTRN	_Post_Filter_init:PROC
EXTRN	_Post_Filter_reset:PROC
EXTRN	_Post_Filter_exit:PROC
EXTRN	_Post_Filter:PROC
EXTRN	_Post_Process_init:PROC
EXTRN	_Post_Process_reset:PROC
EXTRN	_Post_Process_exit:PROC
EXTRN	_Post_Process:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	_sub:PROC
EXTRN	_getCounterId:PROC
EXTRN	_setCounter:PROC
EXTRN	_Init_WMOPS_counter:PROC
EXTRN	_Reset_WMOPS_counter:PROC
EXTRN	_WMOPS_output:PROC
EXTRN	_fwc:PROC
EXTRN	_move16:PROC
EXTRN	_logic16:PROC
EXTRN	_test:PROC
EXTRN	_Bits2prm:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CO@MKENHBIB@Speech_Decode_Frame_reset?3?5inval@
CONST	SEGMENT
??_C@_0CO@MKENHBIB@Speech_Decode_Frame_reset?3?5inval@ DB 'Speech_Decode_'
	DB	'Frame_reset: invalid parameter', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EHFMLOPL@Speech_Decode_Frame_init?3?5can?5no@
CONST	SEGMENT
??_C@_0DK@EHFMLOPL@Speech_Decode_Frame_init?3?5can?5no@ DB 'Speech_Decode'
	DB	'_Frame_init: can not malloc state structure', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DNBHMDPG@Speech_Decode_Frame_init?3?5invali@
CONST	SEGMENT
??_C@_0CN@DNBHMDPG@Speech_Decode_Frame_init?3?5invali@ DB 'Speech_Decode_'
	DB	'Frame_init: invalid parameter', 0aH, 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _UnpackBits
_TEXT	SEGMENT
_temp$ = -41						; size = 1
_pack_ptr$ = -32					; size = 4
_sid_type$ = -20					; size = 2
_i$ = -8						; size = 2
_q$ = 8							; size = 1
_ft$ = 12						; size = 2
_packed_bits$ = 16					; size = 4
_mode$ = 20						; size = 4
_bits$ = 24						; size = 4
_UnpackBits PROC					; COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 239  : 	Word16 i, sid_type;
; 240  : 	UWord8 *pack_ptr, temp;
; 241  : 
; 242  : 	pack_ptr = (UWord8*)packed_bits;

  0001e	8b 45 10	 mov	 eax, DWORD PTR _packed_bits$[ebp]
  00021	89 45 e0	 mov	 DWORD PTR _pack_ptr$[ebp], eax

; 243  : 
; 244  : 	/* real NO_DATA frame or unspecified frame type */
; 245  : 	if (ft == 15 || (ft > 8 && ft < 15))

  00024	0f bf 45 0c	 movsx	 eax, WORD PTR _ft$[ebp]
  00028	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0002b	74 12		 je	 SHORT $LN18@UnpackBits
  0002d	0f bf 45 0c	 movsx	 eax, WORD PTR _ft$[ebp]
  00031	83 f8 08	 cmp	 eax, 8
  00034	7e 1c		 jle	 SHORT $LN19@UnpackBits
  00036	0f bf 45 0c	 movsx	 eax, WORD PTR _ft$[ebp]
  0003a	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0003d	7d 13		 jge	 SHORT $LN19@UnpackBits
$LN18@UnpackBits:

; 246  : 	{
; 247  : 		*mode = (enum Mode)-1;

  0003f	8b 45 14	 mov	 eax, DWORD PTR _mode$[ebp]
  00042	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 248  : 		return RX_NO_DATA;

  00048	b8 07 00 00 00	 mov	 eax, 7
  0004d	e9 38 01 00 00	 jmp	 $LN20@UnpackBits
$LN19@UnpackBits:

; 249  : 	}
; 250  : 
; 251  : 	temp = *pack_ptr;

  00052	8b 45 e0	 mov	 eax, DWORD PTR _pack_ptr$[ebp]
  00055	8a 08		 mov	 cl, BYTE PTR [eax]
  00057	88 4d d7	 mov	 BYTE PTR _temp$[ebp], cl

; 252  : 	pack_ptr++;

  0005a	8b 45 e0	 mov	 eax, DWORD PTR _pack_ptr$[ebp]
  0005d	83 c0 01	 add	 eax, 1
  00060	89 45 e0	 mov	 DWORD PTR _pack_ptr$[ebp], eax

; 253  : 
; 254  : 	for (i = 1; i < unpacked_size[ft] + 1; i++)

  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0006c	eb 0c		 jmp	 SHORT $LN17@UnpackBits
$LN16@UnpackBits:
  0006e	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00072	66 83 c0 01	 add	 ax, 1
  00076	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN17@UnpackBits:
  0007a	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0007e	0f bf 4d 0c	 movsx	 ecx, WORD PTR _ft$[ebp]
  00082	0f bf 14 4d 00
	00 00 00	 movsx	 edx, WORD PTR _unpacked_size[ecx*2]
  0008a	83 c2 01	 add	 edx, 1
  0008d	3b c2		 cmp	 eax, edx
  0008f	7d 7e		 jge	 SHORT $LN15@UnpackBits

; 255  : 	{
; 256  : 		if (temp & 0x80)	bits[sort_ptr[ft][i-1]] = BIT_1;

  00091	0f b6 45 d7	 movzx	 eax, BYTE PTR _temp$[ebp]
  00095	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0009a	74 22		 je	 SHORT $LN14@UnpackBits
  0009c	0f bf 45 0c	 movsx	 eax, WORD PTR _ft$[ebp]
  000a0	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000a4	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _sort_ptr[eax*4]
  000ab	0f bf 44 4a fe	 movsx	 eax, WORD PTR [edx+ecx*2-2]
  000b0	b9 01 00 00 00	 mov	 ecx, 1
  000b5	8b 55 18	 mov	 edx, DWORD PTR _bits$[ebp]
  000b8	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  000bc	eb 1d		 jmp	 SHORT $LN13@UnpackBits
$LN14@UnpackBits:

; 257  : 		else				bits[sort_ptr[ft][i-1]] = BIT_0;

  000be	0f bf 45 0c	 movsx	 eax, WORD PTR _ft$[ebp]
  000c2	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000c6	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _sort_ptr[eax*4]
  000cd	0f bf 44 4a fe	 movsx	 eax, WORD PTR [edx+ecx*2-2]
  000d2	33 c9		 xor	 ecx, ecx
  000d4	8b 55 18	 mov	 edx, DWORD PTR _bits$[ebp]
  000d7	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
$LN13@UnpackBits:

; 258  : 
; 259  : 		if (i % 8)

  000db	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000df	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  000e4	79 05		 jns	 SHORT $LN22@UnpackBits
  000e6	48		 dec	 eax
  000e7	83 c8 f8	 or	 eax, -8			; fffffff8H
  000ea	40		 inc	 eax
$LN22@UnpackBits:
  000eb	85 c0		 test	 eax, eax
  000ed	74 0a		 je	 SHORT $LN12@UnpackBits

; 260  : 		{
; 261  : 			temp <<= 1;

  000ef	8a 45 d7	 mov	 al, BYTE PTR _temp$[ebp]
  000f2	d0 e0		 shl	 al, 1
  000f4	88 45 d7	 mov	 BYTE PTR _temp$[ebp], al

; 262  : 		}
; 263  : 		else

  000f7	eb 11		 jmp	 SHORT $LN11@UnpackBits
$LN12@UnpackBits:

; 264  : 		{
; 265  : 			temp = *pack_ptr;

  000f9	8b 45 e0	 mov	 eax, DWORD PTR _pack_ptr$[ebp]
  000fc	8a 08		 mov	 cl, BYTE PTR [eax]
  000fe	88 4d d7	 mov	 BYTE PTR _temp$[ebp], cl

; 266  : 			pack_ptr++;

  00101	8b 45 e0	 mov	 eax, DWORD PTR _pack_ptr$[ebp]
  00104	83 c0 01	 add	 eax, 1
  00107	89 45 e0	 mov	 DWORD PTR _pack_ptr$[ebp], eax
$LN11@UnpackBits:

; 267  : 		}
; 268  : 	}

  0010a	e9 5f ff ff ff	 jmp	 $LN16@UnpackBits
$LN15@UnpackBits:

; 269  : 
; 270  : 	/* SID frame */
; 271  : 	if (ft == MRDTX)

  0010f	0f bf 45 0c	 movsx	 eax, WORD PTR _ft$[ebp]
  00113	83 f8 08	 cmp	 eax, 8
  00116	75 56		 jne	 SHORT $LN10@UnpackBits

; 272  : 	{
; 273  : 		if (temp & 0x80)	sid_type = 1;

  00118	0f b6 45 d7	 movzx	 eax, BYTE PTR _temp$[ebp]
  0011c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00121	74 0b		 je	 SHORT $LN9@UnpackBits
  00123	b8 01 00 00 00	 mov	 eax, 1
  00128	66 89 45 ec	 mov	 WORD PTR _sid_type$[ebp], ax
  0012c	eb 06		 jmp	 SHORT $LN8@UnpackBits
$LN9@UnpackBits:

; 274  : 		else				sid_type = 0;

  0012e	33 c0		 xor	 eax, eax
  00130	66 89 45 ec	 mov	 WORD PTR _sid_type$[ebp], ax
$LN8@UnpackBits:

; 275  : 
; 276  : 		*mode = (enum Mode)((temp >> 4) & 0x07);

  00134	0f b6 45 d7	 movzx	 eax, BYTE PTR _temp$[ebp]
  00138	c1 f8 04	 sar	 eax, 4
  0013b	83 e0 07	 and	 eax, 7
  0013e	8b 4d 14	 mov	 ecx, DWORD PTR _mode$[ebp]
  00141	89 01		 mov	 DWORD PTR [ecx], eax

; 277  : 
; 278  : 		if (q)

  00143	0f be 45 08	 movsx	 eax, BYTE PTR _q$[ebp]
  00147	85 c0		 test	 eax, eax
  00149	74 1a		 je	 SHORT $LN7@UnpackBits

; 279  : 		{
; 280  : 			if (sid_type)	return  RX_SID_UPDATE;

  0014b	0f bf 45 ec	 movsx	 eax, WORD PTR _sid_type$[ebp]
  0014f	85 c0		 test	 eax, eax
  00151	74 09		 je	 SHORT $LN6@UnpackBits
  00153	b8 05 00 00 00	 mov	 eax, 5
  00158	eb 30		 jmp	 SHORT $LN20@UnpackBits
  0015a	eb 07		 jmp	 SHORT $LN5@UnpackBits
$LN6@UnpackBits:

; 281  : 			else			return	RX_SID_FIRST;

  0015c	b8 04 00 00 00	 mov	 eax, 4
  00161	eb 27		 jmp	 SHORT $LN20@UnpackBits
$LN5@UnpackBits:

; 282  : 		}
; 283  : 		else

  00163	eb 07		 jmp	 SHORT $LN4@UnpackBits
$LN7@UnpackBits:

; 284  : 		{
; 285  : 			return	RX_SID_BAD;

  00165	b8 06 00 00 00	 mov	 eax, 6
  0016a	eb 1e		 jmp	 SHORT $LN20@UnpackBits
$LN4@UnpackBits:

; 286  : 		}
; 287  : 	}
; 288  : 	/* speech frame */
; 289  : 	else

  0016c	eb 1c		 jmp	 SHORT $LN20@UnpackBits
$LN10@UnpackBits:

; 290  : 	{
; 291  : 		*mode = (enum Mode)ft;

  0016e	0f bf 45 0c	 movsx	 eax, WORD PTR _ft$[ebp]
  00172	8b 4d 14	 mov	 ecx, DWORD PTR _mode$[ebp]
  00175	89 01		 mov	 DWORD PTR [ecx], eax

; 292  : 
; 293  : 		if (q)	return RX_SPEECH_GOOD;

  00177	0f be 45 08	 movsx	 eax, BYTE PTR _q$[ebp]
  0017b	85 c0		 test	 eax, eax
  0017d	74 06		 je	 SHORT $LN2@UnpackBits
  0017f	33 c0		 xor	 eax, eax
  00181	eb 07		 jmp	 SHORT $LN20@UnpackBits
  00183	eb 05		 jmp	 SHORT $LN20@UnpackBits
$LN2@UnpackBits:

; 294  : 		else	return RX_SPEECH_BAD;

  00185	b8 03 00 00 00	 mov	 eax, 3
$LN20@UnpackBits:

; 295  : 	}
; 296  : }

  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c3		 ret	 0
_UnpackBits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _Speech_Decode_Frame
_TEXT	SEGMENT
_i$ = -232						; size = 2
_Az_dec$ = -220						; size = 88
_parm$ = -124						; size = 116
__$ArrayPad$ = -4					; size = 4
_st$ = 8						; size = 4
_mode$ = 12						; size = 4
_serial$ = 16						; size = 4
_frame_type$ = 20					; size = 4
_synth$ = 24						; size = 4
_Speech_Decode_Frame PROC				; COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 01 00
	00		 sub	 esp, 428		; 000001acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 54 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-428]
  00012	b9 6b 00 00 00	 mov	 ecx, 107		; 0000006bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 176  :   Word16 parm[MAX_PRM_SIZE + 1];  /* Synthesis parameters                */
; 177  :   Word16 Az_dec[AZ_SIZE];         /* Decoded Az for post-filter          */
; 178  :                                   /* in 4 subframes                      */
; 179  : 
; 180  : #if !defined(NO13BIT)
; 181  :   Word16 i;
; 182  : #endif
; 183  : 
; 184  :   setCounter(st->complexityCounter);

  00028	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0002b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _setCounter
  00034	83 c4 04	 add	 esp, 4

; 185  :   Reset_WMOPS_counter ();          /* reset WMOPS counter for the new frame */

  00037	e8 00 00 00 00	 call	 _Reset_WMOPS_counter

; 186  : 
; 187  : 
; 188  :   /* Serial to parameters   */
; 189  :   test(); test(); sub(0,0); sub(0,0); logic16();

  0003c	e8 00 00 00 00	 call	 _test
  00041	e8 00 00 00 00	 call	 _test
  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	e8 00 00 00 00	 call	 _sub
  0004f	83 c4 08	 add	 esp, 8
  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	e8 00 00 00 00	 call	 _sub
  0005b	83 c4 08	 add	 esp, 8
  0005e	e8 00 00 00 00	 call	 _logic16

; 190  :   if ((frame_type == RX_SID_BAD) ||
; 191  :       (frame_type == RX_SID_UPDATE)) {

  00063	83 7d 14 06	 cmp	 DWORD PTR _frame_type$[ebp], 6
  00067	74 06		 je	 SHORT $LN5@Speech_Dec
  00069	83 7d 14 05	 cmp	 DWORD PTR _frame_type$[ebp], 5
  0006d	75 14		 jne	 SHORT $LN6@Speech_Dec
$LN5@Speech_Dec:

; 192  :     /* Override mode to MRDTX */
; 193  :     Bits2prm (MRDTX, serial, parm);

  0006f	8d 45 84	 lea	 eax, DWORD PTR _parm$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 10	 mov	 ecx, DWORD PTR _serial$[ebp]
  00076	51		 push	 ecx
  00077	6a 08		 push	 8
  00079	e8 00 00 00 00	 call	 _Bits2prm
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 194  :   } else {

  00081	eb 14		 jmp	 SHORT $LN4@Speech_Dec
$LN6@Speech_Dec:

; 195  :     Bits2prm (mode, serial, parm);

  00083	8d 45 84	 lea	 eax, DWORD PTR _parm$[ebp]
  00086	50		 push	 eax
  00087	8b 4d 10	 mov	 ecx, DWORD PTR _serial$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 0c	 mov	 edx, DWORD PTR _mode$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 _Bits2prm
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Speech_Dec:

; 196  :   }
; 197  : 
; 198  :   /* Synthesis */
; 199  :   Decoder_amr(st->decoder_amrState, mode, parm, frame_type,
; 200  :               synth, Az_dec);

  00097	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _Az_dec$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d 18	 mov	 ecx, DWORD PTR _synth$[ebp]
  000a1	51		 push	 ecx
  000a2	8b 55 14	 mov	 edx, DWORD PTR _frame_type$[ebp]
  000a5	52		 push	 edx
  000a6	8d 45 84	 lea	 eax, DWORD PTR _parm$[ebp]
  000a9	50		 push	 eax
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR _mode$[ebp]
  000ad	51		 push	 ecx
  000ae	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  000b1	8b 02		 mov	 eax, DWORD PTR [edx]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _Decoder_amr
  000b9	83 c4 18	 add	 esp, 24			; 00000018H

; 201  : 
; 202  :   Post_Filter(st->post_state, mode, synth, Az_dec);   /* Post-filter */

  000bc	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _Az_dec$[ebp]
  000c2	50		 push	 eax
  000c3	8b 4d 18	 mov	 ecx, DWORD PTR _synth$[ebp]
  000c6	51		 push	 ecx
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _mode$[ebp]
  000ca	52		 push	 edx
  000cb	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  000ce	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 _Post_Filter
  000d7	83 c4 10	 add	 esp, 16			; 00000010H

; 203  : 
; 204  :   /* post HP filter, and 15->16 bits */
; 205  :   Post_Process(st->postHP_state, synth, L_FRAME);  

  000da	68 a0 00 00 00	 push	 160			; 000000a0H
  000df	8b 45 18	 mov	 eax, DWORD PTR _synth$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  000e6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 _Post_Process
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  :   
; 207  : #if !defined(NO13BIT)
; 208  :   /* Truncate to 13 bits */
; 209  :   for (i = 0; i < L_FRAME; i++) 

  000f2	33 c0		 xor	 eax, eax
  000f4	66 89 85 18 ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
  000fb	eb 12		 jmp	 SHORT $LN3@Speech_Dec
$LN2@Speech_Dec:
  000fd	66 8b 85 18 ff
	ff ff		 mov	 ax, WORD PTR _i$[ebp]
  00104	66 83 c0 01	 add	 ax, 1
  00108	66 89 85 18 ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
$LN3@Speech_Dec:
  0010f	0f bf 85 18 ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  00116	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  0011b	7d 2e		 jge	 SHORT $LN1@Speech_Dec

; 210  :   {
; 211  :      synth[i] = synth[i] & 0xfff8;    logic16 (); move16 ();

  0011d	0f bf 85 18 ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  00124	8b 4d 18	 mov	 ecx, DWORD PTR _synth$[ebp]
  00127	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  0012b	81 e2 f8 ff 00
	00		 and	 edx, 65528		; 0000fff8H
  00131	0f bf 85 18 ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  00138	8b 4d 18	 mov	 ecx, DWORD PTR _synth$[ebp]
  0013b	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0013f	e8 00 00 00 00	 call	 _logic16
  00144	e8 00 00 00 00	 call	 _move16

; 212  :   }

  00149	eb b2		 jmp	 SHORT $LN2@Speech_Dec
$LN1@Speech_Dec:

; 213  : #endif
; 214  :   
; 215  :   fwc();          /* function worst case */

  0014b	e8 00 00 00 00	 call	 _fwc

; 216  :   setCounter(0); /* set counter to global counter */

  00150	6a 00		 push	 0
  00152	e8 00 00 00 00	 call	 _setCounter
  00157	83 c4 04	 add	 esp, 4

; 217  :   return 0;

  0015a	33 c0		 xor	 eax, eax

; 218  : }

  0015c	52		 push	 edx
  0015d	8b cd		 mov	 ecx, ebp
  0015f	50		 push	 eax
  00160	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Speech_Dec
  00166	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016b	58		 pop	 eax
  0016c	5a		 pop	 edx
  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00173	33 cd		 xor	 ecx, ebp
  00175	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017a	81 c4 ac 01 00
	00		 add	 esp, 428		; 000001acH
  00180	3b ec		 cmp	 ebp, esp
  00182	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
  0018b	90		 npad	 1
$LN12@Speech_Dec:
  0018c	02 00 00 00	 DD	 2
  00190	00 00 00 00	 DD	 $LN11@Speech_Dec
$LN11@Speech_Dec:
  00194	84 ff ff ff	 DD	 -124			; ffffff84H
  00198	74 00 00 00	 DD	 116			; 00000074H
  0019c	00 00 00 00	 DD	 $LN9@Speech_Dec
  001a0	24 ff ff ff	 DD	 -220			; ffffff24H
  001a4	58 00 00 00	 DD	 88			; 00000058H
  001a8	00 00 00 00	 DD	 $LN10@Speech_Dec
$LN10@Speech_Dec:
  001ac	41		 DB	 65			; 00000041H
  001ad	7a		 DB	 122			; 0000007aH
  001ae	5f		 DB	 95			; 0000005fH
  001af	64		 DB	 100			; 00000064H
  001b0	65		 DB	 101			; 00000065H
  001b1	63		 DB	 99			; 00000063H
  001b2	00		 DB	 0
$LN9@Speech_Dec:
  001b3	70		 DB	 112			; 00000070H
  001b4	61		 DB	 97			; 00000061H
  001b5	72		 DB	 114			; 00000072H
  001b6	6d		 DB	 109			; 0000006dH
  001b7	00		 DB	 0
_Speech_Decode_Frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _Speech_Decode_Frame_exit
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Speech_Decode_Frame_exit PROC				; COMDAT

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 149  :   if (state == NULL || *state == NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	74 08		 je	 SHORT $LN1@Speech_Dec
  00024	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 02		 jne	 SHORT $LN2@Speech_Dec
$LN1@Speech_Dec:

; 150  :       return;

  0002c	eb 76		 jmp	 SHORT $LN3@Speech_Dec
$LN2@Speech_Dec:

; 151  :  
; 152  :   Decoder_amr_exit(&(*state)->decoder_amrState);

  0002e	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _Decoder_amr_exit
  00039	83 c4 04	 add	 esp, 4

; 153  :   Post_Filter_exit(&(*state)->post_state);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0003f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00041	83 c1 04	 add	 ecx, 4
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _Post_Filter_exit
  0004a	83 c4 04	 add	 esp, 4

; 154  :   Post_Process_exit(&(*state)->postHP_state);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	83 c1 08	 add	 ecx, 8
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 _Post_Process_exit
  0005b	83 c4 04	 add	 esp, 4

; 155  : 
; 156  :   setCounter((*state)->complexityCounter);

  0005e	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 _setCounter
  0006c	83 c4 04	 add	 esp, 4

; 157  :   WMOPS_output(0);

  0006f	6a 00		 push	 0
  00071	e8 00 00 00 00	 call	 _WMOPS_output
  00076	83 c4 04	 add	 esp, 4

; 158  :   setCounter(0); /* set counter to global counter */

  00079	6a 00		 push	 0
  0007b	e8 00 00 00 00	 call	 _setCounter
  00080	83 c4 04	 add	 esp, 4

; 159  :  
; 160  :   /* deallocate memory */
; 161  :   free(*state);

  00083	8b f4		 mov	 esi, esp
  00085	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	51		 push	 ecx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 162  :   *state = NULL;

  0009b	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0009e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@Speech_Dec:

; 163  :   
; 164  :   return;
; 165  : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_Speech_Decode_Frame_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _Speech_Decode_Frame_reset
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Speech_Decode_Frame_reset PROC				; COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 121  :   if (state == (Speech_Decode_FrameState *) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 35		 jne	 SHORT $LN1@Speech_Dec

; 122  :       fprintf(stderr, "Speech_Decode_Frame_reset: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@MKENHBIB@Speech_Decode_Frame_reset?3?5inval@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 123  :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 58		 jmp	 SHORT $LN2@Speech_Dec
$LN1@Speech_Dec:

; 124  :   }
; 125  :   
; 126  :   Decoder_amr_reset(state->decoder_amrState, (enum Mode)0);

  00059	6a 00		 push	 0
  0005b	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _Decoder_amr_reset
  00066	83 c4 08	 add	 esp, 8

; 127  :   Post_Filter_reset(state->post_state);

  00069	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0006c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _Post_Filter_reset
  00075	83 c4 04	 add	 esp, 4

; 128  :   Post_Process_reset(state->postHP_state);

  00078	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0007b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 _Post_Process_reset
  00084	83 c4 04	 add	 esp, 4

; 129  : 
; 130  :   state->prev_mode = (enum Mode)0;

  00087	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0008a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 131  : 
; 132  :   setCounter(state->complexityCounter);

  00091	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00094	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 _setCounter
  0009d	83 c4 04	 add	 esp, 4

; 133  :   Init_WMOPS_counter();

  000a0	e8 00 00 00 00	 call	 _Init_WMOPS_counter

; 134  :   setCounter(0); /* set counter to global counter */

  000a5	6a 00		 push	 0
  000a7	e8 00 00 00 00	 call	 _setCounter
  000ac	83 c4 04	 add	 esp, 4

; 135  : 
; 136  :   return 0;

  000af	33 c0		 xor	 eax, eax
$LN2@Speech_Dec:

; 137  : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000ba	3b ec		 cmp	 ebp, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
_Speech_Decode_Frame_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _Speech_Decode_Frame_init
_TEXT	SEGMENT
_s$ = -8						; size = 4
_state$ = 8						; size = 4
_id$ = 12						; size = 4
_Speech_Decode_Frame_init PROC				; COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 78   :   Speech_Decode_FrameState* s;
; 79   :  
; 80   :   if (state == (Speech_Decode_FrameState **) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 38		 jne	 SHORT $LN4@Speech_Dec

; 81   :       fprintf(stderr, "Speech_Decode_Frame_init: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@DNBHMDPG@Speech_Decode_Frame_init?3?5invali@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 82   :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	e9 ea 00 00 00	 jmp	 $LN5@Speech_Dec
$LN4@Speech_Dec:

; 83   :   }
; 84   :   *state = NULL;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 85   :  
; 86   :   /* allocate memory */
; 87   :   if ((s= (Speech_Decode_FrameState *)
; 88   :           malloc(sizeof(Speech_Decode_FrameState))) == NULL) {

  00065	8b f4		 mov	 esi, esp
  00067	6a 14		 push	 20			; 00000014H
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006f	83 c4 04	 add	 esp, 4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  0007c	83 7d f8 00	 cmp	 DWORD PTR _s$[ebp], 0
  00080	75 38		 jne	 SHORT $LN3@Speech_Dec

; 89   :       fprintf(stderr, "Speech_Decode_Frame_init: can not malloc state "
; 90   :               "structure\n");

  00082	8b f4		 mov	 esi, esp
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@EHFMLOPL@Speech_Decode_Frame_init?3?5can?5no@
  00089	8b fc		 mov	 edi, esp
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00091	3b fc		 cmp	 edi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009d	d1 e1		 shl	 ecx, 1
  0009f	03 c1		 add	 eax, ecx
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  000a8	83 c4 08	 add	 esp, 8
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 91   :       return -1;

  000b2	83 c8 ff	 or	 eax, -1
  000b5	e9 8c 00 00 00	 jmp	 $LN5@Speech_Dec
$LN3@Speech_Dec:

; 92   :   }
; 93   :   s->decoder_amrState = NULL;

  000ba	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000bd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 94   :   s->post_state = NULL;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000c6	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 95   :   s->postHP_state = NULL;

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000d0	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 96   : 
; 97   :   if (Decoder_amr_init(&s->decoder_amrState) ||
; 98   :       Post_Filter_init(&s->post_state) ||
; 99   :       Post_Process_init(&s->postHP_state) ) {

  000d7	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _Decoder_amr_init
  000e0	83 c4 04	 add	 esp, 4
  000e3	85 c0		 test	 eax, eax
  000e5	75 26		 jne	 SHORT $LN1@Speech_Dec
  000e7	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000ea	83 c0 04	 add	 eax, 4
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 _Post_Filter_init
  000f3	83 c4 04	 add	 esp, 4
  000f6	85 c0		 test	 eax, eax
  000f8	75 13		 jne	 SHORT $LN1@Speech_Dec
  000fa	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000fd	83 c0 08	 add	 eax, 8
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 _Post_Process_init
  00106	83 c4 04	 add	 esp, 4
  00109	85 c0		 test	 eax, eax
  0010b	74 11		 je	 SHORT $LN2@Speech_Dec
$LN1@Speech_Dec:

; 100  :       Speech_Decode_Frame_exit(&s);

  0010d	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 _Speech_Decode_Frame_exit
  00116	83 c4 04	 add	 esp, 4

; 101  :       return -1;

  00119	83 c8 ff	 or	 eax, -1
  0011c	eb 28		 jmp	 SHORT $LN5@Speech_Dec
$LN2@Speech_Dec:

; 102  :   }
; 103  : 
; 104  :   s->complexityCounter = getCounterId(id);

  0011e	8b 45 0c	 mov	 eax, DWORD PTR _id$[ebp]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 _getCounterId
  00127	83 c4 04	 add	 esp, 4
  0012a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0012d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 105  :   
; 106  :   Speech_Decode_Frame_reset(s);

  00130	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _Speech_Decode_Frame_reset
  00139	83 c4 04	 add	 esp, 4

; 107  :   *state = s;

  0013c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00142	89 08		 mov	 DWORD PTR [eax], ecx

; 108  :   
; 109  :   return 0;

  00144	33 c0		 xor	 eax, eax
$LN5@Speech_Dec:

; 110  : }

  00146	52		 push	 edx
  00147	8b cd		 mov	 ecx, ebp
  00149	50		 push	 eax
  0014a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Speech_Dec
  00150	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00155	58		 pop	 eax
  00156	5a		 pop	 edx
  00157	5f		 pop	 edi
  00158	5e		 pop	 esi
  00159	5b		 pop	 ebx
  0015a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00160	3b ec		 cmp	 ebp, esp
  00162	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
  0016b	90		 npad	 1
$LN9@Speech_Dec:
  0016c	01 00 00 00	 DD	 1
  00170	00 00 00 00	 DD	 $LN8@Speech_Dec
$LN8@Speech_Dec:
  00174	f8 ff ff ff	 DD	 -8			; fffffff8H
  00178	04 00 00 00	 DD	 4
  0017c	00 00 00 00	 DD	 $LN7@Speech_Dec
$LN7@Speech_Dec:
  00180	73		 DB	 115			; 00000073H
  00181	00		 DB	 0
_Speech_Decode_Frame_init ENDP
_TEXT	ENDS
END
