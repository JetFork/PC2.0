; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\syn_filt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_syn_filt_id
CONST	SEGMENT
_syn_filt_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Syn_filt
EXTRN	_L_mult:PROC
EXTRN	_round:PROC
EXTRN	_L_msu:PROC
EXTRN	_L_shl:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\syn_filt.c
;	COMDAT _Syn_filt
_TEXT	SEGMENT
_yy$ = -216						; size = 4
_tmp$ = -204						; size = 160
_s$ = -36						; size = 4
_j$ = -24						; size = 2
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_lg$ = 20						; size = 2
_mem$ = 24						; size = 4
_update$ = 28						; size = 2
_Syn_filt PROC						; COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 01 00
	00		 sub	 esp, 412		; 0000019cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 64 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-412]
  00012	b9 67 00 00 00	 mov	 ecx, 103		; 00000067H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 60   :     Word16 i, j;
; 61   :     Word32 s;
; 62   :     Word16 tmp[80];   /* This is usually done by memory allocation (lg+M) */
; 63   :     Word16 *yy;
; 64   : 
; 65   :     /* Copy mem[] to yy[] */
; 66   : 
; 67   :     yy = tmp;                           move16 (); 

  00028	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _tmp$[ebp]
  0002e	89 85 28 ff ff
	ff		 mov	 DWORD PTR _yy$[ebp], eax
  00034	e8 00 00 00 00	 call	 _move16

; 68   : 
; 69   :     for (i = 0; i < M; i++)

  00039	33 c0		 xor	 eax, eax
  0003b	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0003f	eb 0c		 jmp	 SHORT $LN16@Syn_filt
$LN15@Syn_filt:
  00041	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00045	66 83 c0 01	 add	 ax, 1
  00049	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN16@Syn_filt:
  0004d	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00051	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00054	7d 2a		 jge	 SHORT $LN14@Syn_filt

; 70   :     {
; 71   :         *yy++ = mem[i];                 move16 (); 

  00056	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0005a	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _yy$[ebp]
  00060	8b 55 18	 mov	 edx, DWORD PTR _mem$[ebp]
  00063	66 8b 04 42	 mov	 ax, WORD PTR [edx+eax*2]
  00067	66 89 01	 mov	 WORD PTR [ecx], ax
  0006a	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _yy$[ebp]
  00070	83 c1 02	 add	 ecx, 2
  00073	89 8d 28 ff ff
	ff		 mov	 DWORD PTR _yy$[ebp], ecx
  00079	e8 00 00 00 00	 call	 _move16

; 72   :     } 

  0007e	eb c1		 jmp	 SHORT $LN15@Syn_filt
$LN14@Syn_filt:

; 73   : 
; 74   :     /* Do the filtering. */
; 75   : 
; 76   :     for (i = 0; i < lg; i++)

  00080	33 c0		 xor	 eax, eax
  00082	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00086	eb 0c		 jmp	 SHORT $LN13@Syn_filt
$LN12@Syn_filt:
  00088	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0008c	66 83 c0 01	 add	 ax, 1
  00090	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN13@Syn_filt:
  00094	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00098	0f bf 4d 14	 movsx	 ecx, WORD PTR _lg$[ebp]
  0009c	3b c1		 cmp	 eax, ecx
  0009e	0f 8d b4 00 00
	00		 jge	 $LN11@Syn_filt

; 77   :     {
; 78   :         s = L_mult (x[i], a[0]);

  000a4	b8 02 00 00 00	 mov	 eax, 2
  000a9	6b c8 00	 imul	 ecx, eax, 0
  000ac	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000af	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  000b3	50		 push	 eax
  000b4	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  000b8	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  000bb	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _L_mult
  000c5	83 c4 08	 add	 esp, 8
  000c8	89 45 dc	 mov	 DWORD PTR _s$[ebp], eax

; 79   :         for (j = 1; j <= M; j++)

  000cb	b8 01 00 00 00	 mov	 eax, 1
  000d0	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax
  000d4	eb 0c		 jmp	 SHORT $LN10@Syn_filt
$LN9@Syn_filt:
  000d6	66 8b 45 e8	 mov	 ax, WORD PTR _j$[ebp]
  000da	66 83 c0 01	 add	 ax, 1
  000de	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax
$LN10@Syn_filt:
  000e2	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  000e6	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000e9	7f 2e		 jg	 SHORT $LN8@Syn_filt

; 80   :         {
; 81   :             s = L_msu (s, a[j], yy[-j]);

  000eb	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  000ef	f7 d8		 neg	 eax
  000f1	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _yy$[ebp]
  000f7	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000fb	52		 push	 edx
  000fc	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  00100	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00103	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00107	52		 push	 edx
  00108	8b 45 dc	 mov	 eax, DWORD PTR _s$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _L_msu
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	89 45 dc	 mov	 DWORD PTR _s$[ebp], eax

; 82   :         }

  00117	eb bd		 jmp	 SHORT $LN9@Syn_filt
$LN8@Syn_filt:

; 83   :         s = L_shl (s, 3);

  00119	6a 03		 push	 3
  0011b	8b 45 dc	 mov	 eax, DWORD PTR _s$[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 _L_shl
  00124	83 c4 08	 add	 esp, 8
  00127	89 45 dc	 mov	 DWORD PTR _s$[ebp], eax

; 84   :         *yy++ = round (s);              move16 (); 

  0012a	8b 45 dc	 mov	 eax, DWORD PTR _s$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _round
  00133	83 c4 04	 add	 esp, 4
  00136	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _yy$[ebp]
  0013c	66 89 01	 mov	 WORD PTR [ecx], ax
  0013f	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _yy$[ebp]
  00145	83 c2 02	 add	 edx, 2
  00148	89 95 28 ff ff
	ff		 mov	 DWORD PTR _yy$[ebp], edx
  0014e	e8 00 00 00 00	 call	 _move16

; 85   :     }

  00153	e9 30 ff ff ff	 jmp	 $LN12@Syn_filt
$LN11@Syn_filt:

; 86   : 
; 87   :     for (i = 0; i < lg; i++)

  00158	33 c0		 xor	 eax, eax
  0015a	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0015e	eb 0c		 jmp	 SHORT $LN7@Syn_filt
$LN6@Syn_filt:
  00160	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00164	66 83 c0 01	 add	 ax, 1
  00168	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN7@Syn_filt:
  0016c	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00170	0f bf 4d 14	 movsx	 ecx, WORD PTR _lg$[ebp]
  00174	3b c1		 cmp	 eax, ecx
  00176	7d 1e		 jge	 SHORT $LN5@Syn_filt

; 88   :     {
; 89   :         y[i] = tmp[i + M];              move16 (); 

  00178	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0017c	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00180	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  00183	66 8b 84 45 48
	ff ff ff	 mov	 ax, WORD PTR _tmp$[ebp+eax*2+20]
  0018b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0018f	e8 00 00 00 00	 call	 _move16

; 90   :     }

  00194	eb ca		 jmp	 SHORT $LN6@Syn_filt
$LN5@Syn_filt:

; 91   : 
; 92   :     /* Update of memory if update==1 */
; 93   : 
; 94   :     test (); 

  00196	e8 00 00 00 00	 call	 _test

; 95   :     if (update != 0)

  0019b	0f bf 45 1c	 movsx	 eax, WORD PTR _update$[ebp]
  0019f	85 c0		 test	 eax, eax
  001a1	74 42		 je	 SHORT $LN17@Syn_filt

; 96   :     {
; 97   :         for (i = 0; i < M; i++)

  001a3	33 c0		 xor	 eax, eax
  001a5	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  001a9	eb 0c		 jmp	 SHORT $LN3@Syn_filt
$LN2@Syn_filt:
  001ab	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  001af	66 83 c0 01	 add	 ax, 1
  001b3	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN3@Syn_filt:
  001b7	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  001bb	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  001be	7d 25		 jge	 SHORT $LN17@Syn_filt

; 98   :         {
; 99   :             mem[i] = y[lg - M + i];     move16 (); 

  001c0	0f bf 45 14	 movsx	 eax, WORD PTR _lg$[ebp]
  001c4	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  001c8	8d 54 08 f6	 lea	 edx, DWORD PTR [eax+ecx-10]
  001cc	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  001d0	8b 4d 18	 mov	 ecx, DWORD PTR _mem$[ebp]
  001d3	8b 75 10	 mov	 esi, DWORD PTR _y$[ebp]
  001d6	66 8b 14 56	 mov	 dx, WORD PTR [esi+edx*2]
  001da	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  001de	e8 00 00 00 00	 call	 _move16

; 100  :         }

  001e3	eb c6		 jmp	 SHORT $LN2@Syn_filt
$LN17@Syn_filt:

; 101  :     }
; 102  :     return;
; 103  : }

  001e5	52		 push	 edx
  001e6	8b cd		 mov	 ecx, ebp
  001e8	50		 push	 eax
  001e9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@Syn_filt
  001ef	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001f4	58		 pop	 eax
  001f5	5a		 pop	 edx
  001f6	5f		 pop	 edi
  001f7	5e		 pop	 esi
  001f8	5b		 pop	 ebx
  001f9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fc	33 cd		 xor	 ecx, ebp
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	81 c4 9c 01 00
	00		 add	 esp, 412		; 0000019cH
  00209	3b ec		 cmp	 ebp, esp
  0020b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
$LN21@Syn_filt:
  00214	01 00 00 00	 DD	 1
  00218	00 00 00 00	 DD	 $LN20@Syn_filt
$LN20@Syn_filt:
  0021c	34 ff ff ff	 DD	 -204			; ffffff34H
  00220	a0 00 00 00	 DD	 160			; 000000a0H
  00224	00 00 00 00	 DD	 $LN19@Syn_filt
$LN19@Syn_filt:
  00228	74		 DB	 116			; 00000074H
  00229	6d		 DB	 109			; 0000006dH
  0022a	70		 DB	 112			; 00000070H
  0022b	00		 DB	 0
_Syn_filt ENDP
_TEXT	ENDS
END
