; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\d_gain_c.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_d_gain_c_id
CONST	SEGMENT
_d_gain_c_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_qua_gain_pitch DW 00H
	DW	0ccdH
	DW	0199cH
	DW	02000H
	DW	02666H
	DW	02ccdH
	DW	03000H
	DW	03333H
	DW	03666H
	DW	0399aH
	DW	03ccdH
	DW	04000H
	DW	04333H
	DW	04666H
	DW	0499aH
	DW	04ccdH
_qua_gain_code DW 09fH
	DW	0f140H
	DW	0a735H
	DW	0ceH
	DW	0f2beH
	DW	0b034H
	DW	010cH
	DW	0f443H
	DW	0b958H
	DW	015dH
	DW	0f5c9H
	DW	0c285H
	DW	01a3H
	DW	0f6d7H
	DW	0c8dfH
	DW	01e2H
	DW	0f7a6H
	DW	0cdbdH
	DW	022aH
	DW	0f874H
	DW	0d293H
	DW	027dH
	DW	0f942H
	DW	0d76dH
	DW	02ddH
	DW	0fa12H
	DW	0dc4dH
	DW	034aH
	DW	0fadeH
	DW	0e11eH
	DW	03c9H
	DW	0fbaeH
	DW	0e600H
	DW	045aH
	DW	0fc7cH
	DW	0ead8H
	DW	0501H
	DW	0fd4aH
	DW	0efb3H
	DW	05c1H
	DW	0fe19H
	DW	0f48dH
	DW	069eH
	DW	0fee7H
	DW	0f968H
	DW	079cH
	DW	0ffb5H
	DW	0fe43H
	DW	08c1H
	DW	085H
	DW	0321H
	DW	0a11H
	DW	0153H
	DW	07fcH
	DW	0b93H
	DW	0221H
	DW	0cd5H
	DW	0d50H
	DW	02f0H
	DW	011b2H
	DW	0f4fH
	DW	03beH
	DW	0168cH
	DW	0119bH
	DW	048dH
	DW	01b68H
	DW	0143fH
	DW	055bH
	DW	02043H
	DW	01748H
	DW	0629H
	DW	0251dH
	DW	01ac7H
	DW	06f8H
	DW	029f9H
	DW	01ecbH
	DW	07c7H
	DW	02ed4H
	DW	02369H
	DW	0895H
	DW	033afH
	DW	028b9H
	DW	0964H
	DW	0388aH
	DW	030deH
	DW	0a71H
	DW	03ee0H
	DW	03f87H
	DW	0bf4H
	DW	047fdH
	DW	05296H
	DW	0d78H
	DW	0511bH
	DW	06b5dH
	DW	0efcH
	DW	05a39H
CONST	ENDS
PUBLIC	_d_gain_code
EXTRN	_gc_pred:PROC
EXTRN	_gc_pred_update:PROC
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_mult:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_shr:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	_Pow2:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
;	COMDAT _d_gain_code
_TEXT	SEGMENT
tv141 = -302						; size = 2
tv129 = -302						; size = 2
_L_tmp$ = -104						; size = 4
_frac_inn_en$ = -92					; size = 2
_exp_inn_en$ = -80					; size = 2
_qua_ener$ = -68					; size = 2
_qua_ener_MR122$ = -56					; size = 2
_p$ = -44						; size = 4
_frac$ = -32						; size = 2
_exp$ = -20						; size = 2
_gcode0$ = -8						; size = 2
_pred_state$ = 8					; size = 4
_mode$ = 12						; size = 4
_index$ = 16						; size = 2
_code$ = 20						; size = 4
_gain_code$ = 24					; size = 4
_d_gain_code PROC					; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00012	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 70   :     Word16 gcode0, exp, frac;
; 71   :     const Word16 *p;
; 72   :     Word16 qua_ener_MR122, qua_ener;
; 73   :     Word16 exp_inn_en;
; 74   :     Word16 frac_inn_en;
; 75   :     Word32 L_tmp;
; 76   :     
; 77   :     /*-------------- Decode codebook gain ---------------*/
; 78   :     
; 79   :     /*-------------------------------------------------------------------*
; 80   :      *  predict codebook gain                                            *
; 81   :      *  ~~~~~~~~~~~~~~~~~~~~~                                            *
; 82   :      *  gc0     = Pow2(int(d)+frac(d))                                   *
; 83   :      *          = 2^exp + 2^frac                                         *
; 84   :      *                                                                   *
; 85   :      *-------------------------------------------------------------------*/
; 86   : 
; 87   :     gc_pred(pred_state, mode, code, &exp, &frac,
; 88   :             &exp_inn_en, &frac_inn_en);

  0001e	8d 45 a4	 lea	 eax, DWORD PTR _frac_inn_en$[ebp]
  00021	50		 push	 eax
  00022	8d 4d b0	 lea	 ecx, DWORD PTR _exp_inn_en$[ebp]
  00025	51		 push	 ecx
  00026	8d 55 e0	 lea	 edx, DWORD PTR _frac$[ebp]
  00029	52		 push	 edx
  0002a	8d 45 ec	 lea	 eax, DWORD PTR _exp$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR _code$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR _mode$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR _pred_state$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _gc_pred
  0003f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 89   :     
; 90   :     p = &qua_gain_code[add (add (index, index), index)];

  00042	0f b7 45 10	 movzx	 eax, WORD PTR _index$[ebp]
  00046	50		 push	 eax
  00047	0f b7 4d 10	 movzx	 ecx, WORD PTR _index$[ebp]
  0004b	51		 push	 ecx
  0004c	0f b7 55 10	 movzx	 edx, WORD PTR _index$[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 _add
  00056	83 c4 08	 add	 esp, 8
  00059	0f b7 c0	 movzx	 eax, ax
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _add
  00062	83 c4 08	 add	 esp, 8
  00065	0f bf c8	 movsx	 ecx, ax
  00068	8d 14 4d 00 00
	00 00		 lea	 edx, DWORD PTR _qua_gain_code[ecx*2]
  0006f	89 55 d4	 mov	 DWORD PTR _p$[ebp], edx

; 91   : 
; 92   :     /* Different scalings between MR122 and the other modes */
; 93   :     test ();

  00072	e8 00 00 00 00	 call	 _test

; 94   :     if (sub(mode, MR122) == 0)

  00077	6a 07		 push	 7
  00079	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _sub
  00083	83 c4 08	 add	 esp, 8
  00086	0f bf c8	 movsx	 ecx, ax
  00089	85 c9		 test	 ecx, ecx
  0008b	75 78		 jne	 SHORT $LN2@d_gain_cod

; 95   :     {
; 96   :         gcode0 = extract_l (Pow2 (exp, frac));  /* predicted gain */

  0008d	0f b7 45 e0	 movzx	 eax, WORD PTR _frac$[ebp]
  00091	50		 push	 eax
  00092	0f b7 4d ec	 movzx	 ecx, WORD PTR _exp$[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _Pow2
  0009c	83 c4 08	 add	 esp, 8
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 _extract_l
  000a5	83 c4 04	 add	 esp, 4
  000a8	66 89 45 f8	 mov	 WORD PTR _gcode0$[ebp], ax

; 97   :         gcode0 = shl (gcode0, 4);                                   

  000ac	6a 04		 push	 4
  000ae	0f b7 45 f8	 movzx	 eax, WORD PTR _gcode0$[ebp]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _shl
  000b8	83 c4 08	 add	 esp, 8
  000bb	66 89 45 f8	 mov	 WORD PTR _gcode0$[ebp], ax

; 98   :         *gain_code = shl (mult (gcode0, *p++), 1);  move16 ();

  000bf	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  000c2	66 8b 08	 mov	 cx, WORD PTR [eax]
  000c5	66 89 8d d2 fe
	ff ff		 mov	 WORD PTR tv129[ebp], cx
  000cc	8b 55 d4	 mov	 edx, DWORD PTR _p$[ebp]
  000cf	83 c2 02	 add	 edx, 2
  000d2	89 55 d4	 mov	 DWORD PTR _p$[ebp], edx
  000d5	6a 01		 push	 1
  000d7	0f b7 85 d2 fe
	ff ff		 movzx	 eax, WORD PTR tv129[ebp]
  000de	50		 push	 eax
  000df	0f b7 4d f8	 movzx	 ecx, WORD PTR _gcode0$[ebp]
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 _mult
  000e9	83 c4 08	 add	 esp, 8
  000ec	0f b7 d0	 movzx	 edx, ax
  000ef	52		 push	 edx
  000f0	e8 00 00 00 00	 call	 _shl
  000f5	83 c4 08	 add	 esp, 8
  000f8	8b 4d 18	 mov	 ecx, DWORD PTR _gain_code$[ebp]
  000fb	66 89 01	 mov	 WORD PTR [ecx], ax
  000fe	e8 00 00 00 00	 call	 _move16

; 99   :     }
; 100  :     else

  00103	eb 7e		 jmp	 SHORT $LN1@d_gain_cod
$LN2@d_gain_cod:

; 101  :     {
; 102  :         gcode0 = extract_l (Pow2 (14, frac)); 

  00105	0f b7 45 e0	 movzx	 eax, WORD PTR _frac$[ebp]
  00109	50		 push	 eax
  0010a	6a 0e		 push	 14			; 0000000eH
  0010c	e8 00 00 00 00	 call	 _Pow2
  00111	83 c4 08	 add	 esp, 8
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 _extract_l
  0011a	83 c4 04	 add	 esp, 4
  0011d	66 89 45 f8	 mov	 WORD PTR _gcode0$[ebp], ax

; 103  :         L_tmp = L_mult(*p++, gcode0);         

  00121	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  00124	66 8b 08	 mov	 cx, WORD PTR [eax]
  00127	66 89 8d d2 fe
	ff ff		 mov	 WORD PTR tv141[ebp], cx
  0012e	8b 55 d4	 mov	 edx, DWORD PTR _p$[ebp]
  00131	83 c2 02	 add	 edx, 2
  00134	89 55 d4	 mov	 DWORD PTR _p$[ebp], edx
  00137	0f b7 45 f8	 movzx	 eax, WORD PTR _gcode0$[ebp]
  0013b	50		 push	 eax
  0013c	0f b7 8d d2 fe
	ff ff		 movzx	 ecx, WORD PTR tv141[ebp]
  00143	51		 push	 ecx
  00144	e8 00 00 00 00	 call	 _L_mult
  00149	83 c4 08	 add	 esp, 8
  0014c	89 45 98	 mov	 DWORD PTR _L_tmp$[ebp], eax

; 104  :         L_tmp = L_shr(L_tmp, sub(9, exp));    

  0014f	0f b7 45 ec	 movzx	 eax, WORD PTR _exp$[ebp]
  00153	50		 push	 eax
  00154	6a 09		 push	 9
  00156	e8 00 00 00 00	 call	 _sub
  0015b	83 c4 08	 add	 esp, 8
  0015e	0f b7 c8	 movzx	 ecx, ax
  00161	51		 push	 ecx
  00162	8b 55 98	 mov	 edx, DWORD PTR _L_tmp$[ebp]
  00165	52		 push	 edx
  00166	e8 00 00 00 00	 call	 _L_shr
  0016b	83 c4 08	 add	 esp, 8
  0016e	89 45 98	 mov	 DWORD PTR _L_tmp$[ebp], eax

; 105  :         *gain_code = extract_h(L_tmp);          /* Q1 */

  00171	8b 45 98	 mov	 eax, DWORD PTR _L_tmp$[ebp]
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 _extract_h
  0017a	83 c4 04	 add	 esp, 4
  0017d	8b 4d 18	 mov	 ecx, DWORD PTR _gain_code$[ebp]
  00180	66 89 01	 mov	 WORD PTR [ecx], ax
$LN1@d_gain_cod:

; 106  :     }
; 107  :     
; 108  :     /*-------------------------------------------------------------------*
; 109  :      *  update table of past quantized energies                          *
; 110  :      *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                          *
; 111  :      *-------------------------------------------------------------------*/
; 112  :     qua_ener_MR122 = *p++;                 move16();

  00183	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  00186	66 8b 08	 mov	 cx, WORD PTR [eax]
  00189	66 89 4d c8	 mov	 WORD PTR _qua_ener_MR122$[ebp], cx
  0018d	8b 55 d4	 mov	 edx, DWORD PTR _p$[ebp]
  00190	83 c2 02	 add	 edx, 2
  00193	89 55 d4	 mov	 DWORD PTR _p$[ebp], edx
  00196	e8 00 00 00 00	 call	 _move16

; 113  :     qua_ener = *p++;                       move16();

  0019b	8b 45 d4	 mov	 eax, DWORD PTR _p$[ebp]
  0019e	66 8b 08	 mov	 cx, WORD PTR [eax]
  001a1	66 89 4d bc	 mov	 WORD PTR _qua_ener$[ebp], cx
  001a5	8b 55 d4	 mov	 edx, DWORD PTR _p$[ebp]
  001a8	83 c2 02	 add	 edx, 2
  001ab	89 55 d4	 mov	 DWORD PTR _p$[ebp], edx
  001ae	e8 00 00 00 00	 call	 _move16

; 114  :     gc_pred_update(pred_state, qua_ener_MR122, qua_ener);

  001b3	0f b7 45 bc	 movzx	 eax, WORD PTR _qua_ener$[ebp]
  001b7	50		 push	 eax
  001b8	0f b7 4d c8	 movzx	 ecx, WORD PTR _qua_ener_MR122$[ebp]
  001bc	51		 push	 ecx
  001bd	8b 55 08	 mov	 edx, DWORD PTR _pred_state$[ebp]
  001c0	52		 push	 edx
  001c1	e8 00 00 00 00	 call	 _gc_pred_update
  001c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 115  : 
; 116  :     return;
; 117  : }

  001c9	52		 push	 edx
  001ca	8b cd		 mov	 ecx, ebp
  001cc	50		 push	 eax
  001cd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@d_gain_cod
  001d3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001d8	58		 pop	 eax
  001d9	5a		 pop	 edx
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	5b		 pop	 ebx
  001dd	81 c4 30 01 00
	00		 add	 esp, 304		; 00000130H
  001e3	3b ec		 cmp	 ebp, esp
  001e5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c3		 ret	 0
  001ee	8b ff		 npad	 2
$LN10@d_gain_cod:
  001f0	04 00 00 00	 DD	 4
  001f4	00 00 00 00	 DD	 $LN9@d_gain_cod
$LN9@d_gain_cod:
  001f8	ec ff ff ff	 DD	 -20			; ffffffecH
  001fc	02 00 00 00	 DD	 2
  00200	00 00 00 00	 DD	 $LN5@d_gain_cod
  00204	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00208	02 00 00 00	 DD	 2
  0020c	00 00 00 00	 DD	 $LN6@d_gain_cod
  00210	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00214	02 00 00 00	 DD	 2
  00218	00 00 00 00	 DD	 $LN7@d_gain_cod
  0021c	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00220	02 00 00 00	 DD	 2
  00224	00 00 00 00	 DD	 $LN8@d_gain_cod
$LN8@d_gain_cod:
  00228	66		 DB	 102			; 00000066H
  00229	72		 DB	 114			; 00000072H
  0022a	61		 DB	 97			; 00000061H
  0022b	63		 DB	 99			; 00000063H
  0022c	5f		 DB	 95			; 0000005fH
  0022d	69		 DB	 105			; 00000069H
  0022e	6e		 DB	 110			; 0000006eH
  0022f	6e		 DB	 110			; 0000006eH
  00230	5f		 DB	 95			; 0000005fH
  00231	65		 DB	 101			; 00000065H
  00232	6e		 DB	 110			; 0000006eH
  00233	00		 DB	 0
$LN7@d_gain_cod:
  00234	65		 DB	 101			; 00000065H
  00235	78		 DB	 120			; 00000078H
  00236	70		 DB	 112			; 00000070H
  00237	5f		 DB	 95			; 0000005fH
  00238	69		 DB	 105			; 00000069H
  00239	6e		 DB	 110			; 0000006eH
  0023a	6e		 DB	 110			; 0000006eH
  0023b	5f		 DB	 95			; 0000005fH
  0023c	65		 DB	 101			; 00000065H
  0023d	6e		 DB	 110			; 0000006eH
  0023e	00		 DB	 0
$LN6@d_gain_cod:
  0023f	66		 DB	 102			; 00000066H
  00240	72		 DB	 114			; 00000072H
  00241	61		 DB	 97			; 00000061H
  00242	63		 DB	 99			; 00000063H
  00243	00		 DB	 0
$LN5@d_gain_cod:
  00244	65		 DB	 101			; 00000065H
  00245	78		 DB	 120			; 00000078H
  00246	70		 DB	 112			; 00000070H
  00247	00		 DB	 0
_d_gain_code ENDP
_TEXT	ENDS
END
