; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\sp_enc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_sp_enc_id
_DATA	SEGMENT
_bitno	DD	FLAT:_bitno_MR475
	DD	FLAT:_bitno_MR515
	DD	FLAT:_bitno_MR59
	DD	FLAT:_bitno_MR67
	DD	FLAT:_bitno_MR74
	DD	FLAT:_bitno_MR795
	DD	FLAT:_bitno_MR102
	DD	FLAT:_bitno_MR122
	DD	FLAT:_bitno_MRDTX
_toc_byte DB	04H
	DB	0cH
	DB	014H
	DB	01cH
	DB	024H
	DB	02cH
	DB	034H
	DB	03cH
	DB	044H
	DB	04cH
	DB	054H
	DB	05cH
	DB	064H
	DB	06cH
	DB	074H
	DB	07cH
_unpacked_size DW 05fH
	DW	067H
	DW	076H
	DW	086H
	DW	094H
	DW	09fH
	DW	0ccH
	DW	0f4H
	DW	023H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
_packed_size DW	0dH
	DW	0eH
	DW	010H
	DW	012H
	DW	014H
	DW	015H
	DW	01bH
	DW	020H
	DW	06H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01H
_unused_size DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	01H
	DW	04H
	DW	04H
	DW	01H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	ORG $+4
_sort_475 DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	030H
	DW	031H
	DW	03dH
	DW	03eH
	DW	052H
	DW	053H
	DW	02fH
	DW	02eH
	DW	02dH
	DW	02cH
	DW	051H
	DW	050H
	DW	04fH
	DW	04eH
	DW	011H
	DW	012H
	DW	014H
	DW	016H
	DW	04dH
	DW	04cH
	DW	04bH
	DW	04aH
	DW	01dH
	DW	01eH
	DW	02bH
	DW	02aH
	DW	029H
	DW	028H
	DW	026H
	DW	027H
	DW	010H
	DW	013H
	DW	015H
	DW	032H
	DW	033H
	DW	03bH
	DW	03cH
	DW	03fH
	DW	040H
	DW	048H
	DW	049H
	DW	054H
	DW	055H
	DW	05dH
	DW	05eH
	DW	020H
	DW	021H
	DW	023H
	DW	024H
	DW	035H
	DW	036H
	DW	038H
	DW	039H
	DW	042H
	DW	043H
	DW	045H
	DW	046H
	DW	057H
	DW	058H
	DW	05aH
	DW	05bH
	DW	022H
	DW	037H
	DW	044H
	DW	059H
	DW	025H
	DW	03aH
	DW	047H
	DW	05cH
	DW	01fH
	DW	034H
	DW	041H
	DW	056H
	ORG $+2
_sort_515 DW	07H
	DW	06H
	DW	05H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	00H
	DW	0fH
	DW	0eH
	DW	0dH
	DW	0cH
	DW	0bH
	DW	0aH
	DW	09H
	DW	08H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	02eH
	DW	041H
	DW	054H
	DW	02dH
	DW	02cH
	DW	02bH
	DW	040H
	DW	03fH
	DW	03eH
	DW	053H
	DW	052H
	DW	051H
	DW	066H
	DW	065H
	DW	064H
	DW	02aH
	DW	03dH
	DW	050H
	DW	063H
	DW	01cH
	DW	02fH
	DW	042H
	DW	055H
	DW	012H
	DW	029H
	DW	03cH
	DW	04fH
	DW	062H
	DW	01dH
	DW	030H
	DW	043H
	DW	011H
	DW	014H
	DW	016H
	DW	028H
	DW	03bH
	DW	04eH
	DW	061H
	DW	015H
	DW	01eH
	DW	031H
	DW	044H
	DW	056H
	DW	013H
	DW	010H
	DW	057H
	DW	027H
	DW	026H
	DW	03aH
	DW	039H
	DW	04dH
	DW	023H
	DW	036H
	DW	049H
	DW	05cH
	DW	04cH
	DW	060H
	DW	05fH
	DW	024H
	DW	037H
	DW	04aH
	DW	05dH
	DW	020H
	DW	033H
	DW	021H
	DW	034H
	DW	046H
	DW	047H
	DW	059H
	DW	05aH
	DW	01fH
	DW	032H
	DW	045H
	DW	058H
	DW	025H
	DW	038H
	DW	04bH
	DW	05eH
	DW	022H
	DW	035H
	DW	048H
	DW	05bH
	ORG $+2
_sort_59 DW	00H
	DW	01H
	DW	04H
	DW	05H
	DW	03H
	DW	06H
	DW	07H
	DW	02H
	DW	0dH
	DW	0fH
	DW	08H
	DW	09H
	DW	0bH
	DW	0cH
	DW	0eH
	DW	0aH
	DW	010H
	DW	01cH
	DW	04aH
	DW	01dH
	DW	04bH
	DW	01bH
	DW	049H
	DW	01aH
	DW	048H
	DW	01eH
	DW	04cH
	DW	033H
	DW	061H
	DW	032H
	DW	047H
	DW	060H
	DW	075H
	DW	01fH
	DW	04dH
	DW	034H
	DW	062H
	DW	031H
	DW	046H
	DW	05fH
	DW	074H
	DW	035H
	DW	063H
	DW	020H
	DW	04eH
	DW	021H
	DW	04fH
	DW	030H
	DW	045H
	DW	05eH
	DW	073H
	DW	02fH
	DW	044H
	DW	05dH
	DW	072H
	DW	02eH
	DW	043H
	DW	05cH
	DW	071H
	DW	013H
	DW	015H
	DW	017H
	DW	016H
	DW	012H
	DW	011H
	DW	014H
	DW	018H
	DW	06fH
	DW	02bH
	DW	059H
	DW	06eH
	DW	040H
	DW	041H
	DW	02cH
	DW	05aH
	DW	019H
	DW	02dH
	DW	042H
	DW	05bH
	DW	070H
	DW	036H
	DW	064H
	DW	028H
	DW	03dH
	DW	056H
	DW	06bH
	DW	027H
	DW	03cH
	DW	055H
	DW	06aH
	DW	024H
	DW	039H
	DW	052H
	DW	067H
	DW	023H
	DW	038H
	DW	051H
	DW	066H
	DW	022H
	DW	037H
	DW	050H
	DW	065H
	DW	02aH
	DW	03fH
	DW	058H
	DW	06dH
	DW	029H
	DW	03eH
	DW	057H
	DW	06cH
	DW	026H
	DW	03bH
	DW	054H
	DW	069H
	DW	025H
	DW	03aH
	DW	053H
	DW	068H
	ORG $+4
_sort_67 DW	00H
	DW	01H
	DW	04H
	DW	03H
	DW	05H
	DW	06H
	DW	0dH
	DW	07H
	DW	02H
	DW	08H
	DW	09H
	DW	0bH
	DW	0fH
	DW	0cH
	DW	0eH
	DW	0aH
	DW	01cH
	DW	052H
	DW	01dH
	DW	053H
	DW	01bH
	DW	051H
	DW	01aH
	DW	050H
	DW	01eH
	DW	054H
	DW	010H
	DW	037H
	DW	06dH
	DW	038H
	DW	06eH
	DW	01fH
	DW	055H
	DW	039H
	DW	06fH
	DW	030H
	DW	049H
	DW	066H
	DW	07fH
	DW	020H
	DW	056H
	DW	033H
	DW	04cH
	DW	069H
	DW	082H
	DW	034H
	DW	04dH
	DW	06aH
	DW	083H
	DW	03aH
	DW	070H
	DW	021H
	DW	057H
	DW	013H
	DW	017H
	DW	035H
	DW	04eH
	DW	06bH
	DW	084H
	DW	015H
	DW	016H
	DW	012H
	DW	011H
	DW	014H
	DW	018H
	DW	019H
	DW	032H
	DW	04bH
	DW	068H
	DW	081H
	DW	02fH
	DW	048H
	DW	065H
	DW	07eH
	DW	036H
	DW	04fH
	DW	06cH
	DW	085H
	DW	02eH
	DW	047H
	DW	064H
	DW	07dH
	DW	080H
	DW	067H
	DW	04aH
	DW	031H
	DW	02dH
	DW	046H
	DW	063H
	DW	07cH
	DW	02aH
	DW	043H
	DW	060H
	DW	079H
	DW	027H
	DW	040H
	DW	05dH
	DW	076H
	DW	026H
	DW	03fH
	DW	05cH
	DW	075H
	DW	023H
	DW	03cH
	DW	059H
	DW	072H
	DW	022H
	DW	03bH
	DW	058H
	DW	071H
	DW	02cH
	DW	045H
	DW	062H
	DW	07bH
	DW	02bH
	DW	044H
	DW	061H
	DW	07aH
	DW	029H
	DW	042H
	DW	05fH
	DW	078H
	DW	028H
	DW	041H
	DW	05eH
	DW	077H
	DW	025H
	DW	03eH
	DW	05bH
	DW	074H
	DW	024H
	DW	03dH
	DW	05aH
	DW	073H
	ORG $+4
_sort_74 DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	01aH
	DW	057H
	DW	01bH
	DW	058H
	DW	01cH
	DW	059H
	DW	01dH
	DW	05aH
	DW	01eH
	DW	05bH
	DW	033H
	DW	050H
	DW	070H
	DW	08dH
	DW	034H
	DW	051H
	DW	071H
	DW	08eH
	DW	036H
	DW	053H
	DW	073H
	DW	090H
	DW	037H
	DW	054H
	DW	074H
	DW	091H
	DW	03aH
	DW	077H
	DW	03bH
	DW	078H
	DW	015H
	DW	016H
	DW	017H
	DW	011H
	DW	012H
	DW	013H
	DW	01fH
	DW	03cH
	DW	05cH
	DW	079H
	DW	038H
	DW	055H
	DW	075H
	DW	092H
	DW	014H
	DW	018H
	DW	019H
	DW	032H
	DW	04fH
	DW	06fH
	DW	08cH
	DW	039H
	DW	056H
	DW	076H
	DW	093H
	DW	031H
	DW	04eH
	DW	06eH
	DW	08bH
	DW	030H
	DW	04dH
	DW	035H
	DW	052H
	DW	072H
	DW	08fH
	DW	06dH
	DW	08aH
	DW	02fH
	DW	04cH
	DW	06cH
	DW	089H
	DW	020H
	DW	021H
	DW	03dH
	DW	03eH
	DW	05dH
	DW	05eH
	DW	07aH
	DW	07bH
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	083H
	DW	084H
	DW	085H
	DW	086H
	DW	087H
	DW	088H
	DW	022H
	DW	03fH
	DW	05fH
	DW	07cH
	DW	023H
	DW	040H
	DW	060H
	DW	07dH
	DW	024H
	DW	041H
	DW	061H
	DW	07eH
	DW	025H
	DW	042H
	DW	062H
	DW	07fH
	DW	026H
	DW	043H
	DW	063H
	DW	080H
	DW	027H
	DW	044H
	DW	064H
	DW	081H
	DW	028H
	DW	045H
	DW	065H
	DW	082H
_sort_795 DW	08H
	DW	07H
	DW	06H
	DW	05H
	DW	04H
	DW	03H
	DW	02H
	DW	0eH
	DW	010H
	DW	09H
	DW	0aH
	DW	0cH
	DW	0dH
	DW	0fH
	DW	0bH
	DW	011H
	DW	014H
	DW	016H
	DW	018H
	DW	017H
	DW	013H
	DW	012H
	DW	015H
	DW	038H
	DW	058H
	DW	07aH
	DW	09aH
	DW	039H
	DW	059H
	DW	07bH
	DW	09bH
	DW	03aH
	DW	05aH
	DW	07cH
	DW	09cH
	DW	034H
	DW	054H
	DW	076H
	DW	096H
	DW	035H
	DW	055H
	DW	077H
	DW	097H
	DW	01bH
	DW	05dH
	DW	01cH
	DW	05eH
	DW	01dH
	DW	05fH
	DW	01eH
	DW	060H
	DW	01fH
	DW	061H
	DW	03dH
	DW	07fH
	DW	03eH
	DW	080H
	DW	03fH
	DW	081H
	DW	03bH
	DW	05bH
	DW	07dH
	DW	09dH
	DW	020H
	DW	062H
	DW	040H
	DW	082H
	DW	01H
	DW	00H
	DW	019H
	DW	01aH
	DW	021H
	DW	063H
	DW	022H
	DW	064H
	DW	041H
	DW	083H
	DW	042H
	DW	084H
	DW	036H
	DW	056H
	DW	078H
	DW	098H
	DW	03cH
	DW	05cH
	DW	07eH
	DW	09eH
	DW	037H
	DW	057H
	DW	079H
	DW	099H
	DW	075H
	DW	074H
	DW	073H
	DW	02eH
	DW	04eH
	DW	070H
	DW	090H
	DW	02bH
	DW	04bH
	DW	06dH
	DW	08dH
	DW	028H
	DW	048H
	DW	06aH
	DW	08aH
	DW	024H
	DW	044H
	DW	066H
	DW	086H
	DW	072H
	DW	095H
	DW	094H
	DW	093H
	DW	092H
	DW	053H
	DW	052H
	DW	051H
	DW	050H
	DW	033H
	DW	032H
	DW	031H
	DW	030H
	DW	02fH
	DW	02dH
	DW	02cH
	DW	02aH
	DW	027H
	DW	023H
	DW	04fH
	DW	04dH
	DW	04cH
	DW	04aH
	DW	047H
	DW	043H
	DW	071H
	DW	06fH
	DW	06eH
	DW	06cH
	DW	069H
	DW	065H
	DW	091H
	DW	08fH
	DW	08eH
	DW	08cH
	DW	089H
	DW	085H
	DW	029H
	DW	049H
	DW	06bH
	DW	08bH
	DW	025H
	DW	045H
	DW	067H
	DW	087H
	DW	026H
	DW	046H
	DW	068H
	DW	088H
	ORG $+2
_sort_102 DW	07H
	DW	06H
	DW	05H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	00H
	DW	010H
	DW	0fH
	DW	0eH
	DW	0dH
	DW	0cH
	DW	0bH
	DW	0aH
	DW	09H
	DW	08H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	048H
	DW	049H
	DW	0a1H
	DW	0a2H
	DW	041H
	DW	044H
	DW	045H
	DW	06cH
	DW	06fH
	DW	070H
	DW	09aH
	DW	09dH
	DW	09eH
	DW	0c5H
	DW	0c8H
	DW	0c9H
	DW	020H
	DW	021H
	DW	079H
	DW	07aH
	DW	04aH
	DW	04bH
	DW	0a3H
	DW	0a4H
	DW	042H
	DW	06dH
	DW	09bH
	DW	0c6H
	DW	013H
	DW	017H
	DW	015H
	DW	016H
	DW	012H
	DW	011H
	DW	014H
	DW	018H
	DW	019H
	DW	025H
	DW	024H
	DW	023H
	DW	022H
	DW	050H
	DW	04fH
	DW	04eH
	DW	04dH
	DW	07eH
	DW	07dH
	DW	07cH
	DW	07bH
	DW	0a9H
	DW	0a8H
	DW	0a7H
	DW	0a6H
	DW	046H
	DW	043H
	DW	047H
	DW	071H
	DW	06eH
	DW	072H
	DW	09fH
	DW	09cH
	DW	0a0H
	DW	0caH
	DW	0c7H
	DW	0cbH
	DW	04cH
	DW	0a5H
	DW	051H
	DW	052H
	DW	05cH
	DW	05bH
	DW	05dH
	DW	053H
	DW	05fH
	DW	055H
	DW	054H
	DW	05eH
	DW	065H
	DW	066H
	DW	060H
	DW	068H
	DW	056H
	DW	067H
	DW	057H
	DW	061H
	DW	07fH
	DW	080H
	DW	08aH
	DW	089H
	DW	08bH
	DW	081H
	DW	08dH
	DW	083H
	DW	082H
	DW	08cH
	DW	093H
	DW	094H
	DW	08eH
	DW	096H
	DW	084H
	DW	095H
	DW	085H
	DW	08fH
	DW	0aaH
	DW	0abH
	DW	0b5H
	DW	0b4H
	DW	0b6H
	DW	0acH
	DW	0b8H
	DW	0aeH
	DW	0adH
	DW	0b7H
	DW	0beH
	DW	0bfH
	DW	0b9H
	DW	0c1H
	DW	0afH
	DW	0c0H
	DW	0b0H
	DW	0baH
	DW	026H
	DW	027H
	DW	031H
	DW	030H
	DW	032H
	DW	028H
	DW	034H
	DW	02aH
	DW	029H
	DW	033H
	DW	03aH
	DW	03bH
	DW	035H
	DW	03dH
	DW	02bH
	DW	03cH
	DW	02cH
	DW	036H
	DW	0c2H
	DW	0b3H
	DW	0bdH
	DW	0c4H
	DW	0b1H
	DW	0c3H
	DW	0b2H
	DW	0bbH
	DW	0bcH
	DW	097H
	DW	088H
	DW	092H
	DW	099H
	DW	086H
	DW	098H
	DW	087H
	DW	090H
	DW	091H
	DW	069H
	DW	05aH
	DW	064H
	DW	06bH
	DW	058H
	DW	06aH
	DW	059H
	DW	062H
	DW	063H
	DW	03eH
	DW	02fH
	DW	039H
	DW	040H
	DW	02dH
	DW	03fH
	DW	02eH
	DW	037H
	DW	038H
_sort_122 DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	017H
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	026H
	DW	08dH
	DW	027H
	DW	08eH
	DW	028H
	DW	08fH
	DW	029H
	DW	090H
	DW	02aH
	DW	091H
	DW	02bH
	DW	092H
	DW	02cH
	DW	093H
	DW	02dH
	DW	094H
	DW	02eH
	DW	095H
	DW	02fH
	DW	061H
	DW	096H
	DW	0c8H
	DW	030H
	DW	062H
	DW	097H
	DW	0c9H
	DW	031H
	DW	063H
	DW	098H
	DW	0caH
	DW	056H
	DW	088H
	DW	0bdH
	DW	0efH
	DW	057H
	DW	089H
	DW	0beH
	DW	0f0H
	DW	058H
	DW	08aH
	DW	0bfH
	DW	0f1H
	DW	05bH
	DW	0c2H
	DW	05cH
	DW	0c3H
	DW	05dH
	DW	0c4H
	DW	05eH
	DW	0c5H
	DW	05fH
	DW	0c6H
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	032H
	DW	064H
	DW	099H
	DW	0cbH
	DW	059H
	DW	08bH
	DW	0c0H
	DW	0f2H
	DW	033H
	DW	065H
	DW	09aH
	DW	0ccH
	DW	037H
	DW	069H
	DW	09eH
	DW	0d0H
	DW	05aH
	DW	08cH
	DW	0c1H
	DW	0f3H
	DW	03bH
	DW	06dH
	DW	0a2H
	DW	0d4H
	DW	03fH
	DW	071H
	DW	0a6H
	DW	0d8H
	DW	043H
	DW	075H
	DW	0aaH
	DW	0dcH
	DW	024H
	DW	025H
	DW	036H
	DW	035H
	DW	034H
	DW	03aH
	DW	039H
	DW	038H
	DW	03eH
	DW	03dH
	DW	03cH
	DW	042H
	DW	041H
	DW	040H
	DW	046H
	DW	045H
	DW	044H
	DW	068H
	DW	067H
	DW	066H
	DW	06cH
	DW	06bH
	DW	06aH
	DW	070H
	DW	06fH
	DW	06eH
	DW	074H
	DW	073H
	DW	072H
	DW	078H
	DW	077H
	DW	076H
	DW	09dH
	DW	09cH
	DW	09bH
	DW	0a1H
	DW	0a0H
	DW	09fH
	DW	0a5H
	DW	0a4H
	DW	0a3H
	DW	0a9H
	DW	0a8H
	DW	0a7H
	DW	0adH
	DW	0acH
	DW	0abH
	DW	0cfH
	DW	0ceH
	DW	0cdH
	DW	0d3H
	DW	0d2H
	DW	0d1H
	DW	0d7H
	DW	0d6H
	DW	0d5H
	DW	0dbH
	DW	0daH
	DW	0d9H
	DW	0dfH
	DW	0deH
	DW	0ddH
	DW	049H
	DW	048H
	DW	047H
	DW	04cH
	DW	04bH
	DW	04aH
	DW	04fH
	DW	04eH
	DW	04dH
	DW	052H
	DW	051H
	DW	050H
	DW	055H
	DW	054H
	DW	053H
	DW	07bH
	DW	07aH
	DW	079H
	DW	07eH
	DW	07dH
	DW	07cH
	DW	081H
	DW	080H
	DW	07fH
	DW	084H
	DW	083H
	DW	082H
	DW	087H
	DW	086H
	DW	085H
	DW	0b0H
	DW	0afH
	DW	0aeH
	DW	0b3H
	DW	0b2H
	DW	0b1H
	DW	0b6H
	DW	0b5H
	DW	0b4H
	DW	0b9H
	DW	0b8H
	DW	0b7H
	DW	0bcH
	DW	0bbH
	DW	0baH
	DW	0e2H
	DW	0e1H
	DW	0e0H
	DW	0e5H
	DW	0e4H
	DW	0e3H
	DW	0e8H
	DW	0e7H
	DW	0e6H
	DW	0ebH
	DW	0eaH
	DW	0e9H
	DW	0eeH
	DW	0edH
	DW	0ecH
	DW	060H
	DW	0c7H
_sort_SID DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	ORG $+2
_sort_ptr DD	FLAT:_sort_475
	DD	FLAT:_sort_515
	DD	FLAT:_sort_59
	DD	FLAT:_sort_67
	DD	FLAT:_sort_74
	DD	FLAT:_sort_795
	DD	FLAT:_sort_102
	DD	FLAT:_sort_122
	DD	FLAT:_sort_SID
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
CONST	SEGMENT
_bitno_id DB	'@(#)$Id $', 00H
	ORG $+2
_prmno	DW	011H
	DW	013H
	DW	013H
	DW	013H
	DW	013H
	DW	017H
	DW	027H
	DW	039H
	DW	05H
	ORG $+2
_prmnofsf DW	07H
	DW	07H
	DW	07H
	DW	07H
	DW	07H
	DW	08H
	DW	0cH
	DW	012H
_bitno_MR475 DW	08H
	DW	08H
	DW	07H
	DW	08H
	DW	07H
	DW	02H
	DW	08H
	DW	04H
	DW	07H
	DW	02H
	DW	04H
	DW	07H
	DW	02H
	DW	08H
	DW	04H
	DW	07H
	DW	02H
	ORG $+2
_bitno_MR515 DW	08H
	DW	08H
	DW	07H
	DW	08H
	DW	07H
	DW	02H
	DW	06H
	DW	04H
	DW	07H
	DW	02H
	DW	06H
	DW	04H
	DW	07H
	DW	02H
	DW	06H
	DW	04H
	DW	07H
	DW	02H
	DW	06H
	ORG $+2
_bitno_MR59 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	09H
	DW	02H
	DW	06H
	DW	04H
	DW	09H
	DW	02H
	DW	06H
	DW	08H
	DW	09H
	DW	02H
	DW	06H
	DW	04H
	DW	09H
	DW	02H
	DW	06H
	ORG $+2
_bitno_MR67 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	0bH
	DW	03H
	DW	07H
	DW	04H
	DW	0bH
	DW	03H
	DW	07H
	DW	08H
	DW	0bH
	DW	03H
	DW	07H
	DW	04H
	DW	0bH
	DW	03H
	DW	07H
	ORG $+2
_bitno_MR74 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	0dH
	DW	04H
	DW	07H
	DW	05H
	DW	0dH
	DW	04H
	DW	07H
	DW	08H
	DW	0dH
	DW	04H
	DW	07H
	DW	05H
	DW	0dH
	DW	04H
	DW	07H
	ORG $+2
_bitno_MR795 DW	09H
	DW	09H
	DW	09H
	DW	08H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	DW	06H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	DW	08H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	DW	06H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	ORG $+6
_bitno_MR102 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	ORG $+2
_bitno_MR122 DW	07H
	DW	08H
	DW	09H
	DW	08H
	DW	06H
	DW	09H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	06H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	09H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	06H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	ORG $+2
_bitno_MRDTX DW	03H
	DW	08H
	DW	09H
	DW	09H
	DW	06H
	ORG $+2
_sp_enc_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Speech_Encode_Frame_init
PUBLIC	_Speech_Encode_Frame_reset
PUBLIC	_Speech_Encode_Frame_exit
PUBLIC	_Speech_Encode_Frame_First
PUBLIC	_Speech_Encode_Frame
PUBLIC	_PackBits
PUBLIC	??_C@_0CN@DGFIKMAK@Speech_Encode_Frame_init?3?5invali@ ; `string'
PUBLIC	??_C@_0DK@CAOOLLDE@Speech_Encode_Frame_init?3?5can?5no@ ; `string'
PUBLIC	??_C@_0CO@HOENIANJ@Speech_Encode_Frame_reset?3?5inval@ ; `string'
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	_getCounterId:PROC
EXTRN	_setCounter:PROC
EXTRN	_Init_WMOPS_counter:PROC
EXTRN	_Reset_WMOPS_counter:PROC
EXTRN	_WMOPS_output:PROC
EXTRN	_fwc:PROC
EXTRN	_move16:PROC
EXTRN	_logic16:PROC
EXTRN	_Pre_Process_init:PROC
EXTRN	_Pre_Process_reset:PROC
EXTRN	_Pre_Process_exit:PROC
EXTRN	_Pre_Process:PROC
EXTRN	_Prm2bits:PROC
EXTRN	_cod_amr_init:PROC
EXTRN	_cod_amr_reset:PROC
EXTRN	_cod_amr_exit:PROC
EXTRN	_cod_amr_first:PROC
EXTRN	_cod_amr:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CO@HOENIANJ@Speech_Encode_Frame_reset?3?5inval@
CONST	SEGMENT
??_C@_0CO@HOENIANJ@Speech_Encode_Frame_reset?3?5inval@ DB 'Speech_Encode_'
	DB	'Frame_reset: invalid parameter', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CAOOLLDE@Speech_Encode_Frame_init?3?5can?5no@
CONST	SEGMENT
??_C@_0DK@CAOOLLDE@Speech_Encode_Frame_init?3?5can?5no@ DB 'Speech_Encode'
	DB	'_Frame_init: can not malloc state structure', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DGFIKMAK@Speech_Encode_Frame_init?3?5invali@
CONST	SEGMENT
??_C@_0CN@DGFIKMAK@Speech_Encode_Frame_init?3?5invali@ DB 'Speech_Encode_'
	DB	'Frame_init: invalid parameter', 0aH, 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_enc.c
;	COMDAT _PackBits
_TEXT	SEGMENT
_pack_ptr$ = -32					; size = 4
_temp$ = -17						; size = 1
_i$ = -8						; size = 2
_used_mode$ = 8						; size = 4
_mode$ = 12						; size = 4
_fr_type$ = 16						; size = 4
_bits$ = 20						; size = 4
_packed_bits$ = 24					; size = 4
_PackBits PROC						; COMDAT

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 259  :    Word16 i;
; 260  :    UWord8 temp;
; 261  :    UWord8 *pack_ptr;
; 262  : 
; 263  :    temp = 0;

  0001e	c6 45 ef 00	 mov	 BYTE PTR _temp$[ebp], 0

; 264  :    pack_ptr = (UWord8*)packed_bits;

  00022	8b 45 18	 mov	 eax, DWORD PTR _packed_bits$[ebp]
  00025	89 45 e0	 mov	 DWORD PTR _pack_ptr$[ebp], eax

; 265  : 
; 266  :    /* file storage format can handle only speech frames, AMR SID frames and NO_DATA frames */
; 267  :    /* -> force NO_DATA frame */
; 268  :    if (used_mode < 0 || used_mode > 15 || (used_mode > 8 && used_mode < 15))

  00028	83 7d 08 00	 cmp	 DWORD PTR _used_mode$[ebp], 0
  0002c	7c 12		 jl	 SHORT $LN11@PackBits
  0002e	83 7d 08 0f	 cmp	 DWORD PTR _used_mode$[ebp], 15 ; 0000000fH
  00032	7f 0c		 jg	 SHORT $LN11@PackBits
  00034	83 7d 08 08	 cmp	 DWORD PTR _used_mode$[ebp], 8
  00038	7e 0d		 jle	 SHORT $LN12@PackBits
  0003a	83 7d 08 0f	 cmp	 DWORD PTR _used_mode$[ebp], 15 ; 0000000fH
  0003e	7d 07		 jge	 SHORT $LN12@PackBits
$LN11@PackBits:

; 269  :    {
; 270  : 	   used_mode = 15;

  00040	c7 45 08 0f 00
	00 00		 mov	 DWORD PTR _used_mode$[ebp], 15 ; 0000000fH
$LN12@PackBits:

; 271  :    }
; 272  : 
; 273  :    /* mark empty frames between SID updates as NO_DATA frames */
; 274  :    if (used_mode == MRDTX && fr_type == TX_NO_DATA)

  00047	83 7d 08 08	 cmp	 DWORD PTR _used_mode$[ebp], 8
  0004b	75 0d		 jne	 SHORT $LN10@PackBits
  0004d	83 7d 10 03	 cmp	 DWORD PTR _fr_type$[ebp], 3
  00051	75 07		 jne	 SHORT $LN10@PackBits

; 275  :    {
; 276  : 	   used_mode = 15;

  00053	c7 45 08 0f 00
	00 00		 mov	 DWORD PTR _used_mode$[ebp], 15 ; 0000000fH
$LN10@PackBits:

; 277  :    }
; 278  : 
; 279  :    /* insert table of contents (ToC) byte at the beginning of the frame */
; 280  :    *pack_ptr = toc_byte[used_mode];

  0005a	8b 45 e0	 mov	 eax, DWORD PTR _pack_ptr$[ebp]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _used_mode$[ebp]
  00060	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR _toc_byte[ecx]
  00066	88 10		 mov	 BYTE PTR [eax], dl

; 281  :    pack_ptr++;

  00068	8b 45 e0	 mov	 eax, DWORD PTR _pack_ptr$[ebp]
  0006b	83 c0 01	 add	 eax, 1
  0006e	89 45 e0	 mov	 DWORD PTR _pack_ptr$[ebp], eax

; 282  : 
; 283  :    /* note that NO_DATA frames (used_mode==15) do not need further processing */
; 284  :    if (used_mode == 15)

  00071	83 7d 08 0f	 cmp	 DWORD PTR _used_mode$[ebp], 15 ; 0000000fH
  00075	75 0a		 jne	 SHORT $LN9@PackBits

; 285  :    {
; 286  : 	   return 1;

  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	e9 ea 00 00 00	 jmp	 $LN13@PackBits
$LN9@PackBits:

; 287  :    }
; 288  : 
; 289  :    temp = 0;

  00081	c6 45 ef 00	 mov	 BYTE PTR _temp$[ebp], 0

; 290  : 
; 291  :    /* sort and pack speech bits */
; 292  :    for (i = 1; i < unpacked_size[used_mode] + 1; i++)

  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0008e	eb 0c		 jmp	 SHORT $LN8@PackBits
$LN7@PackBits:
  00090	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00094	66 83 c0 01	 add	 ax, 1
  00098	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN8@PackBits:
  0009c	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _used_mode$[ebp]
  000a3	0f bf 14 4d 00
	00 00 00	 movsx	 edx, WORD PTR _unpacked_size[ecx*2]
  000ab	83 c2 01	 add	 edx, 1
  000ae	3b c2		 cmp	 eax, edx
  000b0	7d 5c		 jge	 SHORT $LN6@PackBits

; 293  :    {
; 294  :        if (bits[sort_ptr[used_mode][i-1]] == BIT_1)

  000b2	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _used_mode$[ebp]
  000b9	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _sort_ptr[ecx*4]
  000c0	0f bf 44 42 fe	 movsx	 eax, WORD PTR [edx+eax*2-2]
  000c5	8b 4d 14	 mov	 ecx, DWORD PTR _bits$[ebp]
  000c8	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  000cc	83 fa 01	 cmp	 edx, 1
  000cf	75 08		 jne	 SHORT $LN5@PackBits

; 295  : 	   {
; 296  : 		   temp++;

  000d1	8a 45 ef	 mov	 al, BYTE PTR _temp$[ebp]
  000d4	04 01		 add	 al, 1
  000d6	88 45 ef	 mov	 BYTE PTR _temp$[ebp], al
$LN5@PackBits:

; 297  : 	   }
; 298  : 
; 299  : 	   if (i % 8)

  000d9	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000dd	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  000e2	79 05		 jns	 SHORT $LN15@PackBits
  000e4	48		 dec	 eax
  000e5	83 c8 f8	 or	 eax, -8			; fffffff8H
  000e8	40		 inc	 eax
$LN15@PackBits:
  000e9	85 c0		 test	 eax, eax
  000eb	74 0a		 je	 SHORT $LN4@PackBits

; 300  : 	   {
; 301  : 		   temp <<= 1;

  000ed	8a 45 ef	 mov	 al, BYTE PTR _temp$[ebp]
  000f0	d0 e0		 shl	 al, 1
  000f2	88 45 ef	 mov	 BYTE PTR _temp$[ebp], al

; 302  : 	   }
; 303  : 	   else

  000f5	eb 15		 jmp	 SHORT $LN3@PackBits
$LN4@PackBits:

; 304  : 	   {
; 305  : 		   *pack_ptr = temp;

  000f7	8b 45 e0	 mov	 eax, DWORD PTR _pack_ptr$[ebp]
  000fa	8a 4d ef	 mov	 cl, BYTE PTR _temp$[ebp]
  000fd	88 08		 mov	 BYTE PTR [eax], cl

; 306  : 		   pack_ptr++;

  000ff	8b 45 e0	 mov	 eax, DWORD PTR _pack_ptr$[ebp]
  00102	83 c0 01	 add	 eax, 1
  00105	89 45 e0	 mov	 DWORD PTR _pack_ptr$[ebp], eax

; 307  : 		   temp = 0;

  00108	c6 45 ef 00	 mov	 BYTE PTR _temp$[ebp], 0
$LN3@PackBits:

; 308  : 	   }
; 309  :    }

  0010c	eb 82		 jmp	 SHORT $LN7@PackBits
$LN6@PackBits:

; 310  : 
; 311  :    /* insert SID type indication and speech mode in case of SID frame */
; 312  :    if (used_mode == MRDTX)

  0010e	83 7d 08 08	 cmp	 DWORD PTR _used_mode$[ebp], 8
  00112	75 2e		 jne	 SHORT $LN2@PackBits

; 313  :    {
; 314  : 	   if (fr_type == TX_SID_UPDATE)

  00114	83 7d 10 02	 cmp	 DWORD PTR _fr_type$[ebp], 2
  00118	75 08		 jne	 SHORT $LN1@PackBits

; 315  : 	   {
; 316  : 		   temp++;

  0011a	8a 45 ef	 mov	 al, BYTE PTR _temp$[ebp]
  0011d	04 01		 add	 al, 1
  0011f	88 45 ef	 mov	 BYTE PTR _temp$[ebp], al
$LN1@PackBits:

; 317  : 	   }
; 318  : 	   temp <<= 3;

  00122	8a 45 ef	 mov	 al, BYTE PTR _temp$[ebp]
  00125	c0 e0 03	 shl	 al, 3
  00128	88 45 ef	 mov	 BYTE PTR _temp$[ebp], al

; 319  : 
; 320  : 	   temp += mode & 0x0007;

  0012b	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0012e	83 e0 07	 and	 eax, 7
  00131	0f b6 4d ef	 movzx	 ecx, BYTE PTR _temp$[ebp]
  00135	03 c8		 add	 ecx, eax
  00137	88 4d ef	 mov	 BYTE PTR _temp$[ebp], cl

; 321  : 	   temp <<= 1;

  0013a	8a 45 ef	 mov	 al, BYTE PTR _temp$[ebp]
  0013d	d0 e0		 shl	 al, 1
  0013f	88 45 ef	 mov	 BYTE PTR _temp$[ebp], al
$LN2@PackBits:

; 322  :    }
; 323  : 
; 324  :    /* insert unused bits (zeros) at the tail of the last byte */
; 325  :    temp <<= (unused_size[used_mode] - 1);

  00142	8b 45 08	 mov	 eax, DWORD PTR _used_mode$[ebp]
  00145	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _unused_size[eax*2]
  0014d	83 e9 01	 sub	 ecx, 1
  00150	8a 55 ef	 mov	 dl, BYTE PTR _temp$[ebp]
  00153	d2 e2		 shl	 dl, cl
  00155	88 55 ef	 mov	 BYTE PTR _temp$[ebp], dl

; 326  :    *pack_ptr = temp;

  00158	8b 45 e0	 mov	 eax, DWORD PTR _pack_ptr$[ebp]
  0015b	8a 4d ef	 mov	 cl, BYTE PTR _temp$[ebp]
  0015e	88 08		 mov	 BYTE PTR [eax], cl

; 327  : 
; 328  :    return packed_size[used_mode];

  00160	8b 45 08	 mov	 eax, DWORD PTR _used_mode$[ebp]
  00163	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _packed_size[eax*2]
$LN13@PackBits:

; 329  : }

  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
_PackBits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_enc.c
;	COMDAT _Speech_Encode_Frame
_TEXT	SEGMENT
_i$ = -464						; size = 2
_syn$ = -452						; size = 320
_prm$ = -124						; size = 114
__$ArrayPad$ = -4					; size = 4
_st$ = 8						; size = 4
_mode$ = 12						; size = 4
_new_speech$ = 16					; size = 4
_serial$ = 20						; size = 4
_usedMode$ = 24						; size = 4
_Speech_Encode_Frame PROC				; COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 02 00
	00		 sub	 esp, 660		; 00000294H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 6c fd ff
	ff		 lea	 edi, DWORD PTR [ebp-660]
  00012	b9 a5 00 00 00	 mov	 ecx, 165		; 000000a5H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 200  :   Word16 prm[MAX_PRM_SIZE];   /* Analysis parameters.                  */
; 201  :   Word16 syn[L_FRAME];        /* Buffer for synthesis speech           */
; 202  :   Word16 i;
; 203  : 
; 204  :   setCounter(st->complexityCounter);

  00028	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0002b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _setCounter
  00034	83 c4 04	 add	 esp, 4

; 205  :   Reset_WMOPS_counter (); /* reset WMOPS counter for the new frame */

  00037	e8 00 00 00 00	 call	 _Reset_WMOPS_counter

; 206  : 
; 207  :   /* initialize the serial output frame to zero */
; 208  :   for (i = 0; i < MAX_SERIAL_SIZE; i++)   

  0003c	33 c0		 xor	 eax, eax
  0003e	66 89 85 30 fe
	ff ff		 mov	 WORD PTR _i$[ebp], ax
  00045	eb 12		 jmp	 SHORT $LN6@Speech_Enc
$LN5@Speech_Enc:
  00047	66 8b 85 30 fe
	ff ff		 mov	 ax, WORD PTR _i$[ebp]
  0004e	66 83 c0 01	 add	 ax, 1
  00052	66 89 85 30 fe
	ff ff		 mov	 WORD PTR _i$[ebp], ax
$LN6@Speech_Enc:
  00059	0f bf 85 30 fe
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  00060	3d f4 00 00 00	 cmp	 eax, 244		; 000000f4H
  00065	7d 17		 jge	 SHORT $LN4@Speech_Enc

; 209  :   {
; 210  :     serial[i] = 0;                                           move16 ();

  00067	0f bf 85 30 fe
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  0006e	33 c9		 xor	 ecx, ecx
  00070	8b 55 14	 mov	 edx, DWORD PTR _serial$[ebp]
  00073	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00077	e8 00 00 00 00	 call	 _move16

; 211  :   }

  0007c	eb c9		 jmp	 SHORT $LN5@Speech_Enc
$LN4@Speech_Enc:

; 212  : 
; 213  : #if !defined(NO13BIT)
; 214  :   /* Delete the 3 LSBs (13-bit input) */
; 215  :   for (i = 0; i < L_FRAME; i++)   

  0007e	33 c0		 xor	 eax, eax
  00080	66 89 85 30 fe
	ff ff		 mov	 WORD PTR _i$[ebp], ax
  00087	eb 12		 jmp	 SHORT $LN3@Speech_Enc
$LN2@Speech_Enc:
  00089	66 8b 85 30 fe
	ff ff		 mov	 ax, WORD PTR _i$[ebp]
  00090	66 83 c0 01	 add	 ax, 1
  00094	66 89 85 30 fe
	ff ff		 mov	 WORD PTR _i$[ebp], ax
$LN3@Speech_Enc:
  0009b	0f bf 85 30 fe
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  000a2	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  000a7	7d 2e		 jge	 SHORT $LN1@Speech_Enc

; 216  :   {
; 217  :      new_speech[i] = new_speech[i] & 0xfff8;    move16 (); logic16 ();

  000a9	0f bf 85 30 fe
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  000b0	8b 4d 10	 mov	 ecx, DWORD PTR _new_speech$[ebp]
  000b3	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  000b7	81 e2 f8 ff 00
	00		 and	 edx, 65528		; 0000fff8H
  000bd	0f bf 85 30 fe
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  000c4	8b 4d 10	 mov	 ecx, DWORD PTR _new_speech$[ebp]
  000c7	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  000cb	e8 00 00 00 00	 call	 _move16
  000d0	e8 00 00 00 00	 call	 _logic16

; 218  :   }

  000d5	eb b2		 jmp	 SHORT $LN2@Speech_Enc
$LN1@Speech_Enc:

; 219  : #endif
; 220  : 
; 221  :   /* filter + downscaling */
; 222  :   Pre_Process (st->pre_state, new_speech, L_FRAME);           

  000d7	68 a0 00 00 00	 push	 160			; 000000a0H
  000dc	8b 45 10	 mov	 eax, DWORD PTR _new_speech$[ebp]
  000df	50		 push	 eax
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  000e3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 _Pre_Process
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 223  :   
; 224  :   /* Call the speech encoder */
; 225  :   cod_amr(st->cod_amr_state, mode, new_speech, prm, usedMode, syn);

  000ee	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _syn$[ebp]
  000f4	50		 push	 eax
  000f5	8b 4d 18	 mov	 ecx, DWORD PTR _usedMode$[ebp]
  000f8	51		 push	 ecx
  000f9	8d 55 84	 lea	 edx, DWORD PTR _prm$[ebp]
  000fc	52		 push	 edx
  000fd	8b 45 10	 mov	 eax, DWORD PTR _new_speech$[ebp]
  00100	50		 push	 eax
  00101	8b 4d 0c	 mov	 ecx, DWORD PTR _mode$[ebp]
  00104	51		 push	 ecx
  00105	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00108	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _cod_amr
  00111	83 c4 18	 add	 esp, 24			; 00000018H

; 226  :   
; 227  :   /* Parameters to serial bits */
; 228  :   Prm2bits (*usedMode, prm, &serial[0]); 

  00114	b8 02 00 00 00	 mov	 eax, 2
  00119	6b c8 00	 imul	 ecx, eax, 0
  0011c	03 4d 14	 add	 ecx, DWORD PTR _serial$[ebp]
  0011f	51		 push	 ecx
  00120	8d 55 84	 lea	 edx, DWORD PTR _prm$[ebp]
  00123	52		 push	 edx
  00124	8b 45 18	 mov	 eax, DWORD PTR _usedMode$[ebp]
  00127	8b 08		 mov	 ecx, DWORD PTR [eax]
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 _Prm2bits
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 229  : 
; 230  :   fwc();

  00132	e8 00 00 00 00	 call	 _fwc

; 231  :   setCounter(0); /* set counter to global counter */

  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 _setCounter
  0013e	83 c4 04	 add	 esp, 4

; 232  : 
; 233  :   return 0;

  00141	33 c0		 xor	 eax, eax

; 234  : }

  00143	52		 push	 edx
  00144	8b cd		 mov	 ecx, ebp
  00146	50		 push	 eax
  00147	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Speech_Enc
  0014d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00152	58		 pop	 eax
  00153	5a		 pop	 edx
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015a	33 cd		 xor	 ecx, ebp
  0015c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00161	81 c4 94 02 00
	00		 add	 esp, 660		; 00000294H
  00167	3b ec		 cmp	 ebp, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
  00172	8b ff		 npad	 2
$LN12@Speech_Enc:
  00174	02 00 00 00	 DD	 2
  00178	00 00 00 00	 DD	 $LN11@Speech_Enc
$LN11@Speech_Enc:
  0017c	84 ff ff ff	 DD	 -124			; ffffff84H
  00180	72 00 00 00	 DD	 114			; 00000072H
  00184	00 00 00 00	 DD	 $LN9@Speech_Enc
  00188	3c fe ff ff	 DD	 -452			; fffffe3cH
  0018c	40 01 00 00	 DD	 320			; 00000140H
  00190	00 00 00 00	 DD	 $LN10@Speech_Enc
$LN10@Speech_Enc:
  00194	73		 DB	 115			; 00000073H
  00195	79		 DB	 121			; 00000079H
  00196	6e		 DB	 110			; 0000006eH
  00197	00		 DB	 0
$LN9@Speech_Enc:
  00198	70		 DB	 112			; 00000070H
  00199	72		 DB	 114			; 00000072H
  0019a	6d		 DB	 109			; 0000006dH
  0019b	00		 DB	 0
_Speech_Encode_Frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_enc.c
;	COMDAT _Speech_Encode_Frame_First
_TEXT	SEGMENT
_i$ = -8						; size = 2
_st$ = 8						; size = 4
_new_speech$ = 12					; size = 4
_Speech_Encode_Frame_First PROC				; COMDAT

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 168  : #if !defined(NO13BIT)
; 169  :    Word16 i;
; 170  : #endif
; 171  : 
; 172  :    setCounter(st->complexityCounter);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00021	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 _setCounter
  0002a	83 c4 04	 add	 esp, 4

; 173  : 
; 174  : #if !defined(NO13BIT)
; 175  :   /* Delete the 3 LSBs (13-bit input) */
; 176  :   for (i = 0; i < L_NEXT; i++) 

  0002d	33 c0		 xor	 eax, eax
  0002f	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00033	eb 0c		 jmp	 SHORT $LN3@Speech_Enc
$LN2@Speech_Enc:
  00035	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00039	66 83 c0 01	 add	 ax, 1
  0003d	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@Speech_Enc:
  00041	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00045	83 f8 28	 cmp	 eax, 40			; 00000028H
  00048	7d 28		 jge	 SHORT $LN1@Speech_Enc

; 177  :   {
; 178  :      new_speech[i] = new_speech[i] & 0xfff8;    move16 (); logic16 ();

  0004a	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR _new_speech$[ebp]
  00051	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  00055	81 e2 f8 ff 00
	00		 and	 edx, 65528		; 0000fff8H
  0005b	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR _new_speech$[ebp]
  00062	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00066	e8 00 00 00 00	 call	 _move16
  0006b	e8 00 00 00 00	 call	 _logic16

; 179  :   }

  00070	eb c3		 jmp	 SHORT $LN2@Speech_Enc
$LN1@Speech_Enc:

; 180  : #endif
; 181  : 
; 182  :   /* filter + downscaling */
; 183  :   Pre_Process (st->pre_state, new_speech, L_NEXT);

  00072	6a 28		 push	 40			; 00000028H
  00074	8b 45 0c	 mov	 eax, DWORD PTR _new_speech$[ebp]
  00077	50		 push	 eax
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0007b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 _Pre_Process
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  : 
; 185  :   cod_amr_first(st->cod_amr_state, new_speech);

  00086	8b 45 0c	 mov	 eax, DWORD PTR _new_speech$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0008d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 _cod_amr_first
  00096	83 c4 08	 add	 esp, 8

; 186  : 
; 187  :   Init_WMOPS_counter (); /* reset WMOPS counter for the new frame */

  00099	e8 00 00 00 00	 call	 _Init_WMOPS_counter

; 188  : 
; 189  :   return 0;

  0009e	33 c0		 xor	 eax, eax

; 190  : }

  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
_Speech_Encode_Frame_First ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_enc.c
;	COMDAT _Speech_Encode_Frame_exit
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Speech_Encode_Frame_exit PROC				; COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 146  :   if (state == NULL || *state == NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	74 08		 je	 SHORT $LN1@Speech_Enc
  00024	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 02		 jne	 SHORT $LN2@Speech_Enc
$LN1@Speech_Enc:

; 147  :       return;

  0002c	eb 65		 jmp	 SHORT $LN3@Speech_Enc
$LN2@Speech_Enc:

; 148  :  
; 149  :   Pre_Process_exit(&(*state)->pre_state);

  0002e	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _Pre_Process_exit
  00039	83 c4 04	 add	 esp, 4

; 150  :   cod_amr_exit(&(*state)->cod_amr_state);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0003f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00041	83 c1 04	 add	 ecx, 4
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _cod_amr_exit
  0004a	83 c4 04	 add	 esp, 4

; 151  : 
; 152  :   setCounter((*state)->complexityCounter);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 _setCounter
  0005b	83 c4 04	 add	 esp, 4

; 153  :   WMOPS_output(0);

  0005e	6a 00		 push	 0
  00060	e8 00 00 00 00	 call	 _WMOPS_output
  00065	83 c4 04	 add	 esp, 4

; 154  :   setCounter(0); /* set counter to global counter */

  00068	6a 00		 push	 0
  0006a	e8 00 00 00 00	 call	 _setCounter
  0006f	83 c4 04	 add	 esp, 4

; 155  :  
; 156  :   /* deallocate memory */
; 157  :   free(*state);

  00072	8b f4		 mov	 esi, esp
  00074	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00077	8b 08		 mov	 ecx, DWORD PTR [eax]
  00079	51		 push	 ecx
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00080	83 c4 04	 add	 esp, 4
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 158  :   *state = NULL;

  0008a	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0008d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@Speech_Enc:

; 159  :   
; 160  :   return;
; 161  : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
_Speech_Encode_Frame_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_enc.c
;	COMDAT _Speech_Encode_Frame_reset
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Speech_Encode_Frame_reset PROC				; COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 122  :   if (state == (Speech_Encode_FrameState *) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 35		 jne	 SHORT $LN1@Speech_Enc

; 123  :       fprintf(stderr, "Speech_Encode_Frame_reset: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@HOENIANJ@Speech_Encode_Frame_reset?3?5inval@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 124  :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 3d		 jmp	 SHORT $LN2@Speech_Enc
$LN1@Speech_Enc:

; 125  :   }
; 126  :   
; 127  :   Pre_Process_reset(state->pre_state);

  00059	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 _Pre_Process_reset
  00064	83 c4 04	 add	 esp, 4

; 128  :   cod_amr_reset(state->cod_amr_state);

  00067	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 _cod_amr_reset
  00073	83 c4 04	 add	 esp, 4

; 129  : 
; 130  :   setCounter(state->complexityCounter);

  00076	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00079	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 _setCounter
  00082	83 c4 04	 add	 esp, 4

; 131  :   Init_WMOPS_counter();

  00085	e8 00 00 00 00	 call	 _Init_WMOPS_counter

; 132  :   setCounter(0); /* set counter to global counter */

  0008a	6a 00		 push	 0
  0008c	e8 00 00 00 00	 call	 _setCounter
  00091	83 c4 04	 add	 esp, 4

; 133  : 
; 134  :   return 0;

  00094	33 c0		 xor	 eax, eax
$LN2@Speech_Enc:

; 135  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_Speech_Encode_Frame_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_enc.c
;	COMDAT _Speech_Encode_Frame_init
_TEXT	SEGMENT
_s$ = -8						; size = 4
_state$ = 8						; size = 4
_dtx$ = 12						; size = 4
_id$ = 16						; size = 4
_Speech_Encode_Frame_init PROC				; COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 80   :   Speech_Encode_FrameState* s;
; 81   :  
; 82   :   if (state == (Speech_Encode_FrameState **) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 38		 jne	 SHORT $LN4@Speech_Enc

; 83   :       fprintf(stderr, "Speech_Encode_Frame_init: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@DGFIKMAK@Speech_Encode_Frame_init?3?5invali@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 84   :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	e9 da 00 00 00	 jmp	 $LN5@Speech_Enc
$LN4@Speech_Enc:

; 85   :   }
; 86   :   *state = NULL;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 87   :  
; 88   :   /* allocate memory */
; 89   :   if ((s= (Speech_Encode_FrameState *) malloc(sizeof(Speech_Encode_FrameState))) == NULL){

  00065	8b f4		 mov	 esi, esp
  00067	6a 10		 push	 16			; 00000010H
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006f	83 c4 04	 add	 esp, 4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  0007c	83 7d f8 00	 cmp	 DWORD PTR _s$[ebp], 0
  00080	75 35		 jne	 SHORT $LN3@Speech_Enc

; 90   :       fprintf(stderr, "Speech_Encode_Frame_init: can not malloc state "
; 91   :                       "structure\n");

  00082	8b f4		 mov	 esi, esp
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CAOOLLDE@Speech_Encode_Frame_init?3?5can?5no@
  00089	8b fc		 mov	 edi, esp
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00091	3b fc		 cmp	 edi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009d	d1 e1		 shl	 ecx, 1
  0009f	03 c1		 add	 eax, ecx
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  000a8	83 c4 08	 add	 esp, 8
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 92   :       return -1;

  000b2	83 c8 ff	 or	 eax, -1
  000b5	eb 7f		 jmp	 SHORT $LN5@Speech_Enc
$LN3@Speech_Enc:

; 93   :   }
; 94   : 
; 95   :   s->complexityCounter = getCounterId(id);

  000b7	8b 45 10	 mov	 eax, DWORD PTR _id$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _getCounterId
  000c0	83 c4 04	 add	 esp, 4
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000c6	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 96   : 
; 97   :   s->pre_state = NULL;

  000c9	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000cc	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 98   :   s->cod_amr_state = NULL;

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000d5	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 99   :   s->dtx = dtx;

  000dc	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000df	8b 4d 0c	 mov	 ecx, DWORD PTR _dtx$[ebp]
  000e2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 100  : 
; 101  :   if (Pre_Process_init(&s->pre_state) ||
; 102  :       cod_amr_init(&s->cod_amr_state, s->dtx)) {

  000e5	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _Pre_Process_init
  000ee	83 c4 04	 add	 esp, 4
  000f1	85 c0		 test	 eax, eax
  000f3	75 1a		 jne	 SHORT $LN1@Speech_Enc
  000f5	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000f8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000fb	51		 push	 ecx
  000fc	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000ff	83 c2 04	 add	 edx, 4
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 _cod_amr_init
  00108	83 c4 08	 add	 esp, 8
  0010b	85 c0		 test	 eax, eax
  0010d	74 11		 je	 SHORT $LN2@Speech_Enc
$LN1@Speech_Enc:

; 103  :       Speech_Encode_Frame_exit(&s);

  0010f	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 _Speech_Encode_Frame_exit
  00118	83 c4 04	 add	 esp, 4

; 104  :       return -1;

  0011b	83 c8 ff	 or	 eax, -1
  0011e	eb 16		 jmp	 SHORT $LN5@Speech_Enc
$LN2@Speech_Enc:

; 105  :   }
; 106  : 
; 107  :   Speech_Encode_Frame_reset(s);

  00120	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 _Speech_Encode_Frame_reset
  00129	83 c4 04	 add	 esp, 4

; 108  :   *state = s;

  0012c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0012f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00132	89 08		 mov	 DWORD PTR [eax], ecx

; 109  :   
; 110  :   return 0;

  00134	33 c0		 xor	 eax, eax
$LN5@Speech_Enc:

; 111  : }

  00136	52		 push	 edx
  00137	8b cd		 mov	 ecx, ebp
  00139	50		 push	 eax
  0013a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Speech_Enc
  00140	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00145	58		 pop	 eax
  00146	5a		 pop	 edx
  00147	5f		 pop	 edi
  00148	5e		 pop	 esi
  00149	5b		 pop	 ebx
  0014a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00150	3b ec		 cmp	 ebp, esp
  00152	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
  0015b	90		 npad	 1
$LN9@Speech_Enc:
  0015c	01 00 00 00	 DD	 1
  00160	00 00 00 00	 DD	 $LN8@Speech_Enc
$LN8@Speech_Enc:
  00164	f8 ff ff ff	 DD	 -8			; fffffff8H
  00168	04 00 00 00	 DD	 4
  0016c	00 00 00 00	 DD	 $LN7@Speech_Enc
$LN7@Speech_Enc:
  00170	73		 DB	 115			; 00000073H
  00171	00		 DB	 0
_Speech_Encode_Frame_init ENDP
_TEXT	ENDS
END
