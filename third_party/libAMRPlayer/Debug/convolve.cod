; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\convolve.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_convolve_id
CONST	SEGMENT
_convolve_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Convolve
EXTRN	_extract_h:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_shl:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\convolve.c
;	COMDAT _Convolve
_TEXT	SEGMENT
_s$ = -32						; size = 4
_n$ = -20						; size = 2
_i$ = -8						; size = 2
_x$ = 8							; size = 4
_h$ = 12						; size = 4
_y$ = 16						; size = 4
_L$ = 20						; size = 2
_Convolve PROC						; COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 68   :     Word16 i, n;
; 69   :     Word32 s;
; 70   : 
; 71   :     for (n = 0; n < L; n++)

  0001e	33 c0		 xor	 eax, eax
  00020	66 89 45 ec	 mov	 WORD PTR _n$[ebp], ax
  00024	eb 0c		 jmp	 SHORT $LN6@Convolve
$LN5@Convolve:
  00026	66 8b 45 ec	 mov	 ax, WORD PTR _n$[ebp]
  0002a	66 83 c0 01	 add	 ax, 1
  0002e	66 89 45 ec	 mov	 WORD PTR _n$[ebp], ax
$LN6@Convolve:
  00032	0f bf 45 ec	 movsx	 eax, WORD PTR _n$[ebp]
  00036	0f bf 4d 14	 movsx	 ecx, WORD PTR _L$[ebp]
  0003a	3b c1		 cmp	 eax, ecx
  0003c	0f 8d 8d 00 00
	00		 jge	 $LN7@Convolve

; 72   :     {
; 73   :         s = 0;                  move32 (); 

  00042	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], 0
  00049	e8 00 00 00 00	 call	 _move32

; 74   :         for (i = 0; i <= n; i++)

  0004e	33 c0		 xor	 eax, eax
  00050	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00054	eb 0c		 jmp	 SHORT $LN3@Convolve
$LN2@Convolve:
  00056	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0005a	66 83 c0 01	 add	 ax, 1
  0005e	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@Convolve:
  00062	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00066	0f bf 4d ec	 movsx	 ecx, WORD PTR _n$[ebp]
  0006a	3b c1		 cmp	 eax, ecx
  0006c	7f 2f		 jg	 SHORT $LN1@Convolve

; 75   :         {
; 76   :             s = L_mac (s, x[i], h[n - i]);

  0006e	0f bf 45 ec	 movsx	 eax, WORD PTR _n$[ebp]
  00072	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00076	2b c1		 sub	 eax, ecx
  00078	8b 55 0c	 mov	 edx, DWORD PTR _h$[ebp]
  0007b	0f b7 04 42	 movzx	 eax, WORD PTR [edx+eax*2]
  0007f	50		 push	 eax
  00080	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00084	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00087	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0008b	50		 push	 eax
  0008c	8b 4d e0	 mov	 ecx, DWORD PTR _s$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 _L_mac
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
  00098	89 45 e0	 mov	 DWORD PTR _s$[ebp], eax

; 77   :         }

  0009b	eb b9		 jmp	 SHORT $LN2@Convolve
$LN1@Convolve:

; 78   :         s = L_shl (s, 3);

  0009d	6a 03		 push	 3
  0009f	8b 45 e0	 mov	 eax, DWORD PTR _s$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _L_shl
  000a8	83 c4 08	 add	 esp, 8
  000ab	89 45 e0	 mov	 DWORD PTR _s$[ebp], eax

; 79   :         y[n] = extract_h (s);   move16 (); 

  000ae	8b 45 e0	 mov	 eax, DWORD PTR _s$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _extract_h
  000b7	83 c4 04	 add	 esp, 4
  000ba	0f bf 4d ec	 movsx	 ecx, WORD PTR _n$[ebp]
  000be	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  000c1	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000c5	e8 00 00 00 00	 call	 _move16

; 80   :     }

  000ca	e9 57 ff ff ff	 jmp	 $LN5@Convolve
$LN7@Convolve:

; 81   : 
; 82   :     return;
; 83   : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
_Convolve ENDP
_TEXT	ENDS
END
