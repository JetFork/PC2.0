; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\oper_32b.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_L_Extract
PUBLIC	_L_Comp
PUBLIC	_Mpy_32
PUBLIC	_Mpy_32_16
PUBLIC	_Div_32
EXTRN	_mult:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_msu:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr:PROC
EXTRN	_L_deposit_h:PROC
EXTRN	_div_s:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\oper_32b.c
;	COMDAT _Div_32
_TEXT	SEGMENT
_L_32$ = -68						; size = 4
_n_lo$ = -56						; size = 2
_n_hi$ = -44						; size = 2
_lo$ = -32						; size = 2
_hi$ = -20						; size = 2
_approx$ = -8						; size = 2
_L_num$ = 8						; size = 4
_denom_hi$ = 12						; size = 2
_denom_lo$ = 16						; size = 2
_Div_32	PROC						; COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 184  :     Word16 approx, hi, lo, n_hi, n_lo;
; 185  :     Word32 L_32;
; 186  : 
; 187  :     /* First approximation: 1 / L_denom = 1/denom_hi */
; 188  : 
; 189  :     approx = div_s ((Word16) 0x3fff, denom_hi);

  0001e	0f b7 45 0c	 movzx	 eax, WORD PTR _denom_hi$[ebp]
  00022	50		 push	 eax
  00023	68 ff 3f 00 00	 push	 16383			; 00003fffH
  00028	e8 00 00 00 00	 call	 _div_s
  0002d	83 c4 08	 add	 esp, 8
  00030	66 89 45 f8	 mov	 WORD PTR _approx$[ebp], ax

; 190  : 
; 191  :     /* 1/L_denom = approx * (2.0 - L_denom * approx) */
; 192  : 
; 193  :     L_32 = Mpy_32_16 (denom_hi, denom_lo, approx);

  00034	0f b7 45 f8	 movzx	 eax, WORD PTR _approx$[ebp]
  00038	50		 push	 eax
  00039	0f b7 4d 10	 movzx	 ecx, WORD PTR _denom_lo$[ebp]
  0003d	51		 push	 ecx
  0003e	0f b7 55 0c	 movzx	 edx, WORD PTR _denom_hi$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _Mpy_32_16
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	89 45 bc	 mov	 DWORD PTR _L_32$[ebp], eax

; 194  : 
; 195  :     L_32 = L_sub ((Word32) 0x7fffffffL, L_32);

  0004e	8b 45 bc	 mov	 eax, DWORD PTR _L_32$[ebp]
  00051	50		 push	 eax
  00052	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00057	e8 00 00 00 00	 call	 _L_sub
  0005c	83 c4 08	 add	 esp, 8
  0005f	89 45 bc	 mov	 DWORD PTR _L_32$[ebp], eax

; 196  : 
; 197  :     L_Extract (L_32, &hi, &lo);

  00062	8d 45 e0	 lea	 eax, DWORD PTR _lo$[ebp]
  00065	50		 push	 eax
  00066	8d 4d ec	 lea	 ecx, DWORD PTR _hi$[ebp]
  00069	51		 push	 ecx
  0006a	8b 55 bc	 mov	 edx, DWORD PTR _L_32$[ebp]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _L_Extract
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 198  : 
; 199  :     L_32 = Mpy_32_16 (hi, lo, approx);

  00076	0f b7 45 f8	 movzx	 eax, WORD PTR _approx$[ebp]
  0007a	50		 push	 eax
  0007b	0f b7 4d e0	 movzx	 ecx, WORD PTR _lo$[ebp]
  0007f	51		 push	 ecx
  00080	0f b7 55 ec	 movzx	 edx, WORD PTR _hi$[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _Mpy_32_16
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	89 45 bc	 mov	 DWORD PTR _L_32$[ebp], eax

; 200  : 
; 201  :     /* L_num * (1/L_denom) */
; 202  : 
; 203  :     L_Extract (L_32, &hi, &lo);

  00090	8d 45 e0	 lea	 eax, DWORD PTR _lo$[ebp]
  00093	50		 push	 eax
  00094	8d 4d ec	 lea	 ecx, DWORD PTR _hi$[ebp]
  00097	51		 push	 ecx
  00098	8b 55 bc	 mov	 edx, DWORD PTR _L_32$[ebp]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 _L_Extract
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 204  :     L_Extract (L_num, &n_hi, &n_lo);

  000a4	8d 45 c8	 lea	 eax, DWORD PTR _n_lo$[ebp]
  000a7	50		 push	 eax
  000a8	8d 4d d4	 lea	 ecx, DWORD PTR _n_hi$[ebp]
  000ab	51		 push	 ecx
  000ac	8b 55 08	 mov	 edx, DWORD PTR _L_num$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 _L_Extract
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 205  :     L_32 = Mpy_32 (n_hi, n_lo, hi, lo);

  000b8	0f b7 45 e0	 movzx	 eax, WORD PTR _lo$[ebp]
  000bc	50		 push	 eax
  000bd	0f b7 4d ec	 movzx	 ecx, WORD PTR _hi$[ebp]
  000c1	51		 push	 ecx
  000c2	0f b7 55 c8	 movzx	 edx, WORD PTR _n_lo$[ebp]
  000c6	52		 push	 edx
  000c7	0f b7 45 d4	 movzx	 eax, WORD PTR _n_hi$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _Mpy_32
  000d1	83 c4 10	 add	 esp, 16			; 00000010H
  000d4	89 45 bc	 mov	 DWORD PTR _L_32$[ebp], eax

; 206  :     L_32 = L_shl (L_32, 2);

  000d7	6a 02		 push	 2
  000d9	8b 45 bc	 mov	 eax, DWORD PTR _L_32$[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _L_shl
  000e2	83 c4 08	 add	 esp, 8
  000e5	89 45 bc	 mov	 DWORD PTR _L_32$[ebp], eax

; 207  : 
; 208  :     return (L_32);

  000e8	8b 45 bc	 mov	 eax, DWORD PTR _L_32$[ebp]

; 209  : }

  000eb	52		 push	 edx
  000ec	8b cd		 mov	 ecx, ebp
  000ee	50		 push	 eax
  000ef	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Div_32
  000f5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fa	58		 pop	 eax
  000fb	5a		 pop	 edx
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00105	3b ec		 cmp	 ebp, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
$LN8@Div_32:
  00110	04 00 00 00	 DD	 4
  00114	00 00 00 00	 DD	 $LN7@Div_32
$LN7@Div_32:
  00118	ec ff ff ff	 DD	 -20			; ffffffecH
  0011c	02 00 00 00	 DD	 2
  00120	00 00 00 00	 DD	 $LN3@Div_32
  00124	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00128	02 00 00 00	 DD	 2
  0012c	00 00 00 00	 DD	 $LN4@Div_32
  00130	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00134	02 00 00 00	 DD	 2
  00138	00 00 00 00	 DD	 $LN5@Div_32
  0013c	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00140	02 00 00 00	 DD	 2
  00144	00 00 00 00	 DD	 $LN6@Div_32
$LN6@Div_32:
  00148	6e		 DB	 110			; 0000006eH
  00149	5f		 DB	 95			; 0000005fH
  0014a	6c		 DB	 108			; 0000006cH
  0014b	6f		 DB	 111			; 0000006fH
  0014c	00		 DB	 0
$LN5@Div_32:
  0014d	6e		 DB	 110			; 0000006eH
  0014e	5f		 DB	 95			; 0000005fH
  0014f	68		 DB	 104			; 00000068H
  00150	69		 DB	 105			; 00000069H
  00151	00		 DB	 0
$LN4@Div_32:
  00152	6c		 DB	 108			; 0000006cH
  00153	6f		 DB	 111			; 0000006fH
  00154	00		 DB	 0
$LN3@Div_32:
  00155	68		 DB	 104			; 00000068H
  00156	69		 DB	 105			; 00000069H
  00157	00		 DB	 0
_Div_32	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\oper_32b.c
;	COMDAT _Mpy_32_16
_TEXT	SEGMENT
_L_32$ = -8						; size = 4
_hi$ = 8						; size = 2
_lo$ = 12						; size = 2
_n$ = 16						; size = 2
_Mpy_32_16 PROC						; COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 132  :     Word32 L_32;
; 133  : 
; 134  :     L_32 = L_mult (hi, n);

  0001e	0f b7 45 10	 movzx	 eax, WORD PTR _n$[ebp]
  00022	50		 push	 eax
  00023	0f b7 4d 08	 movzx	 ecx, WORD PTR _hi$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _L_mult
  0002d	83 c4 08	 add	 esp, 8
  00030	89 45 f8	 mov	 DWORD PTR _L_32$[ebp], eax

; 135  :     L_32 = L_mac (L_32, mult (lo, n), 1);

  00033	6a 01		 push	 1
  00035	0f b7 45 10	 movzx	 eax, WORD PTR _n$[ebp]
  00039	50		 push	 eax
  0003a	0f b7 4d 0c	 movzx	 ecx, WORD PTR _lo$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _mult
  00044	83 c4 08	 add	 esp, 8
  00047	0f b7 d0	 movzx	 edx, ax
  0004a	52		 push	 edx
  0004b	8b 45 f8	 mov	 eax, DWORD PTR _L_32$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _L_mac
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	89 45 f8	 mov	 DWORD PTR _L_32$[ebp], eax

; 136  : 
; 137  :     return (L_32);

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _L_32$[ebp]

; 138  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_Mpy_32_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\oper_32b.c
;	COMDAT _Mpy_32
_TEXT	SEGMENT
_L_32$ = -8						; size = 4
_hi1$ = 8						; size = 2
_lo1$ = 12						; size = 2
_hi2$ = 16						; size = 2
_lo2$ = 20						; size = 2
_Mpy_32	PROC						; COMDAT

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 103  :     Word32 L_32;
; 104  : 
; 105  :     L_32 = L_mult (hi1, hi2);

  0001e	0f b7 45 10	 movzx	 eax, WORD PTR _hi2$[ebp]
  00022	50		 push	 eax
  00023	0f b7 4d 08	 movzx	 ecx, WORD PTR _hi1$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _L_mult
  0002d	83 c4 08	 add	 esp, 8
  00030	89 45 f8	 mov	 DWORD PTR _L_32$[ebp], eax

; 106  :     L_32 = L_mac (L_32, mult (hi1, lo2), 1);

  00033	6a 01		 push	 1
  00035	0f b7 45 14	 movzx	 eax, WORD PTR _lo2$[ebp]
  00039	50		 push	 eax
  0003a	0f b7 4d 08	 movzx	 ecx, WORD PTR _hi1$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _mult
  00044	83 c4 08	 add	 esp, 8
  00047	0f b7 d0	 movzx	 edx, ax
  0004a	52		 push	 edx
  0004b	8b 45 f8	 mov	 eax, DWORD PTR _L_32$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _L_mac
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	89 45 f8	 mov	 DWORD PTR _L_32$[ebp], eax

; 107  :     L_32 = L_mac (L_32, mult (lo1, hi2), 1);

  0005a	6a 01		 push	 1
  0005c	0f b7 45 10	 movzx	 eax, WORD PTR _hi2$[ebp]
  00060	50		 push	 eax
  00061	0f b7 4d 0c	 movzx	 ecx, WORD PTR _lo1$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 _mult
  0006b	83 c4 08	 add	 esp, 8
  0006e	0f b7 d0	 movzx	 edx, ax
  00071	52		 push	 edx
  00072	8b 45 f8	 mov	 eax, DWORD PTR _L_32$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _L_mac
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	89 45 f8	 mov	 DWORD PTR _L_32$[ebp], eax

; 108  : 
; 109  :     return (L_32);

  00081	8b 45 f8	 mov	 eax, DWORD PTR _L_32$[ebp]

; 110  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_Mpy_32	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\oper_32b.c
;	COMDAT _L_Comp
_TEXT	SEGMENT
_L_32$ = -8						; size = 4
_hi$ = 8						; size = 2
_lo$ = 12						; size = 2
_L_Comp	PROC						; COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 75   :     Word32 L_32;
; 76   : 
; 77   :     L_32 = L_deposit_h (hi);

  0001e	0f b7 45 08	 movzx	 eax, WORD PTR _hi$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _L_deposit_h
  00028	83 c4 04	 add	 esp, 4
  0002b	89 45 f8	 mov	 DWORD PTR _L_32$[ebp], eax

; 78   :     return (L_mac (L_32, lo, 1));       /* = hi<<16 + lo<<1 */

  0002e	6a 01		 push	 1
  00030	0f b7 45 0c	 movzx	 eax, WORD PTR _lo$[ebp]
  00034	50		 push	 eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _L_32$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _L_mac
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 79   : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_L_Comp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\oper_32b.c
;	COMDAT _L_Extract
_TEXT	SEGMENT
_L_32$ = 8						; size = 4
_hi$ = 12						; size = 4
_lo$ = 16						; size = 4
_L_Extract PROC						; COMDAT

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 47   :     *hi = extract_h (L_32);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _L_32$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _extract_h
  00027	83 c4 04	 add	 esp, 4
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _hi$[ebp]
  0002d	66 89 01	 mov	 WORD PTR [ecx], ax

; 48   :     *lo = extract_l (L_msu (L_shr (L_32, 1), *hi, 16384));

  00030	68 00 40 00 00	 push	 16384			; 00004000H
  00035	8b 45 0c	 mov	 eax, DWORD PTR _hi$[ebp]
  00038	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	6a 01		 push	 1
  0003e	8b 55 08	 mov	 edx, DWORD PTR _L_32$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 _L_shr
  00047	83 c4 08	 add	 esp, 8
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _L_msu
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _extract_l
  00059	83 c4 04	 add	 esp, 4
  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _lo$[ebp]
  0005f	66 89 01	 mov	 WORD PTR [ecx], ax

; 49   :     return;
; 50   : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_L_Extract ENDP
_TEXT	ENDS
END
