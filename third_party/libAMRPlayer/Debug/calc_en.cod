; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\calc_en.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_calc_en_id
CONST	SEGMENT
_calc_en_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_calc_unfilt_energies
PUBLIC	_calc_filt_energies
PUBLIC	_calc_target_energy
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shr:PROC
EXTRN	_L_mult:PROC
EXTRN	_negate:PROC
EXTRN	_extract_h:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr:PROC
EXTRN	_L_deposit_h:PROC
EXTRN	_div_s:PROC
EXTRN	_norm_l:PROC
EXTRN	_L_Comp:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	_Log2:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\calc_en.c
;	COMDAT _calc_target_energy
_TEXT	SEGMENT
_exp$ = -32						; size = 2
_i$ = -20						; size = 2
_s$ = -8						; size = 4
_xn$ = 8						; size = 4
_en_exp$ = 12						; size = 4
_en_frac$ = 16						; size = 4
_calc_target_energy PROC				; COMDAT

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 299  :     Word32 s;
; 300  :     Word16 i, exp;
; 301  : 
; 302  :     /* Compute scalar product <xn[], xn[]> */
; 303  :     s = L_mac(0L, xn[0], xn[0]);

  0001e	b8 02 00 00 00	 mov	 eax, 2
  00023	6b c8 00	 imul	 ecx, eax, 0
  00026	8b 55 08	 mov	 edx, DWORD PTR _xn$[ebp]
  00029	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0002d	50		 push	 eax
  0002e	b9 02 00 00 00	 mov	 ecx, 2
  00033	6b d1 00	 imul	 edx, ecx, 0
  00036	8b 45 08	 mov	 eax, DWORD PTR _xn$[ebp]
  00039	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	e8 00 00 00 00	 call	 _L_mac
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 304  :     for (i = 1; i < L_SUBFR; i++)

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
  00054	eb 0c		 jmp	 SHORT $LN3@calc_targe
$LN2@calc_targe:
  00056	66 8b 45 ec	 mov	 ax, WORD PTR _i$[ebp]
  0005a	66 83 c0 01	 add	 ax, 1
  0005e	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax
$LN3@calc_targe:
  00062	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  00066	83 f8 28	 cmp	 eax, 40			; 00000028H
  00069	7d 29		 jge	 SHORT $LN1@calc_targe

; 305  :         s = L_mac(s, xn[i], xn[i]);

  0006b	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _xn$[ebp]
  00072	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00076	52		 push	 edx
  00077	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _xn$[ebp]
  0007e	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00082	52		 push	 edx
  00083	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _L_mac
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  00092	eb c2		 jmp	 SHORT $LN2@calc_targe
$LN1@calc_targe:

; 306  : 
; 307  :     /* s = SUM 2*xn(i) * xn(i) = <xn xn> * 2 */
; 308  :     exp = norm_l(s);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _norm_l
  0009d	83 c4 04	 add	 esp, 4
  000a0	66 89 45 e0	 mov	 WORD PTR _exp$[ebp], ax

; 309  :     *en_frac = extract_h(L_shl(s, exp));

  000a4	0f b7 45 e0	 movzx	 eax, WORD PTR _exp$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000ac	51		 push	 ecx
  000ad	e8 00 00 00 00	 call	 _L_shl
  000b2	83 c4 08	 add	 esp, 8
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _extract_h
  000bb	83 c4 04	 add	 esp, 4
  000be	8b 55 10	 mov	 edx, DWORD PTR _en_frac$[ebp]
  000c1	66 89 02	 mov	 WORD PTR [edx], ax

; 310  :     *en_exp = sub(16, exp);    move16();

  000c4	0f b7 45 e0	 movzx	 eax, WORD PTR _exp$[ebp]
  000c8	50		 push	 eax
  000c9	6a 10		 push	 16			; 00000010H
  000cb	e8 00 00 00 00	 call	 _sub
  000d0	83 c4 08	 add	 esp, 8
  000d3	8b 4d 0c	 mov	 ecx, DWORD PTR _en_exp$[ebp]
  000d6	66 89 01	 mov	 WORD PTR [ecx], ax
  000d9	e8 00 00 00 00	 call	 _move16

; 311  : }

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_calc_target_energy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\calc_en.c
;	COMDAT _calc_filt_energies
_TEXT	SEGMENT
tv258 = -348						; size = 4
tv74 = -348						; size = 4
_y2$ = -148						; size = 80
_frac$ = -60						; size = 2
_exp$ = -48						; size = 2
_i$ = -36						; size = 2
_ener_init$ = -24					; size = 4
_s$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_xn$ = 12						; size = 4
_xn2$ = 16						; size = 4
_y1$ = 20						; size = 4
_Y2$ = 24						; size = 4
_g_coeff$ = 28						; size = 4
_frac_coeff$ = 32					; size = 4
_exp_coeff$ = 36					; size = 4
_cod_gain_frac$ = 40					; size = 4
_cod_gain_exp$ = 44					; size = 4
_calc_filt_energies PROC				; COMDAT

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd a4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-348]
  00012	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 196  :     Word32 s, ener_init;
; 197  :     Word16 i, exp, frac;
; 198  :     Word16 y2[L_SUBFR];
; 199  : 
; 200  :     if (test(), sub(mode, MR795) == 0 || sub(mode, MR475) == 0)

  00028	e8 00 00 00 00	 call	 _test
  0002d	6a 05		 push	 5
  0002f	0f b7 45 08	 movzx	 eax, WORD PTR _mode$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _sub
  00039	83 c4 08	 add	 esp, 8
  0003c	0f bf c8	 movsx	 ecx, ax
  0003f	85 c9		 test	 ecx, ecx
  00041	74 20		 je	 SHORT $LN23@calc_filt_
  00043	6a 00		 push	 0
  00045	0f b7 55 08	 movzx	 edx, WORD PTR _mode$[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 _sub
  0004f	83 c4 08	 add	 esp, 8
  00052	98		 cwde
  00053	85 c0		 test	 eax, eax
  00055	74 0c		 je	 SHORT $LN23@calc_filt_
  00057	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
  00061	eb 0a		 jmp	 SHORT $LN24@calc_filt_
$LN23@calc_filt_:
  00063	c7 85 a4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv74[ebp], 1
$LN24@calc_filt_:
  0006d	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR tv74[ebp], 0
  00074	74 0e		 je	 SHORT $LN20@calc_filt_

; 201  :     {
; 202  :         ener_init = 0L; move32 ();

  00076	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _ener_init$[ebp], 0
  0007d	e8 00 00 00 00	 call	 _move32

; 203  :     }
; 204  :     else

  00082	eb 0c		 jmp	 SHORT $LN19@calc_filt_
$LN20@calc_filt_:

; 205  :     {
; 206  :         ener_init = 1L; move32 ();

  00084	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _ener_init$[ebp], 1
  0008b	e8 00 00 00 00	 call	 _move32
$LN19@calc_filt_:

; 207  :     }
; 208  :     
; 209  :     for (i = 0; i < L_SUBFR; i++) {

  00090	33 c0		 xor	 eax, eax
  00092	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
  00096	eb 0c		 jmp	 SHORT $LN18@calc_filt_
$LN17@calc_filt_:
  00098	66 8b 45 dc	 mov	 ax, WORD PTR _i$[ebp]
  0009c	66 83 c0 01	 add	 ax, 1
  000a0	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
$LN18@calc_filt_:
  000a4	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  000a8	83 f8 28	 cmp	 eax, 40			; 00000028H
  000ab	7d 29		 jge	 SHORT $LN16@calc_filt_

; 210  :         y2[i] = shr(Y2[i], 3);         move16 ();

  000ad	6a 03		 push	 3
  000af	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  000b3	8b 4d 18	 mov	 ecx, DWORD PTR _Y2$[ebp]
  000b6	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 _shr
  000c0	83 c4 08	 add	 esp, 8
  000c3	0f bf 4d dc	 movsx	 ecx, WORD PTR _i$[ebp]
  000c7	66 89 84 4d 6c
	ff ff ff	 mov	 WORD PTR _y2$[ebp+ecx*2], ax
  000cf	e8 00 00 00 00	 call	 _move16

; 211  :     }

  000d4	eb c2		 jmp	 SHORT $LN17@calc_filt_
$LN16@calc_filt_:

; 212  : 
; 213  :     frac_coeff[0] = g_coeff[0];          move16 ();

  000d6	b8 02 00 00 00	 mov	 eax, 2
  000db	6b c8 00	 imul	 ecx, eax, 0
  000de	ba 02 00 00 00	 mov	 edx, 2
  000e3	6b c2 00	 imul	 eax, edx, 0
  000e6	8b 55 20	 mov	 edx, DWORD PTR _frac_coeff$[ebp]
  000e9	8b 75 1c	 mov	 esi, DWORD PTR _g_coeff$[ebp]
  000ec	66 8b 0c 0e	 mov	 cx, WORD PTR [esi+ecx]
  000f0	66 89 0c 02	 mov	 WORD PTR [edx+eax], cx
  000f4	e8 00 00 00 00	 call	 _move16

; 214  :     exp_coeff[0] = g_coeff[1];           move16 ();

  000f9	b8 02 00 00 00	 mov	 eax, 2
  000fe	c1 e0 00	 shl	 eax, 0
  00101	b9 02 00 00 00	 mov	 ecx, 2
  00106	6b d1 00	 imul	 edx, ecx, 0
  00109	8b 4d 24	 mov	 ecx, DWORD PTR _exp_coeff$[ebp]
  0010c	8b 75 1c	 mov	 esi, DWORD PTR _g_coeff$[ebp]
  0010f	66 8b 04 06	 mov	 ax, WORD PTR [esi+eax]
  00113	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  00117	e8 00 00 00 00	 call	 _move16

; 215  :     frac_coeff[1] = negate(g_coeff[2]);  move16 ();   /* coeff[1] = -2 xn y1 */

  0011c	b8 02 00 00 00	 mov	 eax, 2
  00121	d1 e0		 shl	 eax, 1
  00123	8b 4d 1c	 mov	 ecx, DWORD PTR _g_coeff$[ebp]
  00126	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  0012a	52		 push	 edx
  0012b	e8 00 00 00 00	 call	 _negate
  00130	83 c4 04	 add	 esp, 4
  00133	b9 02 00 00 00	 mov	 ecx, 2
  00138	c1 e1 00	 shl	 ecx, 0
  0013b	8b 55 20	 mov	 edx, DWORD PTR _frac_coeff$[ebp]
  0013e	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  00142	e8 00 00 00 00	 call	 _move16

; 216  :     exp_coeff[1] = add(g_coeff[3], 1);   move16 ();

  00147	6a 01		 push	 1
  00149	b8 02 00 00 00	 mov	 eax, 2
  0014e	6b c8 03	 imul	 ecx, eax, 3
  00151	8b 55 1c	 mov	 edx, DWORD PTR _g_coeff$[ebp]
  00154	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 _add
  0015e	83 c4 08	 add	 esp, 8
  00161	b9 02 00 00 00	 mov	 ecx, 2
  00166	c1 e1 00	 shl	 ecx, 0
  00169	8b 55 24	 mov	 edx, DWORD PTR _exp_coeff$[ebp]
  0016c	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  00170	e8 00 00 00 00	 call	 _move16

; 217  : 
; 218  : 
; 219  :     /* Compute scalar product <y2[],y2[]> */
; 220  : 
; 221  :     s = L_mac(ener_init, y2[0], y2[0]);

  00175	b8 02 00 00 00	 mov	 eax, 2
  0017a	6b c8 00	 imul	 ecx, eax, 0
  0017d	0f b7 94 0d 6c
	ff ff ff	 movzx	 edx, WORD PTR _y2$[ebp+ecx]
  00185	52		 push	 edx
  00186	b8 02 00 00 00	 mov	 eax, 2
  0018b	6b c8 00	 imul	 ecx, eax, 0
  0018e	0f b7 94 0d 6c
	ff ff ff	 movzx	 edx, WORD PTR _y2$[ebp+ecx]
  00196	52		 push	 edx
  00197	8b 45 e8	 mov	 eax, DWORD PTR _ener_init$[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _L_mac
  001a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a3	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 222  :     for (i = 1; i < L_SUBFR; i++)

  001a6	b8 01 00 00 00	 mov	 eax, 1
  001ab	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
  001af	eb 0c		 jmp	 SHORT $LN15@calc_filt_
$LN14@calc_filt_:
  001b1	66 8b 45 dc	 mov	 ax, WORD PTR _i$[ebp]
  001b5	66 83 c0 01	 add	 ax, 1
  001b9	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
$LN15@calc_filt_:
  001bd	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  001c1	83 f8 28	 cmp	 eax, 40			; 00000028H
  001c4	7d 2b		 jge	 SHORT $LN13@calc_filt_

; 223  :         s = L_mac(s, y2[i], y2[i]);

  001c6	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  001ca	0f b7 8c 45 6c
	ff ff ff	 movzx	 ecx, WORD PTR _y2$[ebp+eax*2]
  001d2	51		 push	 ecx
  001d3	0f bf 55 dc	 movsx	 edx, WORD PTR _i$[ebp]
  001d7	0f b7 84 55 6c
	ff ff ff	 movzx	 eax, WORD PTR _y2$[ebp+edx*2]
  001df	50		 push	 eax
  001e0	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  001e3	51		 push	 ecx
  001e4	e8 00 00 00 00	 call	 _L_mac
  001e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ec	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax
  001ef	eb c0		 jmp	 SHORT $LN14@calc_filt_
$LN13@calc_filt_:

; 224  : 
; 225  :     exp = norm_l(s);

  001f1	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 _norm_l
  001fa	83 c4 04	 add	 esp, 4
  001fd	66 89 45 d0	 mov	 WORD PTR _exp$[ebp], ax

; 226  :     frac_coeff[2] = extract_h(L_shl(s, exp)); move16 ();

  00201	0f b7 45 d0	 movzx	 eax, WORD PTR _exp$[ebp]
  00205	50		 push	 eax
  00206	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  00209	51		 push	 ecx
  0020a	e8 00 00 00 00	 call	 _L_shl
  0020f	83 c4 08	 add	 esp, 8
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 _extract_h
  00218	83 c4 04	 add	 esp, 4
  0021b	ba 02 00 00 00	 mov	 edx, 2
  00220	d1 e2		 shl	 edx, 1
  00222	8b 4d 20	 mov	 ecx, DWORD PTR _frac_coeff$[ebp]
  00225	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  00229	e8 00 00 00 00	 call	 _move16

; 227  :     exp_coeff[2] = sub(15 - 18, exp);    move16();

  0022e	0f b7 45 d0	 movzx	 eax, WORD PTR _exp$[ebp]
  00232	50		 push	 eax
  00233	6a fd		 push	 -3			; fffffffdH
  00235	e8 00 00 00 00	 call	 _sub
  0023a	83 c4 08	 add	 esp, 8
  0023d	b9 02 00 00 00	 mov	 ecx, 2
  00242	d1 e1		 shl	 ecx, 1
  00244	8b 55 24	 mov	 edx, DWORD PTR _exp_coeff$[ebp]
  00247	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  0024b	e8 00 00 00 00	 call	 _move16

; 228  : 
; 229  :     /* Compute scalar product -2*<xn[],y2[]> */
; 230  : 
; 231  :     s = L_mac(ener_init, xn[0], y2[0]);

  00250	b8 02 00 00 00	 mov	 eax, 2
  00255	6b c8 00	 imul	 ecx, eax, 0
  00258	0f b7 94 0d 6c
	ff ff ff	 movzx	 edx, WORD PTR _y2$[ebp+ecx]
  00260	52		 push	 edx
  00261	b8 02 00 00 00	 mov	 eax, 2
  00266	6b c8 00	 imul	 ecx, eax, 0
  00269	8b 55 0c	 mov	 edx, DWORD PTR _xn$[ebp]
  0026c	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00270	50		 push	 eax
  00271	8b 4d e8	 mov	 ecx, DWORD PTR _ener_init$[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 _L_mac
  0027a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027d	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 232  :     for (i = 1; i < L_SUBFR; i++)

  00280	b8 01 00 00 00	 mov	 eax, 1
  00285	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
  00289	eb 0c		 jmp	 SHORT $LN12@calc_filt_
$LN11@calc_filt_:
  0028b	66 8b 45 dc	 mov	 ax, WORD PTR _i$[ebp]
  0028f	66 83 c0 01	 add	 ax, 1
  00293	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
$LN12@calc_filt_:
  00297	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  0029b	83 f8 28	 cmp	 eax, 40			; 00000028H
  0029e	7d 2a		 jge	 SHORT $LN10@calc_filt_

; 233  :         s = L_mac(s, xn[i], y2[i]);

  002a0	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  002a4	0f b7 8c 45 6c
	ff ff ff	 movzx	 ecx, WORD PTR _y2$[ebp+eax*2]
  002ac	51		 push	 ecx
  002ad	0f bf 55 dc	 movsx	 edx, WORD PTR _i$[ebp]
  002b1	8b 45 0c	 mov	 eax, DWORD PTR _xn$[ebp]
  002b4	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  002b8	51		 push	 ecx
  002b9	8b 55 f4	 mov	 edx, DWORD PTR _s$[ebp]
  002bc	52		 push	 edx
  002bd	e8 00 00 00 00	 call	 _L_mac
  002c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c5	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax
  002c8	eb c1		 jmp	 SHORT $LN11@calc_filt_
$LN10@calc_filt_:

; 234  : 
; 235  :     exp = norm_l(s);

  002ca	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  002cd	50		 push	 eax
  002ce	e8 00 00 00 00	 call	 _norm_l
  002d3	83 c4 04	 add	 esp, 4
  002d6	66 89 45 d0	 mov	 WORD PTR _exp$[ebp], ax

; 236  :     frac_coeff[3] = negate(extract_h(L_shl(s, exp))); move16 ();

  002da	0f b7 45 d0	 movzx	 eax, WORD PTR _exp$[ebp]
  002de	50		 push	 eax
  002df	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  002e2	51		 push	 ecx
  002e3	e8 00 00 00 00	 call	 _L_shl
  002e8	83 c4 08	 add	 esp, 8
  002eb	50		 push	 eax
  002ec	e8 00 00 00 00	 call	 _extract_h
  002f1	83 c4 04	 add	 esp, 4
  002f4	0f b7 d0	 movzx	 edx, ax
  002f7	52		 push	 edx
  002f8	e8 00 00 00 00	 call	 _negate
  002fd	83 c4 04	 add	 esp, 4
  00300	b9 02 00 00 00	 mov	 ecx, 2
  00305	6b d1 03	 imul	 edx, ecx, 3
  00308	8b 4d 20	 mov	 ecx, DWORD PTR _frac_coeff$[ebp]
  0030b	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  0030f	e8 00 00 00 00	 call	 _move16

; 237  :     exp_coeff[3] = sub(15 - 9 + 1, exp);         move16 ();

  00314	0f b7 45 d0	 movzx	 eax, WORD PTR _exp$[ebp]
  00318	50		 push	 eax
  00319	6a 07		 push	 7
  0031b	e8 00 00 00 00	 call	 _sub
  00320	83 c4 08	 add	 esp, 8
  00323	b9 02 00 00 00	 mov	 ecx, 2
  00328	6b d1 03	 imul	 edx, ecx, 3
  0032b	8b 4d 24	 mov	 ecx, DWORD PTR _exp_coeff$[ebp]
  0032e	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  00332	e8 00 00 00 00	 call	 _move16

; 238  : 
; 239  : 
; 240  :     /* Compute scalar product 2*<y1[],y2[]> */
; 241  : 
; 242  :     s = L_mac(ener_init, y1[0], y2[0]);

  00337	b8 02 00 00 00	 mov	 eax, 2
  0033c	6b c8 00	 imul	 ecx, eax, 0
  0033f	0f b7 94 0d 6c
	ff ff ff	 movzx	 edx, WORD PTR _y2$[ebp+ecx]
  00347	52		 push	 edx
  00348	b8 02 00 00 00	 mov	 eax, 2
  0034d	6b c8 00	 imul	 ecx, eax, 0
  00350	8b 55 14	 mov	 edx, DWORD PTR _y1$[ebp]
  00353	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00357	50		 push	 eax
  00358	8b 4d e8	 mov	 ecx, DWORD PTR _ener_init$[ebp]
  0035b	51		 push	 ecx
  0035c	e8 00 00 00 00	 call	 _L_mac
  00361	83 c4 0c	 add	 esp, 12			; 0000000cH
  00364	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 243  :     for (i = 1; i < L_SUBFR; i++)

  00367	b8 01 00 00 00	 mov	 eax, 1
  0036c	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
  00370	eb 0c		 jmp	 SHORT $LN9@calc_filt_
$LN8@calc_filt_:
  00372	66 8b 45 dc	 mov	 ax, WORD PTR _i$[ebp]
  00376	66 83 c0 01	 add	 ax, 1
  0037a	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
$LN9@calc_filt_:
  0037e	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  00382	83 f8 28	 cmp	 eax, 40			; 00000028H
  00385	7d 2a		 jge	 SHORT $LN7@calc_filt_

; 244  :         s = L_mac(s, y1[i], y2[i]);

  00387	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  0038b	0f b7 8c 45 6c
	ff ff ff	 movzx	 ecx, WORD PTR _y2$[ebp+eax*2]
  00393	51		 push	 ecx
  00394	0f bf 55 dc	 movsx	 edx, WORD PTR _i$[ebp]
  00398	8b 45 14	 mov	 eax, DWORD PTR _y1$[ebp]
  0039b	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  0039f	51		 push	 ecx
  003a0	8b 55 f4	 mov	 edx, DWORD PTR _s$[ebp]
  003a3	52		 push	 edx
  003a4	e8 00 00 00 00	 call	 _L_mac
  003a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ac	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax
  003af	eb c1		 jmp	 SHORT $LN8@calc_filt_
$LN7@calc_filt_:

; 245  : 
; 246  :     exp = norm_l(s);

  003b1	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  003b4	50		 push	 eax
  003b5	e8 00 00 00 00	 call	 _norm_l
  003ba	83 c4 04	 add	 esp, 4
  003bd	66 89 45 d0	 mov	 WORD PTR _exp$[ebp], ax

; 247  :     frac_coeff[4] = extract_h(L_shl(s, exp)); move16 ();

  003c1	0f b7 45 d0	 movzx	 eax, WORD PTR _exp$[ebp]
  003c5	50		 push	 eax
  003c6	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  003c9	51		 push	 ecx
  003ca	e8 00 00 00 00	 call	 _L_shl
  003cf	83 c4 08	 add	 esp, 8
  003d2	50		 push	 eax
  003d3	e8 00 00 00 00	 call	 _extract_h
  003d8	83 c4 04	 add	 esp, 4
  003db	ba 02 00 00 00	 mov	 edx, 2
  003e0	c1 e2 02	 shl	 edx, 2
  003e3	8b 4d 20	 mov	 ecx, DWORD PTR _frac_coeff$[ebp]
  003e6	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  003ea	e8 00 00 00 00	 call	 _move16

; 248  :     exp_coeff[4] = sub(15 - 9 + 1, exp);  move16();

  003ef	0f b7 45 d0	 movzx	 eax, WORD PTR _exp$[ebp]
  003f3	50		 push	 eax
  003f4	6a 07		 push	 7
  003f6	e8 00 00 00 00	 call	 _sub
  003fb	83 c4 08	 add	 esp, 8
  003fe	b9 02 00 00 00	 mov	 ecx, 2
  00403	c1 e1 02	 shl	 ecx, 2
  00406	8b 55 24	 mov	 edx, DWORD PTR _exp_coeff$[ebp]
  00409	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  0040d	e8 00 00 00 00	 call	 _move16

; 249  : 
; 250  :     if (test(), test (), sub(mode, MR475) == 0 || sub(mode, MR795) == 0)

  00412	e8 00 00 00 00	 call	 _test
  00417	e8 00 00 00 00	 call	 _test
  0041c	6a 00		 push	 0
  0041e	0f b7 45 08	 movzx	 eax, WORD PTR _mode$[ebp]
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 _sub
  00428	83 c4 08	 add	 esp, 8
  0042b	0f bf c8	 movsx	 ecx, ax
  0042e	85 c9		 test	 ecx, ecx
  00430	74 20		 je	 SHORT $LN25@calc_filt_
  00432	6a 05		 push	 5
  00434	0f b7 55 08	 movzx	 edx, WORD PTR _mode$[ebp]
  00438	52		 push	 edx
  00439	e8 00 00 00 00	 call	 _sub
  0043e	83 c4 08	 add	 esp, 8
  00441	98		 cwde
  00442	85 c0		 test	 eax, eax
  00444	74 0c		 je	 SHORT $LN25@calc_filt_
  00446	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv258[ebp], 0
  00450	eb 0a		 jmp	 SHORT $LN26@calc_filt_
$LN25@calc_filt_:
  00452	c7 85 a4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv258[ebp], 1
$LN26@calc_filt_:
  0045c	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR tv258[ebp], 0
  00463	0f 84 4e 01 00
	00		 je	 $LN21@calc_filt_

; 251  :     {
; 252  :         /* Compute scalar product <xn2[],y2[]> */
; 253  : 
; 254  :         s = L_mac(ener_init, xn2[0], y2[0]);

  00469	b8 02 00 00 00	 mov	 eax, 2
  0046e	6b c8 00	 imul	 ecx, eax, 0
  00471	0f b7 94 0d 6c
	ff ff ff	 movzx	 edx, WORD PTR _y2$[ebp+ecx]
  00479	52		 push	 edx
  0047a	b8 02 00 00 00	 mov	 eax, 2
  0047f	6b c8 00	 imul	 ecx, eax, 0
  00482	8b 55 10	 mov	 edx, DWORD PTR _xn2$[ebp]
  00485	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00489	50		 push	 eax
  0048a	8b 4d e8	 mov	 ecx, DWORD PTR _ener_init$[ebp]
  0048d	51		 push	 ecx
  0048e	e8 00 00 00 00	 call	 _L_mac
  00493	83 c4 0c	 add	 esp, 12			; 0000000cH
  00496	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 255  :         for (i = 1; i < L_SUBFR; i++)

  00499	b8 01 00 00 00	 mov	 eax, 1
  0049e	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
  004a2	eb 0c		 jmp	 SHORT $LN5@calc_filt_
$LN4@calc_filt_:
  004a4	66 8b 45 dc	 mov	 ax, WORD PTR _i$[ebp]
  004a8	66 83 c0 01	 add	 ax, 1
  004ac	66 89 45 dc	 mov	 WORD PTR _i$[ebp], ax
$LN5@calc_filt_:
  004b0	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  004b4	83 f8 28	 cmp	 eax, 40			; 00000028H
  004b7	7d 2a		 jge	 SHORT $LN3@calc_filt_

; 256  :             s = L_mac(s, xn2[i], y2[i]);

  004b9	0f bf 45 dc	 movsx	 eax, WORD PTR _i$[ebp]
  004bd	0f b7 8c 45 6c
	ff ff ff	 movzx	 ecx, WORD PTR _y2$[ebp+eax*2]
  004c5	51		 push	 ecx
  004c6	0f bf 55 dc	 movsx	 edx, WORD PTR _i$[ebp]
  004ca	8b 45 10	 mov	 eax, DWORD PTR _xn2$[ebp]
  004cd	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  004d1	51		 push	 ecx
  004d2	8b 55 f4	 mov	 edx, DWORD PTR _s$[ebp]
  004d5	52		 push	 edx
  004d6	e8 00 00 00 00	 call	 _L_mac
  004db	83 c4 0c	 add	 esp, 12			; 0000000cH
  004de	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax
  004e1	eb c1		 jmp	 SHORT $LN4@calc_filt_
$LN3@calc_filt_:

; 257  :         
; 258  :         exp = norm_l(s);

  004e3	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  004e6	50		 push	 eax
  004e7	e8 00 00 00 00	 call	 _norm_l
  004ec	83 c4 04	 add	 esp, 4
  004ef	66 89 45 d0	 mov	 WORD PTR _exp$[ebp], ax

; 259  :         frac = extract_h(L_shl(s, exp));

  004f3	0f b7 45 d0	 movzx	 eax, WORD PTR _exp$[ebp]
  004f7	50		 push	 eax
  004f8	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  004fb	51		 push	 ecx
  004fc	e8 00 00 00 00	 call	 _L_shl
  00501	83 c4 08	 add	 esp, 8
  00504	50		 push	 eax
  00505	e8 00 00 00 00	 call	 _extract_h
  0050a	83 c4 04	 add	 esp, 4
  0050d	66 89 45 c4	 mov	 WORD PTR _frac$[ebp], ax

; 260  :         exp = sub(15 - 9, exp);

  00511	0f b7 45 d0	 movzx	 eax, WORD PTR _exp$[ebp]
  00515	50		 push	 eax
  00516	6a 06		 push	 6
  00518	e8 00 00 00 00	 call	 _sub
  0051d	83 c4 08	 add	 esp, 8
  00520	66 89 45 d0	 mov	 WORD PTR _exp$[ebp], ax

; 261  : 
; 262  :         
; 263  :         if (test (), frac <= 0)

  00524	e8 00 00 00 00	 call	 _test
  00529	0f bf 45 c4	 movsx	 eax, WORD PTR _frac$[ebp]
  0052d	85 c0		 test	 eax, eax
  0052f	7f 1c		 jg	 SHORT $LN2@calc_filt_

; 264  :         {
; 265  :             *cod_gain_frac = 0; move16 ();

  00531	33 c0		 xor	 eax, eax
  00533	8b 4d 28	 mov	 ecx, DWORD PTR _cod_gain_frac$[ebp]
  00536	66 89 01	 mov	 WORD PTR [ecx], ax
  00539	e8 00 00 00 00	 call	 _move16

; 266  :             *cod_gain_exp = 0;  move16 ();

  0053e	33 c0		 xor	 eax, eax
  00540	8b 4d 2c	 mov	 ecx, DWORD PTR _cod_gain_exp$[ebp]
  00543	66 89 01	 mov	 WORD PTR [ecx], ax
  00546	e8 00 00 00 00	 call	 _move16

; 267  :         }
; 268  :         else

  0054b	eb 6a		 jmp	 SHORT $LN21@calc_filt_
$LN2@calc_filt_:

; 269  :         {
; 270  :             /*
; 271  :               gcu = <xn2, y2> / c[2]
; 272  :                   = (frac>>1)/frac[2]             * 2^(exp+1-exp[2])
; 273  :                   = div_s(frac>>1, frac[2])*2^-15 * 2^(exp+1-exp[2])
; 274  :                   = div_s * 2^(exp-exp[2]-14)
; 275  :              */  
; 276  :             *cod_gain_frac = div_s (shr (frac,1), frac_coeff[2]); move16 ();

  0054d	b8 02 00 00 00	 mov	 eax, 2
  00552	d1 e0		 shl	 eax, 1
  00554	8b 4d 20	 mov	 ecx, DWORD PTR _frac_coeff$[ebp]
  00557	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  0055b	52		 push	 edx
  0055c	6a 01		 push	 1
  0055e	0f b7 45 c4	 movzx	 eax, WORD PTR _frac$[ebp]
  00562	50		 push	 eax
  00563	e8 00 00 00 00	 call	 _shr
  00568	83 c4 08	 add	 esp, 8
  0056b	0f b7 c8	 movzx	 ecx, ax
  0056e	51		 push	 ecx
  0056f	e8 00 00 00 00	 call	 _div_s
  00574	83 c4 08	 add	 esp, 8
  00577	8b 55 28	 mov	 edx, DWORD PTR _cod_gain_frac$[ebp]
  0057a	66 89 02	 mov	 WORD PTR [edx], ax
  0057d	e8 00 00 00 00	 call	 _move16

; 277  :             *cod_gain_exp = sub (sub (exp, exp_coeff[2]), 14);    move16 ();

  00582	6a 0e		 push	 14			; 0000000eH
  00584	b8 02 00 00 00	 mov	 eax, 2
  00589	d1 e0		 shl	 eax, 1
  0058b	8b 4d 24	 mov	 ecx, DWORD PTR _exp_coeff$[ebp]
  0058e	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00592	52		 push	 edx
  00593	0f b7 45 d0	 movzx	 eax, WORD PTR _exp$[ebp]
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 _sub
  0059d	83 c4 08	 add	 esp, 8
  005a0	0f b7 c8	 movzx	 ecx, ax
  005a3	51		 push	 ecx
  005a4	e8 00 00 00 00	 call	 _sub
  005a9	83 c4 08	 add	 esp, 8
  005ac	8b 55 2c	 mov	 edx, DWORD PTR _cod_gain_exp$[ebp]
  005af	66 89 02	 mov	 WORD PTR [edx], ax
  005b2	e8 00 00 00 00	 call	 _move16
$LN21@calc_filt_:

; 278  : 
; 279  :         }
; 280  :     }
; 281  : }

  005b7	52		 push	 edx
  005b8	8b cd		 mov	 ecx, ebp
  005ba	50		 push	 eax
  005bb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN29@calc_filt_
  005c1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  005c6	58		 pop	 eax
  005c7	5a		 pop	 edx
  005c8	5f		 pop	 edi
  005c9	5e		 pop	 esi
  005ca	5b		 pop	 ebx
  005cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005ce	33 cd		 xor	 ecx, ebp
  005d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005d5	81 c4 5c 01 00
	00		 add	 esp, 348		; 0000015cH
  005db	3b ec		 cmp	 ebp, esp
  005dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005e2	8b e5		 mov	 esp, ebp
  005e4	5d		 pop	 ebp
  005e5	c3		 ret	 0
  005e6	8b ff		 npad	 2
$LN29@calc_filt_:
  005e8	01 00 00 00	 DD	 1
  005ec	00 00 00 00	 DD	 $LN28@calc_filt_
$LN28@calc_filt_:
  005f0	6c ff ff ff	 DD	 -148			; ffffff6cH
  005f4	50 00 00 00	 DD	 80			; 00000050H
  005f8	00 00 00 00	 DD	 $LN27@calc_filt_
$LN27@calc_filt_:
  005fc	79		 DB	 121			; 00000079H
  005fd	32		 DB	 50			; 00000032H
  005fe	00		 DB	 0
_calc_filt_energies ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\calc_en.c
;	COMDAT _calc_unfilt_energies
_TEXT	SEGMENT
_ltpg_frac$ = -104					; size = 2
_ltpg_exp$ = -92					; size = 2
_pred_gain$ = -80					; size = 2
_ltp_res_en$ = -68					; size = 2
_tmp$ = -56						; size = 2
_exp$ = -44						; size = 2
_i$ = -32						; size = 2
_L_temp$ = -20						; size = 4
_s$ = -8						; size = 4
_res$ = 8						; size = 4
_exc$ = 12						; size = 4
_code$ = 16						; size = 4
_gain_pit$ = 20						; size = 2
_L_subfr$ = 24						; size = 2
_frac_en$ = 28						; size = 4
_exp_en$ = 32						; size = 4
_ltpg$ = 36						; size = 4
_calc_unfilt_energies PROC				; COMDAT

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 72   :     Word32 s, L_temp;
; 73   :     Word16 i, exp, tmp;
; 74   :     Word16 ltp_res_en, pred_gain;
; 75   :     Word16 ltpg_exp, ltpg_frac;
; 76   : 
; 77   :     /* Compute residual energy */
; 78   :     s = L_mac((Word32) 0, res[0], res[0]);

  0001e	b8 02 00 00 00	 mov	 eax, 2
  00023	6b c8 00	 imul	 ecx, eax, 0
  00026	8b 55 08	 mov	 edx, DWORD PTR _res$[ebp]
  00029	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0002d	50		 push	 eax
  0002e	b9 02 00 00 00	 mov	 ecx, 2
  00033	6b d1 00	 imul	 edx, ecx, 0
  00036	8b 45 08	 mov	 eax, DWORD PTR _res$[ebp]
  00039	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	e8 00 00 00 00	 call	 _L_mac
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 79   :     for (i = 1; i < L_subfr; i++)

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
  00054	eb 0c		 jmp	 SHORT $LN16@calc_unfil
$LN15@calc_unfil:
  00056	66 8b 45 e0	 mov	 ax, WORD PTR _i$[ebp]
  0005a	66 83 c0 01	 add	 ax, 1
  0005e	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
$LN16@calc_unfil:
  00062	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  00066	0f bf 4d 18	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  0006a	3b c1		 cmp	 eax, ecx
  0006c	7d 29		 jge	 SHORT $LN14@calc_unfil

; 80   :         s = L_mac(s, res[i], res[i]);

  0006e	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _res$[ebp]
  00075	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00079	52		 push	 edx
  0007a	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _res$[ebp]
  00081	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00085	52		 push	 edx
  00086	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _L_mac
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00092	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  00095	eb bf		 jmp	 SHORT $LN15@calc_unfil
$LN14@calc_unfil:

; 81   : 
; 82   :     /* ResEn := 0 if ResEn < 200.0 (= 400 Q1) */
; 83   :     test();

  00097	e8 00 00 00 00	 call	 _test

; 84   :     if (L_sub (s, 400L) < 0)

  0009c	68 90 01 00 00	 push	 400			; 00000190H
  000a1	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _L_sub
  000aa	83 c4 08	 add	 esp, 8
  000ad	85 c0		 test	 eax, eax
  000af	7d 31		 jge	 SHORT $LN13@calc_unfil

; 85   :     {
; 86   :         frac_en[0] = 0;                      move16 ();

  000b1	b8 02 00 00 00	 mov	 eax, 2
  000b6	6b c8 00	 imul	 ecx, eax, 0
  000b9	33 d2		 xor	 edx, edx
  000bb	8b 45 1c	 mov	 eax, DWORD PTR _frac_en$[ebp]
  000be	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx
  000c2	e8 00 00 00 00	 call	 _move16

; 87   :         exp_en[0] = -15;                     move16 ();

  000c7	b8 02 00 00 00	 mov	 eax, 2
  000cc	6b c8 00	 imul	 ecx, eax, 0
  000cf	ba f1 ff ff ff	 mov	 edx, -15		; fffffff1H
  000d4	8b 45 20	 mov	 eax, DWORD PTR _exp_en$[ebp]
  000d7	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx
  000db	e8 00 00 00 00	 call	 _move16

; 88   :     }
; 89   :     else

  000e0	eb 61		 jmp	 SHORT $LN12@calc_unfil
$LN13@calc_unfil:

; 90   :     {
; 91   :         exp = norm_l(s);

  000e2	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 _norm_l
  000eb	83 c4 04	 add	 esp, 4
  000ee	66 89 45 d4	 mov	 WORD PTR _exp$[ebp], ax

; 92   :         frac_en[0] = extract_h(L_shl(s, exp));   move16 ();

  000f2	0f b7 45 d4	 movzx	 eax, WORD PTR _exp$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000fa	51		 push	 ecx
  000fb	e8 00 00 00 00	 call	 _L_shl
  00100	83 c4 08	 add	 esp, 8
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _extract_h
  00109	83 c4 04	 add	 esp, 4
  0010c	ba 02 00 00 00	 mov	 edx, 2
  00111	6b ca 00	 imul	 ecx, edx, 0
  00114	8b 55 1c	 mov	 edx, DWORD PTR _frac_en$[ebp]
  00117	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  0011b	e8 00 00 00 00	 call	 _move16

; 93   :         exp_en[0] = sub(15, exp);                move16 ();

  00120	0f b7 45 d4	 movzx	 eax, WORD PTR _exp$[ebp]
  00124	50		 push	 eax
  00125	6a 0f		 push	 15			; 0000000fH
  00127	e8 00 00 00 00	 call	 _sub
  0012c	83 c4 08	 add	 esp, 8
  0012f	b9 02 00 00 00	 mov	 ecx, 2
  00134	6b d1 00	 imul	 edx, ecx, 0
  00137	8b 4d 20	 mov	 ecx, DWORD PTR _exp_en$[ebp]
  0013a	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  0013e	e8 00 00 00 00	 call	 _move16
$LN12@calc_unfil:

; 94   :     }
; 95   :     
; 96   :     /* Compute ltp excitation energy */
; 97   :     s = L_mac((Word32) 0, exc[0], exc[0]);

  00143	b8 02 00 00 00	 mov	 eax, 2
  00148	6b c8 00	 imul	 ecx, eax, 0
  0014b	8b 55 0c	 mov	 edx, DWORD PTR _exc$[ebp]
  0014e	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00152	50		 push	 eax
  00153	b9 02 00 00 00	 mov	 ecx, 2
  00158	6b d1 00	 imul	 edx, ecx, 0
  0015b	8b 45 0c	 mov	 eax, DWORD PTR _exc$[ebp]
  0015e	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00162	51		 push	 ecx
  00163	6a 00		 push	 0
  00165	e8 00 00 00 00	 call	 _L_mac
  0016a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016d	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 98   :     for (i = 1; i < L_subfr; i++)

  00170	b8 01 00 00 00	 mov	 eax, 1
  00175	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
  00179	eb 0c		 jmp	 SHORT $LN11@calc_unfil
$LN10@calc_unfil:
  0017b	66 8b 45 e0	 mov	 ax, WORD PTR _i$[ebp]
  0017f	66 83 c0 01	 add	 ax, 1
  00183	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
$LN11@calc_unfil:
  00187	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  0018b	0f bf 4d 18	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  0018f	3b c1		 cmp	 eax, ecx
  00191	7d 29		 jge	 SHORT $LN9@calc_unfil

; 99   :         s = L_mac(s, exc[i], exc[i]);

  00193	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  00197	8b 4d 0c	 mov	 ecx, DWORD PTR _exc$[ebp]
  0019a	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0019e	52		 push	 edx
  0019f	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  001a3	8b 4d 0c	 mov	 ecx, DWORD PTR _exc$[ebp]
  001a6	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  001aa	52		 push	 edx
  001ab	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 _L_mac
  001b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b7	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  001ba	eb bf		 jmp	 SHORT $LN10@calc_unfil
$LN9@calc_unfil:

; 100  : 
; 101  :     exp = norm_l(s);

  001bc	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 _norm_l
  001c5	83 c4 04	 add	 esp, 4
  001c8	66 89 45 d4	 mov	 WORD PTR _exp$[ebp], ax

; 102  :     frac_en[1] = extract_h(L_shl(s, exp));   move16 ();

  001cc	0f b7 45 d4	 movzx	 eax, WORD PTR _exp$[ebp]
  001d0	50		 push	 eax
  001d1	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  001d4	51		 push	 ecx
  001d5	e8 00 00 00 00	 call	 _L_shl
  001da	83 c4 08	 add	 esp, 8
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 _extract_h
  001e3	83 c4 04	 add	 esp, 4
  001e6	ba 02 00 00 00	 mov	 edx, 2
  001eb	c1 e2 00	 shl	 edx, 0
  001ee	8b 4d 1c	 mov	 ecx, DWORD PTR _frac_en$[ebp]
  001f1	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  001f5	e8 00 00 00 00	 call	 _move16

; 103  :     exp_en[1] = sub(15, exp);                move16 ();

  001fa	0f b7 45 d4	 movzx	 eax, WORD PTR _exp$[ebp]
  001fe	50		 push	 eax
  001ff	6a 0f		 push	 15			; 0000000fH
  00201	e8 00 00 00 00	 call	 _sub
  00206	83 c4 08	 add	 esp, 8
  00209	b9 02 00 00 00	 mov	 ecx, 2
  0020e	c1 e1 00	 shl	 ecx, 0
  00211	8b 55 20	 mov	 edx, DWORD PTR _exp_en$[ebp]
  00214	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  00218	e8 00 00 00 00	 call	 _move16

; 104  : 
; 105  :     /* Compute scalar product <exc[],code[]> */
; 106  :     s = L_mac((Word32) 0, exc[0], code[0]);

  0021d	b8 02 00 00 00	 mov	 eax, 2
  00222	6b c8 00	 imul	 ecx, eax, 0
  00225	8b 55 10	 mov	 edx, DWORD PTR _code$[ebp]
  00228	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0022c	50		 push	 eax
  0022d	b9 02 00 00 00	 mov	 ecx, 2
  00232	6b d1 00	 imul	 edx, ecx, 0
  00235	8b 45 0c	 mov	 eax, DWORD PTR _exc$[ebp]
  00238	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  0023c	51		 push	 ecx
  0023d	6a 00		 push	 0
  0023f	e8 00 00 00 00	 call	 _L_mac
  00244	83 c4 0c	 add	 esp, 12			; 0000000cH
  00247	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 107  :     for (i = 1; i < L_subfr; i++)

  0024a	b8 01 00 00 00	 mov	 eax, 1
  0024f	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
  00253	eb 0c		 jmp	 SHORT $LN8@calc_unfil
$LN7@calc_unfil:
  00255	66 8b 45 e0	 mov	 ax, WORD PTR _i$[ebp]
  00259	66 83 c0 01	 add	 ax, 1
  0025d	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
$LN8@calc_unfil:
  00261	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  00265	0f bf 4d 18	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  00269	3b c1		 cmp	 eax, ecx
  0026b	7d 29		 jge	 SHORT $LN6@calc_unfil

; 108  :         s = L_mac(s, exc[i], code[i]);

  0026d	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  00271	8b 4d 10	 mov	 ecx, DWORD PTR _code$[ebp]
  00274	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00278	52		 push	 edx
  00279	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  0027d	8b 4d 0c	 mov	 ecx, DWORD PTR _exc$[ebp]
  00280	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00284	52		 push	 edx
  00285	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00288	50		 push	 eax
  00289	e8 00 00 00 00	 call	 _L_mac
  0028e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00291	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  00294	eb bf		 jmp	 SHORT $LN7@calc_unfil
$LN6@calc_unfil:

; 109  : 
; 110  :     exp = norm_l(s);

  00296	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 _norm_l
  0029f	83 c4 04	 add	 esp, 4
  002a2	66 89 45 d4	 mov	 WORD PTR _exp$[ebp], ax

; 111  :     frac_en[2] = extract_h(L_shl(s, exp));   move16 ();

  002a6	0f b7 45 d4	 movzx	 eax, WORD PTR _exp$[ebp]
  002aa	50		 push	 eax
  002ab	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  002ae	51		 push	 ecx
  002af	e8 00 00 00 00	 call	 _L_shl
  002b4	83 c4 08	 add	 esp, 8
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 _extract_h
  002bd	83 c4 04	 add	 esp, 4
  002c0	ba 02 00 00 00	 mov	 edx, 2
  002c5	d1 e2		 shl	 edx, 1
  002c7	8b 4d 1c	 mov	 ecx, DWORD PTR _frac_en$[ebp]
  002ca	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  002ce	e8 00 00 00 00	 call	 _move16

; 112  :     exp_en[2] = sub(16-14, exp);             move16 ();

  002d3	0f b7 45 d4	 movzx	 eax, WORD PTR _exp$[ebp]
  002d7	50		 push	 eax
  002d8	6a 02		 push	 2
  002da	e8 00 00 00 00	 call	 _sub
  002df	83 c4 08	 add	 esp, 8
  002e2	b9 02 00 00 00	 mov	 ecx, 2
  002e7	d1 e1		 shl	 ecx, 1
  002e9	8b 55 20	 mov	 edx, DWORD PTR _exp_en$[ebp]
  002ec	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  002f0	e8 00 00 00 00	 call	 _move16

; 113  : 
; 114  :     /* Compute energy of LTP residual */
; 115  :     s = 0L;                                  move32 ();

  002f5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], 0
  002fc	e8 00 00 00 00	 call	 _move32

; 116  :     for (i = 0; i < L_subfr; i++)

  00301	33 c0		 xor	 eax, eax
  00303	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
  00307	eb 0c		 jmp	 SHORT $LN5@calc_unfil
$LN4@calc_unfil:
  00309	66 8b 45 e0	 mov	 ax, WORD PTR _i$[ebp]
  0030d	66 83 c0 01	 add	 ax, 1
  00311	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
$LN5@calc_unfil:
  00315	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  00319	0f bf 4d 18	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  0031d	3b c1		 cmp	 eax, ecx
  0031f	7d 73		 jge	 SHORT $LN3@calc_unfil

; 117  :     {
; 118  :         L_temp = L_mult(exc[i], gain_pit);

  00321	0f b7 45 14	 movzx	 eax, WORD PTR _gain_pit$[ebp]
  00325	50		 push	 eax
  00326	0f bf 4d e0	 movsx	 ecx, WORD PTR _i$[ebp]
  0032a	8b 55 0c	 mov	 edx, DWORD PTR _exc$[ebp]
  0032d	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 _L_mult
  00337	83 c4 08	 add	 esp, 8
  0033a	89 45 ec	 mov	 DWORD PTR _L_temp$[ebp], eax

; 119  :         L_temp = L_shl(L_temp, 1);

  0033d	6a 01		 push	 1
  0033f	8b 45 ec	 mov	 eax, DWORD PTR _L_temp$[ebp]
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 _L_shl
  00348	83 c4 08	 add	 esp, 8
  0034b	89 45 ec	 mov	 DWORD PTR _L_temp$[ebp], eax

; 120  :         tmp = sub(res[i], round(L_temp));           /* LTP residual, Q0 */

  0034e	8b 45 ec	 mov	 eax, DWORD PTR _L_temp$[ebp]
  00351	50		 push	 eax
  00352	e8 00 00 00 00	 call	 _round
  00357	83 c4 04	 add	 esp, 4
  0035a	0f b7 c8	 movzx	 ecx, ax
  0035d	51		 push	 ecx
  0035e	0f bf 55 e0	 movsx	 edx, WORD PTR _i$[ebp]
  00362	8b 45 08	 mov	 eax, DWORD PTR _res$[ebp]
  00365	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00369	51		 push	 ecx
  0036a	e8 00 00 00 00	 call	 _sub
  0036f	83 c4 08	 add	 esp, 8
  00372	66 89 45 c8	 mov	 WORD PTR _tmp$[ebp], ax

; 121  :         s = L_mac (s, tmp, tmp);

  00376	0f b7 45 c8	 movzx	 eax, WORD PTR _tmp$[ebp]
  0037a	50		 push	 eax
  0037b	0f b7 4d c8	 movzx	 ecx, WORD PTR _tmp$[ebp]
  0037f	51		 push	 ecx
  00380	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00383	52		 push	 edx
  00384	e8 00 00 00 00	 call	 _L_mac
  00389	83 c4 0c	 add	 esp, 12			; 0000000cH
  0038c	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 122  :     }

  0038f	e9 75 ff ff ff	 jmp	 $LN4@calc_unfil
$LN3@calc_unfil:

; 123  : 
; 124  :     exp = norm_l(s);

  00394	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00397	50		 push	 eax
  00398	e8 00 00 00 00	 call	 _norm_l
  0039d	83 c4 04	 add	 esp, 4
  003a0	66 89 45 d4	 mov	 WORD PTR _exp$[ebp], ax

; 125  :     ltp_res_en = extract_h (L_shl (s, exp));

  003a4	0f b7 45 d4	 movzx	 eax, WORD PTR _exp$[ebp]
  003a8	50		 push	 eax
  003a9	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  003ac	51		 push	 ecx
  003ad	e8 00 00 00 00	 call	 _L_shl
  003b2	83 c4 08	 add	 esp, 8
  003b5	50		 push	 eax
  003b6	e8 00 00 00 00	 call	 _extract_h
  003bb	83 c4 04	 add	 esp, 4
  003be	66 89 45 bc	 mov	 WORD PTR _ltp_res_en$[ebp], ax

; 126  :     exp = sub (15, exp);

  003c2	0f b7 45 d4	 movzx	 eax, WORD PTR _exp$[ebp]
  003c6	50		 push	 eax
  003c7	6a 0f		 push	 15			; 0000000fH
  003c9	e8 00 00 00 00	 call	 _sub
  003ce	83 c4 08	 add	 esp, 8
  003d1	66 89 45 d4	 mov	 WORD PTR _exp$[ebp], ax

; 127  : 
; 128  :     frac_en[3] = ltp_res_en;                 move16 ();

  003d5	b8 02 00 00 00	 mov	 eax, 2
  003da	6b c8 03	 imul	 ecx, eax, 3
  003dd	8b 55 1c	 mov	 edx, DWORD PTR _frac_en$[ebp]
  003e0	66 8b 45 bc	 mov	 ax, WORD PTR _ltp_res_en$[ebp]
  003e4	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  003e8	e8 00 00 00 00	 call	 _move16

; 129  :     exp_en[3] = exp;                         move16 ();

  003ed	b8 02 00 00 00	 mov	 eax, 2
  003f2	6b c8 03	 imul	 ecx, eax, 3
  003f5	8b 55 20	 mov	 edx, DWORD PTR _exp_en$[ebp]
  003f8	66 8b 45 d4	 mov	 ax, WORD PTR _exp$[ebp]
  003fc	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  00400	e8 00 00 00 00	 call	 _move16

; 130  :     
; 131  :     /* calculate LTP coding gain, i.e. energy reduction LP res -> LTP res */
; 132  :     test (); test ();

  00405	e8 00 00 00 00	 call	 _test
  0040a	e8 00 00 00 00	 call	 _test

; 133  :     if (ltp_res_en > 0 && frac_en[0] != 0)

  0040f	0f bf 45 bc	 movsx	 eax, WORD PTR _ltp_res_en$[ebp]
  00413	85 c0		 test	 eax, eax
  00415	0f 8e ef 00 00
	00		 jle	 $LN2@calc_unfil
  0041b	b8 02 00 00 00	 mov	 eax, 2
  00420	6b c8 00	 imul	 ecx, eax, 0
  00423	8b 55 1c	 mov	 edx, DWORD PTR _frac_en$[ebp]
  00426	0f bf 04 0a	 movsx	 eax, WORD PTR [edx+ecx]
  0042a	85 c0		 test	 eax, eax
  0042c	0f 84 d8 00 00
	00		 je	 $LN2@calc_unfil

; 134  :     {
; 135  :         /* gain = ResEn / LTPResEn */
; 136  :         pred_gain = div_s (shr (frac_en[0], 1), ltp_res_en);

  00432	0f b7 45 bc	 movzx	 eax, WORD PTR _ltp_res_en$[ebp]
  00436	50		 push	 eax
  00437	6a 01		 push	 1
  00439	b9 02 00 00 00	 mov	 ecx, 2
  0043e	6b d1 00	 imul	 edx, ecx, 0
  00441	8b 45 1c	 mov	 eax, DWORD PTR _frac_en$[ebp]
  00444	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00448	51		 push	 ecx
  00449	e8 00 00 00 00	 call	 _shr
  0044e	83 c4 08	 add	 esp, 8
  00451	0f b7 d0	 movzx	 edx, ax
  00454	52		 push	 edx
  00455	e8 00 00 00 00	 call	 _div_s
  0045a	83 c4 08	 add	 esp, 8
  0045d	66 89 45 b0	 mov	 WORD PTR _pred_gain$[ebp], ax

; 137  :         exp = sub (exp, exp_en[0]);

  00461	b8 02 00 00 00	 mov	 eax, 2
  00466	6b c8 00	 imul	 ecx, eax, 0
  00469	8b 55 20	 mov	 edx, DWORD PTR _exp_en$[ebp]
  0046c	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00470	50		 push	 eax
  00471	0f b7 4d d4	 movzx	 ecx, WORD PTR _exp$[ebp]
  00475	51		 push	 ecx
  00476	e8 00 00 00 00	 call	 _sub
  0047b	83 c4 08	 add	 esp, 8
  0047e	66 89 45 d4	 mov	 WORD PTR _exp$[ebp], ax

; 138  : 
; 139  :         /* L_temp = ltpGain * 2^(30 + exp) */
; 140  :         L_temp = L_deposit_h (pred_gain);

  00482	0f b7 45 b0	 movzx	 eax, WORD PTR _pred_gain$[ebp]
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 _L_deposit_h
  0048c	83 c4 04	 add	 esp, 4
  0048f	89 45 ec	 mov	 DWORD PTR _L_temp$[ebp], eax

; 141  :         /* L_temp = ltpGain * 2^27 */
; 142  :         L_temp = L_shr (L_temp, add (exp, 3));

  00492	6a 03		 push	 3
  00494	0f b7 45 d4	 movzx	 eax, WORD PTR _exp$[ebp]
  00498	50		 push	 eax
  00499	e8 00 00 00 00	 call	 _add
  0049e	83 c4 08	 add	 esp, 8
  004a1	0f b7 c8	 movzx	 ecx, ax
  004a4	51		 push	 ecx
  004a5	8b 55 ec	 mov	 edx, DWORD PTR _L_temp$[ebp]
  004a8	52		 push	 edx
  004a9	e8 00 00 00 00	 call	 _L_shr
  004ae	83 c4 08	 add	 esp, 8
  004b1	89 45 ec	 mov	 DWORD PTR _L_temp$[ebp], eax

; 143  : 
; 144  :         /* Log2 = log2() + 27 */
; 145  :         Log2(L_temp, &ltpg_exp, &ltpg_frac);

  004b4	8d 45 98	 lea	 eax, DWORD PTR _ltpg_frac$[ebp]
  004b7	50		 push	 eax
  004b8	8d 4d a4	 lea	 ecx, DWORD PTR _ltpg_exp$[ebp]
  004bb	51		 push	 ecx
  004bc	8b 55 ec	 mov	 edx, DWORD PTR _L_temp$[ebp]
  004bf	52		 push	 edx
  004c0	e8 00 00 00 00	 call	 _Log2
  004c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 146  : 
; 147  :         /* ltpg = log2(LtpGain) * 2^13 --> range: +- 4 = +- 12 dB */
; 148  :         L_temp = L_Comp (sub (ltpg_exp, 27), ltpg_frac);

  004c8	0f b7 45 98	 movzx	 eax, WORD PTR _ltpg_frac$[ebp]
  004cc	50		 push	 eax
  004cd	6a 1b		 push	 27			; 0000001bH
  004cf	0f b7 4d a4	 movzx	 ecx, WORD PTR _ltpg_exp$[ebp]
  004d3	51		 push	 ecx
  004d4	e8 00 00 00 00	 call	 _sub
  004d9	83 c4 08	 add	 esp, 8
  004dc	0f b7 d0	 movzx	 edx, ax
  004df	52		 push	 edx
  004e0	e8 00 00 00 00	 call	 _L_Comp
  004e5	83 c4 08	 add	 esp, 8
  004e8	89 45 ec	 mov	 DWORD PTR _L_temp$[ebp], eax

; 149  :         *ltpg = round (L_shl (L_temp, 13)); /* Q13 */

  004eb	6a 0d		 push	 13			; 0000000dH
  004ed	8b 45 ec	 mov	 eax, DWORD PTR _L_temp$[ebp]
  004f0	50		 push	 eax
  004f1	e8 00 00 00 00	 call	 _L_shl
  004f6	83 c4 08	 add	 esp, 8
  004f9	50		 push	 eax
  004fa	e8 00 00 00 00	 call	 _round
  004ff	83 c4 04	 add	 esp, 4
  00502	8b 4d 24	 mov	 ecx, DWORD PTR _ltpg$[ebp]
  00505	66 89 01	 mov	 WORD PTR [ecx], ax

; 150  :     }
; 151  :     else

  00508	eb 0d		 jmp	 SHORT $LN17@calc_unfil
$LN2@calc_unfil:

; 152  :     {
; 153  :         *ltpg = 0;                           move16 ();

  0050a	33 c0		 xor	 eax, eax
  0050c	8b 4d 24	 mov	 ecx, DWORD PTR _ltpg$[ebp]
  0050f	66 89 01	 mov	 WORD PTR [ecx], ax
  00512	e8 00 00 00 00	 call	 _move16
$LN17@calc_unfil:

; 154  :     }
; 155  : }

  00517	52		 push	 edx
  00518	8b cd		 mov	 ecx, ebp
  0051a	50		 push	 eax
  0051b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@calc_unfil
  00521	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00526	58		 pop	 eax
  00527	5a		 pop	 edx
  00528	5f		 pop	 edi
  00529	5e		 pop	 esi
  0052a	5b		 pop	 ebx
  0052b	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  00531	3b ec		 cmp	 ebp, esp
  00533	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00538	8b e5		 mov	 esp, ebp
  0053a	5d		 pop	 ebp
  0053b	c3		 ret	 0
$LN22@calc_unfil:
  0053c	02 00 00 00	 DD	 2
  00540	00 00 00 00	 DD	 $LN21@calc_unfil
$LN21@calc_unfil:
  00544	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00548	02 00 00 00	 DD	 2
  0054c	00 00 00 00	 DD	 $LN19@calc_unfil
  00550	98 ff ff ff	 DD	 -104			; ffffff98H
  00554	02 00 00 00	 DD	 2
  00558	00 00 00 00	 DD	 $LN20@calc_unfil
$LN20@calc_unfil:
  0055c	6c		 DB	 108			; 0000006cH
  0055d	74		 DB	 116			; 00000074H
  0055e	70		 DB	 112			; 00000070H
  0055f	67		 DB	 103			; 00000067H
  00560	5f		 DB	 95			; 0000005fH
  00561	66		 DB	 102			; 00000066H
  00562	72		 DB	 114			; 00000072H
  00563	61		 DB	 97			; 00000061H
  00564	63		 DB	 99			; 00000063H
  00565	00		 DB	 0
$LN19@calc_unfil:
  00566	6c		 DB	 108			; 0000006cH
  00567	74		 DB	 116			; 00000074H
  00568	70		 DB	 112			; 00000070H
  00569	67		 DB	 103			; 00000067H
  0056a	5f		 DB	 95			; 0000005fH
  0056b	65		 DB	 101			; 00000065H
  0056c	78		 DB	 120			; 00000078H
  0056d	70		 DB	 112			; 00000070H
  0056e	00		 DB	 0
_calc_unfilt_energies ENDP
_TEXT	ENDS
END
