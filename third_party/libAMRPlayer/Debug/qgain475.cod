; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\qgain475.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_qgain475_id
CONST	SEGMENT
_qgain475_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_table_gain_MR475 DW 032cH
	DW	080H
	DW	021eH
	DW	08cH
	DW	0b39H
	DW	046fH
	DW	08daH
	DW	0d4aH
	DW	0813H
	DW	0233H
	DW	03185H
	DW	0287H
	DW	01024H
	DW	0706H
	DW	015e1H
	DW	014a5H
	DW	01e09H
	DW	0176H
	DW	0e97H
	DW	01b9H
	DW	02aa0H
	DW	0a4eH
	DW	02e1fH
	DW	09beH
	DW	0500aH
	DW	031dH
	DW	01462H
	DW	02a3H
	DW	01a44H
	DW	020a2H
	DW	014a2H
	DW	06a0H
	DW	05d0H
	DW	01acH
	DW	016faH
	DW	01c4H
	DW	014d4H
	DW	0fe8H
	DW	0dffH
	DW	04f4H
	DW	09a5H
	DW	0385H
	DW	03e16H
	DW	03edH
	DW	03a86H
	DW	0cc7H
	DW	0285bH
	DW	012faH
	DW	0e33H
	DW	07e5H
	DW	0a24H
	DW	0343H
	DW	03048H
	DW	0131cH
	DW	02faeH
	DW	06a8H
	DW	03478H
	DW	0644H
	DW	0239eH
	DW	0925H
	DW	0f80H
	DW	0602H
	DW	01567H
	DW	026d0H
	DW	0ed3H
	DW	01a1H
	DW	054fH
	DW	019eH
	DW	0e38H
	DW	0621H
	DW	01f3bH
	DW	0dd5H
	DW	02c8dH
	DW	0285H
	DW	02168H
	DW	027bH
	DW	0fd8H
	DW	0561H
	DW	040e0H
	DW	017ecH
	DW	02c9cH
	DW	02bcH
	DW	07d7H
	DW	025fH
	DW	0307fH
	DW	062aH
	DW	02b6fH
	DW	0122eH
	DW	03570H
	DW	06acH
	DW	02ed6H
	DW	04cdH
	DW	01f3cH
	DW	01c81H
	DW	033afH
	DW	01653H
	DW	097cH
	DW	0487H
	DW	0819H
	DW	0795H
	DW	0184aH
	DW	017e9H
	DW	0ddaH
	DW	070cH
	DW	022ddH
	DW	070aH
	DW	021e7H
	DW	062cH
	DW	0366fH
	DW	0df8H
	DW	03401H
	DW	0185dH
	DW	017feH
	DW	046aH
	DW	0176aH
	DW	06c6H
	DW	0373dH
	DW	01236H
	DW	02c07H
	DW	0cf9H
	DW	02fc2H
	DW	060fH
	DW	0366bH
	DW	0bc7H
	DW	013d9H
	DW	028e0H
	DW	024e4H
	DW	01a32H
	DW	0699H
	DW	02abH
	DW	059cH
	DW	051aH
	DW	01c2cH
	DW	0f5dH
	DW	0ff2H
	DW	0a99H
	DW	01e71H
	DW	02c0H
	DW	03adeH
	DW	0322H
	DW	0189bH
	DW	0145cH
	DW	010f1H
	DW	014edH
	DW	01a14H
	DW	021dH
	DW	017aeH
	DW	0272H
	DW	03553H
	DW	0e74H
	DW	02ceaH
	DW	0968H
	DW	03f1cH
	DW	02ccH
	DW	02f91H
	DW	02efH
	DW	01f81H
	DW	02ce1H
	DW	018aaH
	DW	08d0H
	DW	01172H
	DW	01f0H
	DW	01c7dH
	DW	020bH
	DW	027e5H
	DW	0ef9H
	DW	020caH
	DW	0bddH
	DW	020d3H
	DW	03c6H
	DW	03794H
	DW	0758H
	DW	021ffH
	DW	01521H
	DW	0400bH
	DW	012ffH
	DW	01cfcH
	DW	07bbH
	DW	017c9H
	DW	04ceH
	DW	0249bH
	DW	0112eH
	DW	038deH
	DW	0d23H
	DW	034f7H
	DW	0b39H
	DW	0336bH
	DW	05b9H
	DW	0159eH
	DW	068eH
	DW	03352H
	DW	039b3H
	DW	01caaH
	DW	0258H
	DW	0526H
	DW	0224H
	DW	0109cH
	DW	0dd3H
	DW	0273cH
	DW	093cH
	DW	0295bH
	DW	026eH
	DW	03320H
	DW	029dH
	DW	0372eH
	DW	0dc6H
	DW	013afH
	DW	02638H
	DW	03beaH
	DW	026bH
	DW	0c2bH
	DW	024eH
	DW	0403aH
	DW	0bc5H
	DW	03cb6H
	DW	01048H
	DW	03cb1H
	DW	064bH
	DW	03c2dH
	DW	04ccH
	DW	03e97H
	DW	02453H
	DW	01d6eH
	DW	01370H
	DW	07c6H
	DW	04bdH
	DW	02cb7H
	DW	0485H
	DW	030e0H
	DW	0158fH
	DW	02503H
	DW	0a54H
	DW	01e24H
	DW	07f2H
	DW	033e0H
	DW	08bfH
	DW	03e8bH
	DW	013e5H
	DW	01f82H
	DW	01a69H
	DW	02763H
	DW	0585H
	DW	0138aH
	DW	092bH
	DW	030ebH
	DW	01757H
	DW	03b16H
	DW	0b53H
	DW	04758H
	DW	08f1H
	DW	03dd3H
	DW	09dfH
	DW	03f89H
	DW	0280eH
	DW	0393bH
	DW	02c37H
	DW	0705H
	DW	0151H
	DW	0c2bH
	DW	018dH
	DW	0db6H
	DW	0b70H
	DW	011f0H
	DW	0a6eH
	DW	01d5fH
	DW	0274H
	DW	02c97H
	DW	0290H
	DW	0173aH
	DW	0983H
	DW	01990H
	DW	01cc7H
	DW	0202eH
	DW	033dH
	DW	0fa0H
	DW	035fH
	DW	02730H
	DW	09bcH
	DW	03eb9H
	DW	0ddfH
	DW	0471cH
	DW	041eH
	DW	017d7H
	DW	05aeH
	DW	016fcH
	DW	01edcH
	DW	04940H
	DW	0d8cH
	DW	0748H
	DW	0220H
	DW	023eeH
	DW	02abH
	DW	02d67H
	DW	01040H
	DW	011f2H
	DW	066cH
	DW	0c56H
	DW	0485H
	DW	03e51H
	DW	0a00H
	DW	0303dH
	DW	0e95H
	DW	0440cH
	DW	0148cH
	DW	017daH
	DW	07d4H
	DW	0b65H
	DW	06ceH
	DW	04053H
	DW	01489H
	DW	04193H
	DW	0690H
	DW	04335H
	DW	06dfH
	DW	012a5H
	DW	0c9fH
	DW	01cdaH
	DW	01793H
	DW	03806H
	DW	0271cH
	DW	0fc3H
	DW	01baH
	DW	01062H
	DW	01caH
	DW	023feH
	DW	08c2H
	DW	01d03H
	DW	01079H
	DW	0323cH
	DW	0321H
	DW	02bb2H
	DW	0339H
	DW	03168H
	DW	0824H
	DW	0329cH
	DW	0199aH
	DW	02521H
	DW	03e4H
	DW	019e5H
	DW	03d9H
	DW	02929H
	DW	09c6H
	DW	03bb9H
	DW	0138eH
	DW	0313aH
	DW	0807H
	DW	03c7cH
	DW	0675H
	DW	03f42H
	DW	01b09H
	DW	03797H
	DW	0169eH
	DW	0a42H
	DW	033cH
	DW	015efH
	DW	0696H
	DW	0355fH
	DW	01692H
	DW	0e54H
	DW	0612H
	DW	02c31H
	DW	0a49H
	DW	0262aH
	DW	05b3H
	DW	036b3H
	DW	0127dH
	DW	03e19H
	DW	01893H
	DW	01886H
	DW	074eH
	DW	01ee6H
	DW	08edH
	DW	04252H
	DW	011dbH
	DW	040c0H
	DW	0f09H
	DW	03b90H
	DW	0907H
	DW	03e97H
	DW	0cacH
	DW	0387bH
	DW	04590H
	DW	02e47H
	DW	0acbH
	DW	07bdH
	DW	057fH
	DW	0578H
	DW	036cH
	DW	010efH
	DW	0ddbH
	DW	01127H
	DW	01072H
	DW	0151dH
	DW	02a8H
	DW	04435H
	DW	030dH
	DW	01965H
	DW	013feH
	DW	01f9bH
	DW	01dfdH
	DW	01cbbH
	DW	031aH
	DW	0208dH
	DW	049eH
	DW	03ac1H
	DW	0c58H
	DW	03a50H
	DW	0bdfH
	DW	04fc5H
	DW	0370H
	DW	038d1H
	DW	0354H
	DW	03031H
	DW	03974H
	DW	01af8H
	DW	0780H
	DW	01081H
	DW	03a5H
	DW	0201aH
	DW	043fH
	DW	029a3H
	DW	0ff4H
	DW	02762H
	DW	011b5H
	DW	0aafH
	DW	0348H
	DW	050b1H
	DW	0439H
	DW	04147H
	DW	0174eH
	DW	03e01H
	DW	011e2H
	DW	02a77H
	DW	0a0eH
	DW	0ebdH
	DW	048eH
	DW	038b7H
	DW	0fccH
	DW	050dbH
	DW	0a43H
	DW	03b73H
	DW	0aaeH
	DW	03baaH
	DW	088aH
	DW	01871H
	DW	0c9aH
	DW	03345H
	DW	04c18H
	DW	01c1cH
	DW	03a2H
	DW	099eH
	DW	0652H
	DW	011a3H
	DW	0c14H
	DW	0361cH
	DW	010b5H
	DW	028dcH
	DW	0341H
	DW	043bbH
	DW	032aH
	DW	041fbH
	DW	08f1H
	DW	03cbaH
	DW	02019H
	DW	03523H
	DW	0694H
	DW	0c7dH
	DW	072aH
	DW	03e4cH
	DW	0b04H
	DW	03dc4H
	DW	014cfH
	DW	0426eH
	DW	0986H
	DW	04194H
	DW	052eH
	DW	03d37H
	DW	01fdcH
	DW	02dceH
	DW	0216cH
	DW	0eb2H
	DW	0805H
	DW	0255bH
	DW	0525H
	DW	034f9H
	DW	01a86H
	DW	02fc3H
	DW	0790H
	DW	01ff4H
	DW	0ddeH
	DW	033e7H
	DW	06f2H
	DW	03fabH
	DW	019c7H
	DW	03fa3H
	DW	01e4eH
	DW	02149H
	DW	09f7H
	DW	01c39H
	DW	0a55H
	DW	0475dH
	DW	01d41H
	DW	041f5H
	DW	08c8H
	DW	045daH
	DW	0b44H
	DW	04371H
	DW	0d00H
	DW	024c9H
	DW	04ec2H
	DW	02b22H
	DW	02080H
	DW	0506H
	DW	026cH
	DW	0597H
	DW	0247H
	DW	01769H
	DW	08f1H
	DW	0f8aH
	DW	0e2aH
	DW	01418H
	DW	02f0H
	DW	03461H
	DW	033eH
	DW	015b1H
	DW	0b2cH
	DW	02df4H
	DW	01714H
	DW	029f1H
	DW	0230H
	DW	01546H
	DW	0234H
	DW	03409H
	DW	0bc0H
	DW	02eaaH
	DW	0e63H
	DW	04dafH
	DW	031eH
	DW	02661H
	DW	02d8H
	DW	0355fH
	DW	0222cH
	DW	01cdfH
	DW	0bedH
	DW	09d3H
	DW	030aH
	DW	017a2H
	DW	0341H
	DW	01945H
	DW	013d2H
	DW	02071H
	DW	099fH
	DW	017fdH
	DW	0749H
	DW	03bccH
	DW	04eeH
	DW	03848H
	DW	011c3H
	DW	0355fH
	DW	011a3H
	DW	0c41H
	DW	0ba7H
	DW	09afH
	DW	04ebH
	DW	03af0H
	DW	01227H
	DW	03c16H
	DW	0a2fH
	DW	0389cH
	DW	0958H
	DW	030aeH
	DW	09e9H
	DW	01d73H
	DW	0b85H
	DW	0326dH
	DW	02f1cH
	DW	0155cH
	DW	02acH
	DW	0c45H
	DW	02d2H
	DW	013d9H
	DW	04faH
	DW	031bcH
	DW	01068H
	DW	03bc6H
	DW	02a9H
	DW	01e8bH
	DW	0250H
	DW	01986H
	DW	07e5H
	DW	0405eH
	DW	02221H
	DW	03434H
	DW	0372H
	DW	01515H
	DW	0383H
	DW	03940H
	DW	0882H
	DW	03995H
	DW	01083H
	DW	037beH
	DW	0512H
	DW	03669H
	DW	07edH
	DW	03c75H
	DW	01d3aH
	DW	03dc7H
	DW	011dcH
	DW	09d9H
	DW	07ddH
	DW	013c6H
	DW	070cH
	DW	01427H
	DW	019b6H
	DW	01bdaH
	DW	0e0dH
	DW	02aa8H
	DW	064bH
	DW	02dd1H
	DW	06acH
	DW	04207H
	DW	0d7fH
	DW	03f8cH
	DW	019f0H
	DW	0245aH
	DW	03efH
	DW	02499H
	DW	083aH
	DW	04aeeH
	DW	013adH
	DW	03099H
	DW	010adH
	DW	03e2fH
	DW	0534H
	DW	03bfdH
	DW	0db8H
	DW	02e7aH
	DW	0373dH
	DW	03ee5H
	DW	01ac6H
	DW	07daH
	DW	02e1H
	DW	0ec3H
	DW	035dH
	DW	02cbeH
	DW	0b40H
	DW	0decH
	DW	0dd4H
	DW	02361H
	DW	04d9H
	DW	03067H
	DW	0380H
	DW	02162H
	DW	01215H
	DW	02d29H
	DW	01690H
	DW	01fc1H
	DW	024dH
	DW	0201aH
	DW	024cH
	DW	04928H
	DW	0eabH
	DW	032adH
	DW	0c4dH
	DW	03d71H
	DW	02f6H
	DW	040faH
	DW	02f2H
	DW	03b76H
	DW	02b82H
	DW	03dffH
	DW	08a0H
	DW	01241H
	DW	0262H
	DW	027eaH
	DW	02a6H
	DW	03b99H
	DW	01032H
	DW	01661H
	DW	0cffH
	DW	020b9H
	DW	0686H
	DW	04d96H
	DW	0911H
	DW	03c5aH
	DW	01587H
	DW	036e6H
	DW	01569H
	DW	01660H
	DW	0b48H
	DW	01d9cH
	DW	0542H
	DW	03830H
	DW	014cdH
	DW	03f6cH
	DW	0f6eH
	DW	03b0eH
	DW	0ea0H
	DW	03bcaH
	DW	059bH
	DW	03905H
	DW	0fe6H
	DW	0300dH
	DW	03d50H
	DW	01dc1H
	DW	06a3H
	DW	087aH
	DW	0374H
	DW	0116bH
	DW	011d7H
	DW	046aeH
	DW	0ceaH
	DW	031c6H
	DW	032fH
	DW	03a4eH
	DW	038bH
	DW	03aa8H
	DW	010b9H
	DW	03c9eH
	DW	020b0H
	DW	0464aH
	DW	043fH
	DW	0936H
	DW	0361H
	DW	03f99H
	DW	0ecbH
	DW	03d3fH
	DW	011f4H
	DW	03fe4H
	DW	05feH
	DW	040c8H
	DW	08a2H
	DW	041c1H
	DW	025e1H
	DW	03e39H
	DW	011a1H
	DW	0ccdH
	DW	043dH
	DW	025abH
	DW	088bH
	DW	02ec5H
	DW	017b4H
	DW	023efH
	DW	0116eH
	DW	022fbH
	DW	065dH
	DW	02831H
	DW	0bf6H
	DW	04061H
	DW	01423H
	DW	03c6aH
	DW	01b9aH
	DW	0356eH
	DW	09efH
	DW	01499H
	DW	08e5H
	DW	0416aH
	DW	01845H
	DW	0410fH
	DW	0d50H
	DW	04f50H
	DW	0d23H
	DW	04900H
	DW	07c1H
	DW	0375cH
	DW	03243H
	DW	03b32H
	DW	03d57H
	DW	01179H
	DW	03fcH
	DW	0691H
	DW	0376H
	DW	010d7H
	DW	010cdH
	DW	022f8H
	DW	0e49H
	DW	01705H
	DW	047bH
	DW	02d7fH
	DW	05acH
	DW	03e0eH
	DW	08b3H
	DW	011e6H
	DW	019f4H
	DW	01b11H
	DW	04b5H
	DW	0184cH
	DW	031fH
	DW	0307fH
	DW	0d51H
	DW	03e60H
	DW	0f25H
	DW	04d93H
	DW	083dH
	DW	025d9H
	DW	085dH
	DW	03996H
	DW	0227eH
	DW	03890H
	DW	0a27H
	DW	0719H
	DW	04d6H
	DW	01e5bH
	DW	032dH
	DW	04a87H
	DW	0113aH
	DW	015b2H
	DW	0810H
	DW	0e67H
	DW	0b1cH
	DW	0441bH
	DW	08d0H
	DW	04139H
	DW	01186H
	DW	03f47H
	DW	0150cH
	DW	01f5cH
	DW	0acbH
	DW	0d4dH
	DW	0847H
	DW	04412H
	DW	01565H
	DW	03582H
	DW	0ae2H
	DW	04da7H
	DW	0aa0H
	DW	0238aH
	DW	0f28H
	DW	046fcH
	DW	012e1H
	DW	043b8H
	DW	02fafH
	DW	013fcH
	DW	03e4H
	DW	01347H
	DW	03dcH
	DW	026a0H
	DW	0c09H
	DW	0177eH
	DW	014fbH
	DW	03e09H
	DW	0683H
	DW	020d5H
	DW	049fH
	DW	03aefH
	DW	093eH
	DW	04d41H
	DW	01b5aH
	DW	02ebbH
	DW	061aH
	DW	01c6fH
	DW	0468H
	DW	041dbH
	DW	05fcH
	DW	03d92H
	DW	01505H
	DW	03974H
	DW	0811H
	DW	04e89H
	DW	086bH
	DW	04306H
	DW	02035H
	DW	045f7H
	DW	018aeH
	DW	0155bH
	DW	05e0H
	DW	01004H
	DW	0a0eH
	DW	0440dH
	DW	01a9aH
	DW	01629H
	DW	0b48H
	DW	040fcH
	DW	0d36H
	DW	0230fH
	DW	0727H
	DW	04ebfH
	DW	01281H
	DW	04c5eH
	DW	01c7eH
	DW	01a02H
	DW	0addH
	DW	02cd0H
	DW	0cf9H
	DW	04bc5H
	DW	013beH
	DW	049beH
	DW	01272H
	DW	04037H
	DW	0945H
	DW	04fceH
	DW	01122H
	DW	02c59H
	DW	0679eH
	DW	02d49H
	DW	0bfcH
	DW	0b32H
	DW	061eH
	DW	013f4H
	DW	042eH
	DW	0258eH
	DW	01333H
	DW	0134bH
	DW	0dd0H
	DW	01d75H
	DW	036eH
	DW	050edH
	DW	0353H
	DW	01b1aH
	DW	0112bH
	DW	0419fH
	DW	01e35H
	DW	02799H
	DW	03fbH
	DW	02675H
	DW	03c4H
	DW	03c86H
	DW	0f73H
	DW	03c63H
	DW	0d66H
	DW	049afH
	DW	03d6H
	DW	04e98H
	DW	03c3H
	DW	041ecH
	DW	03257H
	DW	037feH
	DW	01068H
	DW	019c7H
	DW	04c4H
	DW	02406H
	DW	032eH
	DW	0422eH
	DW	0140eH
	DW	0161dH
	DW	01322H
	DW	01570H
	DW	0706H
	DW	04f22H
	DW	0f7aH
	DW	0426dH
	DW	01822H
	DW	04609H
	DW	01729H
	DW	02495H
	DW	0d5cH
	DW	01d32H
	DW	07b3H
	DW	04c51H
	DW	01439H
	DW	04a3bH
	DW	0bbeH
	DW	04046H
	DW	0eccH
	DW	03ec6H
	DW	093fH
	DW	021d8H
	DW	0ab7H
	DW	024e5H
	DW	066f6H
	DW	02a68H
	DW	0507H
	DW	0de3H
	DW	03f1H
	DW	015e6H
	DW	0e26H
	DW	04bfdH
	DW	01588H
	DW	030a5H
	DW	031dH
	DW	0509aH
	DW	038fH
	DW	03c43H
	DW	0bfaH
	DW	0428dH
	DW	02823H
	DW	049c3H
	DW	0a49H
	DW	0f49H
	DW	04f4H
	DW	04c3fH
	DW	0d2bH
	DW	04684H
	DW	0146eH
	DW	04b5bH
	DW	068eH
	DW	04c34H
	DW	0c64H
	DW	04698H
	DW	02a02H
	DW	040f1H
	DW	01abdH
	DW	0c3eH
	DW	08faH
	DW	02a75H
	DW	0985H
	DW	03cdcH
	DW	01b01H
	DW	03135H
	DW	0d35H
	DW	02b6cH
	DW	0ce1H
	DW	0417aH
	DW	0978H
	DW	049a5H
	DW	01a3bH
	DW	04313H
	DW	0269fH
	DW	031c7H
	DW	0a2dH
	DW	022e9H
	DW	0c44H
	DW	04a59H
	DW	01e54H
	DW	047abH
	DW	0f28H
	DW	04ffbH
	DW	0e62H
	DW	04c92H
	DW	0d34H
	DW	032f4H
	DW	04badH
	DW	0291eH
	DW	05a54H
CONST	ENDS
PUBLIC	_MR475_update_unq_pred
PUBLIC	_MR475_gain_quant
EXTRN	_gc_pred:PROC
EXTRN	_gc_pred_update:PROC
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_mult:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_round:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr:PROC
EXTRN	_shr_r:PROC
EXTRN	_L_deposit_h:PROC
EXTRN	_L_deposit_l:PROC
EXTRN	_div_s:PROC
EXTRN	_L_Extract:PROC
EXTRN	_Mpy_32_16:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	_Mac_32_16:PROC
EXTRN	_Pow2:PROC
EXTRN	_Log2:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\qgain475.c
;	COMDAT _MR475_quant_store_results
_TEXT	SEGMENT
_qua_ener$ = -80					; size = 2
_qua_ener_MR122$ = -68					; size = 2
_L_tmp$ = -56						; size = 4
_tmp$ = -44						; size = 2
_frac$ = -32						; size = 2
_exp$ = -20						; size = 2
_g_code$ = -8						; size = 2
_pred_st$ = 8						; size = 4
_p$ = 12						; size = 4
_gcode0$ = 16						; size = 2
_exp_gcode0$ = 20					; size = 2
_gain_pit$ = 24						; size = 4
_gain_cod$ = 28						; size = 4
_MR475_quant_store_results PROC				; COMDAT

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00012	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 72   : 
; 73   :     Word16 g_code, exp, frac, tmp;
; 74   :     Word32 L_tmp;
; 75   : 
; 76   :     Word16 qua_ener_MR122; /* o  : quantized energy error, MR122 version Q10 */
; 77   :     Word16 qua_ener;       /* o  : quantized energy error,               Q10 */
; 78   : 
; 79   :     /* Read the quantized gains */
; 80   :     *gain_pit = *p++;                move16 ();

  0001e	8b 45 18	 mov	 eax, DWORD PTR _gain_pit$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  00024	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00027	66 89 10	 mov	 WORD PTR [eax], dx
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _p$[ebp]
  0002d	83 c0 02	 add	 eax, 2
  00030	89 45 0c	 mov	 DWORD PTR _p$[ebp], eax
  00033	e8 00 00 00 00	 call	 _move16

; 81   :     g_code = *p++;                   move16 ();

  00038	8b 45 0c	 mov	 eax, DWORD PTR _p$[ebp]
  0003b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0003e	66 89 4d f8	 mov	 WORD PTR _g_code$[ebp], cx
  00042	8b 55 0c	 mov	 edx, DWORD PTR _p$[ebp]
  00045	83 c2 02	 add	 edx, 2
  00048	89 55 0c	 mov	 DWORD PTR _p$[ebp], edx
  0004b	e8 00 00 00 00	 call	 _move16

; 82   : 
; 83   :     /*------------------------------------------------------------------*
; 84   :      *  calculate final fixed codebook gain:                            *
; 85   :      *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                            *
; 86   :      *                                                                  *
; 87   :      *   gc = gc0 * g                                                   *
; 88   :      *------------------------------------------------------------------*/
; 89   : 
; 90   :     L_tmp = L_mult(g_code, gcode0);

  00050	0f b7 45 10	 movzx	 eax, WORD PTR _gcode0$[ebp]
  00054	50		 push	 eax
  00055	0f b7 4d f8	 movzx	 ecx, WORD PTR _g_code$[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 _L_mult
  0005f	83 c4 08	 add	 esp, 8
  00062	89 45 c8	 mov	 DWORD PTR _L_tmp$[ebp], eax

; 91   :     L_tmp = L_shr(L_tmp, sub(10, exp_gcode0));

  00065	0f b7 45 14	 movzx	 eax, WORD PTR _exp_gcode0$[ebp]
  00069	50		 push	 eax
  0006a	6a 0a		 push	 10			; 0000000aH
  0006c	e8 00 00 00 00	 call	 _sub
  00071	83 c4 08	 add	 esp, 8
  00074	0f b7 c8	 movzx	 ecx, ax
  00077	51		 push	 ecx
  00078	8b 55 c8	 mov	 edx, DWORD PTR _L_tmp$[ebp]
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 _L_shr
  00081	83 c4 08	 add	 esp, 8
  00084	89 45 c8	 mov	 DWORD PTR _L_tmp$[ebp], eax

; 92   :     *gain_cod = extract_h(L_tmp);

  00087	8b 45 c8	 mov	 eax, DWORD PTR _L_tmp$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _extract_h
  00090	83 c4 04	 add	 esp, 4
  00093	8b 4d 1c	 mov	 ecx, DWORD PTR _gain_cod$[ebp]
  00096	66 89 01	 mov	 WORD PTR [ecx], ax

; 93   : 
; 94   :     /*------------------------------------------------------------------*
; 95   :      *  calculate predictor update values and update gain predictor:    *
; 96   :      *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    *
; 97   :      *                                                                  *
; 98   :      *   qua_ener       = log2(g)                                       *
; 99   :      *   qua_ener_MR122 = 20*log10(g)                                   *
; 100  :      *------------------------------------------------------------------*/
; 101  : 
; 102  :     Log2 (L_deposit_l (g_code), &exp, &frac); /* Log2(x Q12) = log2(x) + 12 */

  00099	8d 45 e0	 lea	 eax, DWORD PTR _frac$[ebp]
  0009c	50		 push	 eax
  0009d	8d 4d ec	 lea	 ecx, DWORD PTR _exp$[ebp]
  000a0	51		 push	 ecx
  000a1	0f b7 55 f8	 movzx	 edx, WORD PTR _g_code$[ebp]
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 _L_deposit_l
  000ab	83 c4 04	 add	 esp, 4
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _Log2
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 103  :     exp = sub(exp, 12);

  000b7	6a 0c		 push	 12			; 0000000cH
  000b9	0f b7 45 ec	 movzx	 eax, WORD PTR _exp$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _sub
  000c3	83 c4 08	 add	 esp, 8
  000c6	66 89 45 ec	 mov	 WORD PTR _exp$[ebp], ax

; 104  : 
; 105  :     tmp = shr_r (frac, 5);

  000ca	6a 05		 push	 5
  000cc	0f b7 45 e0	 movzx	 eax, WORD PTR _frac$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _shr_r
  000d6	83 c4 08	 add	 esp, 8
  000d9	66 89 45 d4	 mov	 WORD PTR _tmp$[ebp], ax

; 106  :     qua_ener_MR122 = add (tmp, shl (exp, 10));

  000dd	6a 0a		 push	 10			; 0000000aH
  000df	0f b7 45 ec	 movzx	 eax, WORD PTR _exp$[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _shl
  000e9	83 c4 08	 add	 esp, 8
  000ec	0f b7 c8	 movzx	 ecx, ax
  000ef	51		 push	 ecx
  000f0	0f b7 55 d4	 movzx	 edx, WORD PTR _tmp$[ebp]
  000f4	52		 push	 edx
  000f5	e8 00 00 00 00	 call	 _add
  000fa	83 c4 08	 add	 esp, 8
  000fd	66 89 45 bc	 mov	 WORD PTR _qua_ener_MR122$[ebp], ax

; 107  : 
; 108  :     L_tmp = Mpy_32_16(exp, frac, 24660); /* 24660 Q12 ~= 6.0206 = 20*log10(2) */

  00101	68 54 60 00 00	 push	 24660			; 00006054H
  00106	0f b7 45 e0	 movzx	 eax, WORD PTR _frac$[ebp]
  0010a	50		 push	 eax
  0010b	0f b7 4d ec	 movzx	 ecx, WORD PTR _exp$[ebp]
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 _Mpy_32_16
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
  00118	89 45 c8	 mov	 DWORD PTR _L_tmp$[ebp], eax

; 109  :     qua_ener = round (L_shl (L_tmp, 13)); /* Q12 * Q0 = Q13 -> Q10 */

  0011b	6a 0d		 push	 13			; 0000000dH
  0011d	8b 45 c8	 mov	 eax, DWORD PTR _L_tmp$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 _L_shl
  00126	83 c4 08	 add	 esp, 8
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _round
  0012f	83 c4 04	 add	 esp, 4
  00132	66 89 45 b0	 mov	 WORD PTR _qua_ener$[ebp], ax

; 110  : 
; 111  :     gc_pred_update(pred_st, qua_ener_MR122, qua_ener);

  00136	0f b7 45 b0	 movzx	 eax, WORD PTR _qua_ener$[ebp]
  0013a	50		 push	 eax
  0013b	0f b7 4d bc	 movzx	 ecx, WORD PTR _qua_ener_MR122$[ebp]
  0013f	51		 push	 ecx
  00140	8b 55 08	 mov	 edx, DWORD PTR _pred_st$[ebp]
  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 _gc_pred_update
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH

; 112  : }

  0014c	52		 push	 edx
  0014d	8b cd		 mov	 ecx, ebp
  0014f	50		 push	 eax
  00150	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@MR475_quan
  00156	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0015b	58		 pop	 eax
  0015c	5a		 pop	 edx
  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	5b		 pop	 ebx
  00160	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  00166	3b ec		 cmp	 ebp, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
  00171	8d 49 00	 npad	 3
$LN6@MR475_quan:
  00174	02 00 00 00	 DD	 2
  00178	00 00 00 00	 DD	 $LN5@MR475_quan
$LN5@MR475_quan:
  0017c	ec ff ff ff	 DD	 -20			; ffffffecH
  00180	02 00 00 00	 DD	 2
  00184	00 00 00 00	 DD	 $LN3@MR475_quan
  00188	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0018c	02 00 00 00	 DD	 2
  00190	00 00 00 00	 DD	 $LN4@MR475_quan
$LN4@MR475_quan:
  00194	66		 DB	 102			; 00000066H
  00195	72		 DB	 114			; 00000072H
  00196	61		 DB	 97			; 00000061H
  00197	63		 DB	 99			; 00000063H
  00198	00		 DB	 0
$LN3@MR475_quan:
  00199	65		 DB	 101			; 00000065H
  0019a	78		 DB	 120			; 00000078H
  0019b	70		 DB	 112			; 00000070H
  0019c	00		 DB	 0
_MR475_quant_store_results ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\qgain475.c
;	COMDAT _MR475_gain_quant
_TEXT	SEGMENT
tv302 = -450						; size = 2
tv275 = -450						; size = 2
_dist_min$ = -252					; size = 4
_L_tmp$ = -240						; size = 4
_exp_max$ = -228					; size = 20
_coeff_lo$ = -200					; size = 20
_coeff$ = -172						; size = 20
_g_pit_cod$ = -144					; size = 2
_g2_code$ = -132					; size = 2
_g_code$ = -120						; size = 2
_g2_pitch$ = -108					; size = 2
_g_pitch$ = -96						; size = 2
_sf1_gcode0$ = -84					; size = 2
_sf0_gcode0$ = -72					; size = 2
_exp$ = -60						; size = 2
_tmp$ = -48						; size = 2
_index$ = -36						; size = 2
_i$ = -24						; size = 2
_p$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pred_st$ = 8						; size = 4
_sf0_exp_gcode0$ = 12					; size = 2
_sf0_frac_gcode0$ = 16					; size = 2
_sf0_exp_coeff$ = 20					; size = 4
_sf0_frac_coeff$ = 24					; size = 4
_sf0_exp_target_en$ = 28				; size = 2
_sf0_frac_target_en$ = 32				; size = 2
_sf1_code_nosharp$ = 36					; size = 4
_sf1_exp_gcode0$ = 40					; size = 2
_sf1_frac_gcode0$ = 44					; size = 2
_sf1_exp_coeff$ = 48					; size = 4
_sf1_frac_coeff$ = 52					; size = 4
_sf1_exp_target_en$ = 56				; size = 2
_sf1_frac_target_en$ = 60				; size = 2
_gp_limit$ = 64						; size = 2
_sf0_gain_pit$ = 68					; size = 4
_sf0_gain_cod$ = 72					; size = 4
_sf1_gain_pit$ = 76					; size = 4
_sf1_gain_cod$ = 80					; size = 4
_MR475_gain_quant PROC					; COMDAT

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 01 00
	00		 sub	 esp, 452		; 000001c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-452]
  00012	b9 71 00 00 00	 mov	 ecx, 113		; 00000071H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 260  :     const Word16 *p;
; 261  :     Word16 i, index = 0;

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 dc	 mov	 WORD PTR _index$[ebp], ax

; 262  :     Word16 tmp;
; 263  :     Word16 exp;
; 264  :     Word16 sf0_gcode0, sf1_gcode0;
; 265  :     Word16 g_pitch, g2_pitch, g_code, g2_code, g_pit_cod;
; 266  :     Word16 coeff[10], coeff_lo[10], exp_max[10];  /* 0..4: sf0; 5..9: sf1 */
; 267  :     Word32 L_tmp, dist_min;
; 268  : 
; 269  :     /*-------------------------------------------------------------------*
; 270  :      *  predicted codebook gain                                          *
; 271  :      *  ~~~~~~~~~~~~~~~~~~~~~~~                                          *
; 272  :      *  gc0     = 2^exp_gcode0 + 2^frac_gcode0                           *
; 273  :      *                                                                   *
; 274  :      *  gcode0 (Q14) = 2^14*2^frac_gcode0 = gc0 * 2^(14-exp_gcode0)      *
; 275  :      *-------------------------------------------------------------------*/
; 276  : 
; 277  :     sf0_gcode0 = extract_l(Pow2(14, sf0_frac_gcode0));

  0002e	0f b7 45 10	 movzx	 eax, WORD PTR _sf0_frac_gcode0$[ebp]
  00032	50		 push	 eax
  00033	6a 0e		 push	 14			; 0000000eH
  00035	e8 00 00 00 00	 call	 _Pow2
  0003a	83 c4 08	 add	 esp, 8
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _extract_l
  00043	83 c4 04	 add	 esp, 4
  00046	66 89 45 b8	 mov	 WORD PTR _sf0_gcode0$[ebp], ax

; 278  :     sf1_gcode0 = extract_l(Pow2(14, sf1_frac_gcode0));

  0004a	0f b7 45 2c	 movzx	 eax, WORD PTR _sf1_frac_gcode0$[ebp]
  0004e	50		 push	 eax
  0004f	6a 0e		 push	 14			; 0000000eH
  00051	e8 00 00 00 00	 call	 _Pow2
  00056	83 c4 08	 add	 esp, 8
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _extract_l
  0005f	83 c4 04	 add	 esp, 4
  00062	66 89 45 ac	 mov	 WORD PTR _sf1_gcode0$[ebp], ax

; 279  : 
; 280  :     /*
; 281  :      * For each subframe, the error energy (sum) to be minimized consists
; 282  :      * of five terms, t[0..4].
; 283  :      *
; 284  :      *                      t[0] =    gp^2  * <y1 y1>
; 285  :      *                      t[1] = -2*gp    * <xn y1>
; 286  :      *                      t[2] =    gc^2  * <y2 y2>
; 287  :      *                      t[3] = -2*gc    * <xn y2>
; 288  :      *                      t[4] =  2*gp*gc * <y1 y2>
; 289  :      *
; 290  :      */
; 291  : 
; 292  :     /* sf 0 */
; 293  :     /* determine the scaling exponent for g_code: ec = ec0 - 11 */
; 294  :     exp = sub(sf0_exp_gcode0, 11);

  00066	6a 0b		 push	 11			; 0000000bH
  00068	0f b7 45 0c	 movzx	 eax, WORD PTR _sf0_exp_gcode0$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _sub
  00072	83 c4 08	 add	 esp, 8
  00075	66 89 45 c4	 mov	 WORD PTR _exp$[ebp], ax

; 295  : 
; 296  :     /* calculate exp_max[i] = s[i]-1 */
; 297  :     exp_max[0] = sub(sf0_exp_coeff[0], 13);                        move16 ();

  00079	6a 0d		 push	 13			; 0000000dH
  0007b	b8 02 00 00 00	 mov	 eax, 2
  00080	6b c8 00	 imul	 ecx, eax, 0
  00083	8b 55 14	 mov	 edx, DWORD PTR _sf0_exp_coeff$[ebp]
  00086	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _sub
  00090	83 c4 08	 add	 esp, 8
  00093	b9 02 00 00 00	 mov	 ecx, 2
  00098	6b d1 00	 imul	 edx, ecx, 0
  0009b	66 89 84 15 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+edx], ax
  000a3	e8 00 00 00 00	 call	 _move16

; 298  :     exp_max[1] = sub(sf0_exp_coeff[1], 14);                        move16 ();

  000a8	6a 0e		 push	 14			; 0000000eH
  000aa	b8 02 00 00 00	 mov	 eax, 2
  000af	c1 e0 00	 shl	 eax, 0
  000b2	8b 4d 14	 mov	 ecx, DWORD PTR _sf0_exp_coeff$[ebp]
  000b5	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 _sub
  000bf	83 c4 08	 add	 esp, 8
  000c2	b9 02 00 00 00	 mov	 ecx, 2
  000c7	c1 e1 00	 shl	 ecx, 0
  000ca	66 89 84 0d 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+ecx], ax
  000d2	e8 00 00 00 00	 call	 _move16

; 299  :     exp_max[2] = add(sf0_exp_coeff[2], add(15, shl(exp, 1)));      move16 ();

  000d7	6a 01		 push	 1
  000d9	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _shl
  000e3	83 c4 08	 add	 esp, 8
  000e6	0f b7 c8	 movzx	 ecx, ax
  000e9	51		 push	 ecx
  000ea	6a 0f		 push	 15			; 0000000fH
  000ec	e8 00 00 00 00	 call	 _add
  000f1	83 c4 08	 add	 esp, 8
  000f4	0f b7 d0	 movzx	 edx, ax
  000f7	52		 push	 edx
  000f8	b8 02 00 00 00	 mov	 eax, 2
  000fd	d1 e0		 shl	 eax, 1
  000ff	8b 4d 14	 mov	 ecx, DWORD PTR _sf0_exp_coeff$[ebp]
  00102	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00106	52		 push	 edx
  00107	e8 00 00 00 00	 call	 _add
  0010c	83 c4 08	 add	 esp, 8
  0010f	b9 02 00 00 00	 mov	 ecx, 2
  00114	d1 e1		 shl	 ecx, 1
  00116	66 89 84 0d 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+ecx], ax
  0011e	e8 00 00 00 00	 call	 _move16

; 300  :     exp_max[3] = add(sf0_exp_coeff[3], exp);                       move16 ();

  00123	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  00127	50		 push	 eax
  00128	b9 02 00 00 00	 mov	 ecx, 2
  0012d	6b d1 03	 imul	 edx, ecx, 3
  00130	8b 45 14	 mov	 eax, DWORD PTR _sf0_exp_coeff$[ebp]
  00133	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00137	51		 push	 ecx
  00138	e8 00 00 00 00	 call	 _add
  0013d	83 c4 08	 add	 esp, 8
  00140	ba 02 00 00 00	 mov	 edx, 2
  00145	6b ca 03	 imul	 ecx, edx, 3
  00148	66 89 84 0d 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+ecx], ax
  00150	e8 00 00 00 00	 call	 _move16

; 301  :     exp_max[4] = add(sf0_exp_coeff[4], add(1, exp));               move16 ();

  00155	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  00159	50		 push	 eax
  0015a	6a 01		 push	 1
  0015c	e8 00 00 00 00	 call	 _add
  00161	83 c4 08	 add	 esp, 8
  00164	0f b7 c8	 movzx	 ecx, ax
  00167	51		 push	 ecx
  00168	ba 02 00 00 00	 mov	 edx, 2
  0016d	c1 e2 02	 shl	 edx, 2
  00170	8b 45 14	 mov	 eax, DWORD PTR _sf0_exp_coeff$[ebp]
  00173	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00177	51		 push	 ecx
  00178	e8 00 00 00 00	 call	 _add
  0017d	83 c4 08	 add	 esp, 8
  00180	ba 02 00 00 00	 mov	 edx, 2
  00185	c1 e2 02	 shl	 edx, 2
  00188	66 89 84 15 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+edx], ax
  00190	e8 00 00 00 00	 call	 _move16

; 302  : 
; 303  :     /* sf 1 */
; 304  :     /* determine the scaling exponent for g_code: ec = ec0 - 11 */
; 305  :     exp = sub(sf1_exp_gcode0, 11);

  00195	6a 0b		 push	 11			; 0000000bH
  00197	0f b7 45 28	 movzx	 eax, WORD PTR _sf1_exp_gcode0$[ebp]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _sub
  001a1	83 c4 08	 add	 esp, 8
  001a4	66 89 45 c4	 mov	 WORD PTR _exp$[ebp], ax

; 306  : 
; 307  :     /* calculate exp_max[i] = s[i]-1 */
; 308  :     exp_max[5] = sub(sf1_exp_coeff[0], 13);                        move16 ();

  001a8	6a 0d		 push	 13			; 0000000dH
  001aa	b8 02 00 00 00	 mov	 eax, 2
  001af	6b c8 00	 imul	 ecx, eax, 0
  001b2	8b 55 30	 mov	 edx, DWORD PTR _sf1_exp_coeff$[ebp]
  001b5	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _sub
  001bf	83 c4 08	 add	 esp, 8
  001c2	b9 02 00 00 00	 mov	 ecx, 2
  001c7	6b d1 05	 imul	 edx, ecx, 5
  001ca	66 89 84 15 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+edx], ax
  001d2	e8 00 00 00 00	 call	 _move16

; 309  :     exp_max[6] = sub(sf1_exp_coeff[1], 14);                        move16 ();

  001d7	6a 0e		 push	 14			; 0000000eH
  001d9	b8 02 00 00 00	 mov	 eax, 2
  001de	c1 e0 00	 shl	 eax, 0
  001e1	8b 4d 30	 mov	 ecx, DWORD PTR _sf1_exp_coeff$[ebp]
  001e4	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  001e8	52		 push	 edx
  001e9	e8 00 00 00 00	 call	 _sub
  001ee	83 c4 08	 add	 esp, 8
  001f1	b9 02 00 00 00	 mov	 ecx, 2
  001f6	6b d1 06	 imul	 edx, ecx, 6
  001f9	66 89 84 15 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+edx], ax
  00201	e8 00 00 00 00	 call	 _move16

; 310  :     exp_max[7] = add(sf1_exp_coeff[2], add(15, shl(exp, 1)));      move16 ();

  00206	6a 01		 push	 1
  00208	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 _shl
  00212	83 c4 08	 add	 esp, 8
  00215	0f b7 c8	 movzx	 ecx, ax
  00218	51		 push	 ecx
  00219	6a 0f		 push	 15			; 0000000fH
  0021b	e8 00 00 00 00	 call	 _add
  00220	83 c4 08	 add	 esp, 8
  00223	0f b7 d0	 movzx	 edx, ax
  00226	52		 push	 edx
  00227	b8 02 00 00 00	 mov	 eax, 2
  0022c	d1 e0		 shl	 eax, 1
  0022e	8b 4d 30	 mov	 ecx, DWORD PTR _sf1_exp_coeff$[ebp]
  00231	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00235	52		 push	 edx
  00236	e8 00 00 00 00	 call	 _add
  0023b	83 c4 08	 add	 esp, 8
  0023e	b9 02 00 00 00	 mov	 ecx, 2
  00243	6b d1 07	 imul	 edx, ecx, 7
  00246	66 89 84 15 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+edx], ax
  0024e	e8 00 00 00 00	 call	 _move16

; 311  :     exp_max[8] = add(sf1_exp_coeff[3], exp);                       move16 ();

  00253	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  00257	50		 push	 eax
  00258	b9 02 00 00 00	 mov	 ecx, 2
  0025d	6b d1 03	 imul	 edx, ecx, 3
  00260	8b 45 30	 mov	 eax, DWORD PTR _sf1_exp_coeff$[ebp]
  00263	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00267	51		 push	 ecx
  00268	e8 00 00 00 00	 call	 _add
  0026d	83 c4 08	 add	 esp, 8
  00270	ba 02 00 00 00	 mov	 edx, 2
  00275	c1 e2 03	 shl	 edx, 3
  00278	66 89 84 15 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+edx], ax
  00280	e8 00 00 00 00	 call	 _move16

; 312  :     exp_max[9] = add(sf1_exp_coeff[4], add(1, exp));               move16 ();

  00285	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  00289	50		 push	 eax
  0028a	6a 01		 push	 1
  0028c	e8 00 00 00 00	 call	 _add
  00291	83 c4 08	 add	 esp, 8
  00294	0f b7 c8	 movzx	 ecx, ax
  00297	51		 push	 ecx
  00298	ba 02 00 00 00	 mov	 edx, 2
  0029d	c1 e2 02	 shl	 edx, 2
  002a0	8b 45 30	 mov	 eax, DWORD PTR _sf1_exp_coeff$[ebp]
  002a3	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  002a7	51		 push	 ecx
  002a8	e8 00 00 00 00	 call	 _add
  002ad	83 c4 08	 add	 esp, 8
  002b0	ba 02 00 00 00	 mov	 edx, 2
  002b5	6b ca 09	 imul	 ecx, edx, 9
  002b8	66 89 84 0d 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+ecx], ax
  002c0	e8 00 00 00 00	 call	 _move16

; 313  : 
; 314  : 
; 315  : 
; 316  :     /*-------------------------------------------------------------------*
; 317  :      *  Gain search equalisation:                                        *
; 318  :      *  ~~~~~~~~~~~~~~~~~~~~~~~~~                                        *
; 319  :      *  The MSE for the two subframes is weighted differently if there   *
; 320  :      *  is a big difference in the corresponding target energies         *
; 321  :      *-------------------------------------------------------------------*/
; 322  : 
; 323  :     /* make the target energy exponents the same by de-normalizing the
; 324  :        fraction of the smaller one. This is necessary to be able to compare
; 325  :        them
; 326  :      */
; 327  :     exp = sf0_exp_target_en - sf1_exp_target_en;

  002c5	0f bf 45 1c	 movsx	 eax, WORD PTR _sf0_exp_target_en$[ebp]
  002c9	0f bf 4d 38	 movsx	 ecx, WORD PTR _sf1_exp_target_en$[ebp]
  002cd	2b c1		 sub	 eax, ecx
  002cf	66 89 45 c4	 mov	 WORD PTR _exp$[ebp], ax

; 328  :     test ();

  002d3	e8 00 00 00 00	 call	 _test

; 329  :     if (exp > 0)

  002d8	0f bf 45 c4	 movsx	 eax, WORD PTR _exp$[ebp]
  002dc	85 c0		 test	 eax, eax
  002de	7e 18		 jle	 SHORT $LN23@MR475_gain

; 330  :     {
; 331  :         sf1_frac_target_en = shr (sf1_frac_target_en, exp);

  002e0	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  002e4	50		 push	 eax
  002e5	0f b7 4d 3c	 movzx	 ecx, WORD PTR _sf1_frac_target_en$[ebp]
  002e9	51		 push	 ecx
  002ea	e8 00 00 00 00	 call	 _shr
  002ef	83 c4 08	 add	 esp, 8
  002f2	66 89 45 3c	 mov	 WORD PTR _sf1_frac_target_en$[ebp], ax

; 332  :     }
; 333  :     else

  002f6	eb 16		 jmp	 SHORT $LN22@MR475_gain
$LN23@MR475_gain:

; 334  :     {
; 335  :         sf0_frac_target_en = shl (sf0_frac_target_en, exp);

  002f8	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  002fc	50		 push	 eax
  002fd	0f b7 4d 20	 movzx	 ecx, WORD PTR _sf0_frac_target_en$[ebp]
  00301	51		 push	 ecx
  00302	e8 00 00 00 00	 call	 _shl
  00307	83 c4 08	 add	 esp, 8
  0030a	66 89 45 20	 mov	 WORD PTR _sf0_frac_target_en$[ebp], ax
$LN22@MR475_gain:

; 336  :     }
; 337  : 
; 338  :     /* assume no change of exponents */
; 339  :     exp = 0; move16 ();

  0030e	33 c0		 xor	 eax, eax
  00310	66 89 45 c4	 mov	 WORD PTR _exp$[ebp], ax
  00314	e8 00 00 00 00	 call	 _move16

; 340  : 
; 341  :     /* test for target energy difference; set exp to +1 or -1 to scale
; 342  :      * up/down coefficients for sf 1
; 343  :      */
; 344  :     tmp = shr_r (sf1_frac_target_en, 1);   /* tmp = ceil(0.5*en(sf1)) */

  00319	6a 01		 push	 1
  0031b	0f b7 45 3c	 movzx	 eax, WORD PTR _sf1_frac_target_en$[ebp]
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 _shr_r
  00325	83 c4 08	 add	 esp, 8
  00328	66 89 45 d0	 mov	 WORD PTR _tmp$[ebp], ax

; 345  :     test ();

  0032c	e8 00 00 00 00	 call	 _test

; 346  :     if (sub (tmp, sf0_frac_target_en) > 0) /* tmp > en(sf0)? */

  00331	0f b7 45 20	 movzx	 eax, WORD PTR _sf0_frac_target_en$[ebp]
  00335	50		 push	 eax
  00336	0f b7 4d d0	 movzx	 ecx, WORD PTR _tmp$[ebp]
  0033a	51		 push	 ecx
  0033b	e8 00 00 00 00	 call	 _sub
  00340	83 c4 08	 add	 esp, 8
  00343	0f bf d0	 movsx	 edx, ax
  00346	85 d2		 test	 edx, edx
  00348	7e 10		 jle	 SHORT $LN21@MR475_gain

; 347  :     {
; 348  :         /*
; 349  :          * target_energy(sf1) > 2*target_energy(sf0)
; 350  :          *   -> scale up MSE(sf0) by 2 by adding 1 to exponents 0..4
; 351  :          */
; 352  :         exp = 1; move16 ();

  0034a	b8 01 00 00 00	 mov	 eax, 1
  0034f	66 89 45 c4	 mov	 WORD PTR _exp$[ebp], ax
  00353	e8 00 00 00 00	 call	 _move16

; 353  :     }
; 354  :     else

  00358	eb 4b		 jmp	 SHORT $LN20@MR475_gain
$LN21@MR475_gain:

; 355  :     {
; 356  :         tmp = shr (add (sf0_frac_target_en, 3), 2); /* tmp=ceil(0.25*en(sf0)) */

  0035a	6a 02		 push	 2
  0035c	6a 03		 push	 3
  0035e	0f b7 45 20	 movzx	 eax, WORD PTR _sf0_frac_target_en$[ebp]
  00362	50		 push	 eax
  00363	e8 00 00 00 00	 call	 _add
  00368	83 c4 08	 add	 esp, 8
  0036b	0f b7 c8	 movzx	 ecx, ax
  0036e	51		 push	 ecx
  0036f	e8 00 00 00 00	 call	 _shr
  00374	83 c4 08	 add	 esp, 8
  00377	66 89 45 d0	 mov	 WORD PTR _tmp$[ebp], ax

; 357  :         test();

  0037b	e8 00 00 00 00	 call	 _test

; 358  :         if (sub (tmp, sf1_frac_target_en) > 0)      /* tmp > en(sf1)? */

  00380	0f b7 45 3c	 movzx	 eax, WORD PTR _sf1_frac_target_en$[ebp]
  00384	50		 push	 eax
  00385	0f b7 4d d0	 movzx	 ecx, WORD PTR _tmp$[ebp]
  00389	51		 push	 ecx
  0038a	e8 00 00 00 00	 call	 _sub
  0038f	83 c4 08	 add	 esp, 8
  00392	0f bf d0	 movsx	 edx, ax
  00395	85 d2		 test	 edx, edx
  00397	7e 0c		 jle	 SHORT $LN20@MR475_gain

; 359  :         {
; 360  :             /*
; 361  :              * target_energy(sf1) < 0.25*target_energy(sf0)
; 362  :              *   -> scale down MSE(sf0) by 0.5 by subtracting 1 from
; 363  :              *      coefficients 0..4
; 364  :              */
; 365  :             exp = -1; move16 ();

  00399	83 c8 ff	 or	 eax, -1
  0039c	66 89 45 c4	 mov	 WORD PTR _exp$[ebp], ax
  003a0	e8 00 00 00 00	 call	 _move16
$LN20@MR475_gain:

; 366  :         }
; 367  :     }
; 368  :     
; 369  :     for (i = 0; i < 5; i++)

  003a5	33 c0		 xor	 eax, eax
  003a7	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  003ab	eb 0c		 jmp	 SHORT $LN18@MR475_gain
$LN17@MR475_gain:
  003ad	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  003b1	66 83 c0 01	 add	 ax, 1
  003b5	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN18@MR475_gain:
  003b9	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  003bd	83 f8 05	 cmp	 eax, 5
  003c0	7d 2d		 jge	 SHORT $LN16@MR475_gain

; 370  :     {
; 371  :         exp_max[i] = add (exp_max[i], exp); move16 ();

  003c2	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  003c6	50		 push	 eax
  003c7	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  003cb	0f b7 94 4d 1c
	ff ff ff	 movzx	 edx, WORD PTR _exp_max$[ebp+ecx*2]
  003d3	52		 push	 edx
  003d4	e8 00 00 00 00	 call	 _add
  003d9	83 c4 08	 add	 esp, 8
  003dc	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  003e0	66 89 84 4d 1c
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+ecx*2], ax
  003e8	e8 00 00 00 00	 call	 _move16

; 372  :     }

  003ed	eb be		 jmp	 SHORT $LN17@MR475_gain
$LN16@MR475_gain:

; 373  :                                                                        
; 374  :     /*-------------------------------------------------------------------*
; 375  :      *  Find maximum exponent:                                           *
; 376  :      *  ~~~~~~~~~~~~~~~~~~~~~~                                           *
; 377  :      *                                                                   *
; 378  :      *  For the sum operation, all terms must have the same scaling;     *
; 379  :      *  that scaling should be low enough to prevent overflow. There-    *
; 380  :      *  fore, the maximum scale is determined and all coefficients are   *
; 381  :      *  re-scaled:                                                       *
; 382  :      *                                                                   *
; 383  :      *    exp = max(exp_max[i]) + 1;                                     *
; 384  :      *    e = exp_max[i]-exp;         e <= 0!                            *
; 385  :      *    c[i] = c[i]*2^e                                                *
; 386  :      *-------------------------------------------------------------------*/
; 387  : 
; 388  :     exp = exp_max[0];                                        move16 ();

  003ef	b8 02 00 00 00	 mov	 eax, 2
  003f4	6b c8 00	 imul	 ecx, eax, 0
  003f7	66 8b 94 0d 1c
	ff ff ff	 mov	 dx, WORD PTR _exp_max$[ebp+ecx]
  003ff	66 89 55 c4	 mov	 WORD PTR _exp$[ebp], dx
  00403	e8 00 00 00 00	 call	 _move16

; 389  :     for (i = 1; i < 10; i++)

  00408	b8 01 00 00 00	 mov	 eax, 1
  0040d	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  00411	eb 0c		 jmp	 SHORT $LN15@MR475_gain
$LN14@MR475_gain:
  00413	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00417	66 83 c0 01	 add	 ax, 1
  0041b	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN15@MR475_gain:
  0041f	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00423	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00426	7d 40		 jge	 SHORT $LN13@MR475_gain

; 390  :     {
; 391  :         move16(); test();

  00428	e8 00 00 00 00	 call	 _move16
  0042d	e8 00 00 00 00	 call	 _test

; 392  :         if (sub(exp_max[i], exp) > 0)

  00432	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  00436	50		 push	 eax
  00437	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  0043b	0f b7 94 4d 1c
	ff ff ff	 movzx	 edx, WORD PTR _exp_max$[ebp+ecx*2]
  00443	52		 push	 edx
  00444	e8 00 00 00 00	 call	 _sub
  00449	83 c4 08	 add	 esp, 8
  0044c	98		 cwde
  0044d	85 c0		 test	 eax, eax
  0044f	7e 15		 jle	 SHORT $LN12@MR475_gain

; 393  :         {
; 394  :             exp = exp_max[i];                                move16 ();

  00451	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00455	66 8b 8c 45 1c
	ff ff ff	 mov	 cx, WORD PTR _exp_max$[ebp+eax*2]
  0045d	66 89 4d c4	 mov	 WORD PTR _exp$[ebp], cx
  00461	e8 00 00 00 00	 call	 _move16
$LN12@MR475_gain:

; 395  :         }
; 396  :     }

  00466	eb ab		 jmp	 SHORT $LN14@MR475_gain
$LN13@MR475_gain:

; 397  :     exp = add(exp, 1);      /* To avoid overflow */

  00468	6a 01		 push	 1
  0046a	0f b7 45 c4	 movzx	 eax, WORD PTR _exp$[ebp]
  0046e	50		 push	 eax
  0046f	e8 00 00 00 00	 call	 _add
  00474	83 c4 08	 add	 esp, 8
  00477	66 89 45 c4	 mov	 WORD PTR _exp$[ebp], ax

; 398  : 
; 399  :     p = &sf0_frac_coeff[0]; move16 ();

  0047b	b8 02 00 00 00	 mov	 eax, 2
  00480	6b c8 00	 imul	 ecx, eax, 0
  00483	03 4d 18	 add	 ecx, DWORD PTR _sf0_frac_coeff$[ebp]
  00486	89 4d f4	 mov	 DWORD PTR _p$[ebp], ecx
  00489	e8 00 00 00 00	 call	 _move16

; 400  :     for (i = 0; i < 5; i++) {

  0048e	33 c0		 xor	 eax, eax
  00490	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  00494	eb 0c		 jmp	 SHORT $LN11@MR475_gain
$LN10@MR475_gain:
  00496	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  0049a	66 83 c0 01	 add	 ax, 1
  0049e	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN11@MR475_gain:
  004a2	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  004a6	83 f8 05	 cmp	 eax, 5
  004a9	0f 8d 90 00 00
	00		 jge	 $LN9@MR475_gain

; 401  :         tmp = sub(exp, exp_max[i]);

  004af	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  004b3	0f b7 8c 45 1c
	ff ff ff	 movzx	 ecx, WORD PTR _exp_max$[ebp+eax*2]
  004bb	51		 push	 ecx
  004bc	0f b7 55 c4	 movzx	 edx, WORD PTR _exp$[ebp]
  004c0	52		 push	 edx
  004c1	e8 00 00 00 00	 call	 _sub
  004c6	83 c4 08	 add	 esp, 8
  004c9	66 89 45 d0	 mov	 WORD PTR _tmp$[ebp], ax

; 402  :         L_tmp = L_deposit_h(*p++);

  004cd	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004d0	66 8b 08	 mov	 cx, WORD PTR [eax]
  004d3	66 89 8d 3e fe
	ff ff		 mov	 WORD PTR tv275[ebp], cx
  004da	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  004dd	83 c2 02	 add	 edx, 2
  004e0	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  004e3	0f b7 85 3e fe
	ff ff		 movzx	 eax, WORD PTR tv275[ebp]
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 _L_deposit_h
  004f0	83 c4 04	 add	 esp, 4
  004f3	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 403  :         L_tmp = L_shr(L_tmp, tmp);

  004f9	0f b7 45 d0	 movzx	 eax, WORD PTR _tmp$[ebp]
  004fd	50		 push	 eax
  004fe	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  00504	51		 push	 ecx
  00505	e8 00 00 00 00	 call	 _L_shr
  0050a	83 c4 08	 add	 esp, 8
  0050d	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 404  :         L_Extract(L_tmp, &coeff[i], &coeff_lo[i]);

  00513	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00517	8d 8c 45 38 ff
	ff ff		 lea	 ecx, DWORD PTR _coeff_lo$[ebp+eax*2]
  0051e	51		 push	 ecx
  0051f	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  00523	8d 84 55 54 ff
	ff ff		 lea	 eax, DWORD PTR _coeff$[ebp+edx*2]
  0052a	50		 push	 eax
  0052b	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  00531	51		 push	 ecx
  00532	e8 00 00 00 00	 call	 _L_Extract
  00537	83 c4 0c	 add	 esp, 12			; 0000000cH

; 405  :     }

  0053a	e9 57 ff ff ff	 jmp	 $LN10@MR475_gain
$LN9@MR475_gain:

; 406  :     p = &sf1_frac_coeff[0]; move16 ();

  0053f	b8 02 00 00 00	 mov	 eax, 2
  00544	6b c8 00	 imul	 ecx, eax, 0
  00547	03 4d 34	 add	 ecx, DWORD PTR _sf1_frac_coeff$[ebp]
  0054a	89 4d f4	 mov	 DWORD PTR _p$[ebp], ecx
  0054d	e8 00 00 00 00	 call	 _move16

; 407  :     for (; i < 10; i++) {

  00552	eb 0c		 jmp	 SHORT $LN8@MR475_gain
$LN7@MR475_gain:
  00554	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00558	66 83 c0 01	 add	 ax, 1
  0055c	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN8@MR475_gain:
  00560	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00564	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00567	0f 8d 90 00 00
	00		 jge	 $LN6@MR475_gain

; 408  :         tmp = sub(exp, exp_max[i]);

  0056d	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00571	0f b7 8c 45 1c
	ff ff ff	 movzx	 ecx, WORD PTR _exp_max$[ebp+eax*2]
  00579	51		 push	 ecx
  0057a	0f b7 55 c4	 movzx	 edx, WORD PTR _exp$[ebp]
  0057e	52		 push	 edx
  0057f	e8 00 00 00 00	 call	 _sub
  00584	83 c4 08	 add	 esp, 8
  00587	66 89 45 d0	 mov	 WORD PTR _tmp$[ebp], ax

; 409  :         L_tmp = L_deposit_h(*p++);

  0058b	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0058e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00591	66 89 8d 3e fe
	ff ff		 mov	 WORD PTR tv302[ebp], cx
  00598	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  0059b	83 c2 02	 add	 edx, 2
  0059e	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  005a1	0f b7 85 3e fe
	ff ff		 movzx	 eax, WORD PTR tv302[ebp]
  005a8	50		 push	 eax
  005a9	e8 00 00 00 00	 call	 _L_deposit_h
  005ae	83 c4 04	 add	 esp, 4
  005b1	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 410  :         L_tmp = L_shr(L_tmp, tmp);

  005b7	0f b7 45 d0	 movzx	 eax, WORD PTR _tmp$[ebp]
  005bb	50		 push	 eax
  005bc	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  005c2	51		 push	 ecx
  005c3	e8 00 00 00 00	 call	 _L_shr
  005c8	83 c4 08	 add	 esp, 8
  005cb	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 411  :         L_Extract(L_tmp, &coeff[i], &coeff_lo[i]);

  005d1	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  005d5	8d 8c 45 38 ff
	ff ff		 lea	 ecx, DWORD PTR _coeff_lo$[ebp+eax*2]
  005dc	51		 push	 ecx
  005dd	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  005e1	8d 84 55 54 ff
	ff ff		 lea	 eax, DWORD PTR _coeff$[ebp+edx*2]
  005e8	50		 push	 eax
  005e9	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  005ef	51		 push	 ecx
  005f0	e8 00 00 00 00	 call	 _L_Extract
  005f5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 412  :     }

  005f8	e9 57 ff ff ff	 jmp	 $LN7@MR475_gain
$LN6@MR475_gain:

; 413  : 
; 414  : 
; 415  :     /*-------------------------------------------------------------------*
; 416  :      *  Codebook search:                                                 *
; 417  :      *  ~~~~~~~~~~~~~~~~                                                 *
; 418  :      *                                                                   *
; 419  :      *  For each pair (g_pitch, g_fac) in the table calculate the        *
; 420  :      *  terms t[0..4] and sum them up; the result is the mean squared    *
; 421  :      *  error for the quantized gains from the table. The index for the  *
; 422  :      *  minimum MSE is stored and finally used to retrieve the quantized *
; 423  :      *  gains                                                            *
; 424  :      *-------------------------------------------------------------------*/
; 425  : 
; 426  :     /* start with "infinite" MSE */
; 427  :     dist_min = MAX_32;        move32();

  005fd	c7 85 04 ff ff
	ff ff ff ff 7f	 mov	 DWORD PTR _dist_min$[ebp], 2147483647 ; 7fffffffH
  00607	e8 00 00 00 00	 call	 _move32

; 428  : 
; 429  :     p = &table_gain_MR475[0]; move16 ();

  0060c	b8 02 00 00 00	 mov	 eax, 2
  00611	6b c8 00	 imul	 ecx, eax, 0
  00614	81 c1 00 00 00
	00		 add	 ecx, OFFSET _table_gain_MR475
  0061a	89 4d f4	 mov	 DWORD PTR _p$[ebp], ecx
  0061d	e8 00 00 00 00	 call	 _move16

; 430  : 
; 431  :     for (i = 0; i < MR475_VQ_SIZE; i++)

  00622	33 c0		 xor	 eax, eax
  00624	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  00628	eb 0c		 jmp	 SHORT $LN5@MR475_gain
$LN4@MR475_gain:
  0062a	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  0062e	66 83 c0 01	 add	 ax, 1
  00632	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN5@MR475_gain:
  00636	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  0063a	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0063f	0f 8d 07 04 00
	00		 jge	 $LN3@MR475_gain

; 432  :     {
; 433  :         /* subframe 0 (and 2) calculations */
; 434  :         g_pitch = *p++;       move16 ();

  00645	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00648	66 8b 08	 mov	 cx, WORD PTR [eax]
  0064b	66 89 4d a0	 mov	 WORD PTR _g_pitch$[ebp], cx
  0064f	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  00652	83 c2 02	 add	 edx, 2
  00655	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  00658	e8 00 00 00 00	 call	 _move16

; 435  :         g_code = *p++;        move16 ();

  0065d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00660	66 8b 08	 mov	 cx, WORD PTR [eax]
  00663	66 89 4d 88	 mov	 WORD PTR _g_code$[ebp], cx
  00667	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  0066a	83 c2 02	 add	 edx, 2
  0066d	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  00670	e8 00 00 00 00	 call	 _move16

; 436  : 
; 437  :         g_code = mult(g_code, sf0_gcode0);

  00675	0f b7 45 b8	 movzx	 eax, WORD PTR _sf0_gcode0$[ebp]
  00679	50		 push	 eax
  0067a	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  0067e	51		 push	 ecx
  0067f	e8 00 00 00 00	 call	 _mult
  00684	83 c4 08	 add	 esp, 8
  00687	66 89 45 88	 mov	 WORD PTR _g_code$[ebp], ax

; 438  :         g2_pitch = mult(g_pitch, g_pitch);

  0068b	0f b7 45 a0	 movzx	 eax, WORD PTR _g_pitch$[ebp]
  0068f	50		 push	 eax
  00690	0f b7 4d a0	 movzx	 ecx, WORD PTR _g_pitch$[ebp]
  00694	51		 push	 ecx
  00695	e8 00 00 00 00	 call	 _mult
  0069a	83 c4 08	 add	 esp, 8
  0069d	66 89 45 94	 mov	 WORD PTR _g2_pitch$[ebp], ax

; 439  :         g2_code = mult(g_code, g_code);

  006a1	0f b7 45 88	 movzx	 eax, WORD PTR _g_code$[ebp]
  006a5	50		 push	 eax
  006a6	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  006aa	51		 push	 ecx
  006ab	e8 00 00 00 00	 call	 _mult
  006b0	83 c4 08	 add	 esp, 8
  006b3	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _g2_code$[ebp], ax

; 440  :         g_pit_cod = mult(g_code, g_pitch);

  006ba	0f b7 45 a0	 movzx	 eax, WORD PTR _g_pitch$[ebp]
  006be	50		 push	 eax
  006bf	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  006c3	51		 push	 ecx
  006c4	e8 00 00 00 00	 call	 _mult
  006c9	83 c4 08	 add	 esp, 8
  006cc	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _g_pit_cod$[ebp], ax

; 441  :         
; 442  :         L_tmp = Mpy_32_16(       coeff[0], coeff_lo[0], g2_pitch);

  006d3	0f b7 45 94	 movzx	 eax, WORD PTR _g2_pitch$[ebp]
  006d7	50		 push	 eax
  006d8	b9 02 00 00 00	 mov	 ecx, 2
  006dd	6b d1 00	 imul	 edx, ecx, 0
  006e0	0f b7 84 15 38
	ff ff ff	 movzx	 eax, WORD PTR _coeff_lo$[ebp+edx]
  006e8	50		 push	 eax
  006e9	b9 02 00 00 00	 mov	 ecx, 2
  006ee	6b d1 00	 imul	 edx, ecx, 0
  006f1	0f b7 84 15 54
	ff ff ff	 movzx	 eax, WORD PTR _coeff$[ebp+edx]
  006f9	50		 push	 eax
  006fa	e8 00 00 00 00	 call	 _Mpy_32_16
  006ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00702	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 443  :         L_tmp = Mac_32_16(L_tmp, coeff[1], coeff_lo[1], g_pitch);

  00708	0f b7 45 a0	 movzx	 eax, WORD PTR _g_pitch$[ebp]
  0070c	50		 push	 eax
  0070d	b9 02 00 00 00	 mov	 ecx, 2
  00712	c1 e1 00	 shl	 ecx, 0
  00715	0f b7 94 0d 38
	ff ff ff	 movzx	 edx, WORD PTR _coeff_lo$[ebp+ecx]
  0071d	52		 push	 edx
  0071e	b8 02 00 00 00	 mov	 eax, 2
  00723	c1 e0 00	 shl	 eax, 0
  00726	0f b7 8c 05 54
	ff ff ff	 movzx	 ecx, WORD PTR _coeff$[ebp+eax]
  0072e	51		 push	 ecx
  0072f	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _L_tmp$[ebp]
  00735	52		 push	 edx
  00736	e8 00 00 00 00	 call	 _Mac_32_16
  0073b	83 c4 10	 add	 esp, 16			; 00000010H
  0073e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 444  :         L_tmp = Mac_32_16(L_tmp, coeff[2], coeff_lo[2], g2_code);

  00744	0f b7 85 7c ff
	ff ff		 movzx	 eax, WORD PTR _g2_code$[ebp]
  0074b	50		 push	 eax
  0074c	b9 02 00 00 00	 mov	 ecx, 2
  00751	d1 e1		 shl	 ecx, 1
  00753	0f b7 94 0d 38
	ff ff ff	 movzx	 edx, WORD PTR _coeff_lo$[ebp+ecx]
  0075b	52		 push	 edx
  0075c	b8 02 00 00 00	 mov	 eax, 2
  00761	d1 e0		 shl	 eax, 1
  00763	0f b7 8c 05 54
	ff ff ff	 movzx	 ecx, WORD PTR _coeff$[ebp+eax]
  0076b	51		 push	 ecx
  0076c	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _L_tmp$[ebp]
  00772	52		 push	 edx
  00773	e8 00 00 00 00	 call	 _Mac_32_16
  00778	83 c4 10	 add	 esp, 16			; 00000010H
  0077b	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 445  :         L_tmp = Mac_32_16(L_tmp, coeff[3], coeff_lo[3], g_code);

  00781	0f b7 45 88	 movzx	 eax, WORD PTR _g_code$[ebp]
  00785	50		 push	 eax
  00786	b9 02 00 00 00	 mov	 ecx, 2
  0078b	6b d1 03	 imul	 edx, ecx, 3
  0078e	0f b7 84 15 38
	ff ff ff	 movzx	 eax, WORD PTR _coeff_lo$[ebp+edx]
  00796	50		 push	 eax
  00797	b9 02 00 00 00	 mov	 ecx, 2
  0079c	6b d1 03	 imul	 edx, ecx, 3
  0079f	0f b7 84 15 54
	ff ff ff	 movzx	 eax, WORD PTR _coeff$[ebp+edx]
  007a7	50		 push	 eax
  007a8	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  007ae	51		 push	 ecx
  007af	e8 00 00 00 00	 call	 _Mac_32_16
  007b4	83 c4 10	 add	 esp, 16			; 00000010H
  007b7	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 446  :         L_tmp = Mac_32_16(L_tmp, coeff[4], coeff_lo[4], g_pit_cod);

  007bd	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _g_pit_cod$[ebp]
  007c4	50		 push	 eax
  007c5	b9 02 00 00 00	 mov	 ecx, 2
  007ca	c1 e1 02	 shl	 ecx, 2
  007cd	0f b7 94 0d 38
	ff ff ff	 movzx	 edx, WORD PTR _coeff_lo$[ebp+ecx]
  007d5	52		 push	 edx
  007d6	b8 02 00 00 00	 mov	 eax, 2
  007db	c1 e0 02	 shl	 eax, 2
  007de	0f b7 8c 05 54
	ff ff ff	 movzx	 ecx, WORD PTR _coeff$[ebp+eax]
  007e6	51		 push	 ecx
  007e7	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _L_tmp$[ebp]
  007ed	52		 push	 edx
  007ee	e8 00 00 00 00	 call	 _Mac_32_16
  007f3	83 c4 10	 add	 esp, 16			; 00000010H
  007f6	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 447  : 
; 448  :         tmp = sub (g_pitch, gp_limit);

  007fc	0f b7 45 40	 movzx	 eax, WORD PTR _gp_limit$[ebp]
  00800	50		 push	 eax
  00801	0f b7 4d a0	 movzx	 ecx, WORD PTR _g_pitch$[ebp]
  00805	51		 push	 ecx
  00806	e8 00 00 00 00	 call	 _sub
  0080b	83 c4 08	 add	 esp, 8
  0080e	66 89 45 d0	 mov	 WORD PTR _tmp$[ebp], ax

; 449  : 
; 450  :         /* subframe 1 (and 3) calculations */
; 451  :         g_pitch = *p++;      move16 ();

  00812	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00815	66 8b 08	 mov	 cx, WORD PTR [eax]
  00818	66 89 4d a0	 mov	 WORD PTR _g_pitch$[ebp], cx
  0081c	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  0081f	83 c2 02	 add	 edx, 2
  00822	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  00825	e8 00 00 00 00	 call	 _move16

; 452  :         g_code = *p++;       move16 ();

  0082a	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0082d	66 8b 08	 mov	 cx, WORD PTR [eax]
  00830	66 89 4d 88	 mov	 WORD PTR _g_code$[ebp], cx
  00834	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  00837	83 c2 02	 add	 edx, 2
  0083a	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  0083d	e8 00 00 00 00	 call	 _move16

; 453  : 
; 454  :         test (); test (); test ();

  00842	e8 00 00 00 00	 call	 _test
  00847	e8 00 00 00 00	 call	 _test
  0084c	e8 00 00 00 00	 call	 _test

; 455  :         if (tmp <= 0 && sub(g_pitch, gp_limit) <= 0)

  00851	0f bf 45 d0	 movsx	 eax, WORD PTR _tmp$[ebp]
  00855	85 c0		 test	 eax, eax
  00857	0f 8f ea 01 00
	00		 jg	 $LN2@MR475_gain
  0085d	0f b7 45 40	 movzx	 eax, WORD PTR _gp_limit$[ebp]
  00861	50		 push	 eax
  00862	0f b7 4d a0	 movzx	 ecx, WORD PTR _g_pitch$[ebp]
  00866	51		 push	 ecx
  00867	e8 00 00 00 00	 call	 _sub
  0086c	83 c4 08	 add	 esp, 8
  0086f	0f bf d0	 movsx	 edx, ax
  00872	85 d2		 test	 edx, edx
  00874	0f 8f cd 01 00
	00		 jg	 $LN2@MR475_gain

; 456  :         {
; 457  :             g_code = mult(g_code, sf1_gcode0);

  0087a	0f b7 45 ac	 movzx	 eax, WORD PTR _sf1_gcode0$[ebp]
  0087e	50		 push	 eax
  0087f	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  00883	51		 push	 ecx
  00884	e8 00 00 00 00	 call	 _mult
  00889	83 c4 08	 add	 esp, 8
  0088c	66 89 45 88	 mov	 WORD PTR _g_code$[ebp], ax

; 458  :             g2_pitch = mult(g_pitch, g_pitch);

  00890	0f b7 45 a0	 movzx	 eax, WORD PTR _g_pitch$[ebp]
  00894	50		 push	 eax
  00895	0f b7 4d a0	 movzx	 ecx, WORD PTR _g_pitch$[ebp]
  00899	51		 push	 ecx
  0089a	e8 00 00 00 00	 call	 _mult
  0089f	83 c4 08	 add	 esp, 8
  008a2	66 89 45 94	 mov	 WORD PTR _g2_pitch$[ebp], ax

; 459  :             g2_code = mult(g_code, g_code);

  008a6	0f b7 45 88	 movzx	 eax, WORD PTR _g_code$[ebp]
  008aa	50		 push	 eax
  008ab	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  008af	51		 push	 ecx
  008b0	e8 00 00 00 00	 call	 _mult
  008b5	83 c4 08	 add	 esp, 8
  008b8	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _g2_code$[ebp], ax

; 460  :             g_pit_cod = mult(g_code, g_pitch);

  008bf	0f b7 45 a0	 movzx	 eax, WORD PTR _g_pitch$[ebp]
  008c3	50		 push	 eax
  008c4	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  008c8	51		 push	 ecx
  008c9	e8 00 00 00 00	 call	 _mult
  008ce	83 c4 08	 add	 esp, 8
  008d1	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _g_pit_cod$[ebp], ax

; 461  :             
; 462  :             L_tmp = Mac_32_16(L_tmp, coeff[5], coeff_lo[5], g2_pitch);

  008d8	0f b7 45 94	 movzx	 eax, WORD PTR _g2_pitch$[ebp]
  008dc	50		 push	 eax
  008dd	b9 02 00 00 00	 mov	 ecx, 2
  008e2	6b d1 05	 imul	 edx, ecx, 5
  008e5	0f b7 84 15 38
	ff ff ff	 movzx	 eax, WORD PTR _coeff_lo$[ebp+edx]
  008ed	50		 push	 eax
  008ee	b9 02 00 00 00	 mov	 ecx, 2
  008f3	6b d1 05	 imul	 edx, ecx, 5
  008f6	0f b7 84 15 54
	ff ff ff	 movzx	 eax, WORD PTR _coeff$[ebp+edx]
  008fe	50		 push	 eax
  008ff	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  00905	51		 push	 ecx
  00906	e8 00 00 00 00	 call	 _Mac_32_16
  0090b	83 c4 10	 add	 esp, 16			; 00000010H
  0090e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 463  :             L_tmp = Mac_32_16(L_tmp, coeff[6], coeff_lo[6], g_pitch);

  00914	0f b7 45 a0	 movzx	 eax, WORD PTR _g_pitch$[ebp]
  00918	50		 push	 eax
  00919	b9 02 00 00 00	 mov	 ecx, 2
  0091e	6b d1 06	 imul	 edx, ecx, 6
  00921	0f b7 84 15 38
	ff ff ff	 movzx	 eax, WORD PTR _coeff_lo$[ebp+edx]
  00929	50		 push	 eax
  0092a	b9 02 00 00 00	 mov	 ecx, 2
  0092f	6b d1 06	 imul	 edx, ecx, 6
  00932	0f b7 84 15 54
	ff ff ff	 movzx	 eax, WORD PTR _coeff$[ebp+edx]
  0093a	50		 push	 eax
  0093b	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  00941	51		 push	 ecx
  00942	e8 00 00 00 00	 call	 _Mac_32_16
  00947	83 c4 10	 add	 esp, 16			; 00000010H
  0094a	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 464  :             L_tmp = Mac_32_16(L_tmp, coeff[7], coeff_lo[7], g2_code);

  00950	0f b7 85 7c ff
	ff ff		 movzx	 eax, WORD PTR _g2_code$[ebp]
  00957	50		 push	 eax
  00958	b9 02 00 00 00	 mov	 ecx, 2
  0095d	6b d1 07	 imul	 edx, ecx, 7
  00960	0f b7 84 15 38
	ff ff ff	 movzx	 eax, WORD PTR _coeff_lo$[ebp+edx]
  00968	50		 push	 eax
  00969	b9 02 00 00 00	 mov	 ecx, 2
  0096e	6b d1 07	 imul	 edx, ecx, 7
  00971	0f b7 84 15 54
	ff ff ff	 movzx	 eax, WORD PTR _coeff$[ebp+edx]
  00979	50		 push	 eax
  0097a	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  00980	51		 push	 ecx
  00981	e8 00 00 00 00	 call	 _Mac_32_16
  00986	83 c4 10	 add	 esp, 16			; 00000010H
  00989	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 465  :             L_tmp = Mac_32_16(L_tmp, coeff[8], coeff_lo[8], g_code);

  0098f	0f b7 45 88	 movzx	 eax, WORD PTR _g_code$[ebp]
  00993	50		 push	 eax
  00994	b9 02 00 00 00	 mov	 ecx, 2
  00999	c1 e1 03	 shl	 ecx, 3
  0099c	0f b7 94 0d 38
	ff ff ff	 movzx	 edx, WORD PTR _coeff_lo$[ebp+ecx]
  009a4	52		 push	 edx
  009a5	b8 02 00 00 00	 mov	 eax, 2
  009aa	c1 e0 03	 shl	 eax, 3
  009ad	0f b7 8c 05 54
	ff ff ff	 movzx	 ecx, WORD PTR _coeff$[ebp+eax]
  009b5	51		 push	 ecx
  009b6	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _L_tmp$[ebp]
  009bc	52		 push	 edx
  009bd	e8 00 00 00 00	 call	 _Mac_32_16
  009c2	83 c4 10	 add	 esp, 16			; 00000010H
  009c5	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 466  :             L_tmp = Mac_32_16(L_tmp, coeff[9], coeff_lo[9], g_pit_cod);

  009cb	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _g_pit_cod$[ebp]
  009d2	50		 push	 eax
  009d3	b9 02 00 00 00	 mov	 ecx, 2
  009d8	6b d1 09	 imul	 edx, ecx, 9
  009db	0f b7 84 15 38
	ff ff ff	 movzx	 eax, WORD PTR _coeff_lo$[ebp+edx]
  009e3	50		 push	 eax
  009e4	b9 02 00 00 00	 mov	 ecx, 2
  009e9	6b d1 09	 imul	 edx, ecx, 9
  009ec	0f b7 84 15 54
	ff ff ff	 movzx	 eax, WORD PTR _coeff$[ebp+edx]
  009f4	50		 push	 eax
  009f5	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  009fb	51		 push	 ecx
  009fc	e8 00 00 00 00	 call	 _Mac_32_16
  00a01	83 c4 10	 add	 esp, 16			; 00000010H
  00a04	89 85 10 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 467  :             
; 468  :             /* store table index if MSE for this index is lower
; 469  :                than the minimum MSE seen so far */
; 470  :             test ();

  00a0a	e8 00 00 00 00	 call	 _test

; 471  :             if (L_sub(L_tmp, dist_min) < (Word32) 0)

  00a0f	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _dist_min$[ebp]
  00a15	50		 push	 eax
  00a16	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  00a1c	51		 push	 ecx
  00a1d	e8 00 00 00 00	 call	 _L_sub
  00a22	83 c4 08	 add	 esp, 8
  00a25	85 c0		 test	 eax, eax
  00a27	7d 1e		 jge	 SHORT $LN2@MR475_gain

; 472  :             {
; 473  :                 dist_min = L_tmp; move32 ();

  00a29	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _L_tmp$[ebp]
  00a2f	89 85 04 ff ff
	ff		 mov	 DWORD PTR _dist_min$[ebp], eax
  00a35	e8 00 00 00 00	 call	 _move32

; 474  :                 index = i;        move16 ();

  00a3a	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00a3e	66 89 45 dc	 mov	 WORD PTR _index$[ebp], ax
  00a42	e8 00 00 00 00	 call	 _move16
$LN2@MR475_gain:

; 475  :             }
; 476  :         }
; 477  :     }

  00a47	e9 de fb ff ff	 jmp	 $LN4@MR475_gain
$LN3@MR475_gain:

; 478  : 
; 479  :     /*------------------------------------------------------------------*
; 480  :      *  read quantized gains and update MA predictor memories           *
; 481  :      *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           *
; 482  :      *------------------------------------------------------------------*/
; 483  : 
; 484  :     /* for subframe 0, the pre-calculated gcode0/exp_gcode0 are the same
; 485  :        as those calculated from the "real" predictor using quantized gains */
; 486  :     tmp = shl(index, 2);

  00a4c	6a 02		 push	 2
  00a4e	0f b7 45 dc	 movzx	 eax, WORD PTR _index$[ebp]
  00a52	50		 push	 eax
  00a53	e8 00 00 00 00	 call	 _shl
  00a58	83 c4 08	 add	 esp, 8
  00a5b	66 89 45 d0	 mov	 WORD PTR _tmp$[ebp], ax

; 487  :     MR475_quant_store_results(pred_st,
; 488  :                               &table_gain_MR475[tmp],
; 489  :                               sf0_gcode0,
; 490  :                               sf0_exp_gcode0,
; 491  :                               sf0_gain_pit,
; 492  :                               sf0_gain_cod);

  00a5f	8b 45 48	 mov	 eax, DWORD PTR _sf0_gain_cod$[ebp]
  00a62	50		 push	 eax
  00a63	8b 4d 44	 mov	 ecx, DWORD PTR _sf0_gain_pit$[ebp]
  00a66	51		 push	 ecx
  00a67	0f b7 55 0c	 movzx	 edx, WORD PTR _sf0_exp_gcode0$[ebp]
  00a6b	52		 push	 edx
  00a6c	0f b7 45 b8	 movzx	 eax, WORD PTR _sf0_gcode0$[ebp]
  00a70	50		 push	 eax
  00a71	0f bf 4d d0	 movsx	 ecx, WORD PTR _tmp$[ebp]
  00a75	8d 14 4d 00 00
	00 00		 lea	 edx, DWORD PTR _table_gain_MR475[ecx*2]
  00a7c	52		 push	 edx
  00a7d	8b 45 08	 mov	 eax, DWORD PTR _pred_st$[ebp]
  00a80	50		 push	 eax
  00a81	e8 00 00 00 00	 call	 _MR475_quant_store_results
  00a86	83 c4 18	 add	 esp, 24			; 00000018H

; 493  : 
; 494  :     /* calculate new predicted gain for subframe 1 (this time using
; 495  :        the real, quantized gains)                                   */
; 496  :     gc_pred(pred_st, MR475, sf1_code_nosharp,
; 497  :             &sf1_exp_gcode0, &sf1_frac_gcode0,
; 498  :             &sf0_exp_gcode0, &sf0_gcode0); /* last two args are dummy */

  00a89	8d 45 b8	 lea	 eax, DWORD PTR _sf0_gcode0$[ebp]
  00a8c	50		 push	 eax
  00a8d	8d 4d 0c	 lea	 ecx, DWORD PTR _sf0_exp_gcode0$[ebp]
  00a90	51		 push	 ecx
  00a91	8d 55 2c	 lea	 edx, DWORD PTR _sf1_frac_gcode0$[ebp]
  00a94	52		 push	 edx
  00a95	8d 45 28	 lea	 eax, DWORD PTR _sf1_exp_gcode0$[ebp]
  00a98	50		 push	 eax
  00a99	8b 4d 24	 mov	 ecx, DWORD PTR _sf1_code_nosharp$[ebp]
  00a9c	51		 push	 ecx
  00a9d	6a 00		 push	 0
  00a9f	8b 55 08	 mov	 edx, DWORD PTR _pred_st$[ebp]
  00aa2	52		 push	 edx
  00aa3	e8 00 00 00 00	 call	 _gc_pred
  00aa8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 499  :     sf1_gcode0 = extract_l(Pow2(14, sf1_frac_gcode0));

  00aab	0f b7 45 2c	 movzx	 eax, WORD PTR _sf1_frac_gcode0$[ebp]
  00aaf	50		 push	 eax
  00ab0	6a 0e		 push	 14			; 0000000eH
  00ab2	e8 00 00 00 00	 call	 _Pow2
  00ab7	83 c4 08	 add	 esp, 8
  00aba	50		 push	 eax
  00abb	e8 00 00 00 00	 call	 _extract_l
  00ac0	83 c4 04	 add	 esp, 4
  00ac3	66 89 45 ac	 mov	 WORD PTR _sf1_gcode0$[ebp], ax

; 500  : 
; 501  : 
; 502  :     tmp = add (tmp, 2);

  00ac7	6a 02		 push	 2
  00ac9	0f b7 45 d0	 movzx	 eax, WORD PTR _tmp$[ebp]
  00acd	50		 push	 eax
  00ace	e8 00 00 00 00	 call	 _add
  00ad3	83 c4 08	 add	 esp, 8
  00ad6	66 89 45 d0	 mov	 WORD PTR _tmp$[ebp], ax

; 503  :     MR475_quant_store_results(pred_st,
; 504  :                               &table_gain_MR475[tmp],
; 505  :                               sf1_gcode0,
; 506  :                               sf1_exp_gcode0,
; 507  :                               sf1_gain_pit,
; 508  :                               sf1_gain_cod);

  00ada	8b 45 50	 mov	 eax, DWORD PTR _sf1_gain_cod$[ebp]
  00add	50		 push	 eax
  00ade	8b 4d 4c	 mov	 ecx, DWORD PTR _sf1_gain_pit$[ebp]
  00ae1	51		 push	 ecx
  00ae2	0f b7 55 28	 movzx	 edx, WORD PTR _sf1_exp_gcode0$[ebp]
  00ae6	52		 push	 edx
  00ae7	0f b7 45 ac	 movzx	 eax, WORD PTR _sf1_gcode0$[ebp]
  00aeb	50		 push	 eax
  00aec	0f bf 4d d0	 movsx	 ecx, WORD PTR _tmp$[ebp]
  00af0	8d 14 4d 00 00
	00 00		 lea	 edx, DWORD PTR _table_gain_MR475[ecx*2]
  00af7	52		 push	 edx
  00af8	8b 45 08	 mov	 eax, DWORD PTR _pred_st$[ebp]
  00afb	50		 push	 eax
  00afc	e8 00 00 00 00	 call	 _MR475_quant_store_results
  00b01	83 c4 18	 add	 esp, 24			; 00000018H

; 509  : 
; 510  :     return index;

  00b04	66 8b 45 dc	 mov	 ax, WORD PTR _index$[ebp]

; 511  : }

  00b08	52		 push	 edx
  00b09	8b cd		 mov	 ecx, ebp
  00b0b	50		 push	 eax
  00b0c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN31@MR475_gain
  00b12	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00b17	58		 pop	 eax
  00b18	5a		 pop	 edx
  00b19	5f		 pop	 edi
  00b1a	5e		 pop	 esi
  00b1b	5b		 pop	 ebx
  00b1c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b1f	33 cd		 xor	 ecx, ebp
  00b21	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b26	81 c4 c4 01 00
	00		 add	 esp, 452		; 000001c4H
  00b2c	3b ec		 cmp	 ebp, esp
  00b2e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b33	8b e5		 mov	 esp, ebp
  00b35	5d		 pop	 ebp
  00b36	c3		 ret	 0
  00b37	90		 npad	 1
$LN31@MR475_gain:
  00b38	04 00 00 00	 DD	 4
  00b3c	00 00 00 00	 DD	 $LN30@MR475_gain
$LN30@MR475_gain:
  00b40	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00b44	02 00 00 00	 DD	 2
  00b48	00 00 00 00	 DD	 $LN26@MR475_gain
  00b4c	54 ff ff ff	 DD	 -172			; ffffff54H
  00b50	14 00 00 00	 DD	 20			; 00000014H
  00b54	00 00 00 00	 DD	 $LN27@MR475_gain
  00b58	38 ff ff ff	 DD	 -200			; ffffff38H
  00b5c	14 00 00 00	 DD	 20			; 00000014H
  00b60	00 00 00 00	 DD	 $LN28@MR475_gain
  00b64	1c ff ff ff	 DD	 -228			; ffffff1cH
  00b68	14 00 00 00	 DD	 20			; 00000014H
  00b6c	00 00 00 00	 DD	 $LN29@MR475_gain
$LN29@MR475_gain:
  00b70	65		 DB	 101			; 00000065H
  00b71	78		 DB	 120			; 00000078H
  00b72	70		 DB	 112			; 00000070H
  00b73	5f		 DB	 95			; 0000005fH
  00b74	6d		 DB	 109			; 0000006dH
  00b75	61		 DB	 97			; 00000061H
  00b76	78		 DB	 120			; 00000078H
  00b77	00		 DB	 0
$LN28@MR475_gain:
  00b78	63		 DB	 99			; 00000063H
  00b79	6f		 DB	 111			; 0000006fH
  00b7a	65		 DB	 101			; 00000065H
  00b7b	66		 DB	 102			; 00000066H
  00b7c	66		 DB	 102			; 00000066H
  00b7d	5f		 DB	 95			; 0000005fH
  00b7e	6c		 DB	 108			; 0000006cH
  00b7f	6f		 DB	 111			; 0000006fH
  00b80	00		 DB	 0
$LN27@MR475_gain:
  00b81	63		 DB	 99			; 00000063H
  00b82	6f		 DB	 111			; 0000006fH
  00b83	65		 DB	 101			; 00000065H
  00b84	66		 DB	 102			; 00000066H
  00b85	66		 DB	 102			; 00000066H
  00b86	00		 DB	 0
$LN26@MR475_gain:
  00b87	73		 DB	 115			; 00000073H
  00b88	66		 DB	 102			; 00000066H
  00b89	30		 DB	 48			; 00000030H
  00b8a	5f		 DB	 95			; 0000005fH
  00b8b	67		 DB	 103			; 00000067H
  00b8c	63		 DB	 99			; 00000063H
  00b8d	6f		 DB	 111			; 0000006fH
  00b8e	64		 DB	 100			; 00000064H
  00b8f	65		 DB	 101			; 00000065H
  00b90	30		 DB	 48			; 00000030H
  00b91	00		 DB	 0
_MR475_gain_quant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\qgain475.c
;	COMDAT _MR475_update_unq_pred
_TEXT	SEGMENT
_L_tmp$ = -68						; size = 4
_qua_ener_MR122$ = -56					; size = 2
_qua_ener$ = -44					; size = 2
_frac$ = -32						; size = 2
_exp$ = -20						; size = 2
_tmp$ = -8						; size = 2
_pred_st$ = 8						; size = 4
_exp_gcode0$ = 12					; size = 2
_frac_gcode0$ = 16					; size = 2
_cod_gain_exp$ = 20					; size = 2
_cod_gain_frac$ = 24					; size = 2
_MR475_update_unq_pred PROC				; COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 137  :     Word16 tmp, exp, frac;
; 138  :     Word16 qua_ener, qua_ener_MR122;
; 139  :     Word32 L_tmp;
; 140  : 
; 141  :     /* calculate prediction error factor (given optimum CB gain gcu):
; 142  :      *
; 143  :      *   predErrFact = gcu / gcode0
; 144  :      *   (limit to MIN_PRED_ERR_FACT <= predErrFact <= MAX_PRED_ERR_FACT
; 145  :      *    -> limit qua_ener*)
; 146  :      *
; 147  :      * calculate prediction error (log):
; 148  :      *
; 149  :      *   qua_ener_MR122 = log2(predErrFact)
; 150  :      *   qua_ener       = 20*log10(predErrFact)
; 151  :      *
; 152  :      */
; 153  : 
; 154  :     if (test(), cod_gain_frac <= 0)

  0001e	e8 00 00 00 00	 call	 _test
  00023	0f bf 45 18	 movsx	 eax, WORD PTR _cod_gain_frac$[ebp]
  00027	85 c0		 test	 eax, eax
  00029	7f 21		 jg	 SHORT $LN7@MR475_upda

; 155  :     {
; 156  :         /* if gcu <= 0 -> predErrFact = 0 < MIN_PRED_ERR_FACT */
; 157  :         /* -> set qua_ener(_MR122) directly                   */
; 158  :         qua_ener = MIN_QUA_ENER;             move16 ();

  0002b	b8 bd ea ff ff	 mov	 eax, -5443		; ffffeabdH
  00030	66 89 45 d4	 mov	 WORD PTR _qua_ener$[ebp], ax
  00034	e8 00 00 00 00	 call	 _move16

; 159  :         qua_ener_MR122 = MIN_QUA_ENER_MR122; move16 ();

  00039	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H
  0003e	66 89 45 c8	 mov	 WORD PTR _qua_ener_MR122$[ebp], ax
  00042	e8 00 00 00 00	 call	 _move16

; 160  :     }
; 161  :     else

  00047	e9 b2 01 00 00	 jmp	 $LN6@MR475_upda
$LN7@MR475_upda:

; 162  :     {
; 163  :         /* convert gcode0 from DPF to standard fraction/exponent format */
; 164  :         /* with normalized frac, i.e. 16384 <= frac <= 32767            */
; 165  :         /* Note: exponent correction (exp=exp-14) is done after div_s   */
; 166  :         frac_gcode0 = extract_l (Pow2 (14, frac_gcode0));

  0004c	0f b7 45 10	 movzx	 eax, WORD PTR _frac_gcode0$[ebp]
  00050	50		 push	 eax
  00051	6a 0e		 push	 14			; 0000000eH
  00053	e8 00 00 00 00	 call	 _Pow2
  00058	83 c4 08	 add	 esp, 8
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _extract_l
  00061	83 c4 04	 add	 esp, 4
  00064	66 89 45 10	 mov	 WORD PTR _frac_gcode0$[ebp], ax

; 167  : 
; 168  :         /* make sure cod_gain_frac < frac_gcode0  for div_s */
; 169  :         if (test (), sub(cod_gain_frac, frac_gcode0) >= 0)

  00068	e8 00 00 00 00	 call	 _test
  0006d	0f b7 45 10	 movzx	 eax, WORD PTR _frac_gcode0$[ebp]
  00071	50		 push	 eax
  00072	0f b7 4d 18	 movzx	 ecx, WORD PTR _cod_gain_frac$[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 _sub
  0007c	83 c4 08	 add	 esp, 8
  0007f	0f bf d0	 movsx	 edx, ax
  00082	85 d2		 test	 edx, edx
  00084	7c 26		 jl	 SHORT $LN5@MR475_upda

; 170  :         {
; 171  :             cod_gain_frac = shr (cod_gain_frac, 1);

  00086	6a 01		 push	 1
  00088	0f b7 45 18	 movzx	 eax, WORD PTR _cod_gain_frac$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _shr
  00092	83 c4 08	 add	 esp, 8
  00095	66 89 45 18	 mov	 WORD PTR _cod_gain_frac$[ebp], ax

; 172  :             cod_gain_exp = add (cod_gain_exp, 1);

  00099	6a 01		 push	 1
  0009b	0f b7 45 14	 movzx	 eax, WORD PTR _cod_gain_exp$[ebp]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 _add
  000a5	83 c4 08	 add	 esp, 8
  000a8	66 89 45 14	 mov	 WORD PTR _cod_gain_exp$[ebp], ax
$LN5@MR475_upda:

; 173  :         }
; 174  : 
; 175  :         /*
; 176  :           predErrFact
; 177  :              = gcu / gcode0
; 178  :              = cod_gain_frac/frac_gcode0 * 2^(cod_gain_exp-(exp_gcode0-14))
; 179  :              = div_s (c_g_f, frac_gcode0)*2^-15 * 2^(c_g_e-exp_gcode0+14)
; 180  :              = div_s * 2^(cod_gain_exp-exp_gcode0 - 1)
; 181  :         */
; 182  :         frac = div_s (cod_gain_frac, frac_gcode0);

  000ac	0f b7 45 10	 movzx	 eax, WORD PTR _frac_gcode0$[ebp]
  000b0	50		 push	 eax
  000b1	0f b7 4d 18	 movzx	 ecx, WORD PTR _cod_gain_frac$[ebp]
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 _div_s
  000bb	83 c4 08	 add	 esp, 8
  000be	66 89 45 e0	 mov	 WORD PTR _frac$[ebp], ax

; 183  :         tmp = sub (sub (cod_gain_exp, exp_gcode0), 1);

  000c2	6a 01		 push	 1
  000c4	0f b7 45 0c	 movzx	 eax, WORD PTR _exp_gcode0$[ebp]
  000c8	50		 push	 eax
  000c9	0f b7 4d 14	 movzx	 ecx, WORD PTR _cod_gain_exp$[ebp]
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 _sub
  000d3	83 c4 08	 add	 esp, 8
  000d6	0f b7 d0	 movzx	 edx, ax
  000d9	52		 push	 edx
  000da	e8 00 00 00 00	 call	 _sub
  000df	83 c4 08	 add	 esp, 8
  000e2	66 89 45 f8	 mov	 WORD PTR _tmp$[ebp], ax

; 184  : 
; 185  :         Log2 (L_deposit_l (frac), &exp, &frac);

  000e6	8d 45 e0	 lea	 eax, DWORD PTR _frac$[ebp]
  000e9	50		 push	 eax
  000ea	8d 4d ec	 lea	 ecx, DWORD PTR _exp$[ebp]
  000ed	51		 push	 ecx
  000ee	0f b7 55 e0	 movzx	 edx, WORD PTR _frac$[ebp]
  000f2	52		 push	 edx
  000f3	e8 00 00 00 00	 call	 _L_deposit_l
  000f8	83 c4 04	 add	 esp, 4
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _Log2
  00101	83 c4 0c	 add	 esp, 12			; 0000000cH

; 186  :         exp = add (exp, tmp);

  00104	0f b7 45 f8	 movzx	 eax, WORD PTR _tmp$[ebp]
  00108	50		 push	 eax
  00109	0f b7 4d ec	 movzx	 ecx, WORD PTR _exp$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 _add
  00113	83 c4 08	 add	 esp, 8
  00116	66 89 45 ec	 mov	 WORD PTR _exp$[ebp], ax

; 187  : 
; 188  :         /* calculate prediction error (log2, Q10) */
; 189  :         qua_ener_MR122 = shr_r (frac, 5);

  0011a	6a 05		 push	 5
  0011c	0f b7 45 e0	 movzx	 eax, WORD PTR _frac$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 _shr_r
  00126	83 c4 08	 add	 esp, 8
  00129	66 89 45 c8	 mov	 WORD PTR _qua_ener_MR122$[ebp], ax

; 190  :         qua_ener_MR122 = add (qua_ener_MR122, shl (exp, 10));

  0012d	6a 0a		 push	 10			; 0000000aH
  0012f	0f b7 45 ec	 movzx	 eax, WORD PTR _exp$[ebp]
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _shl
  00139	83 c4 08	 add	 esp, 8
  0013c	0f b7 c8	 movzx	 ecx, ax
  0013f	51		 push	 ecx
  00140	0f b7 55 c8	 movzx	 edx, WORD PTR _qua_ener_MR122$[ebp]
  00144	52		 push	 edx
  00145	e8 00 00 00 00	 call	 _add
  0014a	83 c4 08	 add	 esp, 8
  0014d	66 89 45 c8	 mov	 WORD PTR _qua_ener_MR122$[ebp], ax

; 191  : 
; 192  :         if (test (), sub(qua_ener_MR122, MIN_QUA_ENER_MR122) < 0)

  00151	e8 00 00 00 00	 call	 _test
  00156	68 00 80 ff ff	 push	 -32768			; ffff8000H
  0015b	0f b7 45 c8	 movzx	 eax, WORD PTR _qua_ener_MR122$[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 _sub
  00165	83 c4 08	 add	 esp, 8
  00168	0f bf c8	 movsx	 ecx, ax
  0016b	85 c9		 test	 ecx, ecx
  0016d	7d 1e		 jge	 SHORT $LN4@MR475_upda

; 193  :         {
; 194  :             qua_ener = MIN_QUA_ENER;             move16 ();

  0016f	b8 bd ea ff ff	 mov	 eax, -5443		; ffffeabdH
  00174	66 89 45 d4	 mov	 WORD PTR _qua_ener$[ebp], ax
  00178	e8 00 00 00 00	 call	 _move16

; 195  :             qua_ener_MR122 = MIN_QUA_ENER_MR122; move16 ();

  0017d	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H
  00182	66 89 45 c8	 mov	 WORD PTR _qua_ener_MR122$[ebp], ax
  00186	e8 00 00 00 00	 call	 _move16
  0018b	eb 71		 jmp	 SHORT $LN6@MR475_upda
$LN4@MR475_upda:

; 196  :         }
; 197  :         else if (test (), sub(qua_ener_MR122, MAX_QUA_ENER_MR122) > 0)

  0018d	e8 00 00 00 00	 call	 _test
  00192	68 6c 47 00 00	 push	 18284			; 0000476cH
  00197	0f b7 45 c8	 movzx	 eax, WORD PTR _qua_ener_MR122$[ebp]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _sub
  001a1	83 c4 08	 add	 esp, 8
  001a4	0f bf c8	 movsx	 ecx, ax
  001a7	85 c9		 test	 ecx, ecx
  001a9	7e 1e		 jle	 SHORT $LN2@MR475_upda

; 198  :         {
; 199  :             qua_ener = MAX_QUA_ENER;             move16 ();

  001ab	b8 dd 0b 00 00	 mov	 eax, 3037		; 00000bddH
  001b0	66 89 45 d4	 mov	 WORD PTR _qua_ener$[ebp], ax
  001b4	e8 00 00 00 00	 call	 _move16

; 200  :             qua_ener_MR122 = MAX_QUA_ENER_MR122; move16 ();

  001b9	b8 6c 47 00 00	 mov	 eax, 18284		; 0000476cH
  001be	66 89 45 c8	 mov	 WORD PTR _qua_ener_MR122$[ebp], ax
  001c2	e8 00 00 00 00	 call	 _move16

; 201  :         }
; 202  :         else

  001c7	eb 35		 jmp	 SHORT $LN6@MR475_upda
$LN2@MR475_upda:

; 203  :         {
; 204  :             /* calculate prediction error (20*log10, Q10) */
; 205  :             L_tmp = Mpy_32_16(exp, frac, 24660);

  001c9	68 54 60 00 00	 push	 24660			; 00006054H
  001ce	0f b7 45 e0	 movzx	 eax, WORD PTR _frac$[ebp]
  001d2	50		 push	 eax
  001d3	0f b7 4d ec	 movzx	 ecx, WORD PTR _exp$[ebp]
  001d7	51		 push	 ecx
  001d8	e8 00 00 00 00	 call	 _Mpy_32_16
  001dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e0	89 45 bc	 mov	 DWORD PTR _L_tmp$[ebp], eax

; 206  :             /* 24660 Q12 ~= 6.0206 = 20*log10(2) */
; 207  :             qua_ener = round (L_shl (L_tmp, 13));

  001e3	6a 0d		 push	 13			; 0000000dH
  001e5	8b 45 bc	 mov	 eax, DWORD PTR _L_tmp$[ebp]
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 _L_shl
  001ee	83 c4 08	 add	 esp, 8
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 _round
  001f7	83 c4 04	 add	 esp, 4
  001fa	66 89 45 d4	 mov	 WORD PTR _qua_ener$[ebp], ax
$LN6@MR475_upda:

; 208  :             /* Q12 * Q0 = Q13 -> Q26 -> Q10     */
; 209  :         }
; 210  :     }
; 211  : 
; 212  :     /* update MA predictor memory */
; 213  :     gc_pred_update(pred_st, qua_ener_MR122, qua_ener);

  001fe	0f b7 45 d4	 movzx	 eax, WORD PTR _qua_ener$[ebp]
  00202	50		 push	 eax
  00203	0f b7 4d c8	 movzx	 ecx, WORD PTR _qua_ener_MR122$[ebp]
  00207	51		 push	 ecx
  00208	8b 55 08	 mov	 edx, DWORD PTR _pred_st$[ebp]
  0020b	52		 push	 edx
  0020c	e8 00 00 00 00	 call	 _gc_pred_update
  00211	83 c4 0c	 add	 esp, 12			; 0000000cH

; 214  : }

  00214	52		 push	 edx
  00215	8b cd		 mov	 ecx, ebp
  00217	50		 push	 eax
  00218	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@MR475_upda
  0021e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00223	58		 pop	 eax
  00224	5a		 pop	 edx
  00225	5f		 pop	 edi
  00226	5e		 pop	 esi
  00227	5b		 pop	 ebx
  00228	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  0022e	3b ec		 cmp	 ebp, esp
  00230	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00235	8b e5		 mov	 esp, ebp
  00237	5d		 pop	 ebp
  00238	c3		 ret	 0
  00239	8d 49 00	 npad	 3
$LN13@MR475_upda:
  0023c	02 00 00 00	 DD	 2
  00240	00 00 00 00	 DD	 $LN12@MR475_upda
$LN12@MR475_upda:
  00244	ec ff ff ff	 DD	 -20			; ffffffecH
  00248	02 00 00 00	 DD	 2
  0024c	00 00 00 00	 DD	 $LN10@MR475_upda
  00250	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00254	02 00 00 00	 DD	 2
  00258	00 00 00 00	 DD	 $LN11@MR475_upda
$LN11@MR475_upda:
  0025c	66		 DB	 102			; 00000066H
  0025d	72		 DB	 114			; 00000072H
  0025e	61		 DB	 97			; 00000061H
  0025f	63		 DB	 99			; 00000063H
  00260	00		 DB	 0
$LN10@MR475_upda:
  00261	65		 DB	 101			; 00000065H
  00262	78		 DB	 120			; 00000078H
  00263	70		 DB	 112			; 00000070H
  00264	00		 DB	 0
_MR475_update_unq_pred ENDP
_TEXT	ENDS
END
