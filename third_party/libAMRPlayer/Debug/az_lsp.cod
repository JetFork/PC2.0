; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\az_lsp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_az_lsp_id
CONST	SEGMENT
_az_lsp_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_grid	DW	07ff8H
	DW	07fd3H
	DW	07f4cH
	DW	07e6cH
	DW	07d33H
	DW	07ba3H
	DW	079bcH
	DW	0777fH
	DW	074efH
	DW	0720cH
	DW	06ed9H
	DW	06b59H
	DW	0678dH
	DW	06379H
	DW	05f1fH
	DW	05a82H
	DW	055a6H
	DW	0508dH
	DW	04b3cH
	DW	045b6H
	DW	04000H
	DW	03a1cH
	DW	0340fH
	DW	02ddfH
	DW	0278dH
	DW	02120H
	DW	01a9cH
	DW	01406H
	DW	0d61H
	DW	06b2H
	DW	00H
	DW	0f94eH
	DW	0f29fH
	DW	0ebfaH
	DW	0e564H
	DW	0dee0H
	DW	0d873H
	DW	0d221H
	DW	0cbf1H
	DW	0c5e4H
	DW	0c000H
	DW	0ba4aH
	DW	0b4c4H
	DW	0af73H
	DW	0aa5aH
	DW	0a57eH
	DW	0a0e1H
	DW	09c87H
	DW	09873H
	DW	094a7H
	DW	09127H
	DW	08df4H
	DW	08b11H
	DW	08881H
	DW	08644H
	DW	0845dH
	DW	082cdH
	DW	08194H
	DW	080b4H
	DW	0802dH
	DW	08008H
CONST	ENDS
PUBLIC	_Az_lsp
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_abs_s:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_L_mult:PROC
EXTRN	_negate:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_msu:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr:PROC
EXTRN	_norm_s:PROC
EXTRN	_div_s:PROC
EXTRN	_L_Extract:PROC
EXTRN	_Mpy_32_16:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\az_lsp.c
;	COMDAT _Chebps
_TEXT	SEGMENT
_t0$ = -104						; size = 4
_b2_l$ = -92						; size = 2
_b2_h$ = -80						; size = 2
_b1_l$ = -68						; size = 2
_b1_h$ = -56						; size = 2
_b0_l$ = -44						; size = 2
_b0_h$ = -32						; size = 2
_cheb$ = -20						; size = 2
_i$ = -8						; size = 2
_x$ = 8							; size = 2
_f$ = 12						; size = 4
_n$ = 16						; size = 2
_Chebps	PROC						; COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 66   :     Word16 i, cheb;
; 67   :     Word16 b0_h, b0_l, b1_h, b1_l, b2_h, b2_l;
; 68   :     Word32 t0;
; 69   : 
; 70   :     b2_h = 256;                    move16 (); /* b2 = 1.0 */

  0001e	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00023	66 89 45 b0	 mov	 WORD PTR _b2_h$[ebp], ax
  00027	e8 00 00 00 00	 call	 _move16

; 71   :     b2_l = 0;                      move16 (); 

  0002c	33 c0		 xor	 eax, eax
  0002e	66 89 45 a4	 mov	 WORD PTR _b2_l$[ebp], ax
  00032	e8 00 00 00 00	 call	 _move16

; 72   : 
; 73   :     t0 = L_mult (x, 512);          /* 2*x                 */

  00037	68 00 02 00 00	 push	 512			; 00000200H
  0003c	0f b7 45 08	 movzx	 eax, WORD PTR _x$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _L_mult
  00046	83 c4 08	 add	 esp, 8
  00049	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 74   :     t0 = L_mac (t0, f[1], 8192);   /* + f[1]              */

  0004c	68 00 20 00 00	 push	 8192			; 00002000H
  00051	b8 02 00 00 00	 mov	 eax, 2
  00056	c1 e0 00	 shl	 eax, 0
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  0005c	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00060	52		 push	 edx
  00061	8b 45 98	 mov	 eax, DWORD PTR _t0$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _L_mac
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 75   :     L_Extract (t0, &b1_h, &b1_l);  /* b1 = 2*x + f[1]     */

  00070	8d 45 bc	 lea	 eax, DWORD PTR _b1_l$[ebp]
  00073	50		 push	 eax
  00074	8d 4d c8	 lea	 ecx, DWORD PTR _b1_h$[ebp]
  00077	51		 push	 ecx
  00078	8b 55 98	 mov	 edx, DWORD PTR _t0$[ebp]
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 _L_Extract
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 76   : 
; 77   :     for (i = 2; i < n; i++)

  00084	b8 02 00 00 00	 mov	 eax, 2
  00089	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0008d	eb 0c		 jmp	 SHORT $LN3@Chebps
$LN2@Chebps:
  0008f	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00093	66 83 c0 01	 add	 ax, 1
  00097	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@Chebps:
  0009b	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0009f	0f bf 4d 10	 movsx	 ecx, WORD PTR _n$[ebp]
  000a3	3b c1		 cmp	 eax, ecx
  000a5	0f 8d c7 00 00
	00		 jge	 $LN1@Chebps

; 78   :     {
; 79   :         t0 = Mpy_32_16 (b1_h, b1_l, x);         /* t0 = 2.0*x*b1        */

  000ab	0f b7 45 08	 movzx	 eax, WORD PTR _x$[ebp]
  000af	50		 push	 eax
  000b0	0f b7 4d bc	 movzx	 ecx, WORD PTR _b1_l$[ebp]
  000b4	51		 push	 ecx
  000b5	0f b7 55 c8	 movzx	 edx, WORD PTR _b1_h$[ebp]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 _Mpy_32_16
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c2	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 80   :         t0 = L_shl (t0, 1);

  000c5	6a 01		 push	 1
  000c7	8b 45 98	 mov	 eax, DWORD PTR _t0$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _L_shl
  000d0	83 c4 08	 add	 esp, 8
  000d3	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 81   :         t0 = L_mac (t0, b2_h, (Word16) 0x8000); /* t0 = 2.0*x*b1 - b2   */

  000d6	68 00 80 ff ff	 push	 -32768			; ffff8000H
  000db	0f b7 45 b0	 movzx	 eax, WORD PTR _b2_h$[ebp]
  000df	50		 push	 eax
  000e0	8b 4d 98	 mov	 ecx, DWORD PTR _t0$[ebp]
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 _L_mac
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ec	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 82   :         t0 = L_msu (t0, b2_l, 1);

  000ef	6a 01		 push	 1
  000f1	0f b7 45 a4	 movzx	 eax, WORD PTR _b2_l$[ebp]
  000f5	50		 push	 eax
  000f6	8b 4d 98	 mov	 ecx, DWORD PTR _t0$[ebp]
  000f9	51		 push	 ecx
  000fa	e8 00 00 00 00	 call	 _L_msu
  000ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00102	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 83   :         t0 = L_mac (t0, f[i], 8192);            /* t0 = 2.0*x*b1 - b2 + f[i] */

  00105	68 00 20 00 00	 push	 8192			; 00002000H
  0010a	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  00111	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00115	52		 push	 edx
  00116	8b 45 98	 mov	 eax, DWORD PTR _t0$[ebp]
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 _L_mac
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00122	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 84   : 
; 85   :         L_Extract (t0, &b0_h, &b0_l);           /* b0 = 2.0*x*b1 - b2 + f[i]*/

  00125	8d 45 d4	 lea	 eax, DWORD PTR _b0_l$[ebp]
  00128	50		 push	 eax
  00129	8d 4d e0	 lea	 ecx, DWORD PTR _b0_h$[ebp]
  0012c	51		 push	 ecx
  0012d	8b 55 98	 mov	 edx, DWORD PTR _t0$[ebp]
  00130	52		 push	 edx
  00131	e8 00 00 00 00	 call	 _L_Extract
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH

; 86   : 
; 87   :         b2_l = b1_l;               move16 ();   /* b2 = b1; */

  00139	66 8b 45 bc	 mov	 ax, WORD PTR _b1_l$[ebp]
  0013d	66 89 45 a4	 mov	 WORD PTR _b2_l$[ebp], ax
  00141	e8 00 00 00 00	 call	 _move16

; 88   :         b2_h = b1_h;               move16 (); 

  00146	66 8b 45 c8	 mov	 ax, WORD PTR _b1_h$[ebp]
  0014a	66 89 45 b0	 mov	 WORD PTR _b2_h$[ebp], ax
  0014e	e8 00 00 00 00	 call	 _move16

; 89   :         b1_l = b0_l;               move16 ();   /* b1 = b0; */

  00153	66 8b 45 d4	 mov	 ax, WORD PTR _b0_l$[ebp]
  00157	66 89 45 bc	 mov	 WORD PTR _b1_l$[ebp], ax
  0015b	e8 00 00 00 00	 call	 _move16

; 90   :         b1_h = b0_h;               move16 (); 

  00160	66 8b 45 e0	 mov	 ax, WORD PTR _b0_h$[ebp]
  00164	66 89 45 c8	 mov	 WORD PTR _b1_h$[ebp], ax
  00168	e8 00 00 00 00	 call	 _move16

; 91   :     }

  0016d	e9 1d ff ff ff	 jmp	 $LN2@Chebps
$LN1@Chebps:

; 92   : 
; 93   :     t0 = Mpy_32_16 (b1_h, b1_l, x);             /* t0 = x*b1; */

  00172	0f b7 45 08	 movzx	 eax, WORD PTR _x$[ebp]
  00176	50		 push	 eax
  00177	0f b7 4d bc	 movzx	 ecx, WORD PTR _b1_l$[ebp]
  0017b	51		 push	 ecx
  0017c	0f b7 55 c8	 movzx	 edx, WORD PTR _b1_h$[ebp]
  00180	52		 push	 edx
  00181	e8 00 00 00 00	 call	 _Mpy_32_16
  00186	83 c4 0c	 add	 esp, 12			; 0000000cH
  00189	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 94   :     t0 = L_mac (t0, b2_h, (Word16) 0x8000);     /* t0 = x*b1 - b2   */

  0018c	68 00 80 ff ff	 push	 -32768			; ffff8000H
  00191	0f b7 45 b0	 movzx	 eax, WORD PTR _b2_h$[ebp]
  00195	50		 push	 eax
  00196	8b 4d 98	 mov	 ecx, DWORD PTR _t0$[ebp]
  00199	51		 push	 ecx
  0019a	e8 00 00 00 00	 call	 _L_mac
  0019f	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a2	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 95   :     t0 = L_msu (t0, b2_l, 1);

  001a5	6a 01		 push	 1
  001a7	0f b7 45 a4	 movzx	 eax, WORD PTR _b2_l$[ebp]
  001ab	50		 push	 eax
  001ac	8b 4d 98	 mov	 ecx, DWORD PTR _t0$[ebp]
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 _L_msu
  001b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b8	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 96   :     t0 = L_mac (t0, f[i], 4096);                /* t0 = x*b1 - b2 + f[i]/2 */

  001bb	68 00 10 00 00	 push	 4096			; 00001000H
  001c0	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  001c4	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  001c7	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  001cb	52		 push	 edx
  001cc	8b 45 98	 mov	 eax, DWORD PTR _t0$[ebp]
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 _L_mac
  001d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d8	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 97   : 
; 98   :     t0 = L_shl (t0, 6);

  001db	6a 06		 push	 6
  001dd	8b 45 98	 mov	 eax, DWORD PTR _t0$[ebp]
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 _L_shl
  001e6	83 c4 08	 add	 esp, 8
  001e9	89 45 98	 mov	 DWORD PTR _t0$[ebp], eax

; 99   : 
; 100  :     cheb = extract_h (t0);

  001ec	8b 45 98	 mov	 eax, DWORD PTR _t0$[ebp]
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 _extract_h
  001f5	83 c4 04	 add	 esp, 4
  001f8	66 89 45 ec	 mov	 WORD PTR _cheb$[ebp], ax

; 101  : 
; 102  :     return (cheb);

  001fc	66 8b 45 ec	 mov	 ax, WORD PTR _cheb$[ebp]

; 103  : }

  00200	52		 push	 edx
  00201	8b cd		 mov	 ecx, ebp
  00203	50		 push	 eax
  00204	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Chebps
  0020a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0020f	58		 pop	 eax
  00210	5a		 pop	 edx
  00211	5f		 pop	 edi
  00212	5e		 pop	 esi
  00213	5b		 pop	 ebx
  00214	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  0021a	3b ec		 cmp	 ebp, esp
  0021c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c3		 ret	 0
  00225	8d 49 00	 npad	 3
$LN11@Chebps:
  00228	04 00 00 00	 DD	 4
  0022c	00 00 00 00	 DD	 $LN10@Chebps
$LN10@Chebps:
  00230	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00234	02 00 00 00	 DD	 2
  00238	00 00 00 00	 DD	 $LN6@Chebps
  0023c	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00240	02 00 00 00	 DD	 2
  00244	00 00 00 00	 DD	 $LN7@Chebps
  00248	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0024c	02 00 00 00	 DD	 2
  00250	00 00 00 00	 DD	 $LN8@Chebps
  00254	bc ff ff ff	 DD	 -68			; ffffffbcH
  00258	02 00 00 00	 DD	 2
  0025c	00 00 00 00	 DD	 $LN9@Chebps
$LN9@Chebps:
  00260	62		 DB	 98			; 00000062H
  00261	31		 DB	 49			; 00000031H
  00262	5f		 DB	 95			; 0000005fH
  00263	6c		 DB	 108			; 0000006cH
  00264	00		 DB	 0
$LN8@Chebps:
  00265	62		 DB	 98			; 00000062H
  00266	31		 DB	 49			; 00000031H
  00267	5f		 DB	 95			; 0000005fH
  00268	68		 DB	 104			; 00000068H
  00269	00		 DB	 0
$LN7@Chebps:
  0026a	62		 DB	 98			; 00000062H
  0026b	30		 DB	 48			; 00000030H
  0026c	5f		 DB	 95			; 0000005fH
  0026d	6c		 DB	 108			; 0000006cH
  0026e	00		 DB	 0
$LN6@Chebps:
  0026f	62		 DB	 98			; 00000062H
  00270	30		 DB	 48			; 00000030H
  00271	5f		 DB	 95			; 0000005fH
  00272	68		 DB	 104			; 00000068H
  00273	00		 DB	 0
_Chebps	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\az_lsp.c
;	COMDAT _Az_lsp
_TEXT	SEGMENT
_t0$ = -244						; size = 4
_f2$ = -232						; size = 12
_f1$ = -212						; size = 12
_coef$ = -192						; size = 4
_exp$ = -180						; size = 2
_sign$ = -168						; size = 2
_y$ = -156						; size = 2
_x$ = -144						; size = 2
_xint$ = -132						; size = 2
_ymid$ = -120						; size = 2
_xmid$ = -108						; size = 2
_yhigh$ = -96						; size = 2
_xhigh$ = -84						; size = 2
_ylow$ = -72						; size = 2
_xlow$ = -60						; size = 2
_ip$ = -48						; size = 2
_nf$ = -36						; size = 2
_j$ = -24						; size = 2
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_lsp$ = 12						; size = 4
_old_lsp$ = 16						; size = 4
_Az_lsp	PROC						; COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 01 00
	00		 sub	 esp, 440		; 000001b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 48 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-440]
  00012	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 124  :     Word16 i, j, nf, ip;
; 125  :     Word16 xlow, ylow, xhigh, yhigh, xmid, ymid, xint;
; 126  :     Word16 x, y, sign, exp;
; 127  :     Word16 *coef;
; 128  :     Word16 f1[M / 2 + 1], f2[M / 2 + 1];
; 129  :     Word32 t0;
; 130  : 
; 131  :     /*-------------------------------------------------------------*
; 132  :      *  find the sum and diff. pol. F1(z) and F2(z)                *
; 133  :      *    F1(z) <--- F1(z)/(1+z**-1) & F2(z) <--- F2(z)/(1-z**-1)  *
; 134  :      *                                                             *
; 135  :      * f1[0] = 1.0;                                                *
; 136  :      * f2[0] = 1.0;                                                *
; 137  :      *                                                             *
; 138  :      * for (i = 0; i< NC; i++)                                     *
; 139  :      * {                                                           *
; 140  :      *   f1[i+1] = a[i+1] + a[M-i] - f1[i] ;                       *
; 141  :      *   f2[i+1] = a[i+1] - a[M-i] + f2[i] ;                       *
; 142  :      * }                                                           *
; 143  :      *-------------------------------------------------------------*/
; 144  : 
; 145  :     f1[0] = 1024;                  move16 (); /* f1[0] = 1.0 */

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00035	66 89 94 0d 2c
	ff ff ff	 mov	 WORD PTR _f1$[ebp+ecx], dx
  0003d	e8 00 00 00 00	 call	 _move16

; 146  :     f2[0] = 1024;                  move16 (); /* f2[0] = 1.0 */

  00042	b8 02 00 00 00	 mov	 eax, 2
  00047	6b c8 00	 imul	 ecx, eax, 0
  0004a	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0004f	66 89 94 0d 18
	ff ff ff	 mov	 WORD PTR _f2$[ebp+ecx], dx
  00057	e8 00 00 00 00	 call	 _move16

; 147  : 
; 148  :     for (i = 0; i < NC; i++)

  0005c	33 c0		 xor	 eax, eax
  0005e	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00062	eb 0c		 jmp	 SHORT $LN20@Az_lsp
$LN19@Az_lsp:
  00064	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00068	66 83 c0 01	 add	 ax, 1
  0006c	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN20@Az_lsp:
  00070	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00074	83 f8 05	 cmp	 eax, 5
  00077	0f 8d 27 01 00
	00		 jge	 $LN18@Az_lsp

; 149  :     {
; 150  :         t0 = L_mult (a[i + 1], 8192);   /* x = (a[i+1] + a[M-i]) >> 2  */

  0007d	68 00 20 00 00	 push	 8192			; 00002000H
  00082	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00089	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 _L_mult
  00094	83 c4 08	 add	 esp, 8
  00097	89 85 0c ff ff
	ff		 mov	 DWORD PTR _t0$[ebp], eax

; 151  :         t0 = L_mac (t0, a[M - i], 8192);

  0009d	68 00 20 00 00	 push	 8192			; 00002000H
  000a2	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000a6	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000ab	2b c8		 sub	 ecx, eax
  000ad	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000b0	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  000b4	50		 push	 eax
  000b5	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _t0$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _L_mac
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c4	89 85 0c ff ff
	ff		 mov	 DWORD PTR _t0$[ebp], eax

; 152  :         x = extract_h (t0);

  000ca	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _t0$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _extract_h
  000d6	83 c4 04	 add	 esp, 4
  000d9	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _x$[ebp], ax

; 153  :         /* f1[i+1] = a[i+1] + a[M-i] - f1[i] */
; 154  :         f1[i + 1] = sub (x, f1[i]);move16 (); 

  000e0	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000e4	0f b7 8c 45 2c
	ff ff ff	 movzx	 ecx, WORD PTR _f1$[ebp+eax*2]
  000ec	51		 push	 ecx
  000ed	0f b7 95 70 ff
	ff ff		 movzx	 edx, WORD PTR _x$[ebp]
  000f4	52		 push	 edx
  000f5	e8 00 00 00 00	 call	 _sub
  000fa	83 c4 08	 add	 esp, 8
  000fd	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00101	66 89 84 4d 2e
	ff ff ff	 mov	 WORD PTR _f1$[ebp+ecx*2+2], ax
  00109	e8 00 00 00 00	 call	 _move16

; 155  : 
; 156  :         t0 = L_mult (a[i + 1], 8192);   /* x = (a[i+1] - a[M-i]) >> 2 */

  0010e	68 00 20 00 00	 push	 8192			; 00002000H
  00113	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00117	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0011a	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 _L_mult
  00125	83 c4 08	 add	 esp, 8
  00128	89 85 0c ff ff
	ff		 mov	 DWORD PTR _t0$[ebp], eax

; 157  :         t0 = L_msu (t0, a[M - i], 8192);

  0012e	68 00 20 00 00	 push	 8192			; 00002000H
  00133	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00137	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0013c	2b c8		 sub	 ecx, eax
  0013e	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00141	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00145	50		 push	 eax
  00146	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _t0$[ebp]
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 _L_msu
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
  00155	89 85 0c ff ff
	ff		 mov	 DWORD PTR _t0$[ebp], eax

; 158  :         x = extract_h (t0);

  0015b	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _t0$[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 _extract_h
  00167	83 c4 04	 add	 esp, 4
  0016a	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _x$[ebp], ax

; 159  :         /* f2[i+1] = a[i+1] - a[M-i] + f2[i] */
; 160  :         f2[i + 1] = add (x, f2[i]);move16 (); 

  00171	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00175	0f b7 8c 45 18
	ff ff ff	 movzx	 ecx, WORD PTR _f2$[ebp+eax*2]
  0017d	51		 push	 ecx
  0017e	0f b7 95 70 ff
	ff ff		 movzx	 edx, WORD PTR _x$[ebp]
  00185	52		 push	 edx
  00186	e8 00 00 00 00	 call	 _add
  0018b	83 c4 08	 add	 esp, 8
  0018e	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00192	66 89 84 4d 1a
	ff ff ff	 mov	 WORD PTR _f2$[ebp+ecx*2+2], ax
  0019a	e8 00 00 00 00	 call	 _move16

; 161  :     }

  0019f	e9 c0 fe ff ff	 jmp	 $LN19@Az_lsp
$LN18@Az_lsp:

; 162  : 
; 163  :     /*-------------------------------------------------------------*
; 164  :      * find the LSPs using the Chebychev pol. evaluation           *
; 165  :      *-------------------------------------------------------------*/
; 166  : 
; 167  :     nf = 0;                        move16 (); /* number of found frequencies */

  001a4	33 c0		 xor	 eax, eax
  001a6	66 89 45 dc	 mov	 WORD PTR _nf$[ebp], ax
  001aa	e8 00 00 00 00	 call	 _move16

; 168  :     ip = 0;                        move16 (); /* indicator for f1 or f2      */

  001af	33 c0		 xor	 eax, eax
  001b1	66 89 45 d0	 mov	 WORD PTR _ip$[ebp], ax
  001b5	e8 00 00 00 00	 call	 _move16

; 169  : 
; 170  :     coef = f1;                     move16 (); 

  001ba	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _f1$[ebp]
  001c0	89 85 40 ff ff
	ff		 mov	 DWORD PTR _coef$[ebp], eax
  001c6	e8 00 00 00 00	 call	 _move16

; 171  : 
; 172  :     xlow = grid[0];                move16 (); 

  001cb	b8 02 00 00 00	 mov	 eax, 2
  001d0	6b c8 00	 imul	 ecx, eax, 0
  001d3	66 8b 91 00 00
	00 00		 mov	 dx, WORD PTR _grid[ecx]
  001da	66 89 55 c4	 mov	 WORD PTR _xlow$[ebp], dx
  001de	e8 00 00 00 00	 call	 _move16

; 173  :     ylow = Chebps (xlow, coef, NC);move16 (); 

  001e3	6a 05		 push	 5
  001e5	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _coef$[ebp]
  001eb	50		 push	 eax
  001ec	0f b7 4d c4	 movzx	 ecx, WORD PTR _xlow$[ebp]
  001f0	51		 push	 ecx
  001f1	e8 00 00 00 00	 call	 _Chebps
  001f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f9	66 89 45 b8	 mov	 WORD PTR _ylow$[ebp], ax
  001fd	e8 00 00 00 00	 call	 _move16

; 174  : 
; 175  :     j = 0;

  00202	33 c0		 xor	 eax, eax
  00204	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax

; 176  :     test (); test (); 

  00208	e8 00 00 00 00	 call	 _test
  0020d	e8 00 00 00 00	 call	 _test
$LN17@Az_lsp:

; 177  :     /* while ( (nf < M) && (j < grid_points) ) */
; 178  :     while ((sub (nf, M) < 0) && (sub (j, grid_points) < 0))

  00212	6a 0a		 push	 10			; 0000000aH
  00214	0f b7 45 dc	 movzx	 eax, WORD PTR _nf$[ebp]
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 _sub
  0021e	83 c4 08	 add	 esp, 8
  00221	0f bf c8	 movsx	 ecx, ax
  00224	85 c9		 test	 ecx, ecx
  00226	0f 8d b8 03 00
	00		 jge	 $LN16@Az_lsp
  0022c	6a 3c		 push	 60			; 0000003cH
  0022e	0f b7 45 e8	 movzx	 eax, WORD PTR _j$[ebp]
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 _sub
  00238	83 c4 08	 add	 esp, 8
  0023b	0f bf c8	 movsx	 ecx, ax
  0023e	85 c9		 test	 ecx, ecx
  00240	0f 8d 9e 03 00
	00		 jge	 $LN16@Az_lsp

; 179  :     {
; 180  :         j++;

  00246	66 8b 45 e8	 mov	 ax, WORD PTR _j$[ebp]
  0024a	66 83 c0 01	 add	 ax, 1
  0024e	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax

; 181  :         xhigh = xlow;              move16 (); 

  00252	66 8b 45 c4	 mov	 ax, WORD PTR _xlow$[ebp]
  00256	66 89 45 ac	 mov	 WORD PTR _xhigh$[ebp], ax
  0025a	e8 00 00 00 00	 call	 _move16

; 182  :         yhigh = ylow;              move16 (); 

  0025f	66 8b 45 b8	 mov	 ax, WORD PTR _ylow$[ebp]
  00263	66 89 45 a0	 mov	 WORD PTR _yhigh$[ebp], ax
  00267	e8 00 00 00 00	 call	 _move16

; 183  :         xlow = grid[j];            move16 (); 

  0026c	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  00270	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _grid[eax*2]
  00278	66 89 4d c4	 mov	 WORD PTR _xlow$[ebp], cx
  0027c	e8 00 00 00 00	 call	 _move16

; 184  :         ylow = Chebps (xlow, coef, NC);

  00281	6a 05		 push	 5
  00283	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _coef$[ebp]
  00289	50		 push	 eax
  0028a	0f b7 4d c4	 movzx	 ecx, WORD PTR _xlow$[ebp]
  0028e	51		 push	 ecx
  0028f	e8 00 00 00 00	 call	 _Chebps
  00294	83 c4 0c	 add	 esp, 12			; 0000000cH
  00297	66 89 45 b8	 mov	 WORD PTR _ylow$[ebp], ax

; 185  :                                    move16 (); 

  0029b	e8 00 00 00 00	 call	 _move16

; 186  : 
; 187  :         test (); 

  002a0	e8 00 00 00 00	 call	 _test

; 188  :         if (L_mult (ylow, yhigh) <= (Word32) 0L)

  002a5	0f b7 45 a0	 movzx	 eax, WORD PTR _yhigh$[ebp]
  002a9	50		 push	 eax
  002aa	0f b7 4d b8	 movzx	 ecx, WORD PTR _ylow$[ebp]
  002ae	51		 push	 ecx
  002af	e8 00 00 00 00	 call	 _L_mult
  002b4	83 c4 08	 add	 esp, 8
  002b7	85 c0		 test	 eax, eax
  002b9	0f 8f 16 03 00
	00		 jg	 $LN15@Az_lsp

; 189  :         {
; 190  : 
; 191  :             /* divide 4 times the interval */
; 192  : 
; 193  :             for (i = 0; i < 4; i++)

  002bf	33 c0		 xor	 eax, eax
  002c1	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  002c5	eb 0c		 jmp	 SHORT $LN14@Az_lsp
$LN13@Az_lsp:
  002c7	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  002cb	66 83 c0 01	 add	 ax, 1
  002cf	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN14@Az_lsp:
  002d3	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  002d7	83 f8 04	 cmp	 eax, 4
  002da	0f 8d a7 00 00
	00		 jge	 $LN12@Az_lsp

; 194  :             {
; 195  :                 /* xmid = (xlow + xhigh)/2 */
; 196  :                 xmid = add (shr (xlow, 1), shr (xhigh, 1));

  002e0	6a 01		 push	 1
  002e2	0f b7 45 ac	 movzx	 eax, WORD PTR _xhigh$[ebp]
  002e6	50		 push	 eax
  002e7	e8 00 00 00 00	 call	 _shr
  002ec	83 c4 08	 add	 esp, 8
  002ef	0f b7 c8	 movzx	 ecx, ax
  002f2	51		 push	 ecx
  002f3	6a 01		 push	 1
  002f5	0f b7 55 c4	 movzx	 edx, WORD PTR _xlow$[ebp]
  002f9	52		 push	 edx
  002fa	e8 00 00 00 00	 call	 _shr
  002ff	83 c4 08	 add	 esp, 8
  00302	0f b7 c0	 movzx	 eax, ax
  00305	50		 push	 eax
  00306	e8 00 00 00 00	 call	 _add
  0030b	83 c4 08	 add	 esp, 8
  0030e	66 89 45 94	 mov	 WORD PTR _xmid$[ebp], ax

; 197  :                 ymid = Chebps (xmid, coef, NC);

  00312	6a 05		 push	 5
  00314	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _coef$[ebp]
  0031a	50		 push	 eax
  0031b	0f b7 4d 94	 movzx	 ecx, WORD PTR _xmid$[ebp]
  0031f	51		 push	 ecx
  00320	e8 00 00 00 00	 call	 _Chebps
  00325	83 c4 0c	 add	 esp, 12			; 0000000cH
  00328	66 89 45 88	 mov	 WORD PTR _ymid$[ebp], ax

; 198  :                                    move16 (); 

  0032c	e8 00 00 00 00	 call	 _move16

; 199  : 
; 200  :                 test (); 

  00331	e8 00 00 00 00	 call	 _test

; 201  :                 if (L_mult (ylow, ymid) <= (Word32) 0L)

  00336	0f b7 45 88	 movzx	 eax, WORD PTR _ymid$[ebp]
  0033a	50		 push	 eax
  0033b	0f b7 4d b8	 movzx	 ecx, WORD PTR _ylow$[ebp]
  0033f	51		 push	 ecx
  00340	e8 00 00 00 00	 call	 _L_mult
  00345	83 c4 08	 add	 esp, 8
  00348	85 c0		 test	 eax, eax
  0034a	7f 1c		 jg	 SHORT $LN11@Az_lsp

; 202  :                 {
; 203  :                     yhigh = ymid;  move16 (); 

  0034c	66 8b 45 88	 mov	 ax, WORD PTR _ymid$[ebp]
  00350	66 89 45 a0	 mov	 WORD PTR _yhigh$[ebp], ax
  00354	e8 00 00 00 00	 call	 _move16

; 204  :                     xhigh = xmid;  move16 (); 

  00359	66 8b 45 94	 mov	 ax, WORD PTR _xmid$[ebp]
  0035d	66 89 45 ac	 mov	 WORD PTR _xhigh$[ebp], ax
  00361	e8 00 00 00 00	 call	 _move16

; 205  :                 }
; 206  :                 else

  00366	eb 1a		 jmp	 SHORT $LN10@Az_lsp
$LN11@Az_lsp:

; 207  :                 {
; 208  :                     ylow = ymid;   move16 (); 

  00368	66 8b 45 88	 mov	 ax, WORD PTR _ymid$[ebp]
  0036c	66 89 45 b8	 mov	 WORD PTR _ylow$[ebp], ax
  00370	e8 00 00 00 00	 call	 _move16

; 209  :                     xlow = xmid;   move16 (); 

  00375	66 8b 45 94	 mov	 ax, WORD PTR _xmid$[ebp]
  00379	66 89 45 c4	 mov	 WORD PTR _xlow$[ebp], ax
  0037d	e8 00 00 00 00	 call	 _move16
$LN10@Az_lsp:

; 210  :                 }
; 211  :             }

  00382	e9 40 ff ff ff	 jmp	 $LN13@Az_lsp
$LN12@Az_lsp:

; 212  : 
; 213  :             /*-------------------------------------------------------------*
; 214  :              * Linear interpolation                                        *
; 215  :              *    xint = xlow - ylow*(xhigh-xlow)/(yhigh-ylow);            *
; 216  :              *-------------------------------------------------------------*/
; 217  : 
; 218  :             x = sub (xhigh, xlow);

  00387	0f b7 45 c4	 movzx	 eax, WORD PTR _xlow$[ebp]
  0038b	50		 push	 eax
  0038c	0f b7 4d ac	 movzx	 ecx, WORD PTR _xhigh$[ebp]
  00390	51		 push	 ecx
  00391	e8 00 00 00 00	 call	 _sub
  00396	83 c4 08	 add	 esp, 8
  00399	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _x$[ebp], ax

; 219  :             y = sub (yhigh, ylow);

  003a0	0f b7 45 b8	 movzx	 eax, WORD PTR _ylow$[ebp]
  003a4	50		 push	 eax
  003a5	0f b7 4d a0	 movzx	 ecx, WORD PTR _yhigh$[ebp]
  003a9	51		 push	 ecx
  003aa	e8 00 00 00 00	 call	 _sub
  003af	83 c4 08	 add	 esp, 8
  003b2	66 89 85 64 ff
	ff ff		 mov	 WORD PTR _y$[ebp], ax

; 220  : 
; 221  :             test (); 

  003b9	e8 00 00 00 00	 call	 _test

; 222  :             if (y == 0)

  003be	0f bf 85 64 ff
	ff ff		 movsx	 eax, WORD PTR _y$[ebp]
  003c5	85 c0		 test	 eax, eax
  003c7	75 15		 jne	 SHORT $LN9@Az_lsp

; 223  :             {
; 224  :                 xint = xlow;       move16 (); 

  003c9	66 8b 45 c4	 mov	 ax, WORD PTR _xlow$[ebp]
  003cd	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _xint$[ebp], ax
  003d4	e8 00 00 00 00	 call	 _move16

; 225  :             }
; 226  :             else

  003d9	e9 5b 01 00 00	 jmp	 $LN8@Az_lsp
$LN9@Az_lsp:

; 227  :             {
; 228  :                 sign = y;          move16 (); 

  003de	66 8b 85 64 ff
	ff ff		 mov	 ax, WORD PTR _y$[ebp]
  003e5	66 89 85 58 ff
	ff ff		 mov	 WORD PTR _sign$[ebp], ax
  003ec	e8 00 00 00 00	 call	 _move16

; 229  :                 y = abs_s (y);

  003f1	0f b7 85 64 ff
	ff ff		 movzx	 eax, WORD PTR _y$[ebp]
  003f8	50		 push	 eax
  003f9	e8 00 00 00 00	 call	 _abs_s
  003fe	83 c4 04	 add	 esp, 4
  00401	66 89 85 64 ff
	ff ff		 mov	 WORD PTR _y$[ebp], ax

; 230  :                 exp = norm_s (y);

  00408	0f b7 85 64 ff
	ff ff		 movzx	 eax, WORD PTR _y$[ebp]
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 _norm_s
  00415	83 c4 04	 add	 esp, 4
  00418	66 89 85 4c ff
	ff ff		 mov	 WORD PTR _exp$[ebp], ax

; 231  :                 y = shl (y, exp);

  0041f	0f b7 85 4c ff
	ff ff		 movzx	 eax, WORD PTR _exp$[ebp]
  00426	50		 push	 eax
  00427	0f b7 8d 64 ff
	ff ff		 movzx	 ecx, WORD PTR _y$[ebp]
  0042e	51		 push	 ecx
  0042f	e8 00 00 00 00	 call	 _shl
  00434	83 c4 08	 add	 esp, 8
  00437	66 89 85 64 ff
	ff ff		 mov	 WORD PTR _y$[ebp], ax

; 232  :                 y = div_s ((Word16) 16383, y);

  0043e	0f b7 85 64 ff
	ff ff		 movzx	 eax, WORD PTR _y$[ebp]
  00445	50		 push	 eax
  00446	68 ff 3f 00 00	 push	 16383			; 00003fffH
  0044b	e8 00 00 00 00	 call	 _div_s
  00450	83 c4 08	 add	 esp, 8
  00453	66 89 85 64 ff
	ff ff		 mov	 WORD PTR _y$[ebp], ax

; 233  :                 t0 = L_mult (x, y);

  0045a	0f b7 85 64 ff
	ff ff		 movzx	 eax, WORD PTR _y$[ebp]
  00461	50		 push	 eax
  00462	0f b7 8d 70 ff
	ff ff		 movzx	 ecx, WORD PTR _x$[ebp]
  00469	51		 push	 ecx
  0046a	e8 00 00 00 00	 call	 _L_mult
  0046f	83 c4 08	 add	 esp, 8
  00472	89 85 0c ff ff
	ff		 mov	 DWORD PTR _t0$[ebp], eax

; 234  :                 t0 = L_shr (t0, sub (20, exp));

  00478	0f b7 85 4c ff
	ff ff		 movzx	 eax, WORD PTR _exp$[ebp]
  0047f	50		 push	 eax
  00480	6a 14		 push	 20			; 00000014H
  00482	e8 00 00 00 00	 call	 _sub
  00487	83 c4 08	 add	 esp, 8
  0048a	0f b7 c8	 movzx	 ecx, ax
  0048d	51		 push	 ecx
  0048e	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _t0$[ebp]
  00494	52		 push	 edx
  00495	e8 00 00 00 00	 call	 _L_shr
  0049a	83 c4 08	 add	 esp, 8
  0049d	89 85 0c ff ff
	ff		 mov	 DWORD PTR _t0$[ebp], eax

; 235  :                 y = extract_l (t0);     /* y= (xhigh-xlow)/(yhigh-ylow) */

  004a3	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _t0$[ebp]
  004a9	50		 push	 eax
  004aa	e8 00 00 00 00	 call	 _extract_l
  004af	83 c4 04	 add	 esp, 4
  004b2	66 89 85 64 ff
	ff ff		 mov	 WORD PTR _y$[ebp], ax

; 236  : 
; 237  :                 test (); 

  004b9	e8 00 00 00 00	 call	 _test

; 238  :                 if (sign < 0)

  004be	0f bf 85 58 ff
	ff ff		 movsx	 eax, WORD PTR _sign$[ebp]
  004c5	85 c0		 test	 eax, eax
  004c7	7d 17		 jge	 SHORT $LN7@Az_lsp

; 239  :                     y = negate (y);

  004c9	0f b7 85 64 ff
	ff ff		 movzx	 eax, WORD PTR _y$[ebp]
  004d0	50		 push	 eax
  004d1	e8 00 00 00 00	 call	 _negate
  004d6	83 c4 04	 add	 esp, 4
  004d9	66 89 85 64 ff
	ff ff		 mov	 WORD PTR _y$[ebp], ax
$LN7@Az_lsp:

; 240  : 
; 241  :                 t0 = L_mult (ylow, y);

  004e0	0f b7 85 64 ff
	ff ff		 movzx	 eax, WORD PTR _y$[ebp]
  004e7	50		 push	 eax
  004e8	0f b7 4d b8	 movzx	 ecx, WORD PTR _ylow$[ebp]
  004ec	51		 push	 ecx
  004ed	e8 00 00 00 00	 call	 _L_mult
  004f2	83 c4 08	 add	 esp, 8
  004f5	89 85 0c ff ff
	ff		 mov	 DWORD PTR _t0$[ebp], eax

; 242  :                 t0 = L_shr (t0, 11);

  004fb	6a 0b		 push	 11			; 0000000bH
  004fd	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _t0$[ebp]
  00503	50		 push	 eax
  00504	e8 00 00 00 00	 call	 _L_shr
  00509	83 c4 08	 add	 esp, 8
  0050c	89 85 0c ff ff
	ff		 mov	 DWORD PTR _t0$[ebp], eax

; 243  :                 xint = sub (xlow, extract_l (t0)); /* xint = xlow - ylow*y */

  00512	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _t0$[ebp]
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 _extract_l
  0051e	83 c4 04	 add	 esp, 4
  00521	0f b7 c8	 movzx	 ecx, ax
  00524	51		 push	 ecx
  00525	0f b7 55 c4	 movzx	 edx, WORD PTR _xlow$[ebp]
  00529	52		 push	 edx
  0052a	e8 00 00 00 00	 call	 _sub
  0052f	83 c4 08	 add	 esp, 8
  00532	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _xint$[ebp], ax
$LN8@Az_lsp:

; 244  :             }
; 245  : 
; 246  :             lsp[nf] = xint;        move16 (); 

  00539	0f bf 45 dc	 movsx	 eax, WORD PTR _nf$[ebp]
  0053d	8b 4d 0c	 mov	 ecx, DWORD PTR _lsp$[ebp]
  00540	66 8b 95 7c ff
	ff ff		 mov	 dx, WORD PTR _xint$[ebp]
  00547	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0054b	e8 00 00 00 00	 call	 _move16

; 247  :             xlow = xint;           move16 (); 

  00550	66 8b 85 7c ff
	ff ff		 mov	 ax, WORD PTR _xint$[ebp]
  00557	66 89 45 c4	 mov	 WORD PTR _xlow$[ebp], ax
  0055b	e8 00 00 00 00	 call	 _move16

; 248  :             nf++;

  00560	66 8b 45 dc	 mov	 ax, WORD PTR _nf$[ebp]
  00564	66 83 c0 01	 add	 ax, 1
  00568	66 89 45 dc	 mov	 WORD PTR _nf$[ebp], ax

; 249  : 
; 250  :             test (); 

  0056c	e8 00 00 00 00	 call	 _test

; 251  :             if (ip == 0)

  00571	0f bf 45 d0	 movsx	 eax, WORD PTR _ip$[ebp]
  00575	85 c0		 test	 eax, eax
  00577	75 21		 jne	 SHORT $LN6@Az_lsp

; 252  :             {
; 253  :                 ip = 1;            move16 (); 

  00579	b8 01 00 00 00	 mov	 eax, 1
  0057e	66 89 45 d0	 mov	 WORD PTR _ip$[ebp], ax
  00582	e8 00 00 00 00	 call	 _move16

; 254  :                 coef = f2;         move16 (); 

  00587	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _f2$[ebp]
  0058d	89 85 40 ff ff
	ff		 mov	 DWORD PTR _coef$[ebp], eax
  00593	e8 00 00 00 00	 call	 _move16

; 255  :             }
; 256  :             else

  00598	eb 1c		 jmp	 SHORT $LN5@Az_lsp
$LN6@Az_lsp:

; 257  :             {
; 258  :                 ip = 0;            move16 (); 

  0059a	33 c0		 xor	 eax, eax
  0059c	66 89 45 d0	 mov	 WORD PTR _ip$[ebp], ax
  005a0	e8 00 00 00 00	 call	 _move16

; 259  :                 coef = f1;         move16 (); 

  005a5	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _f1$[ebp]
  005ab	89 85 40 ff ff
	ff		 mov	 DWORD PTR _coef$[ebp], eax
  005b1	e8 00 00 00 00	 call	 _move16
$LN5@Az_lsp:

; 260  :             }
; 261  :             ylow = Chebps (xlow, coef, NC);

  005b6	6a 05		 push	 5
  005b8	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _coef$[ebp]
  005be	50		 push	 eax
  005bf	0f b7 4d c4	 movzx	 ecx, WORD PTR _xlow$[ebp]
  005c3	51		 push	 ecx
  005c4	e8 00 00 00 00	 call	 _Chebps
  005c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  005cc	66 89 45 b8	 mov	 WORD PTR _ylow$[ebp], ax

; 262  :                                    move16 (); 

  005d0	e8 00 00 00 00	 call	 _move16
$LN15@Az_lsp:

; 263  : 
; 264  :         }
; 265  :         test (); test (); 

  005d5	e8 00 00 00 00	 call	 _test
  005da	e8 00 00 00 00	 call	 _test

; 266  :     }

  005df	e9 2e fc ff ff	 jmp	 $LN17@Az_lsp
$LN16@Az_lsp:

; 267  : 
; 268  :     /* Check if M roots found */
; 269  : 
; 270  :     test (); 

  005e4	e8 00 00 00 00	 call	 _test

; 271  :     if (sub (nf, M) < 0)

  005e9	6a 0a		 push	 10			; 0000000aH
  005eb	0f b7 45 dc	 movzx	 eax, WORD PTR _nf$[ebp]
  005ef	50		 push	 eax
  005f0	e8 00 00 00 00	 call	 _sub
  005f5	83 c4 08	 add	 esp, 8
  005f8	0f bf c8	 movsx	 ecx, ax
  005fb	85 c9		 test	 ecx, ecx
  005fd	7d 3a		 jge	 SHORT $LN21@Az_lsp

; 272  :     {
; 273  :         for (i = 0; i < M; i++)

  005ff	33 c0		 xor	 eax, eax
  00601	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00605	eb 0c		 jmp	 SHORT $LN3@Az_lsp
$LN2@Az_lsp:
  00607	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0060b	66 83 c0 01	 add	 ax, 1
  0060f	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN3@Az_lsp:
  00613	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00617	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0061a	7d 1d		 jge	 SHORT $LN21@Az_lsp

; 274  :         {
; 275  :             lsp[i] = old_lsp[i];   move16 (); 

  0061c	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00620	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00624	8b 55 0c	 mov	 edx, DWORD PTR _lsp$[ebp]
  00627	8b 75 10	 mov	 esi, DWORD PTR _old_lsp$[ebp]
  0062a	66 8b 04 46	 mov	 ax, WORD PTR [esi+eax*2]
  0062e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00632	e8 00 00 00 00	 call	 _move16

; 276  :         }

  00637	eb ce		 jmp	 SHORT $LN2@Az_lsp
$LN21@Az_lsp:

; 277  : 
; 278  :     }
; 279  :     return;
; 280  : }

  00639	52		 push	 edx
  0063a	8b cd		 mov	 ecx, ebp
  0063c	50		 push	 eax
  0063d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN26@Az_lsp
  00643	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00648	58		 pop	 eax
  00649	5a		 pop	 edx
  0064a	5f		 pop	 edi
  0064b	5e		 pop	 esi
  0064c	5b		 pop	 ebx
  0064d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00650	33 cd		 xor	 ecx, ebp
  00652	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00657	81 c4 b8 01 00
	00		 add	 esp, 440		; 000001b8H
  0065d	3b ec		 cmp	 ebp, esp
  0065f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00664	8b e5		 mov	 esp, ebp
  00666	5d		 pop	 ebp
  00667	c3		 ret	 0
$LN26@Az_lsp:
  00668	02 00 00 00	 DD	 2
  0066c	00 00 00 00	 DD	 $LN25@Az_lsp
$LN25@Az_lsp:
  00670	2c ff ff ff	 DD	 -212			; ffffff2cH
  00674	0c 00 00 00	 DD	 12			; 0000000cH
  00678	00 00 00 00	 DD	 $LN23@Az_lsp
  0067c	18 ff ff ff	 DD	 -232			; ffffff18H
  00680	0c 00 00 00	 DD	 12			; 0000000cH
  00684	00 00 00 00	 DD	 $LN24@Az_lsp
$LN24@Az_lsp:
  00688	66		 DB	 102			; 00000066H
  00689	32		 DB	 50			; 00000032H
  0068a	00		 DB	 0
$LN23@Az_lsp:
  0068b	66		 DB	 102			; 00000066H
  0068c	31		 DB	 49			; 00000031H
  0068d	00		 DB	 0
_Az_lsp	ENDP
_TEXT	ENDS
END
