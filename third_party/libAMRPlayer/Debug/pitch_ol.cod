; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\pitch_ol.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_pitch_ol_id
CONST	SEGMENT
_pitch_ol_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Pitch_ol
EXTRN	_vad_complex_detection_update:PROC
EXTRN	_vad_tone_detection:PROC
EXTRN	_vad_tone_detection_update:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_mult:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr:PROC
EXTRN	_L_Extract:PROC
EXTRN	_Mpy_32:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	_Inv_sqrt:PROC
EXTRN	_comp_corr:PROC
EXTRN	_hp_max:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pitch_ol.c
;	COMDAT _Lag_max
_TEXT	SEGMENT
_p_max$ = -116						; size = 2
_ener_l$ = -104						; size = 2
_ener_h$ = -92						; size = 2
_max_l$ = -80						; size = 2
_max_h$ = -68						; size = 2
_t0$ = -56						; size = 4
_max$ = -44						; size = 4
_p$ = -32						; size = 4
_j$ = -20						; size = 2
_i$ = -8						; size = 2
_vadSt$ = 8						; size = 4
_corr$ = 12						; size = 4
_scal_sig$ = 16						; size = 4
_scal_fac$ = 20						; size = 2
_scal_flag$ = 24					; size = 2
_L_frame$ = 28						; size = 2
_lag_max$ = 32						; size = 2
_lag_min$ = 36						; size = 2
_cor_max$ = 40						; size = 4
_dtx$ = 44						; size = 4
_Lag_max PROC						; COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-312]
  00012	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 94   :     Word16 i, j;
; 95   :     Word16 *p;
; 96   :     Word32 max, t0;
; 97   :     Word16 max_h, max_l, ener_h, ener_l;
; 98   :     Word16 p_max = 0; /* initialization only needed to keep gcc silent */

  0001e	33 c0		 xor	 eax, eax
  00020	66 89 45 8c	 mov	 WORD PTR _p_max$[ebp], ax

; 99   :     
; 100  :     max = MIN_32;               move32 (); 

  00024	c7 45 d4 00 00
	00 80		 mov	 DWORD PTR _max$[ebp], -2147483648 ; 80000000H
  0002b	e8 00 00 00 00	 call	 _move32

; 101  :     p_max = lag_max;            move16 ();

  00030	66 8b 45 20	 mov	 ax, WORD PTR _lag_max$[ebp]
  00034	66 89 45 8c	 mov	 WORD PTR _p_max$[ebp], ax
  00038	e8 00 00 00 00	 call	 _move16

; 102  :    
; 103  :     for (i = lag_max, j = (PIT_MAX-lag_max-1); i >= lag_min; i--, j--)  

  0003d	66 8b 45 20	 mov	 ax, WORD PTR _lag_max$[ebp]
  00041	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00045	0f bf 4d 20	 movsx	 ecx, WORD PTR _lag_max$[ebp]
  00049	ba 8f 00 00 00	 mov	 edx, 143		; 0000008fH
  0004e	2b d1		 sub	 edx, ecx
  00050	83 ea 01	 sub	 edx, 1
  00053	66 89 55 ec	 mov	 WORD PTR _j$[ebp], dx
  00057	eb 18		 jmp	 SHORT $LN11@Lag_max
$LN10@Lag_max:
  00059	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0005d	66 83 e8 01	 sub	 ax, 1
  00061	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00065	66 8b 4d ec	 mov	 cx, WORD PTR _j$[ebp]
  00069	66 83 e9 01	 sub	 cx, 1
  0006d	66 89 4d ec	 mov	 WORD PTR _j$[ebp], cx
$LN11@Lag_max:
  00071	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00075	0f bf 4d 24	 movsx	 ecx, WORD PTR _lag_min$[ebp]
  00079	3b c1		 cmp	 eax, ecx
  0007b	7c 45		 jl	 SHORT $LN9@Lag_max

; 104  :     {
; 105  :        test ();  

  0007d	e8 00 00 00 00	 call	 _test

; 106  :        if (L_sub (corr[-i], max) >= 0) 

  00082	8b 45 d4	 mov	 eax, DWORD PTR _max$[ebp]
  00085	50		 push	 eax
  00086	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  0008a	f7 d9		 neg	 ecx
  0008c	8b 55 0c	 mov	 edx, DWORD PTR _corr$[ebp]
  0008f	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _L_sub
  00098	83 c4 08	 add	 esp, 8
  0009b	85 c0		 test	 eax, eax
  0009d	7c 21		 jl	 SHORT $LN8@Lag_max

; 107  :        { 
; 108  :           max = corr[-i];       move32 ();  

  0009f	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000a3	f7 d8		 neg	 eax
  000a5	8b 4d 0c	 mov	 ecx, DWORD PTR _corr$[ebp]
  000a8	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000ab	89 55 d4	 mov	 DWORD PTR _max$[ebp], edx
  000ae	e8 00 00 00 00	 call	 _move32

; 109  :           p_max = i;            move16 ();  

  000b3	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  000b7	66 89 45 8c	 mov	 WORD PTR _p_max$[ebp], ax
  000bb	e8 00 00 00 00	 call	 _move16
$LN8@Lag_max:

; 110  :        } 
; 111  :     }

  000c0	eb 97		 jmp	 SHORT $LN10@Lag_max
$LN9@Lag_max:

; 112  :     
; 113  :     /* compute energy */
; 114  : 
; 115  :     t0 = 0;                     move32 ();     

  000c2	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _t0$[ebp], 0
  000c9	e8 00 00 00 00	 call	 _move32

; 116  :     p = &scal_sig[-p_max];      move16 (); 

  000ce	0f bf 45 8c	 movsx	 eax, WORD PTR _p_max$[ebp]
  000d2	f7 d8		 neg	 eax
  000d4	8b 4d 10	 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  000d7	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000da	89 55 e0	 mov	 DWORD PTR _p$[ebp], edx
  000dd	e8 00 00 00 00	 call	 _move16

; 117  :     for (i = 0; i < L_frame; i++, p++)

  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  000e8	eb 15		 jmp	 SHORT $LN7@Lag_max
$LN6@Lag_max:
  000ea	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  000ee	66 83 c0 01	 add	 ax, 1
  000f2	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  000f6	8b 4d e0	 mov	 ecx, DWORD PTR _p$[ebp]
  000f9	83 c1 02	 add	 ecx, 2
  000fc	89 4d e0	 mov	 DWORD PTR _p$[ebp], ecx
$LN7@Lag_max:
  000ff	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00103	0f bf 4d 1c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  00107	3b c1		 cmp	 eax, ecx
  00109	7d 1f		 jge	 SHORT $LN5@Lag_max

; 118  :     {
; 119  :         t0 = L_mac (t0, *p, *p);

  0010b	8b 45 e0	 mov	 eax, DWORD PTR _p$[ebp]
  0010e	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00111	51		 push	 ecx
  00112	8b 55 e0	 mov	 edx, DWORD PTR _p$[ebp]
  00115	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00118	50		 push	 eax
  00119	8b 4d c8	 mov	 ecx, DWORD PTR _t0$[ebp]
  0011c	51		 push	 ecx
  0011d	e8 00 00 00 00	 call	 _L_mac
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH
  00125	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 120  :     }

  00128	eb c0		 jmp	 SHORT $LN6@Lag_max
$LN5@Lag_max:

; 121  :     /* 1/sqrt(energy) */
; 122  : 
; 123  :     if (dtx)

  0012a	83 7d 2c 00	 cmp	 DWORD PTR _dtx$[ebp], 0
  0012e	74 14		 je	 SHORT $LN4@Lag_max

; 124  :     {  /* no test() call since this if is only in simulation env */
; 125  : #ifdef VAD2
; 126  :        *rmax = max;		move32();
; 127  :        *r0 = t0;		move32();
; 128  : #else
; 129  :        /* check tone */
; 130  :        vad_tone_detection (vadSt, max, t0);

  00130	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  00133	50		 push	 eax
  00134	8b 4d d4	 mov	 ecx, DWORD PTR _max$[ebp]
  00137	51		 push	 ecx
  00138	8b 55 08	 mov	 edx, DWORD PTR _vadSt$[ebp]
  0013b	52		 push	 edx
  0013c	e8 00 00 00 00	 call	 _vad_tone_detection
  00141	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Lag_max:

; 131  : #endif
; 132  :     }
; 133  :     
; 134  :     t0 = Inv_sqrt (t0); move32 (); /* function result */

  00144	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 _Inv_sqrt
  0014d	83 c4 04	 add	 esp, 4
  00150	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax
  00153	e8 00 00 00 00	 call	 _move32

; 135  : 
; 136  :     test();

  00158	e8 00 00 00 00	 call	 _test

; 137  :     if (scal_flag)

  0015d	0f bf 45 18	 movsx	 eax, WORD PTR _scal_flag$[ebp]
  00161	85 c0		 test	 eax, eax
  00163	74 11		 je	 SHORT $LN3@Lag_max

; 138  :     {
; 139  :        t0 = L_shl (t0, 1);

  00165	6a 01		 push	 1
  00167	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 _L_shl
  00170	83 c4 08	 add	 esp, 8
  00173	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax
$LN3@Lag_max:

; 140  :     }
; 141  :     
; 142  :     /* max = max/sqrt(energy)  */
; 143  : 
; 144  :     L_Extract (max, &max_h, &max_l);

  00176	8d 45 b0	 lea	 eax, DWORD PTR _max_l$[ebp]
  00179	50		 push	 eax
  0017a	8d 4d bc	 lea	 ecx, DWORD PTR _max_h$[ebp]
  0017d	51		 push	 ecx
  0017e	8b 55 d4	 mov	 edx, DWORD PTR _max$[ebp]
  00181	52		 push	 edx
  00182	e8 00 00 00 00	 call	 _L_Extract
  00187	83 c4 0c	 add	 esp, 12			; 0000000cH

; 145  :     L_Extract (t0, &ener_h, &ener_l);

  0018a	8d 45 98	 lea	 eax, DWORD PTR _ener_l$[ebp]
  0018d	50		 push	 eax
  0018e	8d 4d a4	 lea	 ecx, DWORD PTR _ener_h$[ebp]
  00191	51		 push	 ecx
  00192	8b 55 c8	 mov	 edx, DWORD PTR _t0$[ebp]
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 _L_Extract
  0019b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 146  : 
; 147  :     t0 = Mpy_32 (max_h, max_l, ener_h, ener_l);

  0019e	0f b7 45 98	 movzx	 eax, WORD PTR _ener_l$[ebp]
  001a2	50		 push	 eax
  001a3	0f b7 4d a4	 movzx	 ecx, WORD PTR _ener_h$[ebp]
  001a7	51		 push	 ecx
  001a8	0f b7 55 b0	 movzx	 edx, WORD PTR _max_l$[ebp]
  001ac	52		 push	 edx
  001ad	0f b7 45 bc	 movzx	 eax, WORD PTR _max_h$[ebp]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 _Mpy_32
  001b7	83 c4 10	 add	 esp, 16			; 00000010H
  001ba	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 148  :     
; 149  :     test();

  001bd	e8 00 00 00 00	 call	 _test

; 150  :     if (scal_flag)

  001c2	0f bf 45 18	 movsx	 eax, WORD PTR _scal_flag$[ebp]
  001c6	85 c0		 test	 eax, eax
  001c8	74 33		 je	 SHORT $LN2@Lag_max

; 151  :     {
; 152  :       t0 = L_shr (t0, scal_fac);

  001ca	0f b7 45 14	 movzx	 eax, WORD PTR _scal_fac$[ebp]
  001ce	50		 push	 eax
  001cf	8b 4d c8	 mov	 ecx, DWORD PTR _t0$[ebp]
  001d2	51		 push	 ecx
  001d3	e8 00 00 00 00	 call	 _L_shr
  001d8	83 c4 08	 add	 esp, 8
  001db	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 153  :       *cor_max = extract_h (L_shl (t0, 15)); /* divide by 2 */

  001de	6a 0f		 push	 15			; 0000000fH
  001e0	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _L_shl
  001e9	83 c4 08	 add	 esp, 8
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _extract_h
  001f2	83 c4 04	 add	 esp, 4
  001f5	8b 4d 28	 mov	 ecx, DWORD PTR _cor_max$[ebp]
  001f8	66 89 01	 mov	 WORD PTR [ecx], ax

; 154  :     }
; 155  :     else

  001fb	eb 12		 jmp	 SHORT $LN1@Lag_max
$LN2@Lag_max:

; 156  :     {
; 157  :       *cor_max = extract_l(t0);

  001fd	8b 45 c8	 mov	 eax, DWORD PTR _t0$[ebp]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 _extract_l
  00206	83 c4 04	 add	 esp, 4
  00209	8b 4d 28	 mov	 ecx, DWORD PTR _cor_max$[ebp]
  0020c	66 89 01	 mov	 WORD PTR [ecx], ax
$LN1@Lag_max:

; 158  :     }
; 159  : 
; 160  :     return (p_max);

  0020f	66 8b 45 8c	 mov	 ax, WORD PTR _p_max$[ebp]

; 161  : }

  00213	52		 push	 edx
  00214	8b cd		 mov	 ecx, ebp
  00216	50		 push	 eax
  00217	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@Lag_max
  0021d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00222	58		 pop	 eax
  00223	5a		 pop	 edx
  00224	5f		 pop	 edi
  00225	5e		 pop	 esi
  00226	5b		 pop	 ebx
  00227	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  0022d	3b ec		 cmp	 ebp, esp
  0022f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00234	8b e5		 mov	 esp, ebp
  00236	5d		 pop	 ebp
  00237	c3		 ret	 0
$LN19@Lag_max:
  00238	04 00 00 00	 DD	 4
  0023c	00 00 00 00	 DD	 $LN18@Lag_max
$LN18@Lag_max:
  00240	bc ff ff ff	 DD	 -68			; ffffffbcH
  00244	02 00 00 00	 DD	 2
  00248	00 00 00 00	 DD	 $LN14@Lag_max
  0024c	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00250	02 00 00 00	 DD	 2
  00254	00 00 00 00	 DD	 $LN15@Lag_max
  00258	a4 ff ff ff	 DD	 -92			; ffffffa4H
  0025c	02 00 00 00	 DD	 2
  00260	00 00 00 00	 DD	 $LN16@Lag_max
  00264	98 ff ff ff	 DD	 -104			; ffffff98H
  00268	02 00 00 00	 DD	 2
  0026c	00 00 00 00	 DD	 $LN17@Lag_max
$LN17@Lag_max:
  00270	65		 DB	 101			; 00000065H
  00271	6e		 DB	 110			; 0000006eH
  00272	65		 DB	 101			; 00000065H
  00273	72		 DB	 114			; 00000072H
  00274	5f		 DB	 95			; 0000005fH
  00275	6c		 DB	 108			; 0000006cH
  00276	00		 DB	 0
$LN16@Lag_max:
  00277	65		 DB	 101			; 00000065H
  00278	6e		 DB	 110			; 0000006eH
  00279	65		 DB	 101			; 00000065H
  0027a	72		 DB	 114			; 00000072H
  0027b	5f		 DB	 95			; 0000005fH
  0027c	68		 DB	 104			; 00000068H
  0027d	00		 DB	 0
$LN15@Lag_max:
  0027e	6d		 DB	 109			; 0000006dH
  0027f	61		 DB	 97			; 00000061H
  00280	78		 DB	 120			; 00000078H
  00281	5f		 DB	 95			; 0000005fH
  00282	6c		 DB	 108			; 0000006cH
  00283	00		 DB	 0
$LN14@Lag_max:
  00284	6d		 DB	 109			; 0000006dH
  00285	61		 DB	 97			; 00000061H
  00286	78		 DB	 120			; 00000078H
  00287	5f		 DB	 95			; 0000005fH
  00288	68		 DB	 104			; 00000068H
  00289	00		 DB	 0
_Lag_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pitch_ol.c
;	COMDAT _Pitch_ol
_TEXT	SEGMENT
_scal_fac$ = -1368					; size = 2
_scal_sig$ = -1356					; size = 4
_scaled_signal$ = -1344					; size = 606
_corr_ptr$ = -728					; size = 4
_corr$ = -716						; size = 576
_corr_hp_max$ = -132					; size = 2
_t0$ = -120						; size = 4
_scal_flag$ = -108					; size = 2
_p_max3$ = -96						; size = 2
_p_max2$ = -84						; size = 2
_p_max1$ = -72						; size = 2
_max3$ = -60						; size = 2
_max2$ = -48						; size = 2
_max1$ = -36						; size = 2
_j$ = -24						; size = 2
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_vadSt$ = 8						; size = 4
_mode$ = 12						; size = 4
_signal$ = 16						; size = 4
_pit_min$ = 20						; size = 2
_pit_max$ = 24						; size = 2
_L_frame$ = 28						; size = 2
_idx$ = 32						; size = 2
_dtx$ = 36						; size = 4
_Pitch_ol PROC						; COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 06 00
	00		 sub	 esp, 1564		; 0000061cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e4 f9 ff
	ff		 lea	 edi, DWORD PTR [ebp-1564]
  00012	b9 87 01 00 00	 mov	 ecx, 391		; 00000187H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 200  :     Word16 i, j;
; 201  :     Word16 max1, max2, max3;
; 202  :     Word16 p_max1, p_max2, p_max3;
; 203  :     Word16 scal_flag = 0;

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 94	 mov	 WORD PTR _scal_flag$[ebp], ax

; 204  :     Word32 t0;
; 205  : #ifdef VAD2
; 206  :     Word32  r01, r02, r03;
; 207  :     Word32  rmax1, rmax2, rmax3;
; 208  : #else
; 209  :     Word16 corr_hp_max;
; 210  : #endif
; 211  :     Word32 corr[PIT_MAX+1], *corr_ptr;
; 212  :     
; 213  :     /* Scaled signal */
; 214  : 
; 215  :     Word16 scaled_signal[L_FRAME + PIT_MAX];
; 216  :     Word16 *scal_sig, scal_fac;
; 217  : 
; 218  : #ifndef VAD2
; 219  :     if (dtx)

  0002e	83 7d 24 00	 cmp	 DWORD PTR _dtx$[ebp], 0
  00032	74 54		 je	 SHORT $LN26@Pitch_ol

; 220  :     {  /* no test() call since this if is only in simulation env */
; 221  :        /* update tone detection */
; 222  :        test(); test();

  00034	e8 00 00 00 00	 call	 _test
  00039	e8 00 00 00 00	 call	 _test

; 223  :        if ((sub(mode, MR475) == 0) || (sub(mode, MR515) == 0))

  0003e	6a 00		 push	 0
  00040	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _sub
  0004a	83 c4 08	 add	 esp, 8
  0004d	0f bf c8	 movsx	 ecx, ax
  00050	85 c9		 test	 ecx, ecx
  00052	74 16		 je	 SHORT $LN24@Pitch_ol
  00054	6a 01		 push	 1
  00056	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _sub
  00060	83 c4 08	 add	 esp, 8
  00063	0f bf c8	 movsx	 ecx, ax
  00066	85 c9		 test	 ecx, ecx
  00068	75 10		 jne	 SHORT $LN25@Pitch_ol
$LN24@Pitch_ol:

; 224  :        {
; 225  :           vad_tone_detection_update (vadSt, 1);

  0006a	6a 01		 push	 1
  0006c	8b 45 08	 mov	 eax, DWORD PTR _vadSt$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _vad_tone_detection_update
  00075	83 c4 08	 add	 esp, 8

; 226  :        }
; 227  :        else

  00078	eb 0e		 jmp	 SHORT $LN26@Pitch_ol
$LN25@Pitch_ol:

; 228  :        {
; 229  :           vad_tone_detection_update (vadSt, 0);

  0007a	6a 00		 push	 0
  0007c	8b 45 08	 mov	 eax, DWORD PTR _vadSt$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _vad_tone_detection_update
  00085	83 c4 08	 add	 esp, 8
$LN26@Pitch_ol:

; 230  :        }
; 231  :     }
; 232  : #endif
; 233  :     
; 234  :     scal_sig = &scaled_signal[pit_max]; move16 (); 

  00088	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  0008c	8d 8c 45 c0 fa
	ff ff		 lea	 ecx, DWORD PTR _scaled_signal$[ebp+eax*2]
  00093	89 8d b4 fa ff
	ff		 mov	 DWORD PTR _scal_sig$[ebp], ecx
  00099	e8 00 00 00 00	 call	 _move16

; 235  : 
; 236  :     t0 = 0L;                            move32 (); 

  0009e	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _t0$[ebp], 0
  000a5	e8 00 00 00 00	 call	 _move32

; 237  :     for (i = -pit_max; i < L_frame; i++)

  000aa	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  000ae	f7 d8		 neg	 eax
  000b0	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  000b4	eb 0c		 jmp	 SHORT $LN22@Pitch_ol
$LN21@Pitch_ol:
  000b6	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  000ba	66 83 c0 01	 add	 ax, 1
  000be	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN22@Pitch_ol:
  000c2	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000c6	0f bf 4d 1c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  000ca	3b c1		 cmp	 eax, ecx
  000cc	7d 29		 jge	 SHORT $LN20@Pitch_ol

; 238  :     {
; 239  :         t0 = L_mac (t0, signal[i], signal[i]);

  000ce	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000d2	8b 4d 10	 mov	 ecx, DWORD PTR _signal$[ebp]
  000d5	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000d9	52		 push	 edx
  000da	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000de	8b 4d 10	 mov	 ecx, DWORD PTR _signal$[ebp]
  000e1	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000e5	52		 push	 edx
  000e6	8b 45 88	 mov	 eax, DWORD PTR _t0$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _L_mac
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f2	89 45 88	 mov	 DWORD PTR _t0$[ebp], eax

; 240  :     }

  000f5	eb bf		 jmp	 SHORT $LN21@Pitch_ol
$LN20@Pitch_ol:

; 241  :    
; 242  :     /*--------------------------------------------------------*
; 243  :      * Scaling of input signal.                               *
; 244  :      *                                                        *
; 245  :      *   if Overflow        -> scal_sig[i] = signal[i]>>3     *
; 246  :      *   else if t0 < 1^20  -> scal_sig[i] = signal[i]<<3     *
; 247  :      *   else               -> scal_sig[i] = signal[i]        *
; 248  :      *--------------------------------------------------------*/
; 249  : 
; 250  :     /*--------------------------------------------------------*
; 251  :      *  Verification for risk of overflow.                    *
; 252  :      *--------------------------------------------------------*/
; 253  : 
; 254  :     test ();

  000f7	e8 00 00 00 00	 call	 _test

; 255  :     if (L_sub (t0, MAX_32) == 0L)               /* Test for overflow */

  000fc	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00101	8b 45 88	 mov	 eax, DWORD PTR _t0$[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _L_sub
  0010a	83 c4 08	 add	 esp, 8
  0010d	85 c0		 test	 eax, eax
  0010f	75 65		 jne	 SHORT $LN19@Pitch_ol

; 256  :     {
; 257  :         for (i = -pit_max; i < L_frame; i++)

  00111	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  00115	f7 d8		 neg	 eax
  00117	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0011b	eb 0c		 jmp	 SHORT $LN18@Pitch_ol
$LN17@Pitch_ol:
  0011d	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00121	66 83 c0 01	 add	 ax, 1
  00125	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN18@Pitch_ol:
  00129	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0012d	0f bf 4d 1c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  00131	3b c1		 cmp	 eax, ecx
  00133	7d 2b		 jge	 SHORT $LN16@Pitch_ol

; 258  :         {
; 259  :             scal_sig[i] = shr (signal[i], 3);   move16 (); 

  00135	6a 03		 push	 3
  00137	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR _signal$[ebp]
  0013e	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00142	52		 push	 edx
  00143	e8 00 00 00 00	 call	 _shr
  00148	83 c4 08	 add	 esp, 8
  0014b	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  0014f	8b 95 b4 fa ff
	ff		 mov	 edx, DWORD PTR _scal_sig$[ebp]
  00155	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00159	e8 00 00 00 00	 call	 _move16

; 260  :         }

  0015e	eb bd		 jmp	 SHORT $LN17@Pitch_ol
$LN16@Pitch_ol:

; 261  :         scal_fac = 3;                           move16 (); 

  00160	b8 03 00 00 00	 mov	 eax, 3
  00165	66 89 85 a8 fa
	ff ff		 mov	 WORD PTR _scal_fac$[ebp], ax
  0016c	e8 00 00 00 00	 call	 _move16
  00171	e9 d3 00 00 00	 jmp	 $LN15@Pitch_ol
$LN19@Pitch_ol:

; 262  :     }
; 263  :     else if (L_sub (t0, (Word32) 1048576L) < (Word32) 0)

  00176	68 00 00 10 00	 push	 1048576			; 00100000H
  0017b	8b 45 88	 mov	 eax, DWORD PTR _t0$[ebp]
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 _L_sub
  00184	83 c4 08	 add	 esp, 8
  00187	85 c0		 test	 eax, eax
  00189	7d 67		 jge	 SHORT $LN14@Pitch_ol

; 264  :         /* if (t0 < 2^20) */
; 265  :     {
; 266  : 		test (); 

  0018b	e8 00 00 00 00	 call	 _test

; 267  :         for (i = -pit_max; i < L_frame; i++)

  00190	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  00194	f7 d8		 neg	 eax
  00196	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0019a	eb 0c		 jmp	 SHORT $LN13@Pitch_ol
$LN12@Pitch_ol:
  0019c	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  001a0	66 83 c0 01	 add	 ax, 1
  001a4	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN13@Pitch_ol:
  001a8	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  001ac	0f bf 4d 1c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  001b0	3b c1		 cmp	 eax, ecx
  001b2	7d 2b		 jge	 SHORT $LN11@Pitch_ol

; 268  :         {
; 269  :             scal_sig[i] = shl (signal[i], 3);   move16 (); 

  001b4	6a 03		 push	 3
  001b6	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  001ba	8b 4d 10	 mov	 ecx, DWORD PTR _signal$[ebp]
  001bd	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  001c1	52		 push	 edx
  001c2	e8 00 00 00 00	 call	 _shl
  001c7	83 c4 08	 add	 esp, 8
  001ca	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  001ce	8b 95 b4 fa ff
	ff		 mov	 edx, DWORD PTR _scal_sig$[ebp]
  001d4	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001d8	e8 00 00 00 00	 call	 _move16

; 270  :         }

  001dd	eb bd		 jmp	 SHORT $LN12@Pitch_ol
$LN11@Pitch_ol:

; 271  :         scal_fac = -3;                          move16 (); 

  001df	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  001e4	66 89 85 a8 fa
	ff ff		 mov	 WORD PTR _scal_fac$[ebp], ax
  001eb	e8 00 00 00 00	 call	 _move16

; 272  :     }
; 273  :     else

  001f0	eb 57		 jmp	 SHORT $LN15@Pitch_ol
$LN14@Pitch_ol:

; 274  :     {
; 275  : 		test (); 

  001f2	e8 00 00 00 00	 call	 _test

; 276  :         for (i = -pit_max; i < L_frame; i++)

  001f7	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  001fb	f7 d8		 neg	 eax
  001fd	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00201	eb 0c		 jmp	 SHORT $LN9@Pitch_ol
$LN8@Pitch_ol:
  00203	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00207	66 83 c0 01	 add	 ax, 1
  0020b	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN9@Pitch_ol:
  0020f	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00213	0f bf 4d 1c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  00217	3b c1		 cmp	 eax, ecx
  00219	7d 20		 jge	 SHORT $LN7@Pitch_ol

; 277  :         {
; 278  :             scal_sig[i] = signal[i];            move16 (); 

  0021b	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0021f	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00223	8b 95 b4 fa ff
	ff		 mov	 edx, DWORD PTR _scal_sig$[ebp]
  00229	8b 75 10	 mov	 esi, DWORD PTR _signal$[ebp]
  0022c	66 8b 04 46	 mov	 ax, WORD PTR [esi+eax*2]
  00230	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00234	e8 00 00 00 00	 call	 _move16

; 279  :         }

  00239	eb c8		 jmp	 SHORT $LN8@Pitch_ol
$LN7@Pitch_ol:

; 280  :         scal_fac = 0;                           move16 (); 

  0023b	33 c0		 xor	 eax, eax
  0023d	66 89 85 a8 fa
	ff ff		 mov	 WORD PTR _scal_fac$[ebp], ax
  00244	e8 00 00 00 00	 call	 _move16
$LN15@Pitch_ol:

; 281  :     }
; 282  : 
; 283  :     /* calculate all coreelations of scal_sig, from pit_min to pit_max */
; 284  :     corr_ptr = &corr[pit_max];                  move32 ();

  00249	0f bf 45 18	 movsx	 eax, WORD PTR _pit_max$[ebp]
  0024d	8d 8c 85 34 fd
	ff ff		 lea	 ecx, DWORD PTR _corr$[ebp+eax*4]
  00254	89 8d 28 fd ff
	ff		 mov	 DWORD PTR _corr_ptr$[ebp], ecx
  0025a	e8 00 00 00 00	 call	 _move32

; 285  :     comp_corr (scal_sig, L_frame, pit_max, pit_min, corr_ptr); 

  0025f	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _corr_ptr$[ebp]
  00265	50		 push	 eax
  00266	0f b7 4d 14	 movzx	 ecx, WORD PTR _pit_min$[ebp]
  0026a	51		 push	 ecx
  0026b	0f b7 55 18	 movzx	 edx, WORD PTR _pit_max$[ebp]
  0026f	52		 push	 edx
  00270	0f b7 45 1c	 movzx	 eax, WORD PTR _L_frame$[ebp]
  00274	50		 push	 eax
  00275	8b 8d b4 fa ff
	ff		 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  0027b	51		 push	 ecx
  0027c	e8 00 00 00 00	 call	 _comp_corr
  00281	83 c4 14	 add	 esp, 20			; 00000014H

; 286  :     
; 287  :     /*--------------------------------------------------------------------*
; 288  :      *  The pitch lag search is divided in three sections.                *
; 289  :      *  Each section cannot have a pitch multiple.                        *
; 290  :      *  We find a maximum for each section.                               *
; 291  :      *  We compare the maximum of each section by favoring small lags.    *
; 292  :      *                                                                    *
; 293  :      *  First section:  lag delay = pit_max     downto 4*pit_min          *
; 294  :      *  Second section: lag delay = 4*pit_min-1 downto 2*pit_min          *
; 295  :      *  Third section:  lag delay = 2*pit_min-1 downto pit_min            *
; 296  :      *--------------------------------------------------------------------*/
; 297  : 
; 298  :     /* mode dependent scaling in Lag_max */
; 299  :     test (); 

  00284	e8 00 00 00 00	 call	 _test

; 300  :     if (sub(mode, MR122) == 0)

  00289	6a 07		 push	 7
  0028b	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 _sub
  00295	83 c4 08	 add	 esp, 8
  00298	0f bf c8	 movsx	 ecx, ax
  0029b	85 c9		 test	 ecx, ecx
  0029d	75 10		 jne	 SHORT $LN6@Pitch_ol

; 301  :     {
; 302  :        scal_flag = 1;                           move16 (); 

  0029f	b8 01 00 00 00	 mov	 eax, 1
  002a4	66 89 45 94	 mov	 WORD PTR _scal_flag$[ebp], ax
  002a8	e8 00 00 00 00	 call	 _move16

; 303  :     }
; 304  :     else

  002ad	eb 0b		 jmp	 SHORT $LN5@Pitch_ol
$LN6@Pitch_ol:

; 305  :     {
; 306  :        scal_flag = 0;                           move16 ();    

  002af	33 c0		 xor	 eax, eax
  002b1	66 89 45 94	 mov	 WORD PTR _scal_flag$[ebp], ax
  002b5	e8 00 00 00 00	 call	 _move16
$LN5@Pitch_ol:

; 307  :     } 
; 308  :     
; 309  : #ifdef VAD2
; 310  :     j = shl (pit_min, 2);
; 311  :     p_max1 = Lag_max (corr_ptr, scal_sig, scal_fac, scal_flag, L_frame,
; 312  :                       pit_max, j, &max1, &rmax1, &r01, dtx);
; 313  :                       move16 (); /* function result */
; 314  : 
; 315  :     i = sub (j, 1);
; 316  :     j = shl (pit_min, 1);
; 317  :     p_max2 = Lag_max (corr_ptr, scal_sig, scal_fac, scal_flag, L_frame,
; 318  :                       i, j, &max2, &rmax2, &r02, dtx);
; 319  :                       move16 (); /* function result */
; 320  : 
; 321  :     i = sub (j, 1);
; 322  :     p_max3 = Lag_max (corr_ptr, scal_sig, scal_fac, scal_flag, L_frame,
; 323  :                       i, pit_min, &max3, &rmax3, &r03, dtx);
; 324  :                       move16 (); /* function result */
; 325  : #else
; 326  :     j = shl (pit_min, 2);

  002ba	6a 02		 push	 2
  002bc	0f b7 45 14	 movzx	 eax, WORD PTR _pit_min$[ebp]
  002c0	50		 push	 eax
  002c1	e8 00 00 00 00	 call	 _shl
  002c6	83 c4 08	 add	 esp, 8
  002c9	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax

; 327  :     p_max1 = Lag_max (vadSt, corr_ptr, scal_sig, scal_fac, scal_flag, L_frame,
; 328  :                       pit_max, j, &max1, dtx);  move16 (); /* function result */

  002cd	8b 45 24	 mov	 eax, DWORD PTR _dtx$[ebp]
  002d0	50		 push	 eax
  002d1	8d 4d dc	 lea	 ecx, DWORD PTR _max1$[ebp]
  002d4	51		 push	 ecx
  002d5	0f b7 55 e8	 movzx	 edx, WORD PTR _j$[ebp]
  002d9	52		 push	 edx
  002da	0f b7 45 18	 movzx	 eax, WORD PTR _pit_max$[ebp]
  002de	50		 push	 eax
  002df	0f b7 4d 1c	 movzx	 ecx, WORD PTR _L_frame$[ebp]
  002e3	51		 push	 ecx
  002e4	0f b7 55 94	 movzx	 edx, WORD PTR _scal_flag$[ebp]
  002e8	52		 push	 edx
  002e9	0f b7 85 a8 fa
	ff ff		 movzx	 eax, WORD PTR _scal_fac$[ebp]
  002f0	50		 push	 eax
  002f1	8b 8d b4 fa ff
	ff		 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  002f7	51		 push	 ecx
  002f8	8b 95 28 fd ff
	ff		 mov	 edx, DWORD PTR _corr_ptr$[ebp]
  002fe	52		 push	 edx
  002ff	8b 45 08	 mov	 eax, DWORD PTR _vadSt$[ebp]
  00302	50		 push	 eax
  00303	e8 00 00 00 00	 call	 _Lag_max
  00308	83 c4 28	 add	 esp, 40			; 00000028H
  0030b	66 89 45 b8	 mov	 WORD PTR _p_max1$[ebp], ax
  0030f	e8 00 00 00 00	 call	 _move16

; 329  : 
; 330  :     i = sub (j, 1);

  00314	6a 01		 push	 1
  00316	0f b7 45 e8	 movzx	 eax, WORD PTR _j$[ebp]
  0031a	50		 push	 eax
  0031b	e8 00 00 00 00	 call	 _sub
  00320	83 c4 08	 add	 esp, 8
  00323	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax

; 331  :     j = shl (pit_min, 1);

  00327	6a 01		 push	 1
  00329	0f b7 45 14	 movzx	 eax, WORD PTR _pit_min$[ebp]
  0032d	50		 push	 eax
  0032e	e8 00 00 00 00	 call	 _shl
  00333	83 c4 08	 add	 esp, 8
  00336	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax

; 332  :     p_max2 = Lag_max (vadSt, corr_ptr, scal_sig, scal_fac, scal_flag, L_frame,
; 333  :                       i, j, &max2, dtx);        move16 (); /* function result */

  0033a	8b 45 24	 mov	 eax, DWORD PTR _dtx$[ebp]
  0033d	50		 push	 eax
  0033e	8d 4d d0	 lea	 ecx, DWORD PTR _max2$[ebp]
  00341	51		 push	 ecx
  00342	0f b7 55 e8	 movzx	 edx, WORD PTR _j$[ebp]
  00346	52		 push	 edx
  00347	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  0034b	50		 push	 eax
  0034c	0f b7 4d 1c	 movzx	 ecx, WORD PTR _L_frame$[ebp]
  00350	51		 push	 ecx
  00351	0f b7 55 94	 movzx	 edx, WORD PTR _scal_flag$[ebp]
  00355	52		 push	 edx
  00356	0f b7 85 a8 fa
	ff ff		 movzx	 eax, WORD PTR _scal_fac$[ebp]
  0035d	50		 push	 eax
  0035e	8b 8d b4 fa ff
	ff		 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  00364	51		 push	 ecx
  00365	8b 95 28 fd ff
	ff		 mov	 edx, DWORD PTR _corr_ptr$[ebp]
  0036b	52		 push	 edx
  0036c	8b 45 08	 mov	 eax, DWORD PTR _vadSt$[ebp]
  0036f	50		 push	 eax
  00370	e8 00 00 00 00	 call	 _Lag_max
  00375	83 c4 28	 add	 esp, 40			; 00000028H
  00378	66 89 45 ac	 mov	 WORD PTR _p_max2$[ebp], ax
  0037c	e8 00 00 00 00	 call	 _move16

; 334  : 
; 335  :     i = sub (j, 1);

  00381	6a 01		 push	 1
  00383	0f b7 45 e8	 movzx	 eax, WORD PTR _j$[ebp]
  00387	50		 push	 eax
  00388	e8 00 00 00 00	 call	 _sub
  0038d	83 c4 08	 add	 esp, 8
  00390	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax

; 336  :     p_max3 = Lag_max (vadSt, corr_ptr, scal_sig, scal_fac, scal_flag, L_frame,
; 337  :                       i, pit_min, &max3, dtx);  move16 (); /* function result */

  00394	8b 45 24	 mov	 eax, DWORD PTR _dtx$[ebp]
  00397	50		 push	 eax
  00398	8d 4d c4	 lea	 ecx, DWORD PTR _max3$[ebp]
  0039b	51		 push	 ecx
  0039c	0f b7 55 14	 movzx	 edx, WORD PTR _pit_min$[ebp]
  003a0	52		 push	 edx
  003a1	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  003a5	50		 push	 eax
  003a6	0f b7 4d 1c	 movzx	 ecx, WORD PTR _L_frame$[ebp]
  003aa	51		 push	 ecx
  003ab	0f b7 55 94	 movzx	 edx, WORD PTR _scal_flag$[ebp]
  003af	52		 push	 edx
  003b0	0f b7 85 a8 fa
	ff ff		 movzx	 eax, WORD PTR _scal_fac$[ebp]
  003b7	50		 push	 eax
  003b8	8b 8d b4 fa ff
	ff		 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  003be	51		 push	 ecx
  003bf	8b 95 28 fd ff
	ff		 mov	 edx, DWORD PTR _corr_ptr$[ebp]
  003c5	52		 push	 edx
  003c6	8b 45 08	 mov	 eax, DWORD PTR _vadSt$[ebp]
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 _Lag_max
  003cf	83 c4 28	 add	 esp, 40			; 00000028H
  003d2	66 89 45 a0	 mov	 WORD PTR _p_max3$[ebp], ax
  003d6	e8 00 00 00 00	 call	 _move16

; 338  : 
; 339  :     if (dtx)

  003db	83 7d 24 00	 cmp	 DWORD PTR _dtx$[ebp], 0
  003df	74 5b		 je	 SHORT $LN4@Pitch_ol

; 340  :     {  /* no test() call since this if is only in simulation env */
; 341  :        test ();

  003e1	e8 00 00 00 00	 call	 _test

; 342  :        if (sub(idx, 1) == 0)

  003e6	6a 01		 push	 1
  003e8	0f b7 45 20	 movzx	 eax, WORD PTR _idx$[ebp]
  003ec	50		 push	 eax
  003ed	e8 00 00 00 00	 call	 _sub
  003f2	83 c4 08	 add	 esp, 8
  003f5	0f bf c8	 movsx	 ecx, ax
  003f8	85 c9		 test	 ecx, ecx
  003fa	75 40		 jne	 SHORT $LN4@Pitch_ol

; 343  :        {
; 344  :           /* calculate max high-passed filtered correlation of all lags */
; 345  :           hp_max (corr_ptr, scal_sig, L_frame, pit_max, pit_min, &corr_hp_max); 

  003fc	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _corr_hp_max$[ebp]
  00402	50		 push	 eax
  00403	0f b7 4d 14	 movzx	 ecx, WORD PTR _pit_min$[ebp]
  00407	51		 push	 ecx
  00408	0f b7 55 18	 movzx	 edx, WORD PTR _pit_max$[ebp]
  0040c	52		 push	 edx
  0040d	0f b7 45 1c	 movzx	 eax, WORD PTR _L_frame$[ebp]
  00411	50		 push	 eax
  00412	8b 8d b4 fa ff
	ff		 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  00418	51		 push	 ecx
  00419	8b 95 28 fd ff
	ff		 mov	 edx, DWORD PTR _corr_ptr$[ebp]
  0041f	52		 push	 edx
  00420	e8 00 00 00 00	 call	 _hp_max
  00425	83 c4 18	 add	 esp, 24			; 00000018H

; 346  :           
; 347  :           /* update complex background detector */
; 348  :           vad_complex_detection_update(vadSt, corr_hp_max); 

  00428	0f b7 85 7c ff
	ff ff		 movzx	 eax, WORD PTR _corr_hp_max$[ebp]
  0042f	50		 push	 eax
  00430	8b 4d 08	 mov	 ecx, DWORD PTR _vadSt$[ebp]
  00433	51		 push	 ecx
  00434	e8 00 00 00 00	 call	 _vad_complex_detection_update
  00439	83 c4 08	 add	 esp, 8
$LN4@Pitch_ol:

; 349  :        }
; 350  :     }
; 351  : #endif
; 352  :     
; 353  :     /*--------------------------------------------------------------------*
; 354  :      * Compare the 3 sections maximum, and favor small lag.               *
; 355  :      *--------------------------------------------------------------------*/
; 356  :     
; 357  :     test (); 

  0043c	e8 00 00 00 00	 call	 _test

; 358  :     if (sub (mult (max1, THRESHOLD), max2) < 0)

  00441	0f b7 45 d0	 movzx	 eax, WORD PTR _max2$[ebp]
  00445	50		 push	 eax
  00446	68 cd 6c 00 00	 push	 27853			; 00006ccdH
  0044b	0f b7 4d dc	 movzx	 ecx, WORD PTR _max1$[ebp]
  0044f	51		 push	 ecx
  00450	e8 00 00 00 00	 call	 _mult
  00455	83 c4 08	 add	 esp, 8
  00458	0f b7 d0	 movzx	 edx, ax
  0045b	52		 push	 edx
  0045c	e8 00 00 00 00	 call	 _sub
  00461	83 c4 08	 add	 esp, 8
  00464	98		 cwde
  00465	85 c0		 test	 eax, eax
  00467	7d 1a		 jge	 SHORT $LN2@Pitch_ol

; 359  :     {
; 360  :         max1 = max2;                       move16 (); 

  00469	66 8b 45 d0	 mov	 ax, WORD PTR _max2$[ebp]
  0046d	66 89 45 dc	 mov	 WORD PTR _max1$[ebp], ax
  00471	e8 00 00 00 00	 call	 _move16

; 361  :         p_max1 = p_max2;                   move16 (); 

  00476	66 8b 45 ac	 mov	 ax, WORD PTR _p_max2$[ebp]
  0047a	66 89 45 b8	 mov	 WORD PTR _p_max1$[ebp], ax
  0047e	e8 00 00 00 00	 call	 _move16
$LN2@Pitch_ol:

; 362  : #ifdef VAD2
; 363  :         if (dtx)
; 364  :         {
; 365  :             rmax1 = rmax2;                 move32 ();
; 366  :             r01 = r02;                     move32 ();
; 367  :         }
; 368  : #endif
; 369  :     }
; 370  :     test (); 

  00483	e8 00 00 00 00	 call	 _test

; 371  :     if (sub (mult (max1, THRESHOLD), max3) < 0)

  00488	0f b7 45 c4	 movzx	 eax, WORD PTR _max3$[ebp]
  0048c	50		 push	 eax
  0048d	68 cd 6c 00 00	 push	 27853			; 00006ccdH
  00492	0f b7 4d dc	 movzx	 ecx, WORD PTR _max1$[ebp]
  00496	51		 push	 ecx
  00497	e8 00 00 00 00	 call	 _mult
  0049c	83 c4 08	 add	 esp, 8
  0049f	0f b7 d0	 movzx	 edx, ax
  004a2	52		 push	 edx
  004a3	e8 00 00 00 00	 call	 _sub
  004a8	83 c4 08	 add	 esp, 8
  004ab	98		 cwde
  004ac	85 c0		 test	 eax, eax
  004ae	7d 0d		 jge	 SHORT $LN1@Pitch_ol

; 372  :     {
; 373  :         p_max1 = p_max3;                   move16 (); 

  004b0	66 8b 45 a0	 mov	 ax, WORD PTR _p_max3$[ebp]
  004b4	66 89 45 b8	 mov	 WORD PTR _p_max1$[ebp], ax
  004b8	e8 00 00 00 00	 call	 _move16
$LN1@Pitch_ol:

; 374  : #ifdef VAD2
; 375  :         if (dtx)
; 376  :         {
; 377  :             rmax1 = rmax3;                 move32 ();
; 378  :             r01 = r03;                     move32 ();
; 379  :         }
; 380  : #endif
; 381  :     }
; 382  : 
; 383  : #ifdef VAD2
; 384  :     if (dtx)
; 385  :     {
; 386  :         vadSt->L_Rmax = L_add(vadSt->L_Rmax, rmax1);   /* Save max correlation */
; 387  :         vadSt->L_R0 =   L_add(vadSt->L_R0, r01);        /* Save max energy */
; 388  :     }
; 389  : #endif
; 390  : 
; 391  :     return (p_max1);

  004bd	66 8b 45 b8	 mov	 ax, WORD PTR _p_max1$[ebp]

; 392  : }

  004c1	52		 push	 edx
  004c2	8b cd		 mov	 ecx, ebp
  004c4	50		 push	 eax
  004c5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN36@Pitch_ol
  004cb	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004d0	58		 pop	 eax
  004d1	5a		 pop	 edx
  004d2	5f		 pop	 edi
  004d3	5e		 pop	 esi
  004d4	5b		 pop	 ebx
  004d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004d8	33 cd		 xor	 ecx, ebp
  004da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004df	81 c4 1c 06 00
	00		 add	 esp, 1564		; 0000061cH
  004e5	3b ec		 cmp	 ebp, esp
  004e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004ec	8b e5		 mov	 esp, ebp
  004ee	5d		 pop	 ebp
  004ef	c3		 ret	 0
$LN36@Pitch_ol:
  004f0	06 00 00 00	 DD	 6
  004f4	00 00 00 00	 DD	 $LN35@Pitch_ol
$LN35@Pitch_ol:
  004f8	dc ff ff ff	 DD	 -36			; ffffffdcH
  004fc	02 00 00 00	 DD	 2
  00500	00 00 00 00	 DD	 $LN29@Pitch_ol
  00504	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00508	02 00 00 00	 DD	 2
  0050c	00 00 00 00	 DD	 $LN30@Pitch_ol
  00510	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00514	02 00 00 00	 DD	 2
  00518	00 00 00 00	 DD	 $LN31@Pitch_ol
  0051c	7c ff ff ff	 DD	 -132			; ffffff7cH
  00520	02 00 00 00	 DD	 2
  00524	00 00 00 00	 DD	 $LN32@Pitch_ol
  00528	34 fd ff ff	 DD	 -716			; fffffd34H
  0052c	40 02 00 00	 DD	 576			; 00000240H
  00530	00 00 00 00	 DD	 $LN33@Pitch_ol
  00534	c0 fa ff ff	 DD	 -1344			; fffffac0H
  00538	5e 02 00 00	 DD	 606			; 0000025eH
  0053c	00 00 00 00	 DD	 $LN34@Pitch_ol
$LN34@Pitch_ol:
  00540	73		 DB	 115			; 00000073H
  00541	63		 DB	 99			; 00000063H
  00542	61		 DB	 97			; 00000061H
  00543	6c		 DB	 108			; 0000006cH
  00544	65		 DB	 101			; 00000065H
  00545	64		 DB	 100			; 00000064H
  00546	5f		 DB	 95			; 0000005fH
  00547	73		 DB	 115			; 00000073H
  00548	69		 DB	 105			; 00000069H
  00549	67		 DB	 103			; 00000067H
  0054a	6e		 DB	 110			; 0000006eH
  0054b	61		 DB	 97			; 00000061H
  0054c	6c		 DB	 108			; 0000006cH
  0054d	00		 DB	 0
$LN33@Pitch_ol:
  0054e	63		 DB	 99			; 00000063H
  0054f	6f		 DB	 111			; 0000006fH
  00550	72		 DB	 114			; 00000072H
  00551	72		 DB	 114			; 00000072H
  00552	00		 DB	 0
$LN32@Pitch_ol:
  00553	63		 DB	 99			; 00000063H
  00554	6f		 DB	 111			; 0000006fH
  00555	72		 DB	 114			; 00000072H
  00556	72		 DB	 114			; 00000072H
  00557	5f		 DB	 95			; 0000005fH
  00558	68		 DB	 104			; 00000068H
  00559	70		 DB	 112			; 00000070H
  0055a	5f		 DB	 95			; 0000005fH
  0055b	6d		 DB	 109			; 0000006dH
  0055c	61		 DB	 97			; 00000061H
  0055d	78		 DB	 120			; 00000078H
  0055e	00		 DB	 0
$LN31@Pitch_ol:
  0055f	6d		 DB	 109			; 0000006dH
  00560	61		 DB	 97			; 00000061H
  00561	78		 DB	 120			; 00000078H
  00562	33		 DB	 51			; 00000033H
  00563	00		 DB	 0
$LN30@Pitch_ol:
  00564	6d		 DB	 109			; 0000006dH
  00565	61		 DB	 97			; 00000061H
  00566	78		 DB	 120			; 00000078H
  00567	32		 DB	 50			; 00000032H
  00568	00		 DB	 0
$LN29@Pitch_ol:
  00569	6d		 DB	 109			; 0000006dH
  0056a	61		 DB	 97			; 00000061H
  0056b	78		 DB	 120			; 00000078H
  0056c	31		 DB	 49			; 00000031H
  0056d	00		 DB	 0
_Pitch_ol ENDP
_TEXT	ENDS
END
