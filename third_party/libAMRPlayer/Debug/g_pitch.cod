; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\g_pitch.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_g_pitch_id
CONST	SEGMENT
_g_pitch_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_G_pitch
EXTRN	_sub:PROC
EXTRN	_shr:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_shl:PROC
EXTRN	_div_s:PROC
EXTRN	_norm_l:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_logic16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_Overflow:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\g_pitch.c
;	COMDAT _G_pitch
_TEXT	SEGMENT
_scaled_y1$ = -172					; size = 80
_s$ = -84						; size = 4
_gain$ = -72						; size = 2
_exp_yy$ = -60						; size = 2
_exp_xy$ = -48						; size = 2
_yy$ = -36						; size = 2
_xy$ = -24						; size = 2
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_xn$ = 12						; size = 4
_y1$ = 16						; size = 4
_g_coeff$ = 20						; size = 4
_L_subfr$ = 24						; size = 2
_G_pitch PROC						; COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 90 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-368]
  00012	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 67   :     Word16 i;
; 68   :     Word16 xy, yy, exp_xy, exp_yy, gain;
; 69   :     Word32 s;
; 70   : 
; 71   :     Word16 scaled_y1[L_SUBFR];   /* Usually dynamic allocation of (L_subfr) */
; 72   : 
; 73   :     /* divide "y1[]" by 4 to avoid overflow */
; 74   : 
; 75   :     for (i = 0; i < L_subfr; i++)

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0002e	eb 0c		 jmp	 SHORT $LN22@G_pitch
$LN21@G_pitch:
  00030	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00034	66 83 c0 01	 add	 ax, 1
  00038	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN22@G_pitch:
  0003c	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00040	0f bf 4d 18	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  00044	3b c1		 cmp	 eax, ecx
  00046	7d 29		 jge	 SHORT $LN20@G_pitch

; 76   :     {
; 77   :         scaled_y1[i] = shr (y1[i], 2); move16 (); 

  00048	6a 02		 push	 2
  0004a	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0004e	8b 4d 10	 mov	 ecx, DWORD PTR _y1$[ebp]
  00051	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 _shr
  0005b	83 c4 08	 add	 esp, 8
  0005e	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00062	66 89 84 4d 54
	ff ff ff	 mov	 WORD PTR _scaled_y1$[ebp+ecx*2], ax
  0006a	e8 00 00 00 00	 call	 _move16

; 78   :     }

  0006f	eb bf		 jmp	 SHORT $LN21@G_pitch
$LN20@G_pitch:

; 79   : 
; 80   :     /* Compute scalar product <y1[],y1[]> */
; 81   : 
; 82   :     /* Q12 scaling / MR122 */
; 83   :     Overflow = 0;                   move16 ();

  00071	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _Overflow, 0
  0007b	e8 00 00 00 00	 call	 _move16

; 84   :     s = 1L;                         move32 (); /* Avoid case of all zeros */

  00080	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _s$[ebp], 1
  00087	e8 00 00 00 00	 call	 _move32

; 85   :     for (i = 0; i < L_subfr; i++)

  0008c	33 c0		 xor	 eax, eax
  0008e	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00092	eb 0c		 jmp	 SHORT $LN19@G_pitch
$LN18@G_pitch:
  00094	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00098	66 83 c0 01	 add	 ax, 1
  0009c	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN19@G_pitch:
  000a0	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000a4	0f bf 4d 18	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  000a8	3b c1		 cmp	 eax, ecx
  000aa	7d 29		 jge	 SHORT $LN17@G_pitch

; 86   :     {
; 87   :         s = L_mac (s, y1[i], y1[i]);

  000ac	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000b0	8b 4d 10	 mov	 ecx, DWORD PTR _y1$[ebp]
  000b3	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000b7	52		 push	 edx
  000b8	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000bc	8b 4d 10	 mov	 ecx, DWORD PTR _y1$[ebp]
  000bf	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000c3	52		 push	 edx
  000c4	8b 45 ac	 mov	 eax, DWORD PTR _s$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _L_mac
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	89 45 ac	 mov	 DWORD PTR _s$[ebp], eax

; 88   :     }

  000d3	eb bf		 jmp	 SHORT $LN18@G_pitch
$LN17@G_pitch:

; 89   :     test (); 

  000d5	e8 00 00 00 00	 call	 _test

; 90   :     if (Overflow == 0)       /* Test for overflow */

  000da	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Overflow, 0
  000e1	75 33		 jne	 SHORT $LN16@G_pitch

; 91   :     {
; 92   :         exp_yy = norm_l (s);

  000e3	8b 45 ac	 mov	 eax, DWORD PTR _s$[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _norm_l
  000ec	83 c4 04	 add	 esp, 4
  000ef	66 89 45 c4	 mov	 WORD PTR _exp_yy$[ebp], ax

; 93   :         yy = round (L_shl (s, exp_yy));

  000f3	0f b7 45 c4	 movzx	 eax, WORD PTR _exp_yy$[ebp]
  000f7	50		 push	 eax
  000f8	8b 4d ac	 mov	 ecx, DWORD PTR _s$[ebp]
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 _L_shl
  00101	83 c4 08	 add	 esp, 8
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _round
  0010a	83 c4 04	 add	 esp, 4
  0010d	66 89 45 dc	 mov	 WORD PTR _yy$[ebp], ax

; 94   :     }
; 95   :     else

  00111	e9 98 00 00 00	 jmp	 $LN15@G_pitch
$LN16@G_pitch:

; 96   :     {
; 97   :         s = 1L;                     move32 (); /* Avoid case of all zeros */

  00116	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _s$[ebp], 1
  0011d	e8 00 00 00 00	 call	 _move32

; 98   :         for (i = 0; i < L_subfr; i++)

  00122	33 c0		 xor	 eax, eax
  00124	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00128	eb 0c		 jmp	 SHORT $LN14@G_pitch
$LN13@G_pitch:
  0012a	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0012e	66 83 c0 01	 add	 ax, 1
  00132	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN14@G_pitch:
  00136	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0013a	0f bf 4d 18	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  0013e	3b c1		 cmp	 eax, ecx
  00140	7d 2b		 jge	 SHORT $LN12@G_pitch

; 99   :         {
; 100  :             s = L_mac (s, scaled_y1[i], scaled_y1[i]);

  00142	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00146	0f b7 8c 45 54
	ff ff ff	 movzx	 ecx, WORD PTR _scaled_y1$[ebp+eax*2]
  0014e	51		 push	 ecx
  0014f	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  00153	0f b7 84 55 54
	ff ff ff	 movzx	 eax, WORD PTR _scaled_y1$[ebp+edx*2]
  0015b	50		 push	 eax
  0015c	8b 4d ac	 mov	 ecx, DWORD PTR _s$[ebp]
  0015f	51		 push	 ecx
  00160	e8 00 00 00 00	 call	 _L_mac
  00165	83 c4 0c	 add	 esp, 12			; 0000000cH
  00168	89 45 ac	 mov	 DWORD PTR _s$[ebp], eax

; 101  :         }

  0016b	eb bd		 jmp	 SHORT $LN13@G_pitch
$LN12@G_pitch:

; 102  :         exp_yy = norm_l (s);

  0016d	8b 45 ac	 mov	 eax, DWORD PTR _s$[ebp]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _norm_l
  00176	83 c4 04	 add	 esp, 4
  00179	66 89 45 c4	 mov	 WORD PTR _exp_yy$[ebp], ax

; 103  :         yy = round (L_shl (s, exp_yy));

  0017d	0f b7 45 c4	 movzx	 eax, WORD PTR _exp_yy$[ebp]
  00181	50		 push	 eax
  00182	8b 4d ac	 mov	 ecx, DWORD PTR _s$[ebp]
  00185	51		 push	 ecx
  00186	e8 00 00 00 00	 call	 _L_shl
  0018b	83 c4 08	 add	 esp, 8
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 _round
  00194	83 c4 04	 add	 esp, 4
  00197	66 89 45 dc	 mov	 WORD PTR _yy$[ebp], ax

; 104  :         exp_yy = sub (exp_yy, 4);

  0019b	6a 04		 push	 4
  0019d	0f b7 45 c4	 movzx	 eax, WORD PTR _exp_yy$[ebp]
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 _sub
  001a7	83 c4 08	 add	 esp, 8
  001aa	66 89 45 c4	 mov	 WORD PTR _exp_yy$[ebp], ax
$LN15@G_pitch:

; 105  :     }
; 106  :         
; 107  :     /* Compute scalar product <xn[],y1[]> */
; 108  :         
; 109  :     Overflow = 0;                   move16 (); 

  001ae	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _Overflow, 0
  001b8	e8 00 00 00 00	 call	 _move16

; 110  :     s = 1L;                         move32 (); /* Avoid case of all zeros */

  001bd	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _s$[ebp], 1
  001c4	e8 00 00 00 00	 call	 _move32

; 111  :         
; 112  :     for (i = 0; i < L_subfr; i++)

  001c9	33 c0		 xor	 eax, eax
  001cb	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  001cf	eb 0c		 jmp	 SHORT $LN11@G_pitch
$LN10@G_pitch:
  001d1	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  001d5	66 83 c0 01	 add	 ax, 1
  001d9	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN11@G_pitch:
  001dd	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  001e1	0f bf 4d 18	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  001e5	3b c1		 cmp	 eax, ecx
  001e7	7d 29		 jge	 SHORT $LN9@G_pitch

; 113  :     {
; 114  :         s = L_mac(s, xn[i], y1[i]);

  001e9	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  001ed	8b 4d 10	 mov	 ecx, DWORD PTR _y1$[ebp]
  001f0	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  001f4	52		 push	 edx
  001f5	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  001f9	8b 4d 0c	 mov	 ecx, DWORD PTR _xn$[ebp]
  001fc	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00200	52		 push	 edx
  00201	8b 45 ac	 mov	 eax, DWORD PTR _s$[ebp]
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 _L_mac
  0020a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020d	89 45 ac	 mov	 DWORD PTR _s$[ebp], eax

; 115  :     }

  00210	eb bf		 jmp	 SHORT $LN10@G_pitch
$LN9@G_pitch:

; 116  :     test (); 

  00212	e8 00 00 00 00	 call	 _test

; 117  :     if (Overflow == 0)

  00217	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Overflow, 0
  0021e	75 33		 jne	 SHORT $LN8@G_pitch

; 118  :     {
; 119  :         exp_xy = norm_l (s);

  00220	8b 45 ac	 mov	 eax, DWORD PTR _s$[ebp]
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 _norm_l
  00229	83 c4 04	 add	 esp, 4
  0022c	66 89 45 d0	 mov	 WORD PTR _exp_xy$[ebp], ax

; 120  :         xy = round (L_shl (s, exp_xy));

  00230	0f b7 45 d0	 movzx	 eax, WORD PTR _exp_xy$[ebp]
  00234	50		 push	 eax
  00235	8b 4d ac	 mov	 ecx, DWORD PTR _s$[ebp]
  00238	51		 push	 ecx
  00239	e8 00 00 00 00	 call	 _L_shl
  0023e	83 c4 08	 add	 esp, 8
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 _round
  00247	83 c4 04	 add	 esp, 4
  0024a	66 89 45 e8	 mov	 WORD PTR _xy$[ebp], ax

; 121  :     }
; 122  :     else

  0024e	e9 97 00 00 00	 jmp	 $LN7@G_pitch
$LN8@G_pitch:

; 123  :     {
; 124  :         s = 1L;                     move32 (); /* Avoid case of all zeros */

  00253	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _s$[ebp], 1
  0025a	e8 00 00 00 00	 call	 _move32

; 125  :         for (i = 0; i < L_subfr; i++)

  0025f	33 c0		 xor	 eax, eax
  00261	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00265	eb 0c		 jmp	 SHORT $LN6@G_pitch
$LN5@G_pitch:
  00267	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0026b	66 83 c0 01	 add	 ax, 1
  0026f	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN6@G_pitch:
  00273	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00277	0f bf 4d 18	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  0027b	3b c1		 cmp	 eax, ecx
  0027d	7d 2a		 jge	 SHORT $LN4@G_pitch

; 126  :         {
; 127  :             s = L_mac (s, xn[i], scaled_y1[i]);

  0027f	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00283	0f b7 8c 45 54
	ff ff ff	 movzx	 ecx, WORD PTR _scaled_y1$[ebp+eax*2]
  0028b	51		 push	 ecx
  0028c	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  00290	8b 45 0c	 mov	 eax, DWORD PTR _xn$[ebp]
  00293	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00297	51		 push	 ecx
  00298	8b 55 ac	 mov	 edx, DWORD PTR _s$[ebp]
  0029b	52		 push	 edx
  0029c	e8 00 00 00 00	 call	 _L_mac
  002a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a4	89 45 ac	 mov	 DWORD PTR _s$[ebp], eax

; 128  :         }

  002a7	eb be		 jmp	 SHORT $LN5@G_pitch
$LN4@G_pitch:

; 129  :         exp_xy = norm_l (s);

  002a9	8b 45 ac	 mov	 eax, DWORD PTR _s$[ebp]
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 _norm_l
  002b2	83 c4 04	 add	 esp, 4
  002b5	66 89 45 d0	 mov	 WORD PTR _exp_xy$[ebp], ax

; 130  :         xy = round (L_shl (s, exp_xy));

  002b9	0f b7 45 d0	 movzx	 eax, WORD PTR _exp_xy$[ebp]
  002bd	50		 push	 eax
  002be	8b 4d ac	 mov	 ecx, DWORD PTR _s$[ebp]
  002c1	51		 push	 ecx
  002c2	e8 00 00 00 00	 call	 _L_shl
  002c7	83 c4 08	 add	 esp, 8
  002ca	50		 push	 eax
  002cb	e8 00 00 00 00	 call	 _round
  002d0	83 c4 04	 add	 esp, 4
  002d3	66 89 45 e8	 mov	 WORD PTR _xy$[ebp], ax

; 131  :         exp_xy = sub (exp_xy, 2);

  002d7	6a 02		 push	 2
  002d9	0f b7 45 d0	 movzx	 eax, WORD PTR _exp_xy$[ebp]
  002dd	50		 push	 eax
  002de	e8 00 00 00 00	 call	 _sub
  002e3	83 c4 08	 add	 esp, 8
  002e6	66 89 45 d0	 mov	 WORD PTR _exp_xy$[ebp], ax
$LN7@G_pitch:

; 132  :     }
; 133  : 
; 134  :     g_coeff[0] = yy;                 move16 ();

  002ea	b8 02 00 00 00	 mov	 eax, 2
  002ef	6b c8 00	 imul	 ecx, eax, 0
  002f2	8b 55 14	 mov	 edx, DWORD PTR _g_coeff$[ebp]
  002f5	66 8b 45 dc	 mov	 ax, WORD PTR _yy$[ebp]
  002f9	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  002fd	e8 00 00 00 00	 call	 _move16

; 135  :     g_coeff[1] = sub (15, exp_yy);   move16 ();

  00302	0f b7 45 c4	 movzx	 eax, WORD PTR _exp_yy$[ebp]
  00306	50		 push	 eax
  00307	6a 0f		 push	 15			; 0000000fH
  00309	e8 00 00 00 00	 call	 _sub
  0030e	83 c4 08	 add	 esp, 8
  00311	b9 02 00 00 00	 mov	 ecx, 2
  00316	c1 e1 00	 shl	 ecx, 0
  00319	8b 55 14	 mov	 edx, DWORD PTR _g_coeff$[ebp]
  0031c	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  00320	e8 00 00 00 00	 call	 _move16

; 136  :     g_coeff[2] = xy;                 move16 ();

  00325	b8 02 00 00 00	 mov	 eax, 2
  0032a	d1 e0		 shl	 eax, 1
  0032c	8b 4d 14	 mov	 ecx, DWORD PTR _g_coeff$[ebp]
  0032f	66 8b 55 e8	 mov	 dx, WORD PTR _xy$[ebp]
  00333	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx
  00337	e8 00 00 00 00	 call	 _move16

; 137  :     g_coeff[3] = sub (15, exp_xy);   move16 ();

  0033c	0f b7 45 d0	 movzx	 eax, WORD PTR _exp_xy$[ebp]
  00340	50		 push	 eax
  00341	6a 0f		 push	 15			; 0000000fH
  00343	e8 00 00 00 00	 call	 _sub
  00348	83 c4 08	 add	 esp, 8
  0034b	b9 02 00 00 00	 mov	 ecx, 2
  00350	6b d1 03	 imul	 edx, ecx, 3
  00353	8b 4d 14	 mov	 ecx, DWORD PTR _g_coeff$[ebp]
  00356	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  0035a	e8 00 00 00 00	 call	 _move16

; 138  :     
; 139  :     /* If (xy < 4) gain = 0 */
; 140  : 
; 141  :     i = sub (xy, 4);

  0035f	6a 04		 push	 4
  00361	0f b7 45 e8	 movzx	 eax, WORD PTR _xy$[ebp]
  00365	50		 push	 eax
  00366	e8 00 00 00 00	 call	 _sub
  0036b	83 c4 08	 add	 esp, 8
  0036e	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax

; 142  : 
; 143  :     test (); 

  00372	e8 00 00 00 00	 call	 _test

; 144  :     if (i < 0)

  00377	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0037b	85 c0		 test	 eax, eax
  0037d	7d 07		 jge	 SHORT $LN3@G_pitch

; 145  :         return ((Word16) 0);

  0037f	33 c0		 xor	 eax, eax
  00381	e9 b2 00 00 00	 jmp	 $LN23@G_pitch
$LN3@G_pitch:

; 146  : 
; 147  :     /* compute gain = xy/yy */
; 148  : 
; 149  :     xy = shr (xy, 1);                  /* Be sure xy < yy */

  00386	6a 01		 push	 1
  00388	0f b7 45 e8	 movzx	 eax, WORD PTR _xy$[ebp]
  0038c	50		 push	 eax
  0038d	e8 00 00 00 00	 call	 _shr
  00392	83 c4 08	 add	 esp, 8
  00395	66 89 45 e8	 mov	 WORD PTR _xy$[ebp], ax

; 150  :     gain = div_s (xy, yy);

  00399	0f b7 45 dc	 movzx	 eax, WORD PTR _yy$[ebp]
  0039d	50		 push	 eax
  0039e	0f b7 4d e8	 movzx	 ecx, WORD PTR _xy$[ebp]
  003a2	51		 push	 ecx
  003a3	e8 00 00 00 00	 call	 _div_s
  003a8	83 c4 08	 add	 esp, 8
  003ab	66 89 45 b8	 mov	 WORD PTR _gain$[ebp], ax

; 151  : 
; 152  :     i = sub (exp_xy, exp_yy);      /* Denormalization of division */        

  003af	0f b7 45 c4	 movzx	 eax, WORD PTR _exp_yy$[ebp]
  003b3	50		 push	 eax
  003b4	0f b7 4d d0	 movzx	 ecx, WORD PTR _exp_xy$[ebp]
  003b8	51		 push	 ecx
  003b9	e8 00 00 00 00	 call	 _sub
  003be	83 c4 08	 add	 esp, 8
  003c1	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax

; 153  :     gain = shr (gain, i);

  003c5	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  003c9	50		 push	 eax
  003ca	0f b7 4d b8	 movzx	 ecx, WORD PTR _gain$[ebp]
  003ce	51		 push	 ecx
  003cf	e8 00 00 00 00	 call	 _shr
  003d4	83 c4 08	 add	 esp, 8
  003d7	66 89 45 b8	 mov	 WORD PTR _gain$[ebp], ax

; 154  :     
; 155  :     /* if(gain >1.2) gain = 1.2 */
; 156  :     
; 157  :     test (); 

  003db	e8 00 00 00 00	 call	 _test

; 158  :     if (sub (gain, 19661) > 0)

  003e0	68 cd 4c 00 00	 push	 19661			; 00004ccdH
  003e5	0f b7 45 b8	 movzx	 eax, WORD PTR _gain$[ebp]
  003e9	50		 push	 eax
  003ea	e8 00 00 00 00	 call	 _sub
  003ef	83 c4 08	 add	 esp, 8
  003f2	0f bf c8	 movsx	 ecx, ax
  003f5	85 c9		 test	 ecx, ecx
  003f7	7e 0e		 jle	 SHORT $LN2@G_pitch

; 159  :     {
; 160  :         gain = 19661;                   move16 (); 

  003f9	b8 cd 4c 00 00	 mov	 eax, 19661		; 00004ccdH
  003fe	66 89 45 b8	 mov	 WORD PTR _gain$[ebp], ax
  00402	e8 00 00 00 00	 call	 _move16
$LN2@G_pitch:

; 161  :     }
; 162  : 
; 163  :     test ();

  00407	e8 00 00 00 00	 call	 _test

; 164  :     if (sub(mode, MR122) == 0)

  0040c	6a 07		 push	 7
  0040e	0f b7 45 08	 movzx	 eax, WORD PTR _mode$[ebp]
  00412	50		 push	 eax
  00413	e8 00 00 00 00	 call	 _sub
  00418	83 c4 08	 add	 esp, 8
  0041b	0f bf c8	 movsx	 ecx, ax
  0041e	85 c9		 test	 ecx, ecx
  00420	75 12		 jne	 SHORT $LN1@G_pitch

; 165  :     {
; 166  :        /* clear 2 LSBits */
; 167  :        gain = gain & 0xfffC;            logic16 ();

  00422	0f bf 45 b8	 movsx	 eax, WORD PTR _gain$[ebp]
  00426	25 fc ff 00 00	 and	 eax, 65532		; 0000fffcH
  0042b	66 89 45 b8	 mov	 WORD PTR _gain$[ebp], ax
  0042f	e8 00 00 00 00	 call	 _logic16
$LN1@G_pitch:

; 168  :     }
; 169  :     
; 170  :     return (gain);

  00434	66 8b 45 b8	 mov	 ax, WORD PTR _gain$[ebp]
$LN23@G_pitch:

; 171  : }

  00438	52		 push	 edx
  00439	8b cd		 mov	 ecx, ebp
  0043b	50		 push	 eax
  0043c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN27@G_pitch
  00442	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00447	58		 pop	 eax
  00448	5a		 pop	 edx
  00449	5f		 pop	 edi
  0044a	5e		 pop	 esi
  0044b	5b		 pop	 ebx
  0044c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044f	33 cd		 xor	 ecx, ebp
  00451	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00456	81 c4 70 01 00
	00		 add	 esp, 368		; 00000170H
  0045c	3b ec		 cmp	 ebp, esp
  0045e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00463	8b e5		 mov	 esp, ebp
  00465	5d		 pop	 ebp
  00466	c3		 ret	 0
  00467	90		 npad	 1
$LN27@G_pitch:
  00468	01 00 00 00	 DD	 1
  0046c	00 00 00 00	 DD	 $LN26@G_pitch
$LN26@G_pitch:
  00470	54 ff ff ff	 DD	 -172			; ffffff54H
  00474	50 00 00 00	 DD	 80			; 00000050H
  00478	00 00 00 00	 DD	 $LN25@G_pitch
$LN25@G_pitch:
  0047c	73		 DB	 115			; 00000073H
  0047d	63		 DB	 99			; 00000063H
  0047e	61		 DB	 97			; 00000061H
  0047f	6c		 DB	 108			; 0000006cH
  00480	65		 DB	 101			; 00000065H
  00481	64		 DB	 100			; 00000064H
  00482	5f		 DB	 95			; 0000005fH
  00483	79		 DB	 121			; 00000079H
  00484	31		 DB	 49			; 00000031H
  00485	00		 DB	 0
_G_pitch ENDP
_TEXT	ENDS
END
