; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\qua_gain.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_qua_gain_id
CONST	SEGMENT
_qua_gain_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_table_gain_highrates DW 0241H
	DW	0296H
	DW	0f57cH
	DW	0c0aaH
	DW	0326H
	DW	072cH
	DW	0fb5fH
	DW	0e421H
	DW	0c25H
	DW	041cH
	DW	0f828H
	DW	0d0caH
	DW	01055H
	DW	056bH
	DW	0f9c0H
	DW	0da63H
	DW	0945H
	DW	0591H
	DW	0f9e8H
	DW	0db4eH
	DW	0cb0H
	DW	07c1H
	DW	0fbd2H
	DW	0e6d6H
	DW	0723H
	DW	0910H
	DW	0fcb8H
	DW	0ec40H
	DW	03adH
	DW	0cf2H
	DW	0fec7H
	DW	0f8a3H
	DW	092fH
	DW	0ba1H
	DW	0fe29H
	DW	0f4eaH
	DW	0e20H
	DW	0974H
	DW	0fcf7H
	DW	0edb7H
	DW	0d7bH
	DW	0c18H
	DW	0fe62H
	DW	0f646H
	DW	0b8bH
	DW	010cdH
	DW	048H
	DW	01b2H
	DW	0738H
	DW	01194H
	DW	08bH
	DW	0344H
	DW	0f2cH
	DW	01528H
	DW	019dH
	DW	09b4H
	DW	04a3H
	DW	01c2aH
	DW	0343H
	DW	013a6H
	DW	0c0bH
	DW	02328H
	DW	048bH
	DW	01b5aH
	DW	01cd8H
	DW	0373H
	DW	0f725H
	DW	0cab1H
	DW	0174aH
	DW	05e2H
	DW	0fa3aH
	DW	0dd3cH
	DW	01423H
	DW	0856H
	DW	0fc3dH
	DW	0e958H
	DW	01f08H
	DW	07d9H
	DW	0fbe4H
	DW	0e741H
	DW	0196bH
	DW	08caH
	DW	0fc8bH
	DW	0eb31H
	DW	01df6H
	DW	0ac0H
	DW	0fdb4H
	DW	0f22fH
	DW	01740H
	DW	0bc8H
	DW	0fe3cH
	DW	0f55cH
	DW	01322H
	DW	0eb4H
	DW	0ff83H
	DW	0fd11H
	DW	01b4dH
	DW	0e04H
	DW	0ff3cH
	DW	0fb67H
	DW	01feeH
	DW	0f8aH
	DW	0ffd5H
	DW	0fefcH
	DW	017b0H
	DW	01134H
	DW	06bH
	DW	0285H
	DW	01e1dH
	DW	013dfH
	DW	0140H
	DW	0788H
	DW	01593H
	DW	01785H
	DW	0239H
	DW	0d62H
	DW	01e59H
	DW	01bd6H
	DW	0332H
	DW	0133eH
	DW	017acH
	DW	01f02H
	DW	03d1H
	DW	016fdH
	DW	015daH
	DW	02cdfH
	DW	05f3H
	DW	023d4H
	DW	02955H
	DW	054cH
	DW	0f99fH
	DW	0d999H
	DW	02359H
	DW	063dH
	DW	0fa91H
	DW	0df44H
	DW	02642H
	DW	07f3H
	DW	0fbf7H
	DW	0e7b4H
	DW	022f2H
	DW	096fH
	DW	0fcf4H
	DW	0eda4H
	DW	02838H
	DW	0a18H
	DW	0fd57H
	DW	0effdH
	DW	024bfH
	DW	0aaeH
	DW	0fdabH
	DW	0f1f5H
	DW	021fcH
	DW	0c92H
	DW	0fe9cH
	DW	0f7a0H
	DW	0261dH
	DW	0d43H
	DW	0feebH
	DW	0f97bH
	DW	027c1H
	DW	0f34H
	DW	0ffb5H
	DW	0fe3aH
	DW	023d2H
	DW	011b0H
	DW	094H
	DW	037bH
	DW	027a8H
	DW	0138cH
	DW	0128H
	DW	06f5H
	DW	0239aH
	DW	01667H
	DW	01f1H
	DW	0bb1H
	DW	02904H
	DW	0187aH
	DW	0274H
	DW	0ec6H
	DW	0277eH
	DW	01dcfH
	DW	0397H
	DW	0159eH
	DW	0228cH
	DW	02217H
	DW	045dH
	DW	01a48H
	DW	022fcH
	DW	030d0H
	DW	0670H
	DW	026c1H
	DW	0327cH
	DW	03d0H
	DW	0f7b9H
	DW	0ce2fH
	DW	02cabH
	DW	06dbH
	DW	0fb1cH
	DW	0e28dH
	DW	02f6aH
	DW	0918H
	DW	0fcbdH
	DW	0ec60H
	DW	02c7cH
	DW	0940H
	DW	0fcd6H
	DW	0ecf8H
	DW	029ccH
	DW	0bf8H
	DW	0fe53H
	DW	0f5ecH
	DW	0302cH
	DW	0b2dH
	DW	0fdeeH
	DW	0f388H
	DW	02dcaH
	DW	0cffH
	DW	0fecdH
	DW	0f8c8H
	DW	02c06H
	DW	0e74H
	DW	0ff6aH
	DW	0fc78H
	DW	02a6dH
	DW	0113dH
	DW	06eH
	DW	0297H
	DW	02f32H
	DW	011b5H
	DW	096H
	DW	0386H
	DW	02c13H
	DW	01455H
	DW	0162H
	DW	0854H
	DW	02eb8H
	DW	018a1H
	DW	027dH
	DW	0efdH
	DW	02b9fH
	DW	01d6eH
	DW	0384H
	DW	0152cH
	DW	02f60H
	DW	02089H
	DW	0419H
	DW	018a8H
	DW	02ad9H
	DW	02a19H
	DW	0595H
	DW	0219cH
	DW	0283cH
	DW	043e0H
	DW	0857H
	DW	03235H
	DW	0364bH
	DW	0691H
	DW	0fadcH
	DW	0e10fH
	DW	03124H
	DW	07fdH
	DW	0fbfeH
	DW	0e7ddH
	DW	033d1H
	DW	0987H
	DW	0fd02H
	DW	0edfeH
	DW	036d1H
	DW	0badH
	DW	0fe2fH
	DW	0f50eH
	DW	0348cH
	DW	0c1aH
	DW	0fe63H
	DW	0f64eH
	DW	0306cH
	DW	0e4aH
	DW	0ff59H
	DW	0fc12H
	DW	034c6H
	DW	0ec4H
	DW	0ff89H
	DW	0fd37H
	DW	03250H
	DW	010b0H
	DW	03eH
	DW	0176H
	DW	034ddH
	DW	012fdH
	DW	0fdH
	DW	05f3H
	DW	0317bH
	DW	01551H
	DW	01a8H
	DW	09f8H
	DW	0361eH
	DW	017daH
	DW	024eH
	DW	0ddfH
	DW	032e7H
	DW	01953H
	DW	02a6H
	DW	0ff4H
	DW	034f5H
	DW	01e29H
	DW	03a9H
	DW	01607H
	DW	0329dH
	DW	0245fH
	DW	04bdH
	DW	01c88H
	DW	03592H
	DW	02d1fH
	DW	05fcH
	DW	02405H
	DW	0312fH
	DW	03b66H
	DW	0792H
	DW	02d93H
	DW	03b09H
	DW	0604H
	DW	0fa5bH
	DW	0de04H
	DW	03ae0H
	DW	091dH
	DW	0fcc0H
	DW	0ec71H
	DW	038bfH
	DW	09cfH
	DW	0fd2dH
	DW	0ef00H
	DW	03964H
	DW	0c7fH
	DW	0fe93H
	DW	0f76bH
	DW	03c16H
	DW	0de8H
	DW	0ff31H
	DW	0fb21H
	DW	03735H
	DW	0f78H
	DW	0ffceH
	DW	0fed4H
	DW	03afeH
	DW	0108cH
	DW	032H
	DW	012aH
	DW	037fcH
	DW	012d8H
	DW	0f2H
	DW	05aeH
	DW	039feH
	DW	0154bH
	DW	01a6H
	DW	09eeH
	DW	03bcaH
	DW	017c3H
	DW	0248H
	DW	0dbeH
	DW	037f9H
	DW	01ae8H
	DW	0300H
	DW	0120fH
	DW	03ad4H
	DW	01e09H
	DW	03a2H
	DW	015e2H
	DW	03846H
	DW	024d2H
	DW	04cfH
	DW	01cf5H
	DW	03c1bH
	DW	0260dH
	DW	0500H
	DW	01e1aH
	DW	039e8H
	DW	037bfH
	DW	0734H
	DW	02b5eH
	DW	03520H
	DW	0616bH
	DW	0a6dH
	DW	03ec3H
	DW	0400cH
	DW	07b1H
	DW	0fbc6H
	DW	0e68bH
	DW	041b1H
	DW	0b10H
	DW	0fddfH
	DW	0f32dH
	DW	03d61H
	DW	0b1bH
	DW	0fde5H
	DW	0f350H
	DW	03ee8H
	DW	0d08H
	DW	0fed1H
	DW	0f8dfH
	DW	04000H
	DW	0f7bH
	DW	0ffcfH
	DW	0fedaH
	DW	0422cH
	DW	011e3H
	DW	0a5H
	DW	03e0H
	DW	03d5fH
	DW	011f7H
	DW	0abH
	DW	0406H
	DW	03f5eH
	DW	01548H
	DW	01a5H
	DW	09e9H
	DW	041c0H
	DW	018eeH
	DW	028fH
	DW	0f69H
	DW	03d81H
	DW	01be5H
	DW	0335H
	DW	01350H
	DW	03fc6H
	DW	01d2dH
	DW	0378H
	DW	014dfH
	DW	040e3H
	DW	021b0H
	DW	044cH
	DW	019deH
	DW	04284H
	DW	028b2H
	DW	0563H
	DW	0206fH
	DW	03e21H
	DW	02e29H
	DW	061dH
	DW	024cfH
	DW	041eeH
	DW	03962H
	DW	075fH
	DW	02c60H
	DW	04083H
	DW	05186H
	DW	0966H
	DW	03893H
	DW	046deH
	DW	0823H
	DW	0fc19H
	DW	0e883H
	DW	04bc9H
	DW	0c6aH
	DW	0fe89H
	DW	0f72fH
	DW	04464H
	DW	0d62H
	DW	0fef8H
	DW	0f9cbH
	DW	04e56H
	DW	0fbbH
	DW	0ffe7H
	DW	0ff69H
	DW	04695H
	DW	01099H
	DW	036H
	DW	0146H
	DW	04a08H
	DW	013caH
	DW	013aH
	DW	0762H
	DW	0452fH
	DW	0151aH
	DW	0199H
	DW	099dH
	DW	04d7bH
	DW	01830H
	DW	0262H
	DW	0e5cH
	DW	0461eH
	DW	01b66H
	DW	031bH
	DW	012b0H
	DW	05346H
	DW	01ec5H
	DW	03c6H
	DW	016b8H
	DW	045f6H
	DW	02449H
	DW	04baH
	DW	01c73H
	DW	04ac8H
	DW	0244aH
	DW	04baH
	DW	01c74H
	DW	05025H
	DW	02c75H
	DW	05e6H
	DW	02381H
	DW	0469bH
	DW	03895H
	DW	074aH
	DW	02be2H
	DW	04e1fH
	DW	045daH
	DW	0881H
	DW	03334H
	DW	0499aH
	DW	07ffcH
	DW	0c00H
	DW	0483eH
_table_gain_lowrates DW 02a3dH
	DW	07051H
	DW	0b3fH
	DW	043b5H
	DW	05000H
	DW	0ae1H
	DW	0fdc6H
	DW	0f299H
	DW	04999H
	DW	019c2H
	DW	02bfH
	DW	0108bH
	DW	01851H
	DW	01cf5H
	DW	036cH
	DW	0149cH
	DW	04333H
	DW	028ccH
	DW	0567H
	DW	02085H
	DW	0547aH
	DW	04f5H
	DW	0f93dH
	DW	0d74aH
	DW	0528fH
	DW	01147H
	DW	071H
	DW	02abH
	DW	02c28H
	DW	0614H
	DW	0fa6aH
	DW	0de5fH
	DW	04a3dH
	DW	03214H
	DW	0696H
	DW	027a4H
	DW	043d7H
	DW	09c2H
	DW	0fd25H
	DW	0eed2H
	DW	045c2H
	DW	012e1H
	DW	0f4H
	DW	05c0H
	DW	0270aH
	DW	09c2H
	DW	0fd25H
	DW	0eed2H
	DW	0447aH
	DW	01eb8H
	DW	03c4H
	DW	016aaH
	DW	037aeH
	DW	075cH
	DW	0fb85H
	DW	0e505H
	DW	03e14H
	DW	0c51H
	DW	0fe7dH
	DW	0f6e9H
	DW	01a3dH
	DW	070aH
	DW	0fb43H
	DW	0e379H
	DW	0470aH
	DW	04ee1H
	DW	0935H
	DW	0376dH
	DW	04666H
	DW	0bd7H
	DW	0fe43H
	DW	0f58aH
	DW	04147H
	DW	016e1H
	DW	0210H
	DW	0c6dH
	DW	0228fH
	DW	0faeH
	DW	0ffe2H
	DW	0ff4cH
	DW	03e14H
	DW	0230aH
	DW	0486H
	DW	01b3cH
	DW	04666H
	DW	0570H
	DW	0f9c6H
	DW	0da81H
	DW	04147H
	DW	01000H
	DW	00H
	DW	00H
	DW	02000H
	DW	028fH
	DW	0f56cH
	DW	0c04fH
	DW	03b85H
	DW	03666H
	DW	0710H
	DW	02a84H
	DW	037aeH
	DW	0c28H
	DW	0fe6aH
	DW	0f674H
	DW	0370aH
	DW	0123dH
	DW	0c1H
	DW	048dH
	DW	0151eH
	DW	0a8fH
	DW	0fd9aH
	DW	0f18fH
	DW	0347aH
	DW	01999H
	DW	02b6H
	DW	01054H
	DW	030a3H
	DW	0385H
	DW	0f743H
	DW	0cb64H
	DW	030a3H
	DW	0a66H
	DW	0fd83H
	DW	0f107H
	DW	0eb8H
	DW	028fH
	DW	0f56cH
	DW	0c04fH
	DW	03999H
	DW	05bd7H
	DW	0a16H
	DW	03cb7H
	DW	04ae1H
	DW	0999H
	DW	0fd0dH
	DW	0ee3eH
	DW	04eb8H
	DW	013d7H
	DW	013eH
	DW	0779H
	DW	01ae1H
	DW	01000H
	DW	00H
	DW	00H
	DW	05000H
	DW	02170H
	DW	0441H
	DW	0199cH
	DW	04cccH
	DW	02e1H
	DW	0f61aH
	DW	0c469H
	DW	04a3dH
	DW	010a3H
	DW	03aH
	DW	015bH
	DW	01eb8H
	DW	0828H
	DW	0fc1dH
	DW	0e897H
	DW	02cccH
	DW	03000H
	DW	0657H
	DW	0262bH
	DW	03e14H
	DW	05c2H
	DW	0fa1aH
	DW	0dc7eH
	DW	03d70H
	DW	01214H
	DW	0b4H
	DW	043eH
	DW	023d7H
	DW	0599H
	DW	0f9f0H
	DW	0db83H
	DW	03eb8H
	DW	01b5cH
	DW	0319H
	DW	012a4H
	DW	039ebH
	DW	02e1H
	DW	0f61aH
	DW	0c469H
	DW	03ae1H
	DW	08ccH
	DW	0fc8cH
	DW	0eb37H
	DW	013d7H
	DW	04ccH
	DW	0f90cH
	DW	0d626H
	DW	033d7H
	DW	043aeH
	DW	0853H
	DW	0321bH
	DW	040a3H
	DW	091eH
	DW	0fcc1H
	DW	0ec76H
	DW	03ae1H
	DW	016b8H
	DW	0206H
	DW	0c2eH
	DW	0f5cH
	DW	0e66H
	DW	0ff64H
	DW	0fc56H
	DW	037aeH
	DW	02199H
	DW	0448H
	DW	019c6H
	DW	041ebH
	DW	030aH
	DW	0f66aH
	DW	0c64aH
	DW	03ae1H
	DW	0ee1H
	DW	0ff95H
	DW	0fd7aH
	DW	017aeH
	DW	0266H
	DW	0f50cH
	DW	0be11H
	DW	0247aH
	DW	02428H
	DW	04b4H
	DW	01c53H
	DW	033d7H
	DW	06e1H
	DW	0fb21H
	DW	0e2acH
	DW	033d7H
	DW	0dc2H
	DW	0ff21H
	DW	0fac1H
	DW	0999H
	DW	07aeH
	DW	0fbc4H
	DW	0e67fH
	DW	02cccH
	DW	01599H
	DW	01bbH
	DW	0a6cH
	DW	028f5H
	DW	02e1H
	DW	0f61aH
	DW	0c469H
	DW	02d70H
	DW	0c7aH
	DW	0fe91H
	DW	0f75cH
	DW	05c2H
	DW	030aH
	DW	0f66aH
	DW	0c64aH
CONST	ENDS
PUBLIC	_Qua_gain
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_mult:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_add:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_shr:PROC
EXTRN	_L_deposit_h:PROC
EXTRN	_L_Extract:PROC
EXTRN	_Mpy_32_16:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	_Pow2:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\qua_gain.c
;	COMDAT _Qua_gain
_TEXT	SEGMENT
_table_len$ = -252					; size = 2
_table_gain$ = -240					; size = 4
_dist_min$ = -228					; size = 4
_L_tmp$ = -216						; size = 4
_exp_max$ = -204					; size = 10
_coeff_lo$ = -184					; size = 10
_coeff$ = -164						; size = 10
_g_pit_cod$ = -144					; size = 2
_g2_code$ = -132					; size = 2
_g_code$ = -120						; size = 2
_g2_pitch$ = -108					; size = 2
_g_pitch$ = -96						; size = 2
_exp_code$ = -84					; size = 2
_e_max$ = -72						; size = 2
_gcode0$ = -60						; size = 2
_index$ = -48						; size = 2
_j$ = -36						; size = 2
_i$ = -24						; size = 2
_p$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_exp_gcode0$ = 12					; size = 2
_frac_gcode0$ = 16					; size = 2
_frac_coeff$ = 20					; size = 4
_exp_coeff$ = 24					; size = 4
_gp_limit$ = 28						; size = 2
_gain_pit$ = 32						; size = 4
_gain_cod$ = 36						; size = 4
_qua_ener_MR122$ = 40					; size = 4
_qua_ener$ = 44						; size = 4
_Qua_gain PROC						; COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 01 00
	00		 sub	 esp, 448		; 000001c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-448]
  00012	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 79   :     const Word16 *p;
; 80   :     Word16 i, j, index = 0;

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 d0	 mov	 WORD PTR _index$[ebp], ax

; 81   :     Word16 gcode0, e_max, exp_code;
; 82   :     Word16 g_pitch, g2_pitch, g_code, g2_code, g_pit_cod;
; 83   :     Word16 coeff[5], coeff_lo[5];
; 84   :     Word16 exp_max[5];
; 85   :     Word32 L_tmp, dist_min;
; 86   :     const Word16 *table_gain;
; 87   :     Word16 table_len;
; 88   :     
; 89   :     test();  test(); test();

  0002e	e8 00 00 00 00	 call	 _test
  00033	e8 00 00 00 00	 call	 _test
  00038	e8 00 00 00 00	 call	 _test

; 90   :     if ( sub (mode, MR102) == 0 || sub (mode, MR74) == 0 || sub (mode, MR67) == 0)

  0003d	6a 06		 push	 6
  0003f	0f b7 45 08	 movzx	 eax, WORD PTR _mode$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _sub
  00049	83 c4 08	 add	 esp, 8
  0004c	0f bf c8	 movsx	 ecx, ax
  0004f	85 c9		 test	 ecx, ecx
  00051	74 2c		 je	 SHORT $LN14@Qua_gain
  00053	6a 04		 push	 4
  00055	0f b7 45 08	 movzx	 eax, WORD PTR _mode$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _sub
  0005f	83 c4 08	 add	 esp, 8
  00062	0f bf c8	 movsx	 ecx, ax
  00065	85 c9		 test	 ecx, ecx
  00067	74 16		 je	 SHORT $LN14@Qua_gain
  00069	6a 03		 push	 3
  0006b	0f b7 45 08	 movzx	 eax, WORD PTR _mode$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _sub
  00075	83 c4 08	 add	 esp, 8
  00078	0f bf c8	 movsx	 ecx, ax
  0007b	85 c9		 test	 ecx, ecx
  0007d	75 22		 jne	 SHORT $LN15@Qua_gain
$LN14@Qua_gain:

; 91   :     {
; 92   :        table_len = VQ_SIZE_HIGHRATES;            move16 ();

  0007f	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00084	66 89 85 04 ff
	ff ff		 mov	 WORD PTR _table_len$[ebp], ax
  0008b	e8 00 00 00 00	 call	 _move16

; 93   :        table_gain = table_gain_highrates;        move16 ();

  00090	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _table_gain$[ebp], OFFSET _table_gain_highrates
  0009a	e8 00 00 00 00	 call	 _move16

; 94   :     }
; 95   :     else

  0009f	eb 20		 jmp	 SHORT $LN13@Qua_gain
$LN15@Qua_gain:

; 96   :     {
; 97   :        table_len = VQ_SIZE_LOWRATES;             move16 ();

  000a1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a6	66 89 85 04 ff
	ff ff		 mov	 WORD PTR _table_len$[ebp], ax
  000ad	e8 00 00 00 00	 call	 _move16

; 98   :        table_gain = table_gain_lowrates;         move16 ();

  000b2	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _table_gain$[ebp], OFFSET _table_gain_lowrates
  000bc	e8 00 00 00 00	 call	 _move16
$LN13@Qua_gain:

; 99   :     }
; 100  :     
; 101  :     /*-------------------------------------------------------------------*
; 102  :      *  predicted codebook gain                                          *
; 103  :      *  ~~~~~~~~~~~~~~~~~~~~~~~                                          *
; 104  :      *  gc0     = 2^exp_gcode0 + 2^frac_gcode0                           *
; 105  :      *                                                                   *
; 106  :      *  gcode0 (Q14) = 2^14*2^frac_gcode0 = gc0 * 2^(14-exp_gcode0)      *
; 107  :      *-------------------------------------------------------------------*/
; 108  : 
; 109  :     gcode0 = extract_l(Pow2(14, frac_gcode0));

  000c1	0f b7 45 10	 movzx	 eax, WORD PTR _frac_gcode0$[ebp]
  000c5	50		 push	 eax
  000c6	6a 0e		 push	 14			; 0000000eH
  000c8	e8 00 00 00 00	 call	 _Pow2
  000cd	83 c4 08	 add	 esp, 8
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _extract_l
  000d6	83 c4 04	 add	 esp, 4
  000d9	66 89 45 c4	 mov	 WORD PTR _gcode0$[ebp], ax

; 110  : 
; 111  :     /*-------------------------------------------------------------------*
; 112  :      *  Scaling considerations:                                          *
; 113  :      *  ~~~~~~~~~~~~~~~~~~~~~~~                                          *
; 114  :      *-------------------------------------------------------------------*/
; 115  : 
; 116  :     /*
; 117  :      * The error energy (sum) to be minimized consists of five terms, t[0..4].
; 118  :      *
; 119  :      *                      t[0] =    gp^2  * <y1 y1>
; 120  :      *                      t[1] = -2*gp    * <xn y1>
; 121  :      *                      t[2] =    gc^2  * <y2 y2>
; 122  :      *                      t[3] = -2*gc    * <xn y2>
; 123  :      *                      t[4] =  2*gp*gc * <y1 y2>
; 124  :      *
; 125  :      */
; 126  : 
; 127  :     /* determine the scaling exponent for g_code: ec = ec0 - 11 */
; 128  :     exp_code = sub(exp_gcode0, 11);

  000dd	6a 0b		 push	 11			; 0000000bH
  000df	0f b7 45 0c	 movzx	 eax, WORD PTR _exp_gcode0$[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _sub
  000e9	83 c4 08	 add	 esp, 8
  000ec	66 89 45 ac	 mov	 WORD PTR _exp_code$[ebp], ax

; 129  : 
; 130  :     /* calculate exp_max[i] = s[i]-1 */
; 131  :     exp_max[0] = sub(exp_coeff[0], 13);                        move16 ();

  000f0	6a 0d		 push	 13			; 0000000dH
  000f2	b8 02 00 00 00	 mov	 eax, 2
  000f7	6b c8 00	 imul	 ecx, eax, 0
  000fa	8b 55 18	 mov	 edx, DWORD PTR _exp_coeff$[ebp]
  000fd	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _sub
  00107	83 c4 08	 add	 esp, 8
  0010a	b9 02 00 00 00	 mov	 ecx, 2
  0010f	6b d1 00	 imul	 edx, ecx, 0
  00112	66 89 84 15 34
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+edx], ax
  0011a	e8 00 00 00 00	 call	 _move16

; 132  :     exp_max[1] = sub(exp_coeff[1], 14);                        move16 ();

  0011f	6a 0e		 push	 14			; 0000000eH
  00121	b8 02 00 00 00	 mov	 eax, 2
  00126	c1 e0 00	 shl	 eax, 0
  00129	8b 4d 18	 mov	 ecx, DWORD PTR _exp_coeff$[ebp]
  0012c	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00130	52		 push	 edx
  00131	e8 00 00 00 00	 call	 _sub
  00136	83 c4 08	 add	 esp, 8
  00139	b9 02 00 00 00	 mov	 ecx, 2
  0013e	c1 e1 00	 shl	 ecx, 0
  00141	66 89 84 0d 34
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+ecx], ax
  00149	e8 00 00 00 00	 call	 _move16

; 133  :     exp_max[2] = add(exp_coeff[2], add(15, shl(exp_code, 1))); move16 ();

  0014e	6a 01		 push	 1
  00150	0f b7 45 ac	 movzx	 eax, WORD PTR _exp_code$[ebp]
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 _shl
  0015a	83 c4 08	 add	 esp, 8
  0015d	0f b7 c8	 movzx	 ecx, ax
  00160	51		 push	 ecx
  00161	6a 0f		 push	 15			; 0000000fH
  00163	e8 00 00 00 00	 call	 _add
  00168	83 c4 08	 add	 esp, 8
  0016b	0f b7 d0	 movzx	 edx, ax
  0016e	52		 push	 edx
  0016f	b8 02 00 00 00	 mov	 eax, 2
  00174	d1 e0		 shl	 eax, 1
  00176	8b 4d 18	 mov	 ecx, DWORD PTR _exp_coeff$[ebp]
  00179	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  0017d	52		 push	 edx
  0017e	e8 00 00 00 00	 call	 _add
  00183	83 c4 08	 add	 esp, 8
  00186	b9 02 00 00 00	 mov	 ecx, 2
  0018b	d1 e1		 shl	 ecx, 1
  0018d	66 89 84 0d 34
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+ecx], ax
  00195	e8 00 00 00 00	 call	 _move16

; 134  :     exp_max[3] = add(exp_coeff[3], exp_code);                  move16 ();

  0019a	0f b7 45 ac	 movzx	 eax, WORD PTR _exp_code$[ebp]
  0019e	50		 push	 eax
  0019f	b9 02 00 00 00	 mov	 ecx, 2
  001a4	6b d1 03	 imul	 edx, ecx, 3
  001a7	8b 45 18	 mov	 eax, DWORD PTR _exp_coeff$[ebp]
  001aa	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 _add
  001b4	83 c4 08	 add	 esp, 8
  001b7	ba 02 00 00 00	 mov	 edx, 2
  001bc	6b ca 03	 imul	 ecx, edx, 3
  001bf	66 89 84 0d 34
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+ecx], ax
  001c7	e8 00 00 00 00	 call	 _move16

; 135  :     exp_max[4] = add(exp_coeff[4], add(1, exp_code));          move16 ();

  001cc	0f b7 45 ac	 movzx	 eax, WORD PTR _exp_code$[ebp]
  001d0	50		 push	 eax
  001d1	6a 01		 push	 1
  001d3	e8 00 00 00 00	 call	 _add
  001d8	83 c4 08	 add	 esp, 8
  001db	0f b7 c8	 movzx	 ecx, ax
  001de	51		 push	 ecx
  001df	ba 02 00 00 00	 mov	 edx, 2
  001e4	c1 e2 02	 shl	 edx, 2
  001e7	8b 45 18	 mov	 eax, DWORD PTR _exp_coeff$[ebp]
  001ea	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  001ee	51		 push	 ecx
  001ef	e8 00 00 00 00	 call	 _add
  001f4	83 c4 08	 add	 esp, 8
  001f7	ba 02 00 00 00	 mov	 edx, 2
  001fc	c1 e2 02	 shl	 edx, 2
  001ff	66 89 84 15 34
	ff ff ff	 mov	 WORD PTR _exp_max$[ebp+edx], ax
  00207	e8 00 00 00 00	 call	 _move16

; 136  : 
; 137  : 
; 138  :     /*-------------------------------------------------------------------*
; 139  :      *  Find maximum exponent:                                           *
; 140  :      *  ~~~~~~~~~~~~~~~~~~~~~~                                           *
; 141  :      *                                                                   *
; 142  :      *  For the sum operation, all terms must have the same scaling;     *
; 143  :      *  that scaling should be low enough to prevent overflow. There-    *
; 144  :      *  fore, the maximum scale is determined and all coefficients are   *
; 145  :      *  re-scaled:                                                       *
; 146  :      *                                                                   *
; 147  :      *    e_max = max(exp_max[i]) + 1;                                   *
; 148  :      *    e = exp_max[i]-e_max;         e <= 0!                          *
; 149  :      *    c[i] = c[i]*2^e                                                *
; 150  :      *-------------------------------------------------------------------*/
; 151  : 
; 152  :     e_max = exp_max[0];                                        move16 ();

  0020c	b8 02 00 00 00	 mov	 eax, 2
  00211	6b c8 00	 imul	 ecx, eax, 0
  00214	66 8b 94 0d 34
	ff ff ff	 mov	 dx, WORD PTR _exp_max$[ebp+ecx]
  0021c	66 89 55 b8	 mov	 WORD PTR _e_max$[ebp], dx
  00220	e8 00 00 00 00	 call	 _move16

; 153  :     for (i = 1; i < 5; i++)

  00225	b8 01 00 00 00	 mov	 eax, 1
  0022a	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  0022e	eb 0c		 jmp	 SHORT $LN12@Qua_gain
$LN11@Qua_gain:
  00230	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00234	66 83 c0 01	 add	 ax, 1
  00238	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN12@Qua_gain:
  0023c	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00240	83 f8 05	 cmp	 eax, 5
  00243	7d 40		 jge	 SHORT $LN10@Qua_gain

; 154  :     {
; 155  :         move16(); test();

  00245	e8 00 00 00 00	 call	 _move16
  0024a	e8 00 00 00 00	 call	 _test

; 156  :         if (sub(exp_max[i], e_max) > 0)

  0024f	0f b7 45 b8	 movzx	 eax, WORD PTR _e_max$[ebp]
  00253	50		 push	 eax
  00254	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  00258	0f b7 94 4d 34
	ff ff ff	 movzx	 edx, WORD PTR _exp_max$[ebp+ecx*2]
  00260	52		 push	 edx
  00261	e8 00 00 00 00	 call	 _sub
  00266	83 c4 08	 add	 esp, 8
  00269	98		 cwde
  0026a	85 c0		 test	 eax, eax
  0026c	7e 15		 jle	 SHORT $LN9@Qua_gain

; 157  :         {
; 158  :             e_max = exp_max[i];                                move16 ();

  0026e	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00272	66 8b 8c 45 34
	ff ff ff	 mov	 cx, WORD PTR _exp_max$[ebp+eax*2]
  0027a	66 89 4d b8	 mov	 WORD PTR _e_max$[ebp], cx
  0027e	e8 00 00 00 00	 call	 _move16
$LN9@Qua_gain:

; 159  :         }
; 160  :     }

  00283	eb ab		 jmp	 SHORT $LN11@Qua_gain
$LN10@Qua_gain:

; 161  : 
; 162  :     e_max = add(e_max, 1);      /* To avoid overflow */

  00285	6a 01		 push	 1
  00287	0f b7 45 b8	 movzx	 eax, WORD PTR _e_max$[ebp]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 _add
  00291	83 c4 08	 add	 esp, 8
  00294	66 89 45 b8	 mov	 WORD PTR _e_max$[ebp], ax

; 163  : 
; 164  :     for (i = 0; i < 5; i++) {

  00298	33 c0		 xor	 eax, eax
  0029a	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  0029e	eb 0c		 jmp	 SHORT $LN8@Qua_gain
$LN7@Qua_gain:
  002a0	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  002a4	66 83 c0 01	 add	 ax, 1
  002a8	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN8@Qua_gain:
  002ac	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  002b0	83 f8 05	 cmp	 eax, 5
  002b3	7d 7e		 jge	 SHORT $LN6@Qua_gain

; 165  :         j = sub(e_max, exp_max[i]);

  002b5	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  002b9	0f b7 8c 45 34
	ff ff ff	 movzx	 ecx, WORD PTR _exp_max$[ebp+eax*2]
  002c1	51		 push	 ecx
  002c2	0f b7 55 b8	 movzx	 edx, WORD PTR _e_max$[ebp]
  002c6	52		 push	 edx
  002c7	e8 00 00 00 00	 call	 _sub
  002cc	83 c4 08	 add	 esp, 8
  002cf	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax

; 166  :         L_tmp = L_deposit_h(frac_coeff[i]);

  002d3	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  002d7	8b 4d 14	 mov	 ecx, DWORD PTR _frac_coeff$[ebp]
  002da	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  002de	52		 push	 edx
  002df	e8 00 00 00 00	 call	 _L_deposit_h
  002e4	83 c4 04	 add	 esp, 4
  002e7	89 85 28 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 167  :         L_tmp = L_shr(L_tmp, j);

  002ed	0f b7 45 dc	 movzx	 eax, WORD PTR _j$[ebp]
  002f1	50		 push	 eax
  002f2	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  002f8	51		 push	 ecx
  002f9	e8 00 00 00 00	 call	 _L_shr
  002fe	83 c4 08	 add	 esp, 8
  00301	89 85 28 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 168  :         L_Extract(L_tmp, &coeff[i], &coeff_lo[i]);

  00307	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  0030b	8d 8c 45 48 ff
	ff ff		 lea	 ecx, DWORD PTR _coeff_lo$[ebp+eax*2]
  00312	51		 push	 ecx
  00313	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  00317	8d 84 55 5c ff
	ff ff		 lea	 eax, DWORD PTR _coeff$[ebp+edx*2]
  0031e	50		 push	 eax
  0031f	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  00325	51		 push	 ecx
  00326	e8 00 00 00 00	 call	 _L_Extract
  0032b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 169  :     }

  0032e	e9 6d ff ff ff	 jmp	 $LN7@Qua_gain
$LN6@Qua_gain:

; 170  : 
; 171  : 
; 172  :     /*-------------------------------------------------------------------*
; 173  :      *  Codebook search:                                                 *
; 174  :      *  ~~~~~~~~~~~~~~~~                                                 *
; 175  :      *                                                                   *
; 176  :      *  For each pair (g_pitch, g_fac) in the table calculate the        *
; 177  :      *  terms t[0..4] and sum them up; the result is the mean squared    *
; 178  :      *  error for the quantized gains from the table. The index for the  *
; 179  :      *  minimum MSE is stored and finally used to retrieve the quantized *
; 180  :      *  gains                                                            *
; 181  :      *-------------------------------------------------------------------*/
; 182  : 
; 183  :     /* start with "infinite" MSE */
; 184  :     dist_min = MAX_32;        move32();

  00333	c7 85 1c ff ff
	ff ff ff ff 7f	 mov	 DWORD PTR _dist_min$[ebp], 2147483647 ; 7fffffffH
  0033d	e8 00 00 00 00	 call	 _move32

; 185  : 
; 186  :     p = &table_gain[0];       move16 ();

  00342	b8 02 00 00 00	 mov	 eax, 2
  00347	6b c8 00	 imul	 ecx, eax, 0
  0034a	03 8d 10 ff ff
	ff		 add	 ecx, DWORD PTR _table_gain$[ebp]
  00350	89 4d f4	 mov	 DWORD PTR _p$[ebp], ecx
  00353	e8 00 00 00 00	 call	 _move16

; 187  : 
; 188  :     for (i = 0; i < table_len; i++)

  00358	33 c0		 xor	 eax, eax
  0035a	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  0035e	eb 0c		 jmp	 SHORT $LN5@Qua_gain
$LN4@Qua_gain:
  00360	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00364	66 83 c0 01	 add	 ax, 1
  00368	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN5@Qua_gain:
  0036c	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00370	0f bf 8d 04 ff
	ff ff		 movsx	 ecx, WORD PTR _table_len$[ebp]
  00377	3b c1		 cmp	 eax, ecx
  00379	0f 8d 51 02 00
	00		 jge	 $LN3@Qua_gain

; 189  :     {
; 190  :         g_pitch = *p++;       move16 ();

  0037f	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00382	66 8b 08	 mov	 cx, WORD PTR [eax]
  00385	66 89 4d a0	 mov	 WORD PTR _g_pitch$[ebp], cx
  00389	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  0038c	83 c2 02	 add	 edx, 2
  0038f	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  00392	e8 00 00 00 00	 call	 _move16

; 191  :         g_code = *p++;        move16 (); /* this is g_fac        */

  00397	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0039a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0039d	66 89 4d 88	 mov	 WORD PTR _g_code$[ebp], cx
  003a1	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  003a4	83 c2 02	 add	 edx, 2
  003a7	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  003aa	e8 00 00 00 00	 call	 _move16

; 192  :         p++;                             /* skip log2(g_fac)     */

  003af	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003b2	83 c0 02	 add	 eax, 2
  003b5	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 193  :         p++;                             /* skip 20*log10(g_fac) */

  003b8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003bb	83 c0 02	 add	 eax, 2
  003be	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 194  :             
; 195  :         test ();

  003c1	e8 00 00 00 00	 call	 _test

; 196  :         if (sub(g_pitch, gp_limit) <= 0)

  003c6	0f b7 45 1c	 movzx	 eax, WORD PTR _gp_limit$[ebp]
  003ca	50		 push	 eax
  003cb	0f b7 4d a0	 movzx	 ecx, WORD PTR _g_pitch$[ebp]
  003cf	51		 push	 ecx
  003d0	e8 00 00 00 00	 call	 _sub
  003d5	83 c4 08	 add	 esp, 8
  003d8	0f bf d0	 movsx	 edx, ax
  003db	85 d2		 test	 edx, edx
  003dd	0f 8f e8 01 00
	00		 jg	 $LN2@Qua_gain

; 197  :         {
; 198  :             g_code = mult(g_code, gcode0);

  003e3	0f b7 45 c4	 movzx	 eax, WORD PTR _gcode0$[ebp]
  003e7	50		 push	 eax
  003e8	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  003ec	51		 push	 ecx
  003ed	e8 00 00 00 00	 call	 _mult
  003f2	83 c4 08	 add	 esp, 8
  003f5	66 89 45 88	 mov	 WORD PTR _g_code$[ebp], ax

; 199  :             g2_pitch = mult(g_pitch, g_pitch);

  003f9	0f b7 45 a0	 movzx	 eax, WORD PTR _g_pitch$[ebp]
  003fd	50		 push	 eax
  003fe	0f b7 4d a0	 movzx	 ecx, WORD PTR _g_pitch$[ebp]
  00402	51		 push	 ecx
  00403	e8 00 00 00 00	 call	 _mult
  00408	83 c4 08	 add	 esp, 8
  0040b	66 89 45 94	 mov	 WORD PTR _g2_pitch$[ebp], ax

; 200  :             g2_code = mult(g_code, g_code);

  0040f	0f b7 45 88	 movzx	 eax, WORD PTR _g_code$[ebp]
  00413	50		 push	 eax
  00414	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  00418	51		 push	 ecx
  00419	e8 00 00 00 00	 call	 _mult
  0041e	83 c4 08	 add	 esp, 8
  00421	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _g2_code$[ebp], ax

; 201  :             g_pit_cod = mult(g_code, g_pitch);

  00428	0f b7 45 a0	 movzx	 eax, WORD PTR _g_pitch$[ebp]
  0042c	50		 push	 eax
  0042d	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  00431	51		 push	 ecx
  00432	e8 00 00 00 00	 call	 _mult
  00437	83 c4 08	 add	 esp, 8
  0043a	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _g_pit_cod$[ebp], ax

; 202  : 
; 203  :             L_tmp = Mpy_32_16(coeff[0], coeff_lo[0], g2_pitch);

  00441	0f b7 45 94	 movzx	 eax, WORD PTR _g2_pitch$[ebp]
  00445	50		 push	 eax
  00446	b9 02 00 00 00	 mov	 ecx, 2
  0044b	6b d1 00	 imul	 edx, ecx, 0
  0044e	0f b7 84 15 48
	ff ff ff	 movzx	 eax, WORD PTR _coeff_lo$[ebp+edx]
  00456	50		 push	 eax
  00457	b9 02 00 00 00	 mov	 ecx, 2
  0045c	6b d1 00	 imul	 edx, ecx, 0
  0045f	0f b7 84 15 5c
	ff ff ff	 movzx	 eax, WORD PTR _coeff$[ebp+edx]
  00467	50		 push	 eax
  00468	e8 00 00 00 00	 call	 _Mpy_32_16
  0046d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00470	89 85 28 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 204  :             L_tmp = L_add(L_tmp, Mpy_32_16(coeff[1], coeff_lo[1], g_pitch));

  00476	0f b7 45 a0	 movzx	 eax, WORD PTR _g_pitch$[ebp]
  0047a	50		 push	 eax
  0047b	b9 02 00 00 00	 mov	 ecx, 2
  00480	c1 e1 00	 shl	 ecx, 0
  00483	0f b7 94 0d 48
	ff ff ff	 movzx	 edx, WORD PTR _coeff_lo$[ebp+ecx]
  0048b	52		 push	 edx
  0048c	b8 02 00 00 00	 mov	 eax, 2
  00491	c1 e0 00	 shl	 eax, 0
  00494	0f b7 8c 05 5c
	ff ff ff	 movzx	 ecx, WORD PTR _coeff$[ebp+eax]
  0049c	51		 push	 ecx
  0049d	e8 00 00 00 00	 call	 _Mpy_32_16
  004a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a5	50		 push	 eax
  004a6	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _L_tmp$[ebp]
  004ac	52		 push	 edx
  004ad	e8 00 00 00 00	 call	 _L_add
  004b2	83 c4 08	 add	 esp, 8
  004b5	89 85 28 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 205  :             L_tmp = L_add(L_tmp, Mpy_32_16(coeff[2], coeff_lo[2], g2_code));

  004bb	0f b7 85 7c ff
	ff ff		 movzx	 eax, WORD PTR _g2_code$[ebp]
  004c2	50		 push	 eax
  004c3	b9 02 00 00 00	 mov	 ecx, 2
  004c8	d1 e1		 shl	 ecx, 1
  004ca	0f b7 94 0d 48
	ff ff ff	 movzx	 edx, WORD PTR _coeff_lo$[ebp+ecx]
  004d2	52		 push	 edx
  004d3	b8 02 00 00 00	 mov	 eax, 2
  004d8	d1 e0		 shl	 eax, 1
  004da	0f b7 8c 05 5c
	ff ff ff	 movzx	 ecx, WORD PTR _coeff$[ebp+eax]
  004e2	51		 push	 ecx
  004e3	e8 00 00 00 00	 call	 _Mpy_32_16
  004e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  004eb	50		 push	 eax
  004ec	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _L_tmp$[ebp]
  004f2	52		 push	 edx
  004f3	e8 00 00 00 00	 call	 _L_add
  004f8	83 c4 08	 add	 esp, 8
  004fb	89 85 28 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 206  :             L_tmp = L_add(L_tmp, Mpy_32_16(coeff[3], coeff_lo[3], g_code));

  00501	0f b7 45 88	 movzx	 eax, WORD PTR _g_code$[ebp]
  00505	50		 push	 eax
  00506	b9 02 00 00 00	 mov	 ecx, 2
  0050b	6b d1 03	 imul	 edx, ecx, 3
  0050e	0f b7 84 15 48
	ff ff ff	 movzx	 eax, WORD PTR _coeff_lo$[ebp+edx]
  00516	50		 push	 eax
  00517	b9 02 00 00 00	 mov	 ecx, 2
  0051c	6b d1 03	 imul	 edx, ecx, 3
  0051f	0f b7 84 15 5c
	ff ff ff	 movzx	 eax, WORD PTR _coeff$[ebp+edx]
  00527	50		 push	 eax
  00528	e8 00 00 00 00	 call	 _Mpy_32_16
  0052d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00530	50		 push	 eax
  00531	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  00537	51		 push	 ecx
  00538	e8 00 00 00 00	 call	 _L_add
  0053d	83 c4 08	 add	 esp, 8
  00540	89 85 28 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 207  :             L_tmp = L_add(L_tmp, Mpy_32_16(coeff[4], coeff_lo[4], g_pit_cod));

  00546	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _g_pit_cod$[ebp]
  0054d	50		 push	 eax
  0054e	b9 02 00 00 00	 mov	 ecx, 2
  00553	c1 e1 02	 shl	 ecx, 2
  00556	0f b7 94 0d 48
	ff ff ff	 movzx	 edx, WORD PTR _coeff_lo$[ebp+ecx]
  0055e	52		 push	 edx
  0055f	b8 02 00 00 00	 mov	 eax, 2
  00564	c1 e0 02	 shl	 eax, 2
  00567	0f b7 8c 05 5c
	ff ff ff	 movzx	 ecx, WORD PTR _coeff$[ebp+eax]
  0056f	51		 push	 ecx
  00570	e8 00 00 00 00	 call	 _Mpy_32_16
  00575	83 c4 0c	 add	 esp, 12			; 0000000cH
  00578	50		 push	 eax
  00579	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _L_tmp$[ebp]
  0057f	52		 push	 edx
  00580	e8 00 00 00 00	 call	 _L_add
  00585	83 c4 08	 add	 esp, 8
  00588	89 85 28 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 208  : 
; 209  :             /* store table index if MSE for this index is lower
; 210  :                than the minimum MSE seen so far */
; 211  :             test ();

  0058e	e8 00 00 00 00	 call	 _test

; 212  :             if (L_sub(L_tmp, dist_min) < (Word32) 0)

  00593	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _dist_min$[ebp]
  00599	50		 push	 eax
  0059a	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _L_tmp$[ebp]
  005a0	51		 push	 ecx
  005a1	e8 00 00 00 00	 call	 _L_sub
  005a6	83 c4 08	 add	 esp, 8
  005a9	85 c0		 test	 eax, eax
  005ab	7d 1e		 jge	 SHORT $LN2@Qua_gain

; 213  :             {
; 214  :                 dist_min = L_tmp; move32 ();

  005ad	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _L_tmp$[ebp]
  005b3	89 85 1c ff ff
	ff		 mov	 DWORD PTR _dist_min$[ebp], eax
  005b9	e8 00 00 00 00	 call	 _move32

; 215  :                 index = i;        move16 ();

  005be	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  005c2	66 89 45 d0	 mov	 WORD PTR _index$[ebp], ax
  005c6	e8 00 00 00 00	 call	 _move16
$LN2@Qua_gain:

; 216  :             }
; 217  :         }
; 218  :     }

  005cb	e9 90 fd ff ff	 jmp	 $LN4@Qua_gain
$LN3@Qua_gain:

; 219  : 
; 220  :     /*------------------------------------------------------------------*
; 221  :      *  read quantized gains and new values for MA predictor memories   *
; 222  :      *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   *
; 223  :      *------------------------------------------------------------------*/
; 224  : 
; 225  :     /* Read the quantized gains */
; 226  :     p = &table_gain[shl (index, 2)]; move16 ();

  005d0	6a 02		 push	 2
  005d2	0f b7 45 d0	 movzx	 eax, WORD PTR _index$[ebp]
  005d6	50		 push	 eax
  005d7	e8 00 00 00 00	 call	 _shl
  005dc	83 c4 08	 add	 esp, 8
  005df	0f bf c8	 movsx	 ecx, ax
  005e2	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _table_gain$[ebp]
  005e8	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  005eb	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
  005ee	e8 00 00 00 00	 call	 _move16

; 227  :     *gain_pit = *p++;         move16();

  005f3	8b 45 20	 mov	 eax, DWORD PTR _gain_pit$[ebp]
  005f6	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp]
  005f9	66 8b 11	 mov	 dx, WORD PTR [ecx]
  005fc	66 89 10	 mov	 WORD PTR [eax], dx
  005ff	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00602	83 c0 02	 add	 eax, 2
  00605	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
  00608	e8 00 00 00 00	 call	 _move16

; 228  :     g_code = *p++;            move16();

  0060d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00610	66 8b 08	 mov	 cx, WORD PTR [eax]
  00613	66 89 4d 88	 mov	 WORD PTR _g_code$[ebp], cx
  00617	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  0061a	83 c2 02	 add	 edx, 2
  0061d	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  00620	e8 00 00 00 00	 call	 _move16

; 229  :     *qua_ener_MR122 = *p++;   move16();

  00625	8b 45 28	 mov	 eax, DWORD PTR _qua_ener_MR122$[ebp]
  00628	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp]
  0062b	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0062e	66 89 10	 mov	 WORD PTR [eax], dx
  00631	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00634	83 c0 02	 add	 eax, 2
  00637	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
  0063a	e8 00 00 00 00	 call	 _move16

; 230  :     *qua_ener = *p;           move16();

  0063f	8b 45 2c	 mov	 eax, DWORD PTR _qua_ener$[ebp]
  00642	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp]
  00645	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00648	66 89 10	 mov	 WORD PTR [eax], dx
  0064b	e8 00 00 00 00	 call	 _move16

; 231  : 
; 232  :     /*------------------------------------------------------------------*
; 233  :      *  calculate final fixed codebook gain:                            *
; 234  :      *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                            *
; 235  :      *                                                                  *
; 236  :      *   gc = gc0 * g                                                   *
; 237  :      *------------------------------------------------------------------*/
; 238  : 
; 239  :     L_tmp = L_mult(g_code, gcode0);

  00650	0f b7 45 c4	 movzx	 eax, WORD PTR _gcode0$[ebp]
  00654	50		 push	 eax
  00655	0f b7 4d 88	 movzx	 ecx, WORD PTR _g_code$[ebp]
  00659	51		 push	 ecx
  0065a	e8 00 00 00 00	 call	 _L_mult
  0065f	83 c4 08	 add	 esp, 8
  00662	89 85 28 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 240  :     L_tmp = L_shr(L_tmp, sub(10, exp_gcode0));

  00668	0f b7 45 0c	 movzx	 eax, WORD PTR _exp_gcode0$[ebp]
  0066c	50		 push	 eax
  0066d	6a 0a		 push	 10			; 0000000aH
  0066f	e8 00 00 00 00	 call	 _sub
  00674	83 c4 08	 add	 esp, 8
  00677	0f b7 c8	 movzx	 ecx, ax
  0067a	51		 push	 ecx
  0067b	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _L_tmp$[ebp]
  00681	52		 push	 edx
  00682	e8 00 00 00 00	 call	 _L_shr
  00687	83 c4 08	 add	 esp, 8
  0068a	89 85 28 ff ff
	ff		 mov	 DWORD PTR _L_tmp$[ebp], eax

; 241  :     *gain_cod = extract_h(L_tmp);

  00690	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _L_tmp$[ebp]
  00696	50		 push	 eax
  00697	e8 00 00 00 00	 call	 _extract_h
  0069c	83 c4 04	 add	 esp, 4
  0069f	8b 4d 24	 mov	 ecx, DWORD PTR _gain_cod$[ebp]
  006a2	66 89 01	 mov	 WORD PTR [ecx], ax

; 242  : 
; 243  :     return index;

  006a5	66 8b 45 d0	 mov	 ax, WORD PTR _index$[ebp]

; 244  : }

  006a9	52		 push	 edx
  006aa	8b cd		 mov	 ecx, ebp
  006ac	50		 push	 eax
  006ad	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@Qua_gain
  006b3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  006b8	58		 pop	 eax
  006b9	5a		 pop	 edx
  006ba	5f		 pop	 edi
  006bb	5e		 pop	 esi
  006bc	5b		 pop	 ebx
  006bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006c0	33 cd		 xor	 ecx, ebp
  006c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006c7	81 c4 c0 01 00
	00		 add	 esp, 448		; 000001c0H
  006cd	3b ec		 cmp	 ebp, esp
  006cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006d4	8b e5		 mov	 esp, ebp
  006d6	5d		 pop	 ebp
  006d7	c3		 ret	 0
$LN22@Qua_gain:
  006d8	03 00 00 00	 DD	 3
  006dc	00 00 00 00	 DD	 $LN21@Qua_gain
$LN21@Qua_gain:
  006e0	5c ff ff ff	 DD	 -164			; ffffff5cH
  006e4	0a 00 00 00	 DD	 10			; 0000000aH
  006e8	00 00 00 00	 DD	 $LN18@Qua_gain
  006ec	48 ff ff ff	 DD	 -184			; ffffff48H
  006f0	0a 00 00 00	 DD	 10			; 0000000aH
  006f4	00 00 00 00	 DD	 $LN19@Qua_gain
  006f8	34 ff ff ff	 DD	 -204			; ffffff34H
  006fc	0a 00 00 00	 DD	 10			; 0000000aH
  00700	00 00 00 00	 DD	 $LN20@Qua_gain
$LN20@Qua_gain:
  00704	65		 DB	 101			; 00000065H
  00705	78		 DB	 120			; 00000078H
  00706	70		 DB	 112			; 00000070H
  00707	5f		 DB	 95			; 0000005fH
  00708	6d		 DB	 109			; 0000006dH
  00709	61		 DB	 97			; 00000061H
  0070a	78		 DB	 120			; 00000078H
  0070b	00		 DB	 0
$LN19@Qua_gain:
  0070c	63		 DB	 99			; 00000063H
  0070d	6f		 DB	 111			; 0000006fH
  0070e	65		 DB	 101			; 00000065H
  0070f	66		 DB	 102			; 00000066H
  00710	66		 DB	 102			; 00000066H
  00711	5f		 DB	 95			; 0000005fH
  00712	6c		 DB	 108			; 0000006cH
  00713	6f		 DB	 111			; 0000006fH
  00714	00		 DB	 0
$LN18@Qua_gain:
  00715	63		 DB	 99			; 00000063H
  00716	6f		 DB	 111			; 0000006fH
  00717	65		 DB	 101			; 00000065H
  00718	66		 DB	 102			; 00000066H
  00719	66		 DB	 102			; 00000066H
  0071a	00		 DB	 0
_Qua_gain ENDP
_TEXT	ENDS
END
