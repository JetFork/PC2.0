; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\dtx_dec.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_dtx_dec_id
CONST	SEGMENT
_mean_lsf DW	0568H
	DW	081dH
	DW	0d5cH
	DW	013f4H
	DW	01a56H
	DW	01fbaH
	DW	02687H
	DW	02b54H
	DW	031aaH
	DW	03585H
_lsp_init_data DW 07530H
	DW	06590H
	DW	05208H
	DW	03a98H
	DW	01f40H
	DW	00H
	DW	0e0c0H
	DW	0c568H
	DW	0adf8H
	DW	09a70H
_dico1_lsf DW	0fe3dH
	DW	0fbd7H
	DW	0fdefH
	DW	0fae7H
	DW	0fe3eH
	DW	0fd0cH
	DW	0fe0fH
	DW	0fca1H
	DW	0fe80H
	DW	0fd95H
	DW	0fe63H
	DW	0fd63H
	DW	0fec3H
	DW	0fde6H
	DW	0feb5H
	DW	0fdd4H
	DW	0fe62H
	DW	0fe04H
	DW	0fe58H
	DW	0fe86H
	DW	0feeeH
	DW	0febcH
	DW	0fe4eH
	DW	0fd9aH
	DW	0ff1eH
	DW	0fe0cH
	DW	0ff18H
	DW	0fdfeH
	DW	0fef9H
	DW	0fe87H
	DW	0fed6H
	DW	0fe66H
	DW	0ff69H
	DW	0fd3aH
	DW	0ff52H
	DW	0fcceH
	DW	0ff6bH
	DW	0fe64H
	DW	0ff64H
	DW	0fe53H
	DW	0fee0H
	DW	0fe32H
	DW	0ff46H
	DW	0ff35H
	DW	0ff56H
	DW	0fed2H
	DW	0ff41H
	DW	0febfH
	DW	0ff7dH
	DW	0ff6dH
	DW	0fed7H
	DW	0fe75H
	DW	0ff1cH
	DW	0ff2aH
	DW	0ff0bH
	DW	0ff40H
	DW	0ffbdH
	DW	0fec4H
	DW	0ffb9H
	DW	0feb9H
	DW	0ff98H
	DW	0ff33H
	DW	0ffa2H
	DW	0ff49H
	DW	0ff71H
	DW	0ffdaH
	DW	0ff3fH
	DW	0ffa1H
	DW	010H
	DW	0ffb4H
	DW	0ff84H
	DW	0ff08H
	DW	017H
	DW	0ff13H
	DW	018H
	DW	0ff0cH
	DW	012H
	DW	0ff78H
	DW	02cH
	DW	0ff91H
	DW	0ffdfH
	DW	0ffe8H
	DW	0ffe7H
	DW	00H
	DW	095H
	DW	013H
	DW	017H
	DW	0ff71H
	DW	09eH
	DW	0ff57H
	DW	0aeH
	DW	0ff4bH
	DW	085H
	DW	0ffc9H
	DW	0a5H
	DW	0ffe6H
	DW	06fH
	DW	054H
	DW	062H
	DW	04bH
	DW	057H
	DW	0b7H
	DW	0ff8dH
	DW	0fff5H
	DW	0fff8H
	DW	082H
	DW	0bH
	DW	0aaH
	DW	0feH
	DW	04dH
	DW	0cdH
	DW	011H
	DW	0b7H
	DW	070H
	DW	0106H
	DW	0c2H
	DW	0caH
	DW	011fH
	DW	05fH
	DW	0bdH
	DW	0ffd6H
	DW	0ff97H
	DW	0eaH
	DW	0b3H
	DW	027H
	DW	0baH
	DW	0a3H
	DW	0159H
	DW	014cH
	DW	0c7H
	DW	012bH
	DW	0a1H
	DW	0ffcaH
	DW	011dH
	DW	0ffb2H
	DW	0119H
	DW	0ff7bH
	DW	08dH
	DW	0ff4aH
	DW	06fH
	DW	0f9H
	DW	0155H
	DW	010fH
	DW	016cH
	DW	05dH
	DW	0193H
	DW	04bH
	DW	0187H
	DW	05cH
	DW	01feH
	DW	0ff76H
	DW	0dcH
	DW	0ff47H
	DW	0ffe3H
	DW	0ffdeH
	DW	0169H
	DW	0ff8dH
	DW	0140H
	DW	03H
	DW	022aH
	DW	063H
	DW	011eH
	DW	0daH
	DW	024fH
	DW	0ff0bH
	DW	0196H
	DW	0fef4H
	DW	01c5H
	DW	00H
	DW	0244H
	DW	019H
	DW	025eH
	DW	0113H
	DW	0214H
	DW	094H
	DW	01c2H
	DW	0ffb7H
	DW	02e3H
	DW	0fee3H
	DW	0206H
	DW	0fee0H
	DW	05eH
	DW	0ff35H
	DW	02a2H
	DW	0ff74H
	DW	0ffb6H
	DW	0cdH
	DW	02caH
	DW	0ff8eH
	DW	012bH
	DW	0b0H
	DW	039bH
	DW	0b6H
	DW	022dH
	DW	0f0H
	DW	02c1H
	DW	0fff0H
	DW	0201H
	DW	01e5H
	DW	0251H
	DW	0125H
	DW	0180H
	DW	01c3H
	DW	0269H
	DW	0ffdaH
	DW	032H
	DW	0233H
	DW	0211H
	DW	012fH
	DW	0d1H
	DW	01cbH
	DW	016bH
	DW	01b1H
	DW	01c4H
	DW	01c2H
	DW	01c6H
	DW	016fH
	DW	025eH
	DW	01ddH
	DW	02e5H
	DW	01b0H
	DW	0161H
	DW	0170H
	DW	010bH
	DW	0169H
	DW	02ccH
	DW	0111H
	DW	0247H
	DW	01c5H
	DW	0a6H
	DW	01feH
	DW	0acH
	DW	0c9H
	DW	0275H
	DW	0112H
	DW	0bfH
	DW	0238H
	DW	027fH
	DW	012eH
	DW	012aH
	DW	027aH
	DW	0183H
	DW	0283H
	DW	015eH
	DW	024bH
	DW	0230H
	DW	0264H
	DW	0235H
	DW	0258H
	DW	0314H
	DW	01e7H
	DW	02a0H
	DW	0200H
	DW	03f7H
	DW	0141H
	DW	014dH
	DW	0165H
	DW	0356H
	DW	0ff83H
	DW	019dH
	DW	01daH
	DW	02c8H
	DW	011H
	DW	0ff69H
	DW	0234H
	DW	011dH
	DW	010eH
	DW	0ff0fH
	DW	03cbH
	DW	0379H
	DW	01e9H
	DW	0dcH
	DW	01feH
	DW	0380H
	DW	0225H
	DW	039cH
	DW	0147H
	DW	0339H
	DW	0122H
	DW	038fH
	DW	021cH
	DW	0454H
	DW	09eH
	DW	0325H
	DW	0c7H
	DW	03bdH
	DW	01ffH
	DW	02daH
	DW	064H
	DW	036aH
	DW	0dH
	DW	0317H
	DW	01b3H
	DW	0278H
	DW	02a4H
	DW	03ccH
	DW	0f9H
	DW	0384H
	DW	01d3H
	DW	04c2H
	DW	030dH
	DW	0432H
	DW	0249H
	DW	0311H
	DW	0ffe9H
	DW	029dH
	DW	010bH
	DW	0413H
	DW	026bH
	DW	043cH
	DW	0267H
	DW	0479H
	DW	026eH
	DW	0389H
	DW	0394H
	DW	0419H
	DW	050H
	DW	014bH
	DW	0248H
	DW	0433H
	DW	059H
	DW	027fH
	DW	03dcH
	DW	03c1H
	DW	0302H
	DW	02d0H
	DW	031eH
	DW	02bbH
	DW	01ecH
	DW	01bfH
	DW	0383H
	DW	0273H
	DW	010fH
	DW	04a4H
	DW	02d5H
	DW	0535H
	DW	057H
	DW	025bH
	DW	0340H
	DW	0643H
	DW	0268H
	DW	0467H
	DW	037aH
	DW	05e1H
	DW	03e8H
	DW	0484H
	DW	0362H
	DW	03f1H
	DW	03e3H
	DW	033bH
	DW	047dH
	DW	035aH
	DW	0331H
	DW	05aaH
	DW	0305H
	DW	0528H
	DW	01f4H
	DW	056dH
	DW	0138H
	DW	0481H
	DW	0ffecH
	DW	043cH
	DW	040H
	DW	0503H
	DW	02H
	DW	0494H
	DW	018fH
	DW	074dH
	DW	0202H
	DW	06aaH
	DW	01f6H
	DW	0664H
	DW	0376H
	DW	05f2H
	DW	01a0H
	DW	0258H
	DW	046bH
	DW	0546H
	DW	04fbH
	DW	056eH
	DW	0379H
	DW	0703H
	DW	0392H
	DW	06e6H
	DW	0e3H
	DW	049fH
	DW	04e2H
	DW	0722H
	DW	01f9H
	DW	073eH
	DW	0397H
	DW	0931H
	DW	0ff39H
	DW	01afH
	DW	098H
	DW	06c7H
	DW	0ff2bH
	DW	0ffe4H
	DW	0188H
	DW	0536H
	DW	0ff67H
	DW	0ffccH
	DW	03d2H
	DW	047fH
	DW	0febdH
	DW	0fe70H
	DW	032dH
	DW	06a7H
	DW	0ff78H
	DW	054H
	DW	05a9H
	DW	07dfH
	DW	0feb5H
	DW	0ff71H
	DW	0ff77H
	DW	04a8H
	DW	0ff00H
	DW	0216H
	DW	0ff63H
	DW	0407H
	DW	0fecdH
	DW	0fe49H
	DW	021eH
	DW	02dbH
	DW	0feb7H
	DW	0fe5cH
	DW	0ff9fH
	DW	0268H
	DW	0fe96H
	DW	0ff58H
	DW	0febeH
	DW	016eH
	DW	0ff09H
	DW	0ff92H
	DW	0ff2dH
	DW	059H
	DW	0ff3cH
	DW	0fecbH
	DW	014H
	DW	03bH
	DW	0fe94H
	DW	0fe31H
	DW	0fee2H
	DW	059H
	DW	0feb0H
	DW	0afH
	DW	0fe50H
	DW	08dH
	DW	0fe85H
	DW	0ff42H
	DW	0fe4eH
	DW	0ff3cH
	DW	0ffb1H
	DW	096H
	DW	0feeaH
	DW	0ff1dH
	DW	0fee8H
	DW	0a6H
	DW	0fdd5H
	DW	0fe5aH
	DW	0ff65H
	DW	021dH
	DW	0fe92H
	DW	036H
	DW	0ffe3H
	DW	0ffadH
	DW	0fed3H
	DW	0fcfaH
	DW	0baH
	DW	0274H
	DW	0fe73H
	DW	0fef8H
	DW	0f2H
	DW	0125H
	DW	0ff3bH
	DW	0fdb7H
	DW	07cH
	DW	019aH
	DW	035H
	DW	0ff7bH
	DW	0aH
	DW	0154H
	DW	0fdc6H
	DW	0fbd7H
	DW	041H
	DW	0fe42H
	DW	044H
	DW	0fe13H
	DW	017fH
	DW	03a9H
	DW	0fe9bH
	DW	0fd39H
	DW	0fe99H
	DW	0ff06H
	DW	0fd5bH
	DW	0fbd4H
	DW	0124H
	DW	0ffe6H
	DW	016bH
	DW	06H
	DW	025fH
	DW	0521H
	DW	0ff81H
	DW	0fff6H
	DW	05e9H
	DW	075eH
	DW	02c9H
	DW	03ccH
	DW	05bdH
	DW	0885H
	DW	05a3H
	DW	07e0H
_dico2_lsf DW	0f9a1H
	DW	0f9c0H
	DW	0f8fcH
	DW	0f70eH
	DW	0fbfdH
	DW	0f916H
	DW	0fbb4H
	DW	0f817H
	DW	0fb03H
	DW	0fa94H
	DW	0faa9H
	DW	0fa02H
	DW	0fc4dH
	DW	0fa4bH
	DW	0fc34H
	DW	0fa0cH
	DW	0fc19H
	DW	0fb3aH
	DW	0fc04H
	DW	0fb6cH
	DW	0fcd1H
	DW	0fc25H
	DW	0fc20H
	DW	0faa5H
	DW	0fb40H
	DW	0fc12H
	DW	0faf7H
	DW	0fbbaH
	DW	0fd18H
	DW	0fb0cH
	DW	0fd0dH
	DW	0faf3H
	DW	0fca2H
	DW	0fc65H
	DW	0fc77H
	DW	0fc28H
	DW	0fd5aH
	DW	0fbe5H
	DW	0fd53H
	DW	0fbe6H
	DW	0fbc1H
	DW	0fc27H
	DW	0fbdaH
	DW	0fd59H
	DW	0fc23H
	DW	0fd7fH
	DW	0fb99H
	DW	0fc30H
	DW	0fd06H
	DW	0fd72H
	DW	0fc86H
	DW	0fcdaH
	DW	0fcbfH
	DW	0fbbdH
	DW	0fd3eH
	DW	0fd8bH
	DW	0fd93H
	DW	0fcdaH
	DW	0fd80H
	DW	0fcd4H
	DW	0fcf9H
	DW	0fd86H
	DW	0fcf5H
	DW	0fde1H
	DW	0fc1cH
	DW	0fdcbH
	DW	0fbcdH
	DW	0fdbcH
	DW	0fddeH
	DW	0fd9dH
	DW	0fdc4H
	DW	0fd95H
	DW	0fd08H
	DW	0fedeH
	DW	0fc91H
	DW	0fdf2H
	DW	0fcc9H
	DW	0fe32H
	DW	0fce5H
	DW	0ff03H
	DW	0fdd7H
	DW	0fe61H
	DW	0fdb3H
	DW	0fe49H
	DW	0fdebH
	DW	0feacH
	DW	0fd4cH
	DW	0fc59H
	DW	0fe07H
	DW	0fcfcH
	DW	0fd42H
	DW	0fb95H
	DW	0fef9H
	DW	0feceH
	DW	0fc35H
	DW	0fe1dH
	DW	0fe43H
	DW	0ffb6H
	DW	0fdd5H
	DW	0fddcH
	DW	0fd9aH
	DW	0ff7fH
	DW	0fd4bH
	DW	0ff16H
	DW	0fe74H
	DW	0ff0aH
	DW	0fe25H
	DW	0ff06H
	DW	0fef7H
	DW	0fe6cH
	DW	0fe88H
	DW	0fdfeH
	DW	0fe5fH
	DW	0fe02H
	DW	0fed4H
	DW	0fec7H
	DW	0feb2H
	DW	0fd68H
	DW	0fe31H
	DW	0fcd2H
	DW	0fe7eH
	DW	0fd40H
	DW	0feafH
	DW	0fd99H
	DW	0ff16H
	DW	0ff37H
	DW	0ff17H
	DW	0ff11H
	DW	0ff59H
	DW	0fdc9H
	DW	0ff35H
	DW	0fd95H
	DW	0ff6dH
	DW	0fe61H
	DW	0ff8dH
	DW	0fea0H
	DW	0ff5aH
	DW	0fd12H
	DW	0ff55H
	DW	0fd07H
	DW	0fef2H
	DW	0fc91H
	DW	0fef8H
	DW	0fc79H
	DW	0fe91H
	DW	0fd18H
	DW	02bH
	DW	0fe25H
	DW	0eH
	DW	0fd73H
	DW	02bH
	DW	0fd62H
	DW	0bH
	DW	0fe40H
	DW	0ffc5H
	DW	0fdf7H
	DW	0ff82H
	DW	0ff89H
	DW	0ff65H
	DW	0fd9bH
	DW	0ffd6H
	DW	0fca1H
	DW	0ffe5H
	DW	0fc5dH
	DW	088H
	DW	0fe1dH
	DW	0b7H
	DW	0fe2cH
	DW	037H
	DW	0fed6H
	DW	037H
	DW	0fed0H
	DW	0139H
	DW	0fd9fH
	DW	0139H
	DW	0fd30H
	DW	0142H
	DW	0ff59H
	DW	064H
	DW	0fde3H
	DW	0fffdH
	DW	0ff89H
	DW	0ff91H
	DW	0ff45H
	DW	0e9H
	DW	0ff14H
	DW	0104H
	DW	0ff16H
	DW	01aH
	DW	0ff5bH
	DW	086H
	DW	0ffd3H
	DW	0ffd8H
	DW	0fddbH
	DW	0168H
	DW	0ff35H
	DW	017aH
	DW	0fe7cH
	DW	01c2H
	DW	0fe81H
	DW	0113H
	DW	014H
	DW	0b6H
	DW	0ff99H
	DW	0f6H
	DW	0ff91H
	DW	01afH
	DW	025H
	DW	01ceH
	DW	0ff6eH
	DW	01e7H
	DW	0ff63H
	DW	0fee4H
	DW	0ffc5H
	DW	01f7H
	DW	0ff48H
	DW	018H
	DW	035H
	DW	0fffdH
	DW	036H
	DW	07aH
	DW	0103H
	DW	014dH
	DW	042H
	DW	01e4H
	DW	068H
	DW	01b4H
	DW	044H
	DW	0c3H
	DW	074H
	DW	0beH
	DW	0ceH
	DW	010dH
	DW	0fff7H
	DW	01e2H
	DW	0160H
	DW	017eH
	DW	011dH
	DW	018fH
	DW	0115H
	DW	01c4H
	DW	0100H
	DW	045H
	DW	0baH
	DW	0dH
	DW	0129H
	DW	0fff3H
	DW	0103H
	DW	0ffa1H
	DW	01eH
	DW	038H
	DW	018aH
	DW	0c4H
	DW	01a9H
	DW	0cdH
	DW	01c8H
	DW	0119H
	DW	0241H
	DW	0fH
	DW	0bfH
	DW	0177H
	DW	0122H
	DW	0197H
	DW	0240H
	DW	0ffc8H
	DW	0e3H
	DW	0220H
	DW	0195H
	DW	00H
	DW	0225H
	DW	0ffa4H
	DW	0210H
	DW	0ff1bH
	DW	015fH
	DW	0ff0bH
	DW	0152H
	DW	0fe96H
	DW	01b3H
	DW	0a7H
	DW	020fH
	DW	0ffb5H
	DW	012eH
	DW	05bH
	DW	0338H
	DW	081H
	DW	0257H
	DW	01f0H
	DW	02a7H
	DW	0baH
	DW	02edH
	DW	099H
	DW	02e1H
	DW	0fee7H
	DW	0258H
	DW	0fea4H
	DW	0267H
	DW	0ff14H
	DW	0301H
	DW	029H
	DW	0371H
	DW	026H
	DW	037aH
	DW	0ff24H
	DW	0349H
	DW	0fe9bH
	DW	0373H
	DW	0fe77H
	DW	0387H
	DW	0fd86H
	DW	01daH
	DW	0fe44H
	DW	0352H
	DW	0ff51H
	DW	02a6H
	DW	0fe13H
	DW	0f2H
	DW	0fdf9H
	DW	0311H
	DW	0fd36H
	DW	0246H
	DW	0fde3H
	DW	016eH
	DW	0fde1H
	DW	01b2H
	DW	0fdabH
	DW	01f4H
	DW	0fd03H
	DW	0deH
	DW	0fd42H
	DW	0395H
	DW	0fd19H
	DW	03c2H
	DW	0fc9bH
	DW	01f5H
	DW	0fc7dH
	DW	0224H
	DW	0fe85H
	DW	0c8H
	DW	0fe4dH
	DW	09dH
	DW	0fccdH
	DW	0d6H
	DW	0fca3H
	DW	09dH
	DW	0fd9aH
	DW	028H
	DW	0fd88H
	DW	05eH
	DW	0fc8dH
	DW	0ffcaH
	DW	0fd1bH
	DW	0204H
	DW	0fe0bH
	DW	012aH
	DW	0fd9aH
	DW	0ff55H
	DW	0fc9aH
	DW	0ff5fH
	DW	0fc9fH
	DW	0ffe9H
	DW	0fcceH
	DW	05dH
	DW	0fc09H
	DW	0fef5H
	DW	0fd6aH
	DW	0fe99H
	DW	0fddbH
	DW	02H
	DW	0fe46H
	DW	0ff87H
	DW	0fe87H
	DW	00H
	DW	0ff1dH
	DW	021H
	DW	0fe62H
	DW	0ff82H
	DW	0ff7fH
	DW	0d4H
	DW	0fc5aH
	DW	022H
	DW	0fbc6H
	DW	0fee6H
	DW	0fba1H
	DW	0fef4H
	DW	0fd3aH
	DW	0fcc7H
	DW	0fe5cH
	DW	0ff41H
	DW	0fbccH
	DW	0fc60H
	DW	0fc6bH
	DW	0ffa3H
	DW	0fd8cH
	DW	0fe9aH
	DW	061H
	DW	07H
	DW	0ff32H
	DW	0fe77H
	DW	0ff9bH
	DW	018H
	DW	0ff35H
	DW	026H
	DW	0ff58H
	DW	053H
	DW	0fda9H
	DW	0fe59H
	DW	0fee9H
	DW	01aaH
	DW	0fd44H
	DW	076H
	DW	0ffb5H
	DW	0ceH
	DW	0fc2bH
	DW	0fd5fH
	DW	0fd58H
	DW	01a1H
	DW	0fe91H
	DW	025H
	DW	0fee9H
	DW	01daH
	DW	0ff7fH
	DW	0fec2H
	DW	013fH
	DW	0128H
	DW	0fd8eH
	DW	0ffd9H
	DW	0157H
	DW	025aH
	DW	0fd48H
	DW	0ffd9H
	DW	0fed1H
	DW	03acH
	DW	068H
	DW	0e9H
	DW	0fe84H
	DW	089H
	DW	0ffdcH
	DW	010dH
	DW	0ffb5H
	DW	0ff2aH
	DW	078H
	DW	02bH
	DW	0fdefH
	DW	0fe23H
	DW	01cbH
	DW	0a4H
	DW	0ff36H
	DW	0ff1bH
	DW	0ffcfH
	DW	0ff59H
	DW	0261H
	DW	0318H
	DW	062H
	DW	0ff24H
	DW	0393H
	DW	094H
	DW	0125H
	DW	011bH
	DW	0365H
	DW	05bH
	DW	023fH
	DW	018aH
	DW	0146H
	DW	0ffb2H
	DW	02cdH
	DW	043H
	DW	016dH
	DW	0febdH
	DW	0268H
	DW	0ffdcH
	DW	02dbH
	DW	01bH
	DW	026bH
	DW	0eeH
	DW	0278H
	DW	0111H
	DW	01c0H
	DW	063H
	DW	0321H
	DW	01dcH
	DW	0365H
	DW	0111H
	DW	02adH
	DW	040H
	DW	0315H
	DW	048H
	DW	03fdH
	DW	0d9H
	DW	0319H
	DW	01cbH
	DW	02deH
	DW	0168H
	DW	0286H
	DW	01e0H
	DW	0168H
	DW	0142H
	DW	01adH
	DW	01d0H
	DW	027eH
	DW	01aeH
	DW	02f4H
	DW	016bH
	DW	03e8H
	DW	0194H
	DW	02abH
	DW	0210H
	DW	025aH
	DW	0267H
	DW	028fH
	DW	019dH
	DW	03b2H
	DW	02afH
	DW	03a9H
	DW	025aH
	DW	0388H
	DW	025cH
	DW	022bH
	DW	02e1H
	DW	0312H
	DW	0296H
	DW	01d3H
	DW	028eH
	DW	016aH
	DW	024dH
	DW	03a1H
	DW	02c6H
	DW	01f2H
	DW	01deH
	DW	019fH
	DW	01a4H
	DW	02b5H
	DW	0373H
	DW	032dH
	DW	02abH
	DW	030dH
	DW	039dH
	DW	0391H
	DW	03abH
	DW	02d6H
	DW	02dcH
	DW	01ebH
	DW	0355H
	DW	0213H
	DW	03b4H
	DW	02deH
	DW	03c3H
	DW	013bH
	DW	0328H
	DW	02f9H
	DW	02f3H
	DW	0478H
	DW	02f8H
	DW	028fH
	DW	0434H
	DW	033aH
	DW	0421H
	DW	0443H
	DW	0346H
	DW	03ebH
	DW	0328H
	DW	0417H
	DW	046dH
	DW	0293H
	DW	044dH
	DW	03e0H
	DW	041aH
	DW	0432H
	DW	0433H
	DW	03cbH
	DW	02b6H
	DW	04caH
	DW	041eH
	DW	023bH
	DW	0349H
	DW	0374H
	DW	057cH
	DW	0563H
	DW	0448H
	DW	0438H
	DW	035dH
	DW	04cfH
	DW	02dfH
	DW	0504H
	DW	02f8H
	DW	04f8H
	DW	03dfH
	DW	0557H
	DW	041dH
	DW	04e9H
	DW	02bcH
	DW	041aH
	DW	0216H
	DW	03dcH
	DW	01c5H
	DW	04f0H
	DW	0257H
	DW	0474H
	DW	02a7H
	DW	0655H
	DW	032fH
	DW	0568H
	DW	0209H
	DW	0525H
	DW	0189H
	DW	061cH
	DW	0325H
	DW	05a8H
	DW	02aeH
	DW	042cH
	DW	0288H
	DW	036bH
	DW	0133H
	DW	043bH
	DW	0169H
	DW	0417H
	DW	013dH
	DW	0589H
	DW	03c4H
	DW	02a3H
	DW	023bH
	DW	0480H
	DW	04fH
	DW	045aH
	DW	0ffd1H
	DW	05faH
	DW	0137H
	DW	06b9H
	DW	013aH
	DW	048eH
	DW	02b1H
	DW	0202H
	DW	0ffa2H
	DW	015dH
	DW	011aH
	DW	0584H
	DW	0148H
	DW	0401H
	DW	01e7H
	DW	0ffbfH
	DW	039H
	DW	0325H
	DW	03caH
	DW	024H
	DW	03eH
	DW	0301H
	DW	0fef9H
	DW	0317H
	DW	0fea6H
	DW	027dH
	DW	02bbH
	DW	0ff77H
	DW	026cH
	DW	0216H
	DW	021dH
	DW	0fd21H
	DW	0c2H
	DW	02c7H
	DW	012cH
	DW	0fef4H
	DW	0fca1H
	DW	039eH
	DW	0301H
	DW	0fd3cH
	DW	0fe54H
	DW	01faH
	DW	0aeH
	DW	0fc84H
	DW	0fd8aH
	DW	01b3H
	DW	0223H
	DW	0fa65H
	DW	0fefeH
	DW	026dH
	DW	01d7H
	DW	0fc06H
	DW	0faa8H
	DW	0fe77H
	DW	0209H
	DW	0fc68H
	DW	0fd52H
	DW	0ffe7H
	DW	014H
	DW	0fc2aH
	DW	0fb7cH
	DW	0154H
	DW	09H
	DW	0f9eaH
	DW	0fb91H
	DW	0fea0H
	DW	030H
	DW	0f9d5H
	DW	0fe6eH
	DW	0fc89H
	DW	06H
	DW	0fb7cH
	DW	0fc88H
	DW	0fddcH
	DW	0fea0H
	DW	0f995H
	DW	0fb70H
	DW	0ff61H
	DW	0262H
	DW	0f818H
	DW	0fc3dH
	DW	0ff1fH
	DW	0c1H
	DW	0f988H
	DW	0f858H
	DW	0ff0bH
	DW	0fe13H
	DW	0fc3cH
	DW	0f970H
	DW	0fc58H
	DW	0fd85H
	DW	0faedH
	DW	0f930H
	DW	0fa94H
	DW	0fda4H
	DW	0f9fcH
	DW	0fcbdH
	DW	0fa8bH
	DW	0ff79H
	DW	0f9ccH
	DW	0fedeH
	DW	0f97aH
	DW	0fd38H
	DW	0f825H
	DW	0f9a0H
	DW	0f981H
	DW	0ffe5H
	DW	0f72eH
	DW	0fcd5H
	DW	0fb7bH
	DW	0b8H
	DW	0fb0fH
	DW	0bdH
	DW	0faa9H
	DW	024aH
	DW	0f825H
	DW	0c9H
	DW	0fceaH
	DW	02c8H
	DW	0fb46H
	DW	03H
	DW	0fbf7H
	DW	0328H
	DW	0fb1dH
	DW	033eH
	DW	0ff91H
	DW	027bH
	DW	0f99cH
	DW	01bfH
	DW	0fe31H
	DW	0fc4bH
	DW	0fe43H
	DW	0fc60H
	DW	0fe08H
	DW	0fb76H
	DW	0fe0bH
	DW	0fb45H
	DW	090H
	DW	0fea1H
	DW	0fe8cH
	DW	0fbe4H
	DW	0fee5H
	DW	0fbddH
	DW	0fee9H
	DW	0fb9dH
	DW	0fdc1H
	DW	0fa62H
	DW	0fdb5H
	DW	0f9b2H
	DW	0fc59H
	DW	0fc28H
	DW	0e5H
	DW	02b2H
	DW	0fc67H
	DW	0fd31H
	DW	0fe6dH
	DW	0552H
	DW	0fd53H
	DW	0fe2fH
	DW	036aH
	DW	018dH
	DW	0fe03H
	DW	0ffd2H
	DW	013dH
	DW	0536H
	DW	0fe1bH
	DW	01c8H
	DW	032dH
	DW	01b7H
	DW	0fe65H
	DW	0153H
	DW	0382H
	DW	042bH
	DW	0fe57H
	DW	02eH
	DW	05a1H
	DW	01f1H
	DW	0fc73H
	DW	0fce0H
	DW	05b9H
	DW	0416H
	DW	0ff02H
	DW	0febfH
	DW	0596H
	DW	048dH
	DW	044H
	DW	015eH
	DW	040aH
	DW	029aH
	DW	0172H
	DW	0bH
	DW	051fH
	DW	0316H
	DW	08fH
	DW	0e8H
	DW	0411H
	DW	061aH
	DW	0ff8eH
	DW	0297H
	DW	0650H
	DW	0436H
	DW	01c6H
	DW	0243H
	DW	04fbH
	DW	0410H
	DW	0ffb4H
	DW	038dH
	DW	02f0H
	DW	042bH
	DW	099H
	DW	0200H
	DW	015cH
	DW	04beH
	DW	0266H
	DW	0181H
	DW	0733H
	DW	0328H
	DW	010dH
	DW	040aH
	DW	0cbH
	DW	043eH
	DW	028cH
	DW	03f9H
	DW	06f7H
	DW	046aH
	DW	01adH
	DW	052fH
	DW	0183H
	DW	0568H
	DW	0ffcfH
	DW	049fH
	DW	0ffb8H
	DW	04bfH
	DW	0fe60H
	DW	03e9H
	DW	0220H
	DW	06d5H
	DW	0fea0H
	DW	04c7H
	DW	0fe0aH
	DW	04afH
	DW	0fdb3H
	DW	0239H
	DW	0ff1dH
	DW	065eH
	DW	0ff72H
	DW	062aH
	DW	0ff1aH
	DW	06b3H
	DW	0fd36H
	DW	0508H
	DW	0fcbaH
	DW	0576H
	DW	046bH
	DW	054dH
	DW	0ff30H
	DW	04d0H
	DW	01b5H
	DW	03c5H
	DW	0fc5fH
	DW	0332H
	DW	032bH
	DW	0582H
	DW	035bH
	DW	05e3H
	DW	0a4H
	DW	04bcH
	DW	056bH
	DW	0701H
	DW	01e4H
	DW	0752H
	DW	01c8H
	DW	080fH
	DW	03e4H
	DW	0492H
	DW	052eH
	DW	057aH
	DW	0524H
	DW	0550H
	DW	046fH
	DW	04eeH
	DW	04d2H
	DW	0652H
	DW	0551H
	DW	06e8H
	DW	058dH
	DW	04cbH
	DW	0630H
	DW	0543H
	DW	0356H
	DW	02a0H
	DW	0695H
	DW	061eH
	DW	0473H
	DW	04f6H
	DW	07e0H
	DW	0721H
	DW	06edH
	DW	062dH
	DW	05fcH
	DW	05b4H
	DW	05cfH
	DW	03b2H
	DW	067bH
	DW	03fdH
	DW	06d0H
	DW	04bcH
	DW	0570H
	DW	03d1H
	DW	06ecH
	DW	0489H
	DW	0722H
	DW	048cH
	DW	06b6H
	DW	0595H
	DW	07b5H
	DW	0637H
	DW	04a1H
	DW	0360H
	DW	0854H
	DW	0425H
	DW	0707H
	DW	032eH
	DW	072eH
	DW	02f5H
	DW	0838H
	DW	0523H
	DW	0806H
	DW	04eaH
	DW	0841H
	DW	0393H
	DW	091bH
	DW	03a2H
	DW	05bbH
	DW	047bH
	DW	0a1eH
	DW	059fH
	DW	08c5H
	DW	06d0H
	DW	082aH
	DW	0654H
	DW	0936H
	DW	05aeH
	DW	0a6aH
	DW	05e2H
	DW	0754H
	DW	072dH
	DW	0816H
	DW	07b7H
	DW	06cbH
	DW	0629H
	DW	02aaH
	DW	0509H
	DW	0630H
	DW	07fdH
	DW	05aeH
	DW	0832H
	DW	09c2H
	DW	07d4H
	DW	0a97H
	DW	0812H
	DW	02d6H
	DW	0634H
	DW	0ac4H
	DW	0920H
	DW	0e4H
	DW	034fH
	DW	0998H
	DW	067bH
	DW	024H
	DW	012dH
	DW	0796H
	DW	07a5H
	DW	0fe42H
	DW	0ffa0H
	DW	086aH
	DW	0574H
	DW	05fdH
	DW	044dH
	DW	0eH
	DW	0260H
	DW	0fc65H
	DW	0fd24H
	DW	0567H
	DW	07beH
	DW	0541H
	DW	03b8H
	DW	0fd58H
	DW	0141H
	DW	0501H
	DW	04f4H
	DW	0f9c6H
	DW	016dH
	DW	03adH
	DW	03b2H
	DW	0f937H
	DW	0fccaH
	DW	0946H
	DW	0ae3H
	DW	071dH
	DW	0ae4H
_dico3_lsf DW	0f8ecH
	DW	0f71dH
	DW	0f8a9H
	DW	0f617H
	DW	0f998H
	DW	0f8c8H
	DW	0f961H
	DW	0f82cH
	DW	0fb3cH
	DW	0f888H
	DW	0fb3bH
	DW	0f7c6H
	DW	0f9e9H
	DW	0f9ccH
	DW	0f9dbH
	DW	0f9ecH
	DW	0fb55H
	DW	0f9b1H
	DW	0fb38H
	DW	0f941H
	DW	0fab1H
	DW	0fb81H
	DW	0f9b0H
	DW	0f864H
	DW	0fb06H
	DW	0fa91H
	DW	0fae7H
	DW	0fa85H
	DW	0f9b9H
	DW	0fb65H
	DW	0f974H
	DW	0fae1H
	DW	0fa5dH
	DW	0fa3aH
	DW	0faa9H
	DW	0fc7eH
	DW	0fb18H
	DW	0fbddH
	DW	0facdH
	DW	0fb92H
	DW	0fc2aH
	DW	0fb93H
	DW	0fb83H
	DW	0fa20H
	DW	0fbc8H
	DW	0fae4H
	DW	0fc04H
	DW	0fb61H
	DW	0fc2cH
	DW	0fa32H
	DW	0fc39H
	DW	0fa29H
	DW	0fc24H
	DW	0fc66H
	DW	0fbe9H
	DW	0fbcbH
	DW	0fcbaH
	DW	0fb65H
	DW	0fca6H
	DW	0fb3aH
	DW	0fb95H
	DW	0fbefH
	DW	0fbd8H
	DW	0fd01H
	DW	0fc98H
	DW	0fb7bH
	DW	0fd43H
	DW	0fc90H
	DW	0fd3eH
	DW	0fc76H
	DW	0fcfaH
	DW	0fc08H
	DW	0fdbeH
	DW	0fbc8H
	DW	0fcdfH
	DW	0fa3aH
	DW	0fdb1H
	DW	0fba9H
	DW	0fdb0H
	DW	0fb86H
	DW	0fd37H
	DW	0fa94H
	DW	0fd80H
	DW	0faa0H
	DW	0fdabH
	DW	0fbddH
	DW	0fe60H
	DW	0fc79H
	DW	0fd52H
	DW	0fcc0H
	DW	0fd6bH
	DW	0fd3cH
	DW	0fe44H
	DW	0fc9cH
	DW	0fe16H
	DW	0fc67H
	DW	0fe8aH
	DW	0fcf8H
	DW	0fd95H
	DW	0fb6eH
	DW	0fdb7H
	DW	0fddbH
	DW	0fcffH
	DW	0fce5H
	DW	0fe4dH
	DW	0fd6dH
	DW	0fdeeH
	DW	0fd1bH
	DW	0fe0eH
	DW	0fcbbH
	DW	0fe9bH
	DW	0fdabH
	DW	0fee9H
	DW	0fc99H
	DW	0ff0dH
	DW	0fc89H
	DW	0fee6H
	DW	0fd67H
	DW	0fee8H
	DW	0fd65H
	DW	0ff5bH
	DW	0fdd0H
	DW	0fe76H
	DW	0fc79H
	DW	0fe96H
	DW	0fe66H
	DW	0fe40H
	DW	0fdb9H
	DW	0fe67H
	DW	0fdc2H
	DW	0fec7H
	DW	0fe9bH
	DW	0fd83H
	DW	0fddcH
	DW	0fdc6H
	DW	0fe4cH
	DW	0fc80H
	DW	0fe08H
	DW	0fe82H
	DW	0fd0bH
	DW	0ffc6H
	DW	0fe1fH
	DW	0ff5bH
	DW	0fd96H
	DW	0ff41H
	DW	0fe8aH
	DW	0ff16H
	DW	0fe82H
	DW	0ff22H
	DW	0fd55H
	DW	0ffe7H
	DW	0fe20H
	DW	0fe5eH
	DW	0fe99H
	DW	0fd26H
	DW	0fe9fH
	DW	0febcH
	DW	0ff63H
	DW	0fe50H
	DW	0febeH
	DW	0fe76H
	DW	0fed1H
	DW	0fee4H
	DW	0ff98H
	DW	0fda7H
	DW	0fedfH
	DW	0fdd4H
	DW	0ff3cH
	DW	0fdb4H
	DW	0ff6aH
	DW	0fd6dH
	DW	0fda0H
	DW	0fe27H
	DW	0ffe8H
	DW	0ffbcH
	DW	0fe40H
	DW	0fe26H
	DW	0fff8H
	DW	0fe06H
	DW	0ffd3H
	DW	0fd14H
	DW	0ff48H
	DW	0fcb4H
	DW	0ff04H
	DW	0fc7bH
	DW	0ffa5H
	DW	0fdb8H
	DW	0ff9fH
	DW	0fd74H
	DW	08aH
	DW	0fd04H
	DW	0ff7dH
	DW	0fd5aH
	DW	0fff4H
	DW	0fd62H
	DW	0a5H
	DW	0fefdH
	DW	0fffdH
	DW	0fcb8H
	DW	0ff95H
	DW	0fc73H
	DW	025H
	DW	0fc20H
	DW	02cH
	DW	0fcaaH
	DW	0fe61H
	DW	0fcb9H
	DW	0dH
	DW	0fc17H
	DW	0fef1H
	DW	0fbfeH
	DW	0fecbH
	DW	0fce2H
	DW	0fe22H
	DW	0fcc0H
	DW	0fe18H
	DW	0fc51H
	DW	0a8H
	DW	0fba8H
	DW	0fe7dH
	DW	0fb5fH
	DW	0ff9bH
	DW	0fb61H
	DW	0ffd8H
	DW	0fc53H
	DW	0fec4H
	DW	0fbfaH
	DW	0fcfeH
	DW	0fbecH
	DW	0fd8fH
	DW	0fbc7H
	DW	0fde6H
	DW	0fb38H
	DW	0fed5H
	DW	0fae0H
	DW	0fe4cH
	DW	0fb53H
	DW	0fd69H
	DW	0fb71H
	DW	0ff5fH
	DW	0fb40H
	DW	0fd4eH
	DW	0fb2bH
	DW	0fcc1H
	DW	0fa68H
	DW	0fd30H
	DW	0fa85H
	DW	0fe13H
	DW	0fc7eH
	DW	0fd1cH
	DW	0fc66H
	DW	0fcdfH
	DW	0fbb2H
	DW	0fe6eH
	DW	0f9d5H
	DW	0fc3cH
	DW	0fbdbH
	DW	0fd82H
	DW	0fb0bH
	DW	0fa62H
	DW	0fa25H
	DW	0fc5aH
	DW	0fa22H
	DW	0fc81H
	DW	0f9c2H
	DW	0fdccH
	DW	0f945H
	DW	0fd33H
	DW	0fda2H
	DW	0fdabH
	DW	0fb72H
	DW	0fbc3H
	DW	0faa7H
	DW	0fe2cH
	DW	0f866H
	DW	0fa2bH
	DW	0f8d2H
	DW	0fc47H
	DW	0f874H
	DW	0fc5dH
	DW	0fa25H
	DW	0ff44H
	DW	0f99dH
	DW	0fe5bH
	DW	0fa4fH
	DW	0feaeH
	DW	0fa58H
	DW	0ffeaH
	DW	0f86aH
	DW	0fe5aH
	DW	0f82aH
	DW	0ff07H
	DW	0fe10H
	DW	0ff8eH
	DW	0f88aH
	DW	0fd0dH
	DW	0faf7H
	DW	0aeH
	DW	0fa55H
	DW	0ff93H
	DW	0fe1eH
	DW	0feffH
	DW	0fb3bH
	DW	0fe04H
	DW	0f9afH
	DW	097H
	DW	0f962H
	DW	0d0H
	DW	0fd72H
	DW	06bH
	DW	0f98dH
	DW	01dH
	DW	0fb8bH
	DW	0117H
	DW	0fb41H
	DW	0132H
	DW	0fb34H
	DW	0fe06H
	DW	0fd26H
	DW	0ff51H
	DW	0fb2cH
	DW	0ff9bH
	DW	0fc37H
	DW	0227H
	DW	0fc9aH
	DW	0116H
	DW	0fcc9H
	DW	013bH
	DW	0fdcdH
	DW	0178H
	DW	0fbe5H
	DW	0e4H
	DW	0fe05H
	DW	0118H
	DW	0fda9H
	DW	0119H
	DW	0fd0aH
	DW	0fdH
	DW	0fecfH
	DW	017bH
	DW	0fd0dH
	DW	0ff7aH
	DW	0fd9dH
	DW	0294H
	DW	0fcc8H
	DW	0218H
	DW	0fccfH
	DW	0286H
	DW	0fe63H
	DW	031H
	DW	0feabH
	DW	0b1H
	DW	0fe3bH
	DW	020eH
	DW	0fe1eH
	DW	024dH
	DW	0ffb9H
	DW	0153H
	DW	0fd6fH
	DW	0108H
	DW	0ff0cH
	DW	0127H
	DW	0ff13H
	DW	013bH
	DW	0fe7dH
	DW	0239H
	DW	0fe06H
	DW	0fff7H
	DW	0fe87H
	DW	0eH
	DW	0ff60H
	DW	0295H
	DW	0ff28H
	DW	028H
	DW	0feccH
	DW	0ffd2H
	DW	05fH
	DW	0d6H
	DW	0ff0eH
	DW	0a7H
	DW	0ffaaH
	DW	0c0H
	DW	0ffc8H
	DW	01bH
	DW	0ffb4H
	DW	01fH
	DW	024H
	DW	0135H
	DW	0ff96H
	DW	0ff4aH
	DW	0ff8fH
	DW	04aH
	DW	0fe47H
	DW	0ffeaH
	DW	017H
	DW	08bH
	DW	051H
	DW	0fff5H
	DW	02cH
	DW	0fH
	DW	0ffa9H
	DW	0ff77H
	DW	0ff8aH
	DW	0ff31H
	DW	0ff62H
	DW	0ffc6H
	DW	0110H
	DW	0ffa4H
	DW	0ff64H
	DW	0fe47H
	DW	08H
	DW	0ff78H
	DW	080H
	DW	0ff23H
	DW	065H
	DW	0ff26H
	DW	028H
	DW	0ff3bH
	DW	0ffb4H
	DW	0fe38H
	DW	09H
	DW	0fe43H
	DW	021H
	DW	0fe59H
	DW	0e2H
	DW	03cH
	DW	049H
	DW	0ff22H
	DW	09cH
	DW	0fe71H
	DW	0118H
	DW	0fec2H
	DW	0f5H
	DW	0feabH
	DW	0a6H
	DW	0fe0dH
	DW	0153H
	DW	0ff42H
	DW	0147H
	DW	0ff25H
	DW	0145H
	DW	0ff77H
	DW	0ffa7H
	DW	0fdacH
	DW	064H
	DW	0fd8dH
	DW	090H
	DW	0fd5bH
	DW	01e7H
	DW	01cH
	DW	0fcH
	DW	0fe79H
	DW	0d6H
	DW	0ffd7H
	DW	011aH
	DW	0ffe4H
	DW	063H
	DW	0fee2H
	DW	014bH
	DW	031H
	DW	01cbH
	DW	0fe7cH
	DW	0235H
	DW	0fe8fH
	DW	01b4H
	DW	01cH
	DW	0150H
	DW	0fff7H
	DW	018dH
	DW	0ff59H
	DW	026aH
	DW	022H
	DW	0254H
	DW	0ffefH
	DW	0231H
	DW	0ff74H
	DW	012bH
	DW	04fH
	DW	020aH
	DW	07dH
	DW	0cbH
	DW	02H
	DW	0f4H
	DW	0120H
	DW	0ffH
	DW	0d3H
	DW	0afH
	DW	052H
	DW	0254H
	DW	0bbH
	DW	0205H
	DW	06cH
	DW	017dH
	DW	0ffH
	DW	016dH
	DW	0129H
	DW	01f1H
	DW	0160H
	DW	0147H
	DW	0ffaeH
	DW	019H
	DW	0d2H
	DW	0173H
	DW	0f5H
	DW	0105H
	DW	03H
	DW	0221H
	DW	01c1H
	DW	08cH
	DW	0126H
	DW	02cH
	DW	0127H
	DW	0d4H
	DW	015bH
	DW	0f4H
	DW	01eeH
	DW	014bH
	DW	0210H
	DW	0c9H
	DW	0133H
	DW	015dH
	DW	019bH
	DW	0265H
	DW	011cH
	DW	0266H
	DW	019dH
	DW	01d0H
	DW	0142H
	DW	0270H
	DW	018dH
	DW	061H
	DW	0c8H
	DW	0ff60H
	DW	0180H
	DW	095H
	DW	016aH
	DW	01efH
	DW	020dH
	DW	010dH
	DW	0249H
	DW	021H
	DW	01ebH
	DW	0ff87H
	DW	01b1H
	DW	01abH
	DW	0263H
	DW	01f2H
	DW	0204H
	DW	0abH
	DW	01bbH
	DW	01f1H
	DW	029aH
	DW	01b8H
	DW	0113H
	DW	0236H
	DW	023fH
	DW	092H
	DW	027fH
	DW	09bH
	DW	029eH
	DW	0ffdfH
	DW	0adH
	DW	0d4H
	DW	02b8H
	DW	0ff5aH
	DW	0259H
	DW	0ff41H
	DW	02b7H
	DW	0fe17H
	DW	01f7H
	DW	0afH
	DW	02e6H
	DW	0d6H
	DW	01dcH
	DW	0174H
	DW	043bH
	DW	0242H
	DW	0212H
	DW	024aH
	DW	0309H
	DW	01a9H
	DW	036aH
	DW	013bH
	DW	0349H
	DW	0176H
	DW	0350H
	DW	0ff5bH
	DW	0235H
	DW	023H
	DW	03dfH
	DW	0ffd9H
	DW	0426H
	DW	0149H
	DW	02c8H
	DW	0312H
	DW	0348H
	DW	0285H
	DW	031bH
	DW	0295H
	DW	02a4H
	DW	023bH
	DW	0396H
	DW	0278H
	DW	0437H
	DW	02a1H
	DW	0331H
	DW	013eH
	DW	0184H
	DW	036aH
	DW	03f4H
	DW	0234H
	DW	0350H
	DW	0370H
	DW	026cH
	DW	022dH
	DW	01dfH
	DW	029fH
	DW	01c5H
	DW	02b4H
	DW	01d4H
	DW	0348H
	DW	0282H
	DW	034cH
	DW	0285H
	DW	01faH
	DW	01acH
	DW	0381H
	DW	0237H
	DW	0345H
	DW	0183H
	DW	03c2H
	DW	01f3H
	DW	02b3H
	DW	0231H
	DW	03abH
	DW	039eH
	DW	030fH
	DW	0128H
	DW	0316H
	DW	010cH
	DW	0404H
	DW	0212H
	DW	036aH
	DW	0149H
	DW	0224H
	DW	08fH
	DW	02a3H
	DW	0123H
	DW	01f7H
	DW	042H
	DW	0411H
	DW	0167H
	DW	0312H
	DW	061H
	DW	0325H
	DW	021H
	DW	0345H
	DW	01d6H
	DW	01ffH
	DW	031H
	DW	0444H
	DW	0147H
	DW	0496H
	DW	0143H
	DW	03H
	DW	0f2H
	DW	0368H
	DW	01daH
	DW	02b1H
	DW	01adH
	DW	0531H
	DW	02a6H
	DW	0412H
	DW	026cH
	DW	0455H
	DW	0298H
	DW	0141H
	DW	0c1H
	DW	0379H
	DW	03b6H
	DW	0481H
	DW	036aH
	DW	037dH
	DW	027bH
	DW	036dH
	DW	035eH
	DW	03b4H
	DW	0391H
	DW	050dH
	DW	0299H
	DW	0528H
	DW	027fH
	DW	03e5H
	DW	0319H
	DW	057aH
	DW	0406H
	DW	0498H
	DW	03f4H
	DW	0456H
	DW	03bfH
	DW	0582H
	DW	039dH
	DW	057bH
	DW	0393H
	DW	021fH
	DW	035eH
	DW	045cH
	DW	04c6H
	DW	0343H
	DW	04a6H
	DW	0343H
	DW	04a6H
	DW	03bfH
	DW	047cH
	DW	047bH
	DW	0560H
	DW	0514H
	DW	04a9H
	DW	0587H
	DW	04cfH
	DW	0537H
	DW	053dH
	DW	02eaH
	DW	0444H
	DW	06afH
	DW	0503H
	DW	056dH
	DW	0431H
	DW	0536H
	DW	061eH
	DW	0481H
	DW	05c3H
	DW	066dH
	DW	0471H
	DW	0721H
	DW	04c4H
	DW	0420H
	DW	0566H
	DW	05f1H
	DW	06c2H
	DW	0660H
	DW	0609H
	DW	0654H
	DW	0606H
	DW	0357H
	DW	063cH
	DW	0361H
	DW	0683H
	DW	02b5H
	DW	0375H
	DW	06b4H
	DW	05efH
	DW	048fH
	DW	0510H
	DW	08a1H
	DW	06e0H
	DW	07a0H
	DW	05d5H
	DW	07e4H
	DW	05caH
	DW	05feH
	DW	074aH
	DW	069eH
	DW	07d8H
	DW	061eH
	DW	02ecH
	DW	06e1H
	DW	0339H
	DW	0126H
	DW	0570H
	DW	043cH
	DW	080aH
	DW	026dH
	DW	0523H
	DW	016dH
	DW	0507H
	DW	0c6H
	DW	0404H
	DW	01e8H
	DW	0580H
	DW	0f9H
	DW	0193H
	DW	03f6H
	DW	0619H
	DW	0144H
	DW	016bH
	DW	066dH
	DW	0414H
	DW	0c1H
	DW	016fH
	DW	07f2H
	DW	0743H
	DW	0ff05H
	DW	0243H
	DW	02eeH
	DW	03e2H
	DW	0ff0dH
	DW	01eH
	DW	052dH
	DW	036fH
	DW	0ffe4H
	DW	0ff57H
	DW	0270H
	DW	0395H
	DW	0fe3bH
	DW	09fH
	DW	0baH
	DW	055aH
	DW	0fd9aH
	DW	06H
	DW	0219H
	DW	0188H
	DW	0ffa2H
	DW	0feddH
	DW	030dH
	DW	0e5H
	DW	0ff80H
	DW	0fed6H
	DW	0f5H
	DW	01ebH
	DW	0fd43H
	DW	0fd78H
	DW	03ccH
	DW	0315H
	DW	0fe0bH
	DW	0fd80H
	DW	0b2H
	DW	0ffH
	DW	0fe93H
	DW	0fe7aH
	DW	0ff01H
	DW	013dH
	DW	0fc42H
	DW	0fedaH
	DW	0ff41H
	DW	0e4H
	DW	0fcf9H
	DW	0fe41H
	DW	09dH
	DW	0ff13H
	DW	0fd6fH
	DW	0fd30H
	DW	0fe69H
	DW	05cH
	DW	0ff8bH
	DW	0fd9dH
	DW	014eH
	DW	0ff1aH
	DW	0fd59H
	DW	0fbc4H
	DW	0ff70H
	DW	0fec3H
	DW	0fc7bH
	DW	0fca3H
	DW	0fd1eH
	DW	0fe98H
	DW	0ffabH
	DW	0fd29H
	DW	0ffa6H
	DW	0fcedH
	DW	064H
	DW	0ffeaH
	DW	0fe79H
	DW	0fef9H
	DW	0ffc8H
	DW	0ffb7H
	DW	0feafH
	DW	0fd0eH
	DW	05H
	DW	0ff43H
	DW	0fd3eH
	DW	0fd90H
	DW	059H
	DW	0fea8H
	DW	0ff79H
	DW	0fba7H
	DW	0fe9fH
	DW	0ff13H
	DW	0fd54H
	DW	0fb91H
	DW	0feedH
	DW	0fbb2H
	DW	0fef3H
	DW	0fb4dH
	DW	098H
	DW	091H
	DW	0fd2eH
	DW	0fb30H
	DW	031H
	DW	050H
	DW	0fb20H
	DW	0fcf8H
	DW	0ff08H
	DW	0187H
	DW	0fd24H
	DW	0fdddH
	DW	01d5H
	DW	0daH
	DW	0ff01H
	DW	0fca0H
	DW	045H
	DW	016eH
	DW	0ff5aH
	DW	0fe1bH
	DW	0fd50H
	DW	0bfH
	DW	0fb44H
	DW	0fb54H
	DW	0ff56H
	DW	0ff57H
	DW	0fae4H
	DW	0f9a1H
	DW	0141H
	DW	01d6H
	DW	0fa75H
	DW	0fb25H
	DW	0ffc0H
	DW	0110H
	DW	0faafH
	DW	0ff08H
	DW	01ecH
	DW	0235H
	DW	0fd2fH
	DW	0fd9fH
	DW	0c3H
	DW	01e5H
	DW	0fdc3H
	DW	0ff7bH
	DW	01abH
	DW	0caH
	DW	0ff55H
	DW	0ff8aH
	DW	0c7H
	DW	023fH
	DW	02H
	DW	0ffe1H
	DW	02b6H
	DW	02f3H
	DW	0faaaH
	DW	0ffd9H
	DW	0228H
	DW	022dH
	DW	0fe17H
	DW	010fH
	DW	02a8H
	DW	0219H
	DW	0dH
	DW	0fe3bH
	DW	0357H
	DW	03baH
	DW	0ff7bH
	DW	0ffccH
	DW	0ffafH
	DW	02e2H
	DW	0fb6fH
	DW	027dH
	DW	041fH
	DW	0423H
	DW	0ffa1H
	DW	02a4H
	DW	04ebH
	DW	0439H
	DW	01e9H
	DW	0131H
	DW	0fe3fH
	DW	03baH
	DW	0fdeaH
	DW	03e4H
	DW	0fc37H
	DW	0362H
	DW	0fbdeH
	DW	0423H
	DW	0faf2H
	DW	026aH
	DW	0fa78H
	DW	0269H
	DW	0fe36H
	DW	0556H
	DW	0ff61H
	DW	071dH
	DW	0fcfaH
	DW	0fdf0H
	DW	0fff2H
	DW	0456H
	DW	0fb4eH
	DW	0fc7bH
	DW	0fcfcH
	DW	01b1H
	DW	0fb18H
	DW	0fb19H
	DW	0fc0dH
	DW	0fed2H
	DW	0fda6H
	DW	0fdb7H
	DW	0fd09H
	DW	0f9aeH
	DW	0fd08H
	DW	0f9f3H
	DW	0fcb8H
	DW	0f87fH
	DW	0fcd0H
	DW	0fde5H
	DW	0f917H
	DW	0f745H
	DW	0ff1dH
	DW	0ffdcH
	DW	0f80eH
	DW	0f8d9H
	DW	0f7c5H
	DW	0fb9aH
	DW	0f659H
	DW	0f8e8H
	DW	0fa42H
	DW	0fcH
	DW	0f573H
	DW	0fe61H
	DW	0fdc5H
	DW	0fe2dH
	DW	05e5H
	DW	0612H
	DW	0884H
	DW	07b7H
	DW	0916H
	DW	07e4H
_dico4_lsf DW	0f8bfH
	DW	0f96fH
	DW	0f8bfH
	DW	0f925H
	DW	0f7f8H
	DW	0fb82H
	DW	0f7aaH
	DW	0f98aH
	DW	0f9adH
	DW	0fbb5H
	DW	0f958H
	DW	0fb95H
	DW	0fabfH
	DW	0f9b8H
	DW	0fab1H
	DW	0f99aH
	DW	0fac6H
	DW	0faf3H
	DW	0fad3H
	DW	0fb0fH
	DW	0f980H
	DW	0f98fH
	DW	0fa31H
	DW	0fcadH
	DW	0fabeH
	DW	0f8d8H
	DW	0fa7bH
	DW	0f774H
	DW	0fafeH
	DW	0fd57H
	DW	0f907H
	DW	0f98fH
	DW	0fc3aH
	DW	0fbc6H
	DW	0fb61H
	DW	0f974H
	DW	0fbe2H
	DW	0fbcfH
	DW	0fb8aH
	DW	0fb7aH
	DW	0fb49H
	DW	0fd18H
	DW	0fb06H
	DW	0fc1bH
	DW	0fc5aH
	DW	0fa99H
	DW	0fc61H
	DW	0fa78H
	DW	0fc0eH
	DW	0fae7H
	DW	0fcf1H
	DW	0fc45H
	DW	0fbe7H
	DW	0fc7cH
	DW	0fc1fH
	DW	0fccfH
	DW	0fd1fH
	DW	0fcc9H
	DW	0fc34H
	DW	0fb5bH
	DW	0fd1eH
	DW	0fbbaH
	DW	0fd1eH
	DW	0fb7eH
	DW	0fcf0H
	DW	0fcdfH
	DW	0fcd6H
	DW	0fceeH
	DW	0fc84H
	DW	0fdf8H
	DW	0fc18H
	DW	0fcceH
	DW	0fd7cH
	DW	0fc3bH
	DW	0fdbfH
	DW	0fc8eH
	DW	0fde3H
	DW	0fd4aH
	DW	0fd61H
	DW	0fc6bH
	DW	0fdadH
	DW	0fd7eH
	DW	0fd7aH
	DW	0fd99H
	DW	0fc44H
	DW	0fd93H
	DW	0fc63H
	DW	0fdfdH
	DW	0fd29H
	DW	0fe1dH
	DW	0fcd1H
	DW	0fe1bH
	DW	0fcb8H
	DW	0fdbeH
	DW	0fe48H
	DW	0fd37H
	DW	0fdbeH
	DW	0febbH
	DW	0fd6fH
	DW	0fd62H
	DW	0fe7eH
	DW	0fdc6H
	DW	0fe47H
	DW	0fd66H
	DW	0fdfeH
	DW	0fcedH
	DW	0fe78H
	DW	0fdefH
	DW	0fdf6H
	DW	0fe3bH
	DW	0fe19H
	DW	0fe59H
	DW	0fd98H
	DW	0fdb7H
	DW	0fd97H
	DW	0ff63H
	DW	0fd6aH
	DW	0fef4H
	DW	0fd58H
	DW	0fea4H
	DW	0febeH
	DW	0febdH
	DW	0fd88H
	DW	0fe44H
	DW	0fed0H
	DW	0fe52H
	DW	0feb4H
	DW	0fe36H
	DW	0feebH
	DW	0fe2cH
	DW	0fd6dH
	DW	0fce7H
	DW	0fec1H
	DW	0fd84H
	DW	0ff1dH
	DW	0fdd6H
	DW	0fe8bH
	DW	0fea5H
	DW	0feb2H
	DW	0ff2eH
	DW	0fe38H
	DW	0ff40H
	DW	0fdeeH
	DW	0ff0eH
	DW	0ff28H
	DW	0ff3aH
	DW	0fe92H
	DW	0fe8eH
	DW	0feaeH
	DW	0ff5fH
	DW	0fe67H
	DW	0fd14H
	DW	0ff95H
	DW	0fe84H
	DW	0fedaH
	DW	0fd7dH
	DW	0ff21H
	DW	0fd67H
	DW	0ff16H
	DW	0fd1bH
	DW	0ff73H
	DW	0fe10H
	DW	0ff7eH
	DW	0fe02H
	DW	0ff75H
	DW	0feb9H
	DW	0ff54H
	DW	0fecfH
	DW	0feceH
	DW	0fdbcH
	DW	0ff5cH
	DW	0fef9H
	DW	0fefaH
	DW	0ff54H
	DW	0ffbdH
	DW	0fe6eH
	DW	01fH
	DW	0fe92H
	DW	0fff6H
	DW	0fe4cH
	DW	0ffaaH
	DW	0fdf1H
	DW	047H
	DW	0fe87H
	DW	0ffeaH
	DW	0fd9fH
	DW	0fff4H
	DW	0fd5aH
	DW	0ffbdH
	DW	0fec1H
	DW	03fH
	DW	0ff41H
	DW	023H
	DW	0ff4bH
	DW	0ffd9H
	DW	0ff0eH
	DW	07eH
	DW	0ff59H
	DW	0ff74H
	DW	0fde0H
	DW	09bH
	DW	0fed7H
	DW	0aeH
	DW	0fed7H
	DW	026H
	DW	0fff8H
	DW	075H
	DW	0fe84H
	DW	0c5H
	DW	0fe3cH
	DW	0f0H
	DW	0fdf6H
	DW	0dfH
	DW	0ff99H
	DW	06eH
	DW	0ff45H
	DW	057H
	DW	0ff65H
	DW	0a9H
	DW	0ffd1H
	DW	09dH
	DW	01aH
	DW	0ffadH
	DW	0ff9cH
	DW	080H
	DW	050H
	DW	0d1H
	DW	0ffc2H
	DW	06H
	DW	07H
	DW	016H
	DW	05H
	DW	013eH
	DW	0ffecH
	DW	0f8H
	DW	0ffd3H
	DW	0ff38H
	DW	0ffc1H
	DW	09cH
	DW	0ffbbH
	DW	0faH
	DW	0ff49H
	DW	0171H
	DW	0ff82H
	DW	0ff8fH
	DW	0ffb4H
	DW	0ff72H
	DW	0ff86H
	DW	0ffc0H
	DW	0ff02H
	DW	0ffe1H
	DW	023H
	DW	0ff4fH
	DW	0ffb9H
	DW	0fff9H
	DW	0abH
	DW	05dH
	DW	01bH
	DW	06cH
	DW	0d4H
	DW	0feb6H
	DW	0ff2fH
	DW	0ff85H
	DW	0ffbaH
	DW	0fee9H
	DW	05fH
	DW	0ffa0H
	DW	014H
	DW	0ff44H
	DW	0ffc3H
	DW	0fec6H
	DW	057H
	DW	0fed4H
	DW	0ffb2H
	DW	0fe9eH
	DW	0ff7aH
	DW	0bH
	DW	07aH
	DW	0ff74H
	DW	07aH
	DW	0feedH
	DW	098H
	DW	0fedbH
	DW	08cH
	DW	0ffaeH
	DW	08aH
	DW	0febfH
	DW	0ff91H
	DW	0fe20H
	DW	0ff64H
	DW	0fe99H
	DW	04cH
	DW	0ff02H
	DW	0ffd8H
	DW	0fd85H
	DW	0ffa0H
	DW	0fdf6H
	DW	04fH
	DW	0fe05H
	DW	08H
	DW	0fef4H
	DW	012fH
	DW	0fde5H
	DW	044H
	DW	0fe42H
	DW	03dH
	DW	0fdf6H
	DW	0132H
	DW	06fH
	DW	0bdH
	DW	0fe4dH
	DW	07aH
	DW	0fe85H
	DW	0a6H
	DW	0fdc5H
	DW	0fe72H
	DW	0fd88H
	DW	0ffb6H
	DW	0fd15H
	DW	0ffa1H
	DW	0fe39H
	DW	0c2H
	DW	0fc48H
	DW	053H
	DW	0fce2H
	DW	0c0H
	DW	0fd0dH
	DW	0c0H
	DW	0fcf3H
	DW	0ff5eH
	DW	0fd95H
	DW	0eaH
	DW	0fd69H
	DW	0fed7H
	DW	0fe18H
	DW	0ff93H
	DW	0fc3cH
	DW	0ff7cH
	DW	0fcbaH
	DW	0ffbcH
	DW	0fcb5H
	DW	03aH
	DW	0fba8H
	DW	0ffaaH
	DW	0fcdbH
	DW	0fed5H
	DW	0fc50H
	DW	0ff03H
	DW	0fcf6H
	DW	0ffceH
	DW	0fc3bH
	DW	0fddbH
	DW	0fea0H
	DW	0ff9eH
	DW	0fc20H
	DW	0fea9H
	DW	0fba3H
	DW	0fec5H
	DW	0fba3H
	DW	0fecdH
	DW	0fb7dH
	DW	0fe8aH
	DW	0fd83H
	DW	0ff1aH
	DW	0fb72H
	DW	0ffd5H
	DW	0faedH
	DW	0ff9cH
	DW	0fc63H
	DW	0fe77H
	DW	0fb06H
	DW	0fda8H
	DW	0fd4fH
	DW	0ff7eH
	DW	0fa39H
	DW	0fec8H
	DW	0fad7H
	DW	0ff02H
	DW	0fa48H
	DW	0fe46H
	DW	0faf4H
	DW	0fd9bH
	DW	0fb13H
	DW	0fe09H
	DW	0fa23H
	DW	0fe90H
	DW	0fad6H
	DW	01aH
	DW	0fa68H
	DW	0ffbeH
	DW	0f931H
	DW	0ff5fH
	DW	0f994H
	DW	0fe2dH
	DW	0f920H
	DW	0fddcH
	DW	0fa8fH
	DW	0fdc8H
	DW	0f9ecH
	DW	0fc99H
	DW	0fa29H
	DW	0fbf6H
	DW	0fa95H
	DW	0fdc5H
	DW	0f883H
	DW	0fdf0H
	DW	0f909H
	DW	0ff85H
	DW	0f897H
	DW	0ff19H
	DW	0f7faH
	DW	0febdH
	DW	0f7fcH
	DW	0fc76H
	DW	0f848H
	DW	0fdc9H
	DW	0f883H
	DW	0fd94H
	DW	0f801H
	DW	0fc23H
	DW	0fbcbH
	DW	0fe8eH
	DW	0f811H
	DW	0fd40H
	DW	0f6cdH
	DW	0fd13H
	DW	0f54cH
	DW	0fbbfH
	DW	0f88bH
	DW	09fH
	DW	0f824H
	DW	0f8H
	DW	0fd8eH
	DW	0ff85H
	DW	0f6ddH
	DW	0fc3eH
	DW	0fd63H
	DW	0fe68H
	DW	0fa9dH
	DW	0fb6aH
	DW	0fe3cH
	DW	0fe94H
	DW	0fbecH
	DW	0fd21H
	DW	0ff7cH
	DW	0b7H
	DW	0f9acH
	DW	0fd10H
	DW	0fdddH
	DW	0fecdH
	DW	0fcf7H
	DW	0fb13H
	DW	0ff9eH
	DW	029H
	DW	0fc90H
	DW	0fbbdH
	DW	0feffH
	DW	061H
	DW	0f9beH
	DW	0f8d7H
	DW	01fH
	DW	0ffe6H
	DW	0fd7cH
	DW	0fdcfH
	DW	0ff4cH
	DW	0fddeH
	DW	0fe7fH
	DW	0fbb9H
	DW	0fe66H
	DW	0fcdeH
	DW	0fe62H
	DW	0fcc5H
	DW	0fe37H
	DW	0fc36H
	DW	0fe16H
	DW	0fbabH
	DW	0ff29H
	DW	0fc6cH
	DW	0ff70H
	DW	0fc57H
	DW	0fe13H
	DW	0fb0bH
	DW	0fdfbH
	DW	0fa1dH
	DW	0b5H
	DW	065H
	DW	0feb4H
	DW	0fc87H
	DW	0fcbcH
	DW	0fc57H
	DW	0fdd1H
	DW	0fe53H
	DW	0fd8bH
	DW	0fdddH
	DW	0ff49H
	DW	0feafH
	DW	0fddfH
	DW	0ffaeH
	DW	0ff06H
	DW	0fee2H
	DW	05H
	DW	0ff7cH
	DW	0fea4H
	DW	0ff04H
	DW	0fedbH
	DW	0fe28H
	DW	0ff62H
	DW	064H
	DW	0ffe3H
	DW	0c5H
	DW	0ff14H
	DW	0fe58H
	DW	0fca3H
	DW	0ff2bH
	DW	0ff74H
	DW	0fff9H
	DW	0fe55H
	DW	0fe45H
	DW	0bbH
	DW	0ff9fH
	DW	0fd54H
	DW	0fd20H
	DW	0fedbH
	DW	0102H
	DW	0fe90H
	DW	0ff68H
	DW	0ff6aH
	DW	0188H
	DW	0fd9fH
	DW	0afH
	DW	0ff72H
	DW	012bH
	DW	0ff76H
	DW	098H
	DW	0ff89H
	DW	0149H
	DW	0fe1aH
	DW	0ffccH
	DW	0125H
	DW	0c6H
	DW	0ff49H
	DW	075H
	DW	0afH
	DW	014bH
	DW	0ffc6H
	DW	0feeeH
	DW	0e7H
	DW	012cH
	DW	0fee0H
	DW	014aH
	DW	0fecfH
	DW	0174H
	DW	0ff91H
	DW	0199H
	DW	0fff7H
	DW	01a7H
	DW	053H
	DW	0100H
	DW	043H
	DW	016fH
	DW	0ffedH
	DW	0f8H
	DW	05bH
	DW	071H
	DW	0ffddH
	DW	0196H
	DW	0ff41H
	DW	09aH
	DW	0eeH
	DW	0128H
	DW	05H
	DW	0c5H
	DW	08dH
	DW	0ddH
	DW	0139H
	DW	0c6H
	DW	0d3H
	DW	01a5H
	DW	0f4H
	DW	014eH
	DW	058H
	DW	01aaH
	DW	0ff0dH
	DW	01c6H
	DW	0caH
	DW	0228H
	DW	0fffbH
	DW	0193H
	DW	0123H
	DW	0b9H
	DW	0dbH
	DW	012dH
	DW	0fbH
	DW	08aH
	DW	080H
	DW	045H
	DW	0c5H
	DW	0120H
	DW	0ff74H
	DW	0ffc3H
	DW	0bcH
	DW	0169H
	DW	0c5H
	DW	0256H
	DW	01baH
	DW	0111H
	DW	0122H
	DW	08fH
	DW	01d8H
	DW	01e2H
	DW	09dH
	DW	0172H
	DW	019fH
	DW	0141H
	DW	0174H
	DW	0181H
	DW	0192H
	DW	0228H
	DW	09bH
	DW	018H
	DW	0226H
	DW	0107H
	DW	0fff5H
	DW	015H
	DW	0168H
	DW	0e3H
	DW	093H
	DW	0ff02H
	DW	01a8H
	DW	061H
	DW	016eH
	DW	0fff3H
	DW	0177H
	DW	08dH
	DW	01c1H
	DW	0e8H
	DW	018cH
	DW	01fbH
	DW	01daH
	DW	0110H
	DW	02bdH
	DW	0144H
	DW	016aH
	DW	0ffd1H
	DW	024bH
	DW	094H
	DW	021fH
	DW	045H
	DW	0190H
	DW	0ffcdH
	DW	0231H
	DW	03bH
	DW	0dcH
	DW	0fff6H
	DW	0160H
	DW	093H
	DW	0ceH
	DW	0d3H
	DW	028dH
	DW	0b9H
	DW	0233H
	DW	0129H
	DW	0235H
	DW	011cH
	DW	0252H
	DW	079H
	DW	02feH
	DW	0c0H
	DW	018eH
	DW	076H
	DW	0282H
	DW	01b2H
	DW	0e9H
	DW	0108H
	DW	01e1H
	DW	01d3H
	DW	081H
	DW	0ff5bH
	DW	02bbH
	DW	0efH
	DW	05aH
	DW	01aH
	DW	0156H
	DW	01daH
	DW	0ffc9H
	DW	01bH
	DW	0184H
	DW	05eH
	DW	0ff54H
	DW	00H
	DW	02d5H
	DW	017bH
	DW	0ffc4H
	DW	0151H
	DW	0172H
	DW	01d1H
	DW	05fH
	DW	013fH
	DW	0326H
	DW	0253H
	DW	04eH
	DW	0104H
	DW	01f1H
	DW	0353H
	DW	0d2H
	DW	0230H
	DW	01caH
	DW	023eH
	DW	0fe30H
	DW	0caH
	DW	01f1H
	DW	0271H
	DW	0ff36H
	DW	098H
	DW	030H
	DW	02c8H
	DW	0ffecH
	DW	0236H
	DW	064H
	DW	02cbH
	DW	01c7H
	DW	01d4H
	DW	019bH
	DW	025dH
	DW	013fH
	DW	0286H
	DW	0c3H
	DW	0267H
	DW	0191H
	DW	021aH
	DW	02a8H
	DW	02e3H
	DW	0c9H
	DW	029bH
	DW	01b2H
	DW	03baH
	DW	01c6H
	DW	01a9H
	DW	0286H
	DW	01ebH
	DW	025eH
	DW	02a9H
	DW	01a0H
	DW	01fcH
	DW	01f1H
	DW	0336H
	DW	01aaH
	DW	032fH
	DW	0294H
	DW	0287H
	DW	0274H
	DW	02ccH
	DW	02b9H
	DW	01d2H
	DW	026aH
	DW	01c9H
	DW	02adH
	DW	01ccH
	DW	016dH
	DW	0135H
	DW	02d1H
	DW	0237H
	DW	0344H
	DW	0259H
	DW	0261H
	DW	012cH
	DW	0339H
	DW	01cbH
	DW	03afH
	DW	02afH
	DW	02a9H
	DW	0215H
	DW	0393H
	DW	0256H
	DW	024fH
	DW	0f3H
	DW	036cH
	DW	01c3H
	DW	036aH
	DW	01a4H
	DW	0312H
	DW	013dH
	DW	02dcH
	DW	0dcH
	DW	039aH
	DW	013dH
	DW	0454H
	DW	016fH
	DW	0213H
	DW	01d2H
	DW	0404H
	DW	0289H
	DW	041dH
	DW	0267H
	DW	040aH
	DW	0229H
	DW	033dH
	DW	025aH
	DW	03fdH
	DW	031fH
	DW	039fH
	DW	0323H
	DW	036eH
	DW	02fbH
	DW	031fH
	DW	01f0H
	DW	055dH
	DW	0305H
	DW	0249H
	DW	0302H
	DW	0323H
	DW	03a2H
	DW	044bH
	DW	0319H
	DW	04c6H
	DW	035eH
	DW	04b9H
	DW	037fH
	DW	0401H
	DW	02d7H
	DW	0304H
	DW	034dH
	DW	0494H
	DW	045bH
	DW	0363H
	DW	03fdH
	DW	033eH
	DW	03f5H
	DW	0349H
	DW	038eH
	DW	01faH
	DW	02bfH
	DW	04d7H
	DW	0435H
	DW	026cH
	DW	0333H
	DW	04acH
	DW	043bH
	DW	0483H
	DW	0439H
	DW	0476H
	DW	038bH
	DW	060bH
	DW	0461H
	DW	051dH
	DW	0288H
	DW	053fH
	DW	0264H
	DW	05ccH
	DW	03dcH
	DW	05c7H
	DW	03a9H
	DW	03d9H
	DW	0530H
	DW	03bbH
	DW	053dH
	DW	01adH
	DW	038eH
	DW	0349H
	DW	053aH
	DW	0234H
	DW	049bH
	DW	019cH
	DW	0484H
	DW	0593H
	DW	0528H
	DW	059aH
	DW	0532H
	DW	0280H
	DW	02f8H
	DW	06beH
	DW	0582H
	DW	0beH
	DW	022bH
	DW	0431H
	DW	03edH
	DW	01aaH
	DW	0101H
	DW	0347H
	DW	03d4H
	DW	0ebH
	DW	0e7H
	DW	05f0H
	DW	048fH
	DW	06dH
	DW	0125H
	DW	03f6H
	DW	0621H
	DW	0131H
	DW	08eH
	DW	047cH
	DW	021bH
	DW	0feddH
	DW	0ff94H
	DW	04bdH
	DW	03ccH
	DW	016H
	DW	0ff28H
	DW	029bH
	DW	033cH
	DW	0fe1eH
	DW	01b6H
	DW	01c5H
	DW	0597H
	DW	0fdbbH
	DW	0fe5aH
	DW	0315H
	DW	0183H
	DW	0fe9aH
	DW	0fe3aH
	DW	0aeH
	DW	030cH
	DW	0ffdcH
	DW	0fe8cH
	DW	0186H
	DW	0ff7aH
	DW	0fd8bH
	DW	0a0H
	DW	0feceH
	DW	02efH
	DW	0fb16H
	DW	0feb5H
	DW	0b1H
	DW	020aH
	DW	0ff08H
	DW	023eH
	DW	0ff05H
	DW	027fH
	DW	0fdedH
	DW	0197H
	DW	0fdacH
	DW	018aH
	DW	0fe5dH
	DW	0315H
	DW	0fd97H
	DW	0321H
	DW	0fc26H
	DW	018fH
	DW	0fca7H
	DW	02d7H
	DW	0fff9H
	DW	0206H
	DW	0fd41H
	DW	0136H
	DW	0fb89H
	DW	0ffe8H
	DW	0fc16H
	DW	011fH
	DW	0fc40H
	DW	016bH
	DW	0faedH
	DW	0138H
	DW	0fa02H
	DW	0f5H
	DW	0f9ebH
	DW	0131H
	DW	01cH
	DW	099H
	DW	0fca5H
	DW	0ff51H
	DW	0ffdfH
	DW	014cH
	DW	0fa8aH
	DW	0ff66H
	DW	0d4H
	DW	019aH
	DW	0fdafH
	DW	0ff3bH
	DW	0fbbcH
	DW	0fd40H
	DW	0fc78H
	DW	0ffbfH
	DW	011aH
	DW	016fH
	DW	0fc6aH
	DW	0fd52H
	DW	0159H
	DW	05dH
	DW	0fefeH
	DW	0fe9bH
	DW	02b8H
	DW	0284H
	DW	0fd4bH
	DW	0ffe4H
	DW	01c0H
	DW	01edH
	DW	0feefH
	DW	0c1H
	DW	020fH
	DW	0222H
	DW	0ff0dH
	DW	0fdffH
	DW	0180H
	DW	0ff78H
	DW	0111H
	DW	0fe9fH
	DW	0200H
	DW	0ff72H
	DW	0219H
	DW	0ff3aH
	DW	03adH
	DW	02eeH
	DW	053H
	DW	0f8H
	DW	0242H
	DW	035dH
	DW	0ffc8H
	DW	0250H
	DW	034aH
	DW	02cH
	DW	037cH
	DW	018H
	DW	021H
	DW	037aH
	DW	0fff0H
	DW	03d6H
	DW	033fH
	DW	0576H
	DW	05ffH
	DW	076aH
	DW	06b4H
	DW	0560H
	DW	079cH
	DW	05b9H
_dico5_lsf DW	0fc16H
	DW	0fc5fH
	DW	0fbb8H
	DW	0fb4dH
	DW	0fd7fH
	DW	0fc5dH
	DW	0fda4H
	DW	0fc3fH
	DW	0fcf5H
	DW	0fd5fH
	DW	0fcbdH
	DW	0fcecH
	DW	0fe60H
	DW	0fd68H
	DW	0fe36H
	DW	0fd02H
	DW	0fd74H
	DW	0fdf7H
	DW	0fd6aH
	DW	0fe11H
	DW	0fc01H
	DW	0fe03H
	DW	0fc01H
	DW	0fe54H
	DW	0fe44H
	DW	0fdd8H
	DW	0fe90H
	DW	0fe3fH
	DW	0fe21H
	DW	0ff2dH
	DW	0fbe2H
	DW	0fc79H
	DW	0fec4H
	DW	0ff07H
	DW	0fdc7H
	DW	0fdb1H
	DW	0fdc7H
	DW	0feedH
	DW	0fde3H
	DW	0ff41H
	DW	0fd34H
	DW	0ff44H
	DW	0fcb6H
	DW	0fef8H
	DW	0feb3H
	DW	0ff08H
	DW	0fec2H
	DW	0ff1cH
	DW	0feedH
	DW	01H
	DW	0fdc9H
	DW	0ff1cH
	DW	0ff8dH
	DW	0ff23H
	DW	0ff12H
	DW	0fe8aH
	DW	0ff3bH
	DW	0fe05H
	DW	0ff22H
	DW	0fdbdH
	DW	0fefeH
	DW	0fe50H
	DW	0ffc3H
	DW	0ff0cH
	DW	0fea7H
	DW	02H
	DW	0feaeH
	DW	027H
	DW	0ff29H
	DW	0ff57H
	DW	0ffc6H
	DW	00H
	DW	0ffc8H
	DW	0fffaH
	DW	0ff35H
	DW	0ff7dH
	DW	01H
	DW	0ff46H
	DW	0fffbH
	DW	0ff2dH
	DW	06H
	DW	0fe84H
	DW	0bH
	DW	0fe5eH
	DW	0ff8cH
	DW	083H
	DW	0ff7aH
	DW	071H
	DW	059H
	DW	0fffcH
	DW	047H
	DW	0fffeH
	DW	0ffedH
	DW	0ff40H
	DW	0106H
	DW	018H
	DW	0bdH
	DW	097H
	DW	0ff7bH
	DW	0ff93H
	DW	0baH
	DW	0ff67H
	DW	0a6H
	DW	0ff25H
	DW	025H
	DW	08bH
	DW	0c1H
	DW	0abH
	DW	0151H
	DW	07cH
	DW	09eH
	DW	0ffc3H
	DW	08dH
	DW	0e2H
	DW	0fff3H
	DW	0beH
	DW	0e7H
	DW	022H
	DW	0162H
	DW	06dH
	DW	013cH
	DW	0c9H
	DW	0f4H
	DW	0a4H
	DW	014aH
	DW	0ffabH
	DW	0186H
	DW	0ffacH
	DW	0feH
	DW	0147H
	DW	0101H
	DW	014fH
	DW	01ebH
	DW	093H
	DW	01dcH
	DW	069H
	DW	036H
	DW	04dH
	DW	01b5H
	DW	0172H
	DW	01a5H
	DW	013aH
	DW	01c1H
	DW	0156H
	DW	0149H
	DW	07eH
	DW	02a1H
	DW	0124H
	DW	023bH
	DW	0184H
	DW	0f3H
	DW	0c1H
	DW	028dH
	DW	0140H
	DW	026dH
	DW	0118H
	DW	0c2H
	DW	017cH
	DW	0205H
	DW	0245H
	DW	02dH
	DW	0143H
	DW	06fH
	DW	01a6H
	DW	01e9H
	DW	018bH
	DW	02deH
	DW	0216H
	DW	026eH
	DW	0222H
	DW	01e6H
	DW	01f6H
	DW	013eH
	DW	023cH
	DW	0bdH
	DW	0226H
	DW	0181H
	DW	01a6H
	DW	0ff63H
	DW	099H
	DW	0ff83H
	DW	017eH
	DW	0ff3bH
	DW	0182H
	DW	0fef9H
	DW	014eH
	DW	0e4H
	DW	02b9H
	DW	0ff44H
	DW	01H
	DW	033H
	DW	0129H
	DW	0fe05H
	DW	0d5H
	DW	0fe88H
	DW	018dH
	DW	0ffe8H
	DW	0ffH
	DW	0fdddH
	DW	059H
	DW	0fe0aH
	DW	0ffa2H
	DW	0183H
	DW	0b3H
	DW	0fd94H
	DW	044H
	DW	0fd54H
	DW	070H
	DW	0fd7eH
	DW	0fea2H
	DW	0fefcH
	DW	0acH
	DW	0fe4aH
	DW	0febcH
	DW	0108H
	DW	0288H
	DW	0fc3cH
	DW	0fffcH
	DW	0fb9fH
	DW	07H
	DW	0ff7aH
	DW	086H
	DW	0fb93H
	DW	0feceH
	DW	08fH
	DW	060H
	DW	0fe5cH
	DW	0fe0fH
	DW	0fb3bH
	DW	0fea2H
	DW	0fa09H
	DW	0fd53H
	DW	0ff5fH
	DW	048H
	DW	0369H
	DW	02b3H
	DW	02dcH
	DW	011bH
	DW	0399H
	DW	0161H
	DW	014eH
	DW	01dbH
	DW	0447H
	DW	0335H
	DW	0360H
	DW	020cH
	DW	034bH
	DW	01f1H
	DW	02caH
	DW	02c7H
	DW	0314H
	DW	02eeH
	DW	0434H
	DW	02caH
	DW	04b4H
	DW	02f1H
_lsf_hist_mean_scale DW 04e20H
	DW	04e20H
	DW	04e20H
	DW	04e20H
	DW	04e20H
	DW	04650H
	DW	04000H
	DW	02000H
	DW	00H
	DW	00H
_dtx_log_en_adjust DW 0fc01H
	DW	0fc92H
	DW	0fd24H
	DW	0fdb6H
	DW	0fe48H
	DW	0fedaH
	DW	0ff6cH
	DW	00H
	DW	00H
	ORG $+2
_dtx_dec_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_dtx_dec_init
PUBLIC	_dtx_dec_reset
PUBLIC	_dtx_dec_exit
PUBLIC	_dtx_dec
PUBLIC	_dtx_dec_activity_update
PUBLIC	_rx_dtx_handler
PUBLIC	??_C@_0CB@LABEIKEE@dtx_dec_init?3?5invalid?5parameter?6@ ; `string'
PUBLIC	??_C@_0CO@KHMAKKFJ@dtx_dec_init?3?5can?5not?5malloc?5sta@ ; `string'
PUBLIC	??_C@_0CC@OPKPKAGI@dtx_dec_reset?3?5invalid?5parameter@ ; `string'
EXTRN	_D_plsf_3:PROC
EXTRN	_Init_D_plsf_3:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_abs_s:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_mult:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_add:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr:PROC
EXTRN	_L_deposit_h:PROC
EXTRN	_L_deposit_l:PROC
EXTRN	_div_s:PROC
EXTRN	_Copy:PROC
EXTRN	_Set_zero:PROC
EXTRN	_Log2:PROC
EXTRN	_Lsp_Az:PROC
EXTRN	_Pow2:PROC
EXTRN	_A_Refl:PROC
EXTRN	_pseudonoise:PROC
EXTRN	_build_CN_code:PROC
EXTRN	_Syn_filt:PROC
EXTRN	_Lsf_lsp:PROC
EXTRN	_Lsp_lsf:PROC
EXTRN	_Reorder_lsf:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_logic16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CC@OPKPKAGI@dtx_dec_reset?3?5invalid?5parameter@
CONST	SEGMENT
??_C@_0CC@OPKPKAGI@dtx_dec_reset?3?5invalid?5parameter@ DB 'dtx_dec_reset'
	DB	': invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KHMAKKFJ@dtx_dec_init?3?5can?5not?5malloc?5sta@
CONST	SEGMENT
??_C@_0CO@KHMAKKFJ@dtx_dec_init?3?5can?5not?5malloc?5sta@ DB 'dtx_dec_ini'
	DB	't: can not malloc state structure', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LABEIKEE@dtx_dec_init?3?5invalid?5parameter?6@
CONST	SEGMENT
??_C@_0CB@LABEIKEE@dtx_dec_init?3?5invalid?5parameter?6@ DB 'dtx_dec_init'
	DB	': invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dtx_dec.c
;	COMDAT _rx_dtx_handler
_TEXT	SEGMENT
_encState$ = -20					; size = 4
_newState$ = -8						; size = 4
_st$ = 8						; size = 4
_frame_type$ = 12					; size = 4
_rx_dtx_handler PROC					; COMDAT

; 742  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 743  :    enum DTXStateType newState;
; 744  :    enum DTXStateType encState;
; 745  : 
; 746  :    /* DTX if SID frame or previously in DTX{_MUTE} and (NO_RX OR BAD_SPEECH) */
; 747  :    test(); test(); test();

  0001e	e8 00 00 00 00	 call	 _test
  00023	e8 00 00 00 00	 call	 _test
  00028	e8 00 00 00 00	 call	 _test

; 748  :    test(); test(); test();

  0002d	e8 00 00 00 00	 call	 _test
  00032	e8 00 00 00 00	 call	 _test
  00037	e8 00 00 00 00	 call	 _test

; 749  :    test(); test();   

  0003c	e8 00 00 00 00	 call	 _test
  00041	e8 00 00 00 00	 call	 _test

; 750  :    if ((sub(frame_type, RX_SID_FIRST) == 0)   ||
; 751  :        (sub(frame_type, RX_SID_UPDATE) == 0)  ||
; 752  :        (sub(frame_type, RX_SID_BAD) == 0)     ||
; 753  :        (((sub(st->dtxGlobalState, DTX) == 0) ||
; 754  :          (sub(st->dtxGlobalState, DTX_MUTE) == 0)) && 
; 755  :         ((sub(frame_type, RX_NO_DATA) == 0) ||
; 756  :          (sub(frame_type, RX_SPEECH_BAD) == 0) || 
; 757  :          (sub(frame_type, RX_ONSET) == 0))))

  00046	6a 04		 push	 4
  00048	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _sub
  00052	83 c4 08	 add	 esp, 8
  00055	0f bf c8	 movsx	 ecx, ax
  00058	85 c9		 test	 ecx, ecx
  0005a	0f 84 b6 00 00
	00		 je	 $LN24@rx_dtx_han
  00060	6a 05		 push	 5
  00062	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _sub
  0006c	83 c4 08	 add	 esp, 8
  0006f	0f bf c8	 movsx	 ecx, ax
  00072	85 c9		 test	 ecx, ecx
  00074	0f 84 9c 00 00
	00		 je	 $LN24@rx_dtx_han
  0007a	6a 06		 push	 6
  0007c	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _sub
  00086	83 c4 08	 add	 esp, 8
  00089	0f bf c8	 movsx	 ecx, ax
  0008c	85 c9		 test	 ecx, ecx
  0008e	0f 84 82 00 00
	00		 je	 $LN24@rx_dtx_han
  00094	6a 01		 push	 1
  00096	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00099	0f b7 88 98 01
	00 00		 movzx	 ecx, WORD PTR [eax+408]
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 _sub
  000a6	83 c4 08	 add	 esp, 8
  000a9	0f bf d0	 movsx	 edx, ax
  000ac	85 d2		 test	 edx, edx
  000ae	74 20		 je	 SHORT $LN23@rx_dtx_han
  000b0	6a 02		 push	 2
  000b2	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  000b5	0f b7 88 98 01
	00 00		 movzx	 ecx, WORD PTR [eax+408]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _sub
  000c2	83 c4 08	 add	 esp, 8
  000c5	0f bf d0	 movsx	 edx, ax
  000c8	85 d2		 test	 edx, edx
  000ca	0f 85 52 01 00
	00		 jne	 $LN25@rx_dtx_han
$LN23@rx_dtx_han:
  000d0	6a 07		 push	 7
  000d2	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _sub
  000dc	83 c4 08	 add	 esp, 8
  000df	0f bf c8	 movsx	 ecx, ax
  000e2	85 c9		 test	 ecx, ecx
  000e4	74 30		 je	 SHORT $LN24@rx_dtx_han
  000e6	6a 03		 push	 3
  000e8	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 _sub
  000f2	83 c4 08	 add	 esp, 8
  000f5	0f bf c8	 movsx	 ecx, ax
  000f8	85 c9		 test	 ecx, ecx
  000fa	74 1a		 je	 SHORT $LN24@rx_dtx_han
  000fc	6a 02		 push	 2
  000fe	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 _sub
  00108	83 c4 08	 add	 esp, 8
  0010b	0f bf c8	 movsx	 ecx, ax
  0010e	85 c9		 test	 ecx, ecx
  00110	0f 85 0c 01 00
	00		 jne	 $LN25@rx_dtx_han
$LN24@rx_dtx_han:

; 758  :    {
; 759  :       newState = DTX;                                              move16();

  00116	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _newState$[ebp], 1
  0011d	e8 00 00 00 00	 call	 _move16

; 760  : 
; 761  :       /* stay in mute for these input types */
; 762  :       test(); test(); test(); test(); test();

  00122	e8 00 00 00 00	 call	 _test
  00127	e8 00 00 00 00	 call	 _test
  0012c	e8 00 00 00 00	 call	 _test
  00131	e8 00 00 00 00	 call	 _test
  00136	e8 00 00 00 00	 call	 _test

; 763  :       if ((sub(st->dtxGlobalState, DTX_MUTE) == 0) &&
; 764  :           ((sub(frame_type, RX_SID_BAD) == 0) ||
; 765  :            (sub(frame_type, RX_SID_FIRST) ==  0) ||
; 766  :            (sub(frame_type, RX_ONSET) ==  0) ||
; 767  :            (sub(frame_type, RX_NO_DATA) == 0)))

  0013b	6a 02		 push	 2
  0013d	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00140	0f b7 88 98 01
	00 00		 movzx	 ecx, WORD PTR [eax+408]
  00147	51		 push	 ecx
  00148	e8 00 00 00 00	 call	 _sub
  0014d	83 c4 08	 add	 esp, 8
  00150	0f bf d0	 movsx	 edx, ax
  00153	85 d2		 test	 edx, edx
  00155	75 64		 jne	 SHORT $LN21@rx_dtx_han
  00157	6a 06		 push	 6
  00159	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 _sub
  00163	83 c4 08	 add	 esp, 8
  00166	0f bf c8	 movsx	 ecx, ax
  00169	85 c9		 test	 ecx, ecx
  0016b	74 42		 je	 SHORT $LN20@rx_dtx_han
  0016d	6a 04		 push	 4
  0016f	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 _sub
  00179	83 c4 08	 add	 esp, 8
  0017c	0f bf c8	 movsx	 ecx, ax
  0017f	85 c9		 test	 ecx, ecx
  00181	74 2c		 je	 SHORT $LN20@rx_dtx_han
  00183	6a 02		 push	 2
  00185	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 _sub
  0018f	83 c4 08	 add	 esp, 8
  00192	0f bf c8	 movsx	 ecx, ax
  00195	85 c9		 test	 ecx, ecx
  00197	74 16		 je	 SHORT $LN20@rx_dtx_han
  00199	6a 07		 push	 7
  0019b	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 _sub
  001a5	83 c4 08	 add	 esp, 8
  001a8	0f bf c8	 movsx	 ecx, ax
  001ab	85 c9		 test	 ecx, ecx
  001ad	75 0c		 jne	 SHORT $LN21@rx_dtx_han
$LN20@rx_dtx_han:

; 768  :       {
; 769  :          newState = DTX_MUTE;                                      move16();

  001af	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _newState$[ebp], 2
  001b6	e8 00 00 00 00	 call	 _move16
$LN21@rx_dtx_han:

; 770  :       }
; 771  : 
; 772  :       /* evaluate if noise parameters are too old                     */
; 773  :       /* since_last_sid is reset when CN parameters have been updated */
; 774  :       st->since_last_sid = add(st->since_last_sid, 1);             move16();

  001bb	6a 01		 push	 1
  001bd	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  001c0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001c3	51		 push	 ecx
  001c4	e8 00 00 00 00	 call	 _add
  001c9	83 c4 08	 add	 esp, 8
  001cc	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  001cf	66 89 02	 mov	 WORD PTR [edx], ax
  001d2	e8 00 00 00 00	 call	 _move16

; 775  : 
; 776  :       /* no update of sid parameters in DTX for a long while */
; 777  :       /* Due to the delayed update of  st->since_last_sid counter
; 778  :          SID_UPDATE frames need to be handled separately to avoid
; 779  :          entering DTX_MUTE for late SID_UPDATE frames
; 780  :          */
; 781  :       test(); test(); logic16();

  001d7	e8 00 00 00 00	 call	 _test
  001dc	e8 00 00 00 00	 call	 _test
  001e1	e8 00 00 00 00	 call	 _logic16

; 782  :       if((sub(frame_type, RX_SID_UPDATE) != 0) &&
; 783  :          (sub(st->since_last_sid, DTX_MAX_EMPTY_THRESH) > 0))

  001e6	6a 05		 push	 5
  001e8	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _sub
  001f2	83 c4 08	 add	 esp, 8
  001f5	0f bf c8	 movsx	 ecx, ax
  001f8	85 c9		 test	 ecx, ecx
  001fa	74 24		 je	 SHORT $LN19@rx_dtx_han
  001fc	6a 32		 push	 50			; 00000032H
  001fe	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00201	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00204	51		 push	 ecx
  00205	e8 00 00 00 00	 call	 _sub
  0020a	83 c4 08	 add	 esp, 8
  0020d	0f bf d0	 movsx	 edx, ax
  00210	85 d2		 test	 edx, edx
  00212	7e 0c		 jle	 SHORT $LN19@rx_dtx_han

; 784  :       {
; 785  :          newState = DTX_MUTE;                                      move16();

  00214	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _newState$[ebp], 2
  0021b	e8 00 00 00 00	 call	 _move16
$LN19@rx_dtx_han:

; 786  :       }
; 787  :    }
; 788  :    else 

  00220	eb 19		 jmp	 SHORT $LN18@rx_dtx_han
$LN25@rx_dtx_han:

; 789  :    {
; 790  :       newState = SPEECH;                                           move16();

  00222	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _newState$[ebp], 0
  00229	e8 00 00 00 00	 call	 _move16

; 791  :       st->since_last_sid = 0;                                      move16();

  0022e	33 c0		 xor	 eax, eax
  00230	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00233	66 89 01	 mov	 WORD PTR [ecx], ax
  00236	e8 00 00 00 00	 call	 _move16
$LN18@rx_dtx_han:

; 792  :    }
; 793  :    
; 794  :    /* 
; 795  :       reset the decAnaElapsed Counter when receiving CNI data the first  
; 796  :       time, to robustify counter missmatch after handover
; 797  :       this might delay the bwd CNI analysis in the new decoder slightly.
; 798  :    */    
; 799  :    test(); test();

  0023b	e8 00 00 00 00	 call	 _test
  00240	e8 00 00 00 00	 call	 _test

; 800  :    if ((st->data_updated == 0) &&
; 801  :        (sub(frame_type, RX_SID_UPDATE) == 0))

  00245	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00248	0f bf 88 9c 01
	00 00		 movsx	 ecx, WORD PTR [eax+412]
  0024f	85 c9		 test	 ecx, ecx
  00251	75 27		 jne	 SHORT $LN17@rx_dtx_han
  00253	6a 05		 push	 5
  00255	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 _sub
  0025f	83 c4 08	 add	 esp, 8
  00262	0f bf c8	 movsx	 ecx, ax
  00265	85 c9		 test	 ecx, ecx
  00267	75 11		 jne	 SHORT $LN17@rx_dtx_han

; 802  :    {
; 803  :       st->decAnaElapsedCount = 0;                                  move16();

  00269	33 c0		 xor	 eax, eax
  0026b	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0026e	66 89 81 8e 01
	00 00		 mov	 WORD PTR [ecx+398], ax
  00275	e8 00 00 00 00	 call	 _move16
$LN17@rx_dtx_han:

; 804  :    }
; 805  : 
; 806  :    /* update the SPE-SPD DTX hangover synchronization */
; 807  :    /* to know when SPE has added dtx hangover         */
; 808  :    st->decAnaElapsedCount = add(st->decAnaElapsedCount, 1);        move16();

  0027a	6a 01		 push	 1
  0027c	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0027f	0f b7 88 8e 01
	00 00		 movzx	 ecx, WORD PTR [eax+398]
  00286	51		 push	 ecx
  00287	e8 00 00 00 00	 call	 _add
  0028c	83 c4 08	 add	 esp, 8
  0028f	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00292	66 89 82 8e 01
	00 00		 mov	 WORD PTR [edx+398], ax
  00299	e8 00 00 00 00	 call	 _move16

; 809  :    st->dtxHangoverAdded = 0;                                       move16();

  0029e	33 c0		 xor	 eax, eax
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  002a3	66 89 81 94 01
	00 00		 mov	 WORD PTR [ecx+404], ax
  002aa	e8 00 00 00 00	 call	 _move16

; 810  :    
; 811  :    test(); test(); test(); test(); test();

  002af	e8 00 00 00 00	 call	 _test
  002b4	e8 00 00 00 00	 call	 _test
  002b9	e8 00 00 00 00	 call	 _test
  002be	e8 00 00 00 00	 call	 _test
  002c3	e8 00 00 00 00	 call	 _test

; 812  :    if ((sub(frame_type, RX_SID_FIRST) == 0)  ||
; 813  :        (sub(frame_type, RX_SID_UPDATE) == 0) ||
; 814  :        (sub(frame_type, RX_SID_BAD) == 0)    ||
; 815  :        (sub(frame_type, RX_ONSET) == 0)      ||
; 816  :        (sub(frame_type, RX_NO_DATA) == 0))

  002c8	6a 04		 push	 4
  002ca	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 _sub
  002d4	83 c4 08	 add	 esp, 8
  002d7	0f bf c8	 movsx	 ecx, ax
  002da	85 c9		 test	 ecx, ecx
  002dc	74 58		 je	 SHORT $LN15@rx_dtx_han
  002de	6a 05		 push	 5
  002e0	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  002e4	50		 push	 eax
  002e5	e8 00 00 00 00	 call	 _sub
  002ea	83 c4 08	 add	 esp, 8
  002ed	0f bf c8	 movsx	 ecx, ax
  002f0	85 c9		 test	 ecx, ecx
  002f2	74 42		 je	 SHORT $LN15@rx_dtx_han
  002f4	6a 06		 push	 6
  002f6	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 _sub
  00300	83 c4 08	 add	 esp, 8
  00303	0f bf c8	 movsx	 ecx, ax
  00306	85 c9		 test	 ecx, ecx
  00308	74 2c		 je	 SHORT $LN15@rx_dtx_han
  0030a	6a 02		 push	 2
  0030c	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00310	50		 push	 eax
  00311	e8 00 00 00 00	 call	 _sub
  00316	83 c4 08	 add	 esp, 8
  00319	0f bf c8	 movsx	 ecx, ax
  0031c	85 c9		 test	 ecx, ecx
  0031e	74 16		 je	 SHORT $LN15@rx_dtx_han
  00320	6a 07		 push	 7
  00322	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00326	50		 push	 eax
  00327	e8 00 00 00 00	 call	 _sub
  0032c	83 c4 08	 add	 esp, 8
  0032f	0f bf c8	 movsx	 ecx, ax
  00332	85 c9		 test	 ecx, ecx
  00334	75 50		 jne	 SHORT $LN16@rx_dtx_han
$LN15@rx_dtx_han:

; 817  :    {
; 818  :       encState = DTX;                                              move16();

  00336	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _encState$[ebp], 1
  0033d	e8 00 00 00 00	 call	 _move16

; 819  :       
; 820  :       /*         
; 821  :          In frame errors simulations RX_NO_DATA may occasionally mean that
; 822  :          a speech packet was probably sent by the encoder,
; 823  :          the assumed _encoder_ state should be SPEECH in such cases.
; 824  :       */
; 825  :       
; 826  :       test(); logic16(); 

  00342	e8 00 00 00 00	 call	 _test
  00347	e8 00 00 00 00	 call	 _logic16

; 827  :       if((sub(frame_type, RX_NO_DATA) == 0) &&
; 828  :          (sub(newState, SPEECH) == 0)) 

  0034c	6a 07		 push	 7
  0034e	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00352	50		 push	 eax
  00353	e8 00 00 00 00	 call	 _sub
  00358	83 c4 08	 add	 esp, 8
  0035b	0f bf c8	 movsx	 ecx, ax
  0035e	85 c9		 test	 ecx, ecx
  00360	75 22		 jne	 SHORT $LN14@rx_dtx_han
  00362	6a 00		 push	 0
  00364	0f b7 45 f8	 movzx	 eax, WORD PTR _newState$[ebp]
  00368	50		 push	 eax
  00369	e8 00 00 00 00	 call	 _sub
  0036e	83 c4 08	 add	 esp, 8
  00371	0f bf c8	 movsx	 ecx, ax
  00374	85 c9		 test	 ecx, ecx
  00376	75 0c		 jne	 SHORT $LN14@rx_dtx_han

; 829  :       {
; 830  :          encState = SPEECH;                                       move16();

  00378	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _encState$[ebp], 0
  0037f	e8 00 00 00 00	 call	 _move16
$LN14@rx_dtx_han:

; 831  :       }
; 832  :       
; 833  :       
; 834  :       /* Note on RX_ONSET operation differing from RX_NO_DATA operation:
; 835  :          If a  RX_ONSET is received in the decoder (by "accident")
; 836  :          it is still most likely that the encoder  state
; 837  :          for the "ONSET frame" was DTX.
; 838  :       */      
; 839  :    }
; 840  :    else 

  00384	eb 0c		 jmp	 SHORT $LN13@rx_dtx_han
$LN16@rx_dtx_han:

; 841  :    {
; 842  :       encState = SPEECH;                                           move16();

  00386	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _encState$[ebp], 0
  0038d	e8 00 00 00 00	 call	 _move16
$LN13@rx_dtx_han:

; 843  :    }
; 844  :  
; 845  :    test();

  00392	e8 00 00 00 00	 call	 _test

; 846  :    if (sub(encState, SPEECH) == 0)

  00397	6a 00		 push	 0
  00399	0f b7 45 ec	 movzx	 eax, WORD PTR _encState$[ebp]
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 _sub
  003a3	83 c4 08	 add	 esp, 8
  003a6	0f bf c8	 movsx	 ecx, ax
  003a9	85 c9		 test	 ecx, ecx
  003ab	75 19		 jne	 SHORT $LN12@rx_dtx_han

; 847  :    {
; 848  :       st->dtxHangoverCount = DTX_HANG_CONST;                       move16();

  003ad	b8 07 00 00 00	 mov	 eax, 7
  003b2	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  003b5	66 89 81 8c 01
	00 00		 mov	 WORD PTR [ecx+396], ax
  003bc	e8 00 00 00 00	 call	 _move16

; 849  :    }
; 850  :    else

  003c1	e9 a3 00 00 00	 jmp	 $LN11@rx_dtx_han
$LN12@rx_dtx_han:

; 851  :    {
; 852  :       test();

  003c6	e8 00 00 00 00	 call	 _test

; 853  :       if (sub(st->decAnaElapsedCount, DTX_ELAPSED_FRAMES_THRESH) > 0)

  003cb	6a 1e		 push	 30			; 0000001eH
  003cd	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  003d0	0f b7 88 8e 01
	00 00		 movzx	 ecx, WORD PTR [eax+398]
  003d7	51		 push	 ecx
  003d8	e8 00 00 00 00	 call	 _sub
  003dd	83 c4 08	 add	 esp, 8
  003e0	0f bf d0	 movsx	 edx, ax
  003e3	85 d2		 test	 edx, edx
  003e5	7e 38		 jle	 SHORT $LN10@rx_dtx_han

; 854  :       {
; 855  :          st->dtxHangoverAdded = 1;                                 move16();

  003e7	b8 01 00 00 00	 mov	 eax, 1
  003ec	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  003ef	66 89 81 94 01
	00 00		 mov	 WORD PTR [ecx+404], ax
  003f6	e8 00 00 00 00	 call	 _move16

; 856  :          st->decAnaElapsedCount = 0;                               move16();

  003fb	33 c0		 xor	 eax, eax
  003fd	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00400	66 89 81 8e 01
	00 00		 mov	 WORD PTR [ecx+398], ax
  00407	e8 00 00 00 00	 call	 _move16

; 857  :          st->dtxHangoverCount = 0;                                 move16();

  0040c	33 c0		 xor	 eax, eax
  0040e	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00411	66 89 81 8c 01
	00 00		 mov	 WORD PTR [ecx+396], ax
  00418	e8 00 00 00 00	 call	 _move16
  0041d	eb 4a		 jmp	 SHORT $LN11@rx_dtx_han
$LN10@rx_dtx_han:

; 858  :       }
; 859  :       else if (test(), st->dtxHangoverCount == 0)

  0041f	e8 00 00 00 00	 call	 _test
  00424	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00427	0f bf 88 8c 01
	00 00		 movsx	 ecx, WORD PTR [eax+396]
  0042e	85 c9		 test	 ecx, ecx
  00430	75 13		 jne	 SHORT $LN8@rx_dtx_han

; 860  :       {
; 861  :          st->decAnaElapsedCount = 0;                               move16();

  00432	33 c0		 xor	 eax, eax
  00434	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00437	66 89 81 8e 01
	00 00		 mov	 WORD PTR [ecx+398], ax
  0043e	e8 00 00 00 00	 call	 _move16

; 862  :       }
; 863  :       else

  00443	eb 24		 jmp	 SHORT $LN11@rx_dtx_han
$LN8@rx_dtx_han:

; 864  :       {
; 865  :          st->dtxHangoverCount = sub(st->dtxHangoverCount, 1);      move16();

  00445	6a 01		 push	 1
  00447	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0044a	0f b7 88 8c 01
	00 00		 movzx	 ecx, WORD PTR [eax+396]
  00451	51		 push	 ecx
  00452	e8 00 00 00 00	 call	 _sub
  00457	83 c4 08	 add	 esp, 8
  0045a	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  0045d	66 89 82 8c 01
	00 00		 mov	 WORD PTR [edx+396], ax
  00464	e8 00 00 00 00	 call	 _move16
$LN11@rx_dtx_han:

; 866  :       }
; 867  :    }
; 868  :    
; 869  :    if (sub(newState, SPEECH) != 0)

  00469	6a 00		 push	 0
  0046b	0f b7 45 f8	 movzx	 eax, WORD PTR _newState$[ebp]
  0046f	50		 push	 eax
  00470	e8 00 00 00 00	 call	 _sub
  00475	83 c4 08	 add	 esp, 8
  00478	0f bf c8	 movsx	 ecx, ax
  0047b	85 c9		 test	 ecx, ecx
  0047d	0f 84 db 00 00
	00		 je	 $LN6@rx_dtx_han

; 870  :    {
; 871  :       /* DTX or DTX_MUTE
; 872  :        * CN data is not in a first SID, first SIDs are marked as SID_BAD 
; 873  :        *  but will do backwards analysis if a hangover period has been added
; 874  :        *  according to the state machine above 
; 875  :        */
; 876  :       
; 877  :       st->sid_frame = 0;                                           move16();

  00483	33 c0		 xor	 eax, eax
  00485	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00488	66 89 81 90 01
	00 00		 mov	 WORD PTR [ecx+400], ax
  0048f	e8 00 00 00 00	 call	 _move16

; 878  :       st->valid_data = 0;                                          move16();

  00494	33 c0		 xor	 eax, eax
  00496	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00499	66 89 81 92 01
	00 00		 mov	 WORD PTR [ecx+402], ax
  004a0	e8 00 00 00 00	 call	 _move16

; 879  :             
; 880  :       test(); 

  004a5	e8 00 00 00 00	 call	 _test

; 881  :       if (sub(frame_type, RX_SID_FIRST) == 0)

  004aa	6a 04		 push	 4
  004ac	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  004b0	50		 push	 eax
  004b1	e8 00 00 00 00	 call	 _sub
  004b6	83 c4 08	 add	 esp, 8
  004b9	0f bf c8	 movsx	 ecx, ax
  004bc	85 c9		 test	 ecx, ecx
  004be	75 19		 jne	 SHORT $LN5@rx_dtx_han

; 882  :       {
; 883  :          st->sid_frame = 1;                                        move16();

  004c0	b8 01 00 00 00	 mov	 eax, 1
  004c5	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  004c8	66 89 81 90 01
	00 00		 mov	 WORD PTR [ecx+400], ax
  004cf	e8 00 00 00 00	 call	 _move16
  004d4	e9 85 00 00 00	 jmp	 $LN6@rx_dtx_han
$LN5@rx_dtx_han:

; 884  :       }
; 885  :       else if (test(), sub(frame_type, RX_SID_UPDATE) == 0)

  004d9	e8 00 00 00 00	 call	 _test
  004de	6a 05		 push	 5
  004e0	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  004e4	50		 push	 eax
  004e5	e8 00 00 00 00	 call	 _sub
  004ea	83 c4 08	 add	 esp, 8
  004ed	0f bf c8	 movsx	 ecx, ax
  004f0	85 c9		 test	 ecx, ecx
  004f2	75 2a		 jne	 SHORT $LN3@rx_dtx_han

; 886  :       {
; 887  :          st->sid_frame = 1;                                        move16();

  004f4	b8 01 00 00 00	 mov	 eax, 1
  004f9	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  004fc	66 89 81 90 01
	00 00		 mov	 WORD PTR [ecx+400], ax
  00503	e8 00 00 00 00	 call	 _move16

; 888  :          st->valid_data = 1;                                       move16();

  00508	b8 01 00 00 00	 mov	 eax, 1
  0050d	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00510	66 89 81 92 01
	00 00		 mov	 WORD PTR [ecx+402], ax
  00517	e8 00 00 00 00	 call	 _move16
  0051c	eb 40		 jmp	 SHORT $LN6@rx_dtx_han
$LN3@rx_dtx_han:

; 889  :       }
; 890  :       else if (test(), sub(frame_type, RX_SID_BAD) == 0)

  0051e	e8 00 00 00 00	 call	 _test
  00523	6a 06		 push	 6
  00525	0f b7 45 0c	 movzx	 eax, WORD PTR _frame_type$[ebp]
  00529	50		 push	 eax
  0052a	e8 00 00 00 00	 call	 _sub
  0052f	83 c4 08	 add	 esp, 8
  00532	0f bf c8	 movsx	 ecx, ax
  00535	85 c9		 test	 ecx, ecx
  00537	75 25		 jne	 SHORT $LN6@rx_dtx_han

; 891  :       {
; 892  :          st->sid_frame = 1;                                        move16();

  00539	b8 01 00 00 00	 mov	 eax, 1
  0053e	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00541	66 89 81 90 01
	00 00		 mov	 WORD PTR [ecx+400], ax
  00548	e8 00 00 00 00	 call	 _move16

; 893  :          st->dtxHangoverAdded = 0; /* use old data */              move16();

  0054d	33 c0		 xor	 eax, eax
  0054f	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00552	66 89 81 94 01
	00 00		 mov	 WORD PTR [ecx+404], ax
  00559	e8 00 00 00 00	 call	 _move16
$LN6@rx_dtx_han:

; 894  :       } 
; 895  :    }
; 896  : 
; 897  :    return newState; 

  0055e	8b 45 f8	 mov	 eax, DWORD PTR _newState$[ebp]

; 898  :    /* newState is used by both SPEECH AND DTX synthesis routines */ 
; 899  : }

  00561	5f		 pop	 edi
  00562	5e		 pop	 esi
  00563	5b		 pop	 ebx
  00564	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0056a	3b ec		 cmp	 ebp, esp
  0056c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00571	8b e5		 mov	 esp, ebp
  00573	5d		 pop	 ebp
  00574	c3		 ret	 0
_rx_dtx_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dtx_dec.c
;	COMDAT _dtx_dec_activity_update
_TEXT	SEGMENT
_log_en$ = -56						; size = 2
_log_en_m$ = -44					; size = 2
_log_en_e$ = -32					; size = 2
_L_frame_en$ = -20					; size = 4
_i$ = -8						; size = 2
_st$ = 8						; size = 4
_lsf$ = 12						; size = 4
_frame$ = 16						; size = 4
_dtx_dec_activity_update PROC				; COMDAT

; 671  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 672  :    Word16 i;
; 673  : 
; 674  :    Word32 L_frame_en;
; 675  :    Word16 log_en_e, log_en_m, log_en;
; 676  : 
; 677  :    /* update lsp history */
; 678  :    st->lsf_hist_ptr = add(st->lsf_hist_ptr,M);                     move16();

  0001e	6a 0a		 push	 10			; 0000000aH
  00020	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00023	0f b7 88 d4 00
	00 00		 movzx	 ecx, WORD PTR [eax+212]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 _add
  00030	83 c4 08	 add	 esp, 8
  00033	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00036	66 89 82 d4 00
	00 00		 mov	 WORD PTR [edx+212], ax
  0003d	e8 00 00 00 00	 call	 _move16

; 679  :    test();

  00042	e8 00 00 00 00	 call	 _test

; 680  :    if (sub(st->lsf_hist_ptr, 80) == 0)

  00047	6a 50		 push	 80			; 00000050H
  00049	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0004c	0f b7 88 d4 00
	00 00		 movzx	 ecx, WORD PTR [eax+212]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _sub
  00059	83 c4 08	 add	 esp, 8
  0005c	0f bf d0	 movsx	 edx, ax
  0005f	85 d2		 test	 edx, edx
  00061	75 11		 jne	 SHORT $LN5@dtx_dec_ac

; 681  :    {
; 682  :       st->lsf_hist_ptr = 0;                                        move16();

  00063	33 c0		 xor	 eax, eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00068	66 89 81 d4 00
	00 00		 mov	 WORD PTR [ecx+212], ax
  0006f	e8 00 00 00 00	 call	 _move16
$LN5@dtx_dec_ac:

; 683  :    }
; 684  :    Copy(lsf, &st->lsf_hist[st->lsf_hist_ptr], M); 

  00074	6a 0a		 push	 10			; 0000000aH
  00076	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00079	0f bf 88 d4 00
	00 00		 movsx	 ecx, WORD PTR [eax+212]
  00080	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00083	8d 44 4a 34	 lea	 eax, DWORD PTR [edx+ecx*2+52]
  00087	50		 push	 eax
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR _lsf$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 _Copy
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH

; 685  : 
; 686  :    /* compute log energy based on frame energy */
; 687  :    L_frame_en = 0;     /* Q0 */                                    move32();

  00094	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _L_frame_en$[ebp], 0
  0009b	e8 00 00 00 00	 call	 _move32

; 688  :    for (i=0; i < L_FRAME; i++)

  000a0	33 c0		 xor	 eax, eax
  000a2	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  000a6	eb 0c		 jmp	 SHORT $LN4@dtx_dec_ac
$LN3@dtx_dec_ac:
  000a8	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  000ac	66 83 c0 01	 add	 ax, 1
  000b0	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN4@dtx_dec_ac:
  000b4	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000b8	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  000bd	7d 29		 jge	 SHORT $LN2@dtx_dec_ac

; 689  :    {
; 690  :       L_frame_en = L_mac(L_frame_en, frame[i], frame[i]); 

  000bf	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000c3	8b 4d 10	 mov	 ecx, DWORD PTR _frame$[ebp]
  000c6	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000ca	52		 push	 edx
  000cb	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000cf	8b 4d 10	 mov	 ecx, DWORD PTR _frame$[ebp]
  000d2	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000d6	52		 push	 edx
  000d7	8b 45 ec	 mov	 eax, DWORD PTR _L_frame_en$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _L_mac
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e3	89 45 ec	 mov	 DWORD PTR _L_frame_en$[ebp], eax

; 691  :    }

  000e6	eb c0		 jmp	 SHORT $LN3@dtx_dec_ac
$LN2@dtx_dec_ac:

; 692  :    Log2(L_frame_en, &log_en_e, &log_en_m);

  000e8	8d 45 d4	 lea	 eax, DWORD PTR _log_en_m$[ebp]
  000eb	50		 push	 eax
  000ec	8d 4d e0	 lea	 ecx, DWORD PTR _log_en_e$[ebp]
  000ef	51		 push	 ecx
  000f0	8b 55 ec	 mov	 edx, DWORD PTR _L_frame_en$[ebp]
  000f3	52		 push	 edx
  000f4	e8 00 00 00 00	 call	 _Log2
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 693  :    
; 694  :    /* convert exponent and mantissa to Word16 Q10 */
; 695  :    log_en = shl(log_en_e, 10);  /* Q10 */                          

  000fc	6a 0a		 push	 10			; 0000000aH
  000fe	0f b7 45 e0	 movzx	 eax, WORD PTR _log_en_e$[ebp]
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 _shl
  00108	83 c4 08	 add	 esp, 8
  0010b	66 89 45 c8	 mov	 WORD PTR _log_en$[ebp], ax

; 696  :    log_en = add(log_en, shr(log_en_m, 15-10));                      

  0010f	6a 05		 push	 5
  00111	0f b7 45 d4	 movzx	 eax, WORD PTR _log_en_m$[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _shr
  0011b	83 c4 08	 add	 esp, 8
  0011e	0f b7 c8	 movzx	 ecx, ax
  00121	51		 push	 ecx
  00122	0f b7 55 c8	 movzx	 edx, WORD PTR _log_en$[ebp]
  00126	52		 push	 edx
  00127	e8 00 00 00 00	 call	 _add
  0012c	83 c4 08	 add	 esp, 8
  0012f	66 89 45 c8	 mov	 WORD PTR _log_en$[ebp], ax

; 697  :    
; 698  :    /* divide with L_FRAME i.e subtract with log2(L_FRAME) = 7.32193 */
; 699  :    log_en = sub(log_en, 7497+1024);                                

  00133	68 49 21 00 00	 push	 8521			; 00002149H
  00138	0f b7 45 c8	 movzx	 eax, WORD PTR _log_en$[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 _sub
  00142	83 c4 08	 add	 esp, 8
  00145	66 89 45 c8	 mov	 WORD PTR _log_en$[ebp], ax

; 700  :    
; 701  :    /* insert into log energy buffer, no division by two as  *
; 702  :     * log_en in decoder is Q11                              */
; 703  :    st->log_en_hist_ptr = add(st->log_en_hist_ptr, 1);

  00149	6a 01		 push	 1
  0014b	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0014e	0f b7 88 88 01
	00 00		 movzx	 ecx, WORD PTR [eax+392]
  00155	51		 push	 ecx
  00156	e8 00 00 00 00	 call	 _add
  0015b	83 c4 08	 add	 esp, 8
  0015e	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00161	66 89 82 88 01
	00 00		 mov	 WORD PTR [edx+392], ax

; 704  :    test();

  00168	e8 00 00 00 00	 call	 _test

; 705  :    if (sub(st->log_en_hist_ptr, DTX_HIST_SIZE) == 0)

  0016d	6a 08		 push	 8
  0016f	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00172	0f b7 88 88 01
	00 00		 movzx	 ecx, WORD PTR [eax+392]
  00179	51		 push	 ecx
  0017a	e8 00 00 00 00	 call	 _sub
  0017f	83 c4 08	 add	 esp, 8
  00182	0f bf d0	 movsx	 edx, ax
  00185	85 d2		 test	 edx, edx
  00187	75 11		 jne	 SHORT $LN1@dtx_dec_ac

; 706  :    {
; 707  :       st->log_en_hist_ptr = 0;                                     move16();

  00189	33 c0		 xor	 eax, eax
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0018e	66 89 81 88 01
	00 00		 mov	 WORD PTR [ecx+392], ax
  00195	e8 00 00 00 00	 call	 _move16
$LN1@dtx_dec_ac:

; 708  :    }
; 709  :    st->log_en_hist[st->log_en_hist_ptr] = log_en; /* Q11 */        move16();

  0019a	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0019d	0f bf 88 88 01
	00 00		 movsx	 ecx, WORD PTR [eax+392]
  001a4	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  001a7	66 8b 45 c8	 mov	 ax, WORD PTR _log_en$[ebp]
  001ab	66 89 84 4a 78
	01 00 00	 mov	 WORD PTR [edx+ecx*2+376], ax
  001b3	e8 00 00 00 00	 call	 _move16

; 710  : }

  001b8	52		 push	 edx
  001b9	8b cd		 mov	 ecx, ebp
  001bb	50		 push	 eax
  001bc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@dtx_dec_ac
  001c2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001c7	58		 pop	 eax
  001c8	5a		 pop	 edx
  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  001d2	3b ec		 cmp	 ebp, esp
  001d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c3		 ret	 0
  001dd	8d 49 00	 npad	 3
$LN11@dtx_dec_ac:
  001e0	02 00 00 00	 DD	 2
  001e4	00 00 00 00	 DD	 $LN10@dtx_dec_ac
$LN10@dtx_dec_ac:
  001e8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001ec	02 00 00 00	 DD	 2
  001f0	00 00 00 00	 DD	 $LN8@dtx_dec_ac
  001f4	d4 ff ff ff	 DD	 -44			; ffffffd4H
  001f8	02 00 00 00	 DD	 2
  001fc	00 00 00 00	 DD	 $LN9@dtx_dec_ac
$LN9@dtx_dec_ac:
  00200	6c		 DB	 108			; 0000006cH
  00201	6f		 DB	 111			; 0000006fH
  00202	67		 DB	 103			; 00000067H
  00203	5f		 DB	 95			; 0000005fH
  00204	65		 DB	 101			; 00000065H
  00205	6e		 DB	 110			; 0000006eH
  00206	5f		 DB	 95			; 0000005fH
  00207	6d		 DB	 109			; 0000006dH
  00208	00		 DB	 0
$LN8@dtx_dec_ac:
  00209	6c		 DB	 108			; 0000006cH
  0020a	6f		 DB	 111			; 0000006fH
  0020b	67		 DB	 103			; 00000067H
  0020c	5f		 DB	 95			; 0000005fH
  0020d	65		 DB	 101			; 00000065H
  0020e	6e		 DB	 110			; 0000006eH
  0020f	5f		 DB	 95			; 0000005fH
  00210	65		 DB	 101			; 00000065H
  00211	00		 DB	 0
_dtx_dec_activity_update ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dtx_dec.c
;	COMDAT _dtx_dec
_TEXT	SEGMENT
_tmp_int_length$ = -608					; size = 2
_ptr$ = -596						; size = 2
_L_lsf$ = -584						; size = 40
_lsf$ = -536						; size = 20
_acoeff_variab$ = -508					; size = 22
_lsp_int_variab$ = -476					; size = 20
_lsf_int_variab$ = -448					; size = 20
_lsf_int$ = -420					; size = 20
_lsf_variab_factor$ = -392				; size = 2
_lsf_variab_index$ = -380				; size = 2
_L_lsf_mean$ = -368					; size = 4
_lsf_mean$ = -356					; size = 2
_negative$ = -344					; size = 4
_log_pg$ = -332						; size = 2
_log_pg_m$ = -320					; size = 2
_log_pg_e$ = -308					; size = 2
_ma_pred_init$ = -296					; size = 2
_ex$ = -284						; size = 80
_pred_err$ = -196					; size = 2
_refl$ = -184						; size = 20
_acoeff$ = -156						; size = 22
_level$ = -124						; size = 2
_log_en_int_m$ = -112					; size = 2
_log_en_int_e$ = -100					; size = 2
_lsp_int$ = -88						; size = 20
_L_log_en_int$ = -60					; size = 4
_int_fac$ = -48						; size = 2
_j$ = -36						; size = 2
_i$ = -24						; size = 2
_log_en_index$ = -12					; size = 2
__$ArrayPad$ = -4					; size = 4
_st$ = 8						; size = 4
_mem_syn$ = 12						; size = 4
_lsfState$ = 16						; size = 4
_predState$ = 20					; size = 4
_averState$ = 24					; size = 4
_new_state$ = 28					; size = 4
_mode$ = 32						; size = 4
_parm$ = 36						; size = 4
_synth$ = 40						; size = 4
_A_t$ = 44						; size = 4
_dtx_dec PROC						; COMDAT

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 03 00
	00		 sub	 esp, 804		; 00000324H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd dc fc ff
	ff		 lea	 edi, DWORD PTR [ebp-804]
  00012	b9 c9 00 00 00	 mov	 ecx, 201		; 000000c9H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 223  :    Word16 log_en_index;
; 224  :    Word16 i, j;
; 225  :    Word16 int_fac;
; 226  :    Word32 L_log_en_int;
; 227  :    Word16 lsp_int[M];
; 228  :    Word16 log_en_int_e;
; 229  :    Word16 log_en_int_m;
; 230  :    Word16 level;
; 231  :    Word16 acoeff[M + 1];
; 232  :    Word16 refl[M];
; 233  :    Word16 pred_err;
; 234  :    Word16 ex[L_SUBFR];
; 235  :    Word16 ma_pred_init;
; 236  :    Word16 log_pg_e, log_pg_m;
; 237  :    Word16 log_pg;
; 238  :    Flag negative;
; 239  :    Word16 lsf_mean;
; 240  :    Word32 L_lsf_mean;
; 241  :    Word16 lsf_variab_index;
; 242  :    Word16 lsf_variab_factor;
; 243  :    Word16 lsf_int[M];
; 244  :    Word16 lsf_int_variab[M];
; 245  :    Word16 lsp_int_variab[M];
; 246  :    Word16 acoeff_variab[M + 1];
; 247  : 
; 248  :    Word16 lsf[M];
; 249  :    Word32 L_lsf[M];
; 250  :    Word16 ptr;
; 251  :    Word16 tmp_int_length;
; 252  : 
; 253  : 
; 254  :    /*  This function is called if synthesis state is not SPEECH 
; 255  :     *  the globally passed  inputs to this function are 
; 256  :     * st->sid_frame 
; 257  :     * st->valid_data 
; 258  :     * st->dtxHangoverAdded
; 259  :     * new_state  (SPEECH, DTX, DTX_MUTE)
; 260  :     */
; 261  : 
; 262  :    test(); test();

  00028	e8 00 00 00 00	 call	 _test
  0002d	e8 00 00 00 00	 call	 _test

; 263  :    if ((st->dtxHangoverAdded != 0) && 
; 264  :        (st->sid_frame != 0))

  00032	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00035	0f bf 88 94 01
	00 00		 movsx	 ecx, WORD PTR [eax+404]
  0003c	85 c9		 test	 ecx, ecx
  0003e	0f 84 b0 05 00
	00		 je	 $LN65@dtx_dec
  00044	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00047	0f bf 88 90 01
	00 00		 movsx	 ecx, WORD PTR [eax+400]
  0004e	85 c9		 test	 ecx, ecx
  00050	0f 84 9e 05 00
	00		 je	 $LN65@dtx_dec

; 265  :    {
; 266  :       /* sid_first after dtx hangover period */
; 267  :       /* or sid_upd after dtxhangover        */
; 268  : 
; 269  :       /* set log_en_adjust to correct value */
; 270  :       st->log_en_adjust = dtx_log_en_adjust[mode];

  00056	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00059	8b 4d 20	 mov	 ecx, DWORD PTR _mode$[ebp]
  0005c	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _dtx_log_en_adjust[ecx*2]
  00064	66 89 90 8a 01
	00 00		 mov	 WORD PTR [eax+394], dx

; 271  :           
; 272  :       ptr = add(st->lsf_hist_ptr, M);                               move16(); 

  0006b	6a 0a		 push	 10			; 0000000aH
  0006d	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00070	0f b7 88 d4 00
	00 00		 movzx	 ecx, WORD PTR [eax+212]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _add
  0007d	83 c4 08	 add	 esp, 8
  00080	66 89 85 ac fd
	ff ff		 mov	 WORD PTR _ptr$[ebp], ax
  00087	e8 00 00 00 00	 call	 _move16

; 273  :       test();

  0008c	e8 00 00 00 00	 call	 _test

; 274  :       if (sub(ptr, 80) == 0)

  00091	6a 50		 push	 80			; 00000050H
  00093	0f b7 85 ac fd
	ff ff		 movzx	 eax, WORD PTR _ptr$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _sub
  000a0	83 c4 08	 add	 esp, 8
  000a3	0f bf c8	 movsx	 ecx, ax
  000a6	85 c9		 test	 ecx, ecx
  000a8	75 0e		 jne	 SHORT $LN64@dtx_dec

; 275  :       {
; 276  :          ptr = 0;                                                   move16();

  000aa	33 c0		 xor	 eax, eax
  000ac	66 89 85 ac fd
	ff ff		 mov	 WORD PTR _ptr$[ebp], ax
  000b3	e8 00 00 00 00	 call	 _move16
$LN64@dtx_dec:

; 277  :       }
; 278  :       Copy( &st->lsf_hist[st->lsf_hist_ptr],&st->lsf_hist[ptr],M); 

  000b8	6a 0a		 push	 10			; 0000000aH
  000ba	0f bf 85 ac fd
	ff ff		 movsx	 eax, WORD PTR _ptr$[ebp]
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  000c4	8d 54 41 34	 lea	 edx, DWORD PTR [ecx+eax*2+52]
  000c8	52		 push	 edx
  000c9	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  000cc	0f bf 88 d4 00
	00 00		 movsx	 ecx, WORD PTR [eax+212]
  000d3	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  000d6	8d 44 4a 34	 lea	 eax, DWORD PTR [edx+ecx*2+52]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _Copy
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 279  :       
; 280  :       ptr = add(st->log_en_hist_ptr,1);                             move16();

  000e3	6a 01		 push	 1
  000e5	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  000e8	0f b7 88 88 01
	00 00		 movzx	 ecx, WORD PTR [eax+392]
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 _add
  000f5	83 c4 08	 add	 esp, 8
  000f8	66 89 85 ac fd
	ff ff		 mov	 WORD PTR _ptr$[ebp], ax
  000ff	e8 00 00 00 00	 call	 _move16

; 281  :       test();

  00104	e8 00 00 00 00	 call	 _test

; 282  :       if (sub(ptr, DTX_HIST_SIZE) == 0)

  00109	6a 08		 push	 8
  0010b	0f b7 85 ac fd
	ff ff		 movzx	 eax, WORD PTR _ptr$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 _sub
  00118	83 c4 08	 add	 esp, 8
  0011b	0f bf c8	 movsx	 ecx, ax
  0011e	85 c9		 test	 ecx, ecx
  00120	75 0e		 jne	 SHORT $LN63@dtx_dec

; 283  :       {
; 284  :          ptr = 0;                                                   move16();

  00122	33 c0		 xor	 eax, eax
  00124	66 89 85 ac fd
	ff ff		 mov	 WORD PTR _ptr$[ebp], ax
  0012b	e8 00 00 00 00	 call	 _move16
$LN63@dtx_dec:

; 285  :       }
; 286  :       move16();

  00130	e8 00 00 00 00	 call	 _move16

; 287  :       st->log_en_hist[ptr] = st->log_en_hist[st->log_en_hist_ptr]; /* Q11 */

  00135	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00138	0f bf 88 88 01
	00 00		 movsx	 ecx, WORD PTR [eax+392]
  0013f	0f bf 95 ac fd
	ff ff		 movsx	 edx, WORD PTR _ptr$[ebp]
  00146	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00149	8b 75 08	 mov	 esi, DWORD PTR _st$[ebp]
  0014c	66 8b 8c 4e 78
	01 00 00	 mov	 cx, WORD PTR [esi+ecx*2+376]
  00154	66 89 8c 50 78
	01 00 00	 mov	 WORD PTR [eax+edx*2+376], cx

; 288  :       
; 289  :       /* compute mean log energy and lsp *
; 290  :        * from decoded signal (SID_FIRST) */         
; 291  :       st->log_en = 0;                                               move16();

  0015c	33 c0		 xor	 eax, eax
  0015e	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00161	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  00165	e8 00 00 00 00	 call	 _move16

; 292  :       for (i = 0; i < M; i++)

  0016a	33 c0		 xor	 eax, eax
  0016c	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  00170	eb 0c		 jmp	 SHORT $LN62@dtx_dec
$LN61@dtx_dec:
  00172	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00176	66 83 c0 01	 add	 ax, 1
  0017a	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN62@dtx_dec:
  0017e	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00182	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00185	7d 16		 jge	 SHORT $LN60@dtx_dec

; 293  :       {
; 294  :          L_lsf[i] = 0;                                              move16();

  00187	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  0018b	c7 84 85 b8 fd
	ff ff 00 00 00
	00		 mov	 DWORD PTR _L_lsf$[ebp+eax*4], 0
  00196	e8 00 00 00 00	 call	 _move16

; 295  :       }

  0019b	eb d5		 jmp	 SHORT $LN61@dtx_dec
$LN60@dtx_dec:

; 296  :       
; 297  :       /* average energy and lsp */
; 298  :       for (i = 0; i < DTX_HIST_SIZE; i++)

  0019d	33 c0		 xor	 eax, eax
  0019f	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  001a3	eb 0c		 jmp	 SHORT $LN59@dtx_dec
$LN58@dtx_dec:
  001a5	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  001a9	66 83 c0 01	 add	 ax, 1
  001ad	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN59@dtx_dec:
  001b1	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  001b5	83 f8 08	 cmp	 eax, 8
  001b8	0f 8d 97 00 00
	00		 jge	 $LN57@dtx_dec

; 299  :       {
; 300  :          st->log_en = add(st->log_en,
; 301  :                           shr(st->log_en_hist[i],3));

  001be	6a 03		 push	 3
  001c0	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001c7	0f b7 94 41 78
	01 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+376]
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 _shr
  001d5	83 c4 08	 add	 esp, 8
  001d8	0f b7 c0	 movzx	 eax, ax
  001db	50		 push	 eax
  001dc	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001df	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  001e3	52		 push	 edx
  001e4	e8 00 00 00 00	 call	 _add
  001e9	83 c4 08	 add	 esp, 8
  001ec	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001ef	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 302  :          for (j = 0; j < M; j++)

  001f3	33 c0		 xor	 eax, eax
  001f5	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
  001f9	eb 0c		 jmp	 SHORT $LN56@dtx_dec
$LN55@dtx_dec:
  001fb	66 8b 45 dc	 mov	 ax, WORD PTR _j$[ebp]
  001ff	66 83 c0 01	 add	 ax, 1
  00203	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
$LN56@dtx_dec:
  00207	0f bf 45 dc	 movsx	 eax, WORD PTR _j$[ebp]
  0020b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0020e	7d 40		 jge	 SHORT $LN54@dtx_dec

; 303  :          {
; 304  :             L_lsf[j] = L_add(L_lsf[j],
; 305  :                              L_deposit_l(st->lsf_hist[i * M + j]));

  00210	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00214	6b c8 0a	 imul	 ecx, eax, 10
  00217	0f bf 55 dc	 movsx	 edx, WORD PTR _j$[ebp]
  0021b	03 ca		 add	 ecx, edx
  0021d	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00220	0f b7 4c 48 34	 movzx	 ecx, WORD PTR [eax+ecx*2+52]
  00225	51		 push	 ecx
  00226	e8 00 00 00 00	 call	 _L_deposit_l
  0022b	83 c4 04	 add	 esp, 4
  0022e	50		 push	 eax
  0022f	0f bf 55 dc	 movsx	 edx, WORD PTR _j$[ebp]
  00233	8b 84 95 b8 fd
	ff ff		 mov	 eax, DWORD PTR _L_lsf$[ebp+edx*4]
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 _L_add
  00240	83 c4 08	 add	 esp, 8
  00243	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  00247	89 84 8d b8 fd
	ff ff		 mov	 DWORD PTR _L_lsf$[ebp+ecx*4], eax

; 306  :          }

  0024e	eb ab		 jmp	 SHORT $LN55@dtx_dec
$LN54@dtx_dec:

; 307  :       }

  00250	e9 50 ff ff ff	 jmp	 $LN58@dtx_dec
$LN57@dtx_dec:

; 308  :        
; 309  :       for (j = 0; j < M; j++)

  00255	33 c0		 xor	 eax, eax
  00257	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
  0025b	eb 0c		 jmp	 SHORT $LN53@dtx_dec
$LN52@dtx_dec:
  0025d	66 8b 45 dc	 mov	 ax, WORD PTR _j$[ebp]
  00261	66 83 c0 01	 add	 ax, 1
  00265	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
$LN53@dtx_dec:
  00269	0f bf 45 dc	 movsx	 eax, WORD PTR _j$[ebp]
  0026d	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00270	7d 32		 jge	 SHORT $LN51@dtx_dec

; 310  :       {
; 311  :          lsf[j] = extract_l(L_shr(L_lsf[j],3)); /* divide by 8 */  move16();

  00272	6a 03		 push	 3
  00274	0f bf 45 dc	 movsx	 eax, WORD PTR _j$[ebp]
  00278	8b 8c 85 b8 fd
	ff ff		 mov	 ecx, DWORD PTR _L_lsf$[ebp+eax*4]
  0027f	51		 push	 ecx
  00280	e8 00 00 00 00	 call	 _L_shr
  00285	83 c4 08	 add	 esp, 8
  00288	50		 push	 eax
  00289	e8 00 00 00 00	 call	 _extract_l
  0028e	83 c4 04	 add	 esp, 4
  00291	0f bf 55 dc	 movsx	 edx, WORD PTR _j$[ebp]
  00295	66 89 84 55 e8
	fd ff ff	 mov	 WORD PTR _lsf$[ebp+edx*2], ax
  0029d	e8 00 00 00 00	 call	 _move16

; 312  :       }

  002a2	eb b9		 jmp	 SHORT $LN52@dtx_dec
$LN51@dtx_dec:

; 313  :       
; 314  :       Lsf_lsp(lsf, st->lsp, M); 

  002a4	6a 0a		 push	 10			; 0000000aH
  002a6	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  002a9	83 c0 0c	 add	 eax, 12			; 0000000cH
  002ac	50		 push	 eax
  002ad	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _lsf$[ebp]
  002b3	51		 push	 ecx
  002b4	e8 00 00 00 00	 call	 _Lsf_lsp
  002b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 315  : 
; 316  :       /* make log_en speech coder mode independent */
; 317  :       /* added again later before synthesis        */
; 318  :       st->log_en = sub(st->log_en, st->log_en_adjust);

  002bc	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  002bf	0f b7 88 8a 01
	00 00		 movzx	 ecx, WORD PTR [eax+394]
  002c6	51		 push	 ecx
  002c7	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  002ca	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 _sub
  002d4	83 c4 08	 add	 esp, 8
  002d7	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  002da	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 319  : 
; 320  :       /* compute lsf variability vector */
; 321  :       Copy(st->lsf_hist, st->lsf_hist_mean, 80);

  002de	6a 50		 push	 80			; 00000050H
  002e0	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  002e3	05 d6 00 00 00	 add	 eax, 214		; 000000d6H
  002e8	50		 push	 eax
  002e9	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  002ec	83 c1 34	 add	 ecx, 52			; 00000034H
  002ef	51		 push	 ecx
  002f0	e8 00 00 00 00	 call	 _Copy
  002f5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 322  : 
; 323  :       for (i = 0; i < M; i++)

  002f8	33 c0		 xor	 eax, eax
  002fa	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  002fe	eb 0c		 jmp	 SHORT $LN50@dtx_dec
$LN49@dtx_dec:
  00300	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00304	66 83 c0 01	 add	 ax, 1
  00308	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN50@dtx_dec:
  0030c	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00310	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00313	0f 8d db 02 00
	00		 jge	 $LN65@dtx_dec

; 324  :       {
; 325  :          L_lsf_mean = 0;                                           move32();

  00319	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _L_lsf_mean$[ebp], 0
  00323	e8 00 00 00 00	 call	 _move32

; 326  :          /* compute mean lsf */
; 327  :          for (j = 0; j < 8; j++)

  00328	33 c0		 xor	 eax, eax
  0032a	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
  0032e	eb 0c		 jmp	 SHORT $LN47@dtx_dec
$LN46@dtx_dec:
  00330	66 8b 45 dc	 mov	 ax, WORD PTR _j$[ebp]
  00334	66 83 c0 01	 add	 ax, 1
  00338	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
$LN47@dtx_dec:
  0033c	0f bf 45 dc	 movsx	 eax, WORD PTR _j$[ebp]
  00340	83 f8 08	 cmp	 eax, 8
  00343	7d 39		 jge	 SHORT $LN45@dtx_dec

; 328  :          {
; 329  :             L_lsf_mean = L_add(L_lsf_mean, 
; 330  :                                L_deposit_l(st->lsf_hist_mean[i+j*M]));

  00345	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00349	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  0034d	6b d1 0a	 imul	 edx, ecx, 10
  00350	03 c2		 add	 eax, edx
  00352	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00355	0f b7 94 41 d6
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+214]
  0035d	52		 push	 edx
  0035e	e8 00 00 00 00	 call	 _L_deposit_l
  00363	83 c4 04	 add	 esp, 4
  00366	50		 push	 eax
  00367	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _L_lsf_mean$[ebp]
  0036d	50		 push	 eax
  0036e	e8 00 00 00 00	 call	 _L_add
  00373	83 c4 08	 add	 esp, 8
  00376	89 85 90 fe ff
	ff		 mov	 DWORD PTR _L_lsf_mean$[ebp], eax

; 331  :          }

  0037c	eb b2		 jmp	 SHORT $LN46@dtx_dec
$LN45@dtx_dec:

; 332  :          
; 333  :          lsf_mean = extract_l(L_shr(L_lsf_mean, 3));               move16();

  0037e	6a 03		 push	 3
  00380	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _L_lsf_mean$[ebp]
  00386	50		 push	 eax
  00387	e8 00 00 00 00	 call	 _L_shr
  0038c	83 c4 08	 add	 esp, 8
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 _extract_l
  00395	83 c4 04	 add	 esp, 4
  00398	66 89 85 9c fe
	ff ff		 mov	 WORD PTR _lsf_mean$[ebp], ax
  0039f	e8 00 00 00 00	 call	 _move16

; 334  :          /* subtract mean and limit to within reasonable limits  *
; 335  :           * moreover the upper lsf's are attenuated              */
; 336  :          for (j = 0; j < 8; j++)

  003a4	33 c0		 xor	 eax, eax
  003a6	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
  003aa	eb 0c		 jmp	 SHORT $LN44@dtx_dec
$LN43@dtx_dec:
  003ac	66 8b 45 dc	 mov	 ax, WORD PTR _j$[ebp]
  003b0	66 83 c0 01	 add	 ax, 1
  003b4	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
$LN44@dtx_dec:
  003b8	0f bf 45 dc	 movsx	 eax, WORD PTR _j$[ebp]
  003bc	83 f8 08	 cmp	 eax, 8
  003bf	0f 8d 2a 02 00
	00		 jge	 $LN42@dtx_dec

; 337  :          {
; 338  :             /* subtract mean */ 
; 339  :             st->lsf_hist_mean[i+j*M] = 
; 340  :                sub(st->lsf_hist_mean[i+j*M], lsf_mean);

  003c5	0f b7 85 9c fe
	ff ff		 movzx	 eax, WORD PTR _lsf_mean$[ebp]
  003cc	50		 push	 eax
  003cd	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  003d1	0f bf 55 dc	 movsx	 edx, WORD PTR _j$[ebp]
  003d5	6b c2 0a	 imul	 eax, edx, 10
  003d8	03 c8		 add	 ecx, eax
  003da	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  003dd	0f b7 84 4a d6
	00 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+214]
  003e5	50		 push	 eax
  003e6	e8 00 00 00 00	 call	 _sub
  003eb	83 c4 08	 add	 esp, 8
  003ee	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  003f2	0f bf 55 dc	 movsx	 edx, WORD PTR _j$[ebp]
  003f6	6b d2 0a	 imul	 edx, edx, 10
  003f9	03 ca		 add	 ecx, edx
  003fb	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  003fe	66 89 84 4a d6
	00 00 00	 mov	 WORD PTR [edx+ecx*2+214], ax

; 341  : 
; 342  :             /* attenuate deviation from mean, especially for upper lsf's */
; 343  :             st->lsf_hist_mean[i+j*M] = 
; 344  :                mult(st->lsf_hist_mean[i+j*M], lsf_hist_mean_scale[i]);

  00406	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  0040a	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _lsf_hist_mean_scale[eax*2]
  00412	51		 push	 ecx
  00413	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  00417	0f bf 45 dc	 movsx	 eax, WORD PTR _j$[ebp]
  0041b	6b c8 0a	 imul	 ecx, eax, 10
  0041e	03 d1		 add	 edx, ecx
  00420	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00423	0f b7 8c 50 d6
	00 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+214]
  0042b	51		 push	 ecx
  0042c	e8 00 00 00 00	 call	 _mult
  00431	83 c4 08	 add	 esp, 8
  00434	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  00438	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  0043c	6b c9 0a	 imul	 ecx, ecx, 10
  0043f	03 d1		 add	 edx, ecx
  00441	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00444	66 89 84 51 d6
	00 00 00	 mov	 WORD PTR [ecx+edx*2+214], ax

; 345  : 
; 346  :             /* limit the deviation */
; 347  :             test();

  0044c	e8 00 00 00 00	 call	 _test

; 348  :             if (st->lsf_hist_mean[i+j*M] < 0)

  00451	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00455	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  00459	6b d1 0a	 imul	 edx, ecx, 10
  0045c	03 c2		 add	 eax, edx
  0045e	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00461	0f bf 94 41 d6
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax*2+214]
  00469	85 d2		 test	 edx, edx
  0046b	7d 11		 jge	 SHORT $LN41@dtx_dec

; 349  :             {
; 350  :                negative = 1;                                        move16();

  0046d	c7 85 a8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _negative$[ebp], 1
  00477	e8 00 00 00 00	 call	 _move16

; 351  :             }
; 352  :             else

  0047c	eb 0f		 jmp	 SHORT $LN40@dtx_dec
$LN41@dtx_dec:

; 353  :             {
; 354  :                negative = 0;                                        move16();

  0047e	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _negative$[ebp], 0
  00488	e8 00 00 00 00	 call	 _move16
$LN40@dtx_dec:

; 355  :             }
; 356  :             st->lsf_hist_mean[i+j*M] = abs_s(st->lsf_hist_mean[i+j*M]);

  0048d	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00491	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  00495	6b d1 0a	 imul	 edx, ecx, 10
  00498	03 c2		 add	 eax, edx
  0049a	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0049d	0f b7 94 41 d6
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+214]
  004a5	52		 push	 edx
  004a6	e8 00 00 00 00	 call	 _abs_s
  004ab	83 c4 04	 add	 esp, 4
  004ae	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  004b2	0f bf 55 dc	 movsx	 edx, WORD PTR _j$[ebp]
  004b6	6b d2 0a	 imul	 edx, edx, 10
  004b9	03 ca		 add	 ecx, edx
  004bb	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  004be	66 89 84 4a d6
	00 00 00	 mov	 WORD PTR [edx+ecx*2+214], ax

; 357  : 
; 358  :             /* apply soft limit */
; 359  :             test();

  004c6	e8 00 00 00 00	 call	 _test

; 360  :             if (sub(st->lsf_hist_mean[i+j*M], 655) > 0)

  004cb	68 8f 02 00 00	 push	 655			; 0000028fH
  004d0	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  004d4	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  004d8	6b d1 0a	 imul	 edx, ecx, 10
  004db	03 c2		 add	 eax, edx
  004dd	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  004e0	0f b7 94 41 d6
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+214]
  004e8	52		 push	 edx
  004e9	e8 00 00 00 00	 call	 _sub
  004ee	83 c4 08	 add	 esp, 8
  004f1	98		 cwde
  004f2	85 c0		 test	 eax, eax
  004f4	7e 5d		 jle	 SHORT $LN39@dtx_dec

; 361  :             {
; 362  :                st->lsf_hist_mean[i+j*M] = 
; 363  :                   add(655, shr(sub(st->lsf_hist_mean[i+j*M], 655), 2));

  004f6	6a 02		 push	 2
  004f8	68 8f 02 00 00	 push	 655			; 0000028fH
  004fd	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00501	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  00505	6b d1 0a	 imul	 edx, ecx, 10
  00508	03 c2		 add	 eax, edx
  0050a	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0050d	0f b7 94 41 d6
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+214]
  00515	52		 push	 edx
  00516	e8 00 00 00 00	 call	 _sub
  0051b	83 c4 08	 add	 esp, 8
  0051e	0f b7 c0	 movzx	 eax, ax
  00521	50		 push	 eax
  00522	e8 00 00 00 00	 call	 _shr
  00527	83 c4 08	 add	 esp, 8
  0052a	0f b7 c8	 movzx	 ecx, ax
  0052d	51		 push	 ecx
  0052e	68 8f 02 00 00	 push	 655			; 0000028fH
  00533	e8 00 00 00 00	 call	 _add
  00538	83 c4 08	 add	 esp, 8
  0053b	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  0053f	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  00543	6b c9 0a	 imul	 ecx, ecx, 10
  00546	03 d1		 add	 edx, ecx
  00548	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0054b	66 89 84 51 d6
	00 00 00	 mov	 WORD PTR [ecx+edx*2+214], ax
$LN39@dtx_dec:

; 364  :             }
; 365  :             
; 366  :             /* apply hard limit */
; 367  :             test();

  00553	e8 00 00 00 00	 call	 _test

; 368  :             if (sub(st->lsf_hist_mean[i+j*M], 1310) > 0)

  00558	68 1e 05 00 00	 push	 1310			; 0000051eH
  0055d	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00561	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  00565	6b d1 0a	 imul	 edx, ecx, 10
  00568	03 c2		 add	 eax, edx
  0056a	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0056d	0f b7 94 41 d6
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+214]
  00575	52		 push	 edx
  00576	e8 00 00 00 00	 call	 _sub
  0057b	83 c4 08	 add	 esp, 8
  0057e	98		 cwde
  0057f	85 c0		 test	 eax, eax
  00581	7e 22		 jle	 SHORT $LN38@dtx_dec

; 369  :             {
; 370  :                st->lsf_hist_mean[i+j*M] = 1310;                     move16();

  00583	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00587	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  0058b	6b d1 0a	 imul	 edx, ecx, 10
  0058e	03 c2		 add	 eax, edx
  00590	b9 1e 05 00 00	 mov	 ecx, 1310		; 0000051eH
  00595	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00598	66 89 8c 42 d6
	00 00 00	 mov	 WORD PTR [edx+eax*2+214], cx
  005a0	e8 00 00 00 00	 call	 _move16
$LN38@dtx_dec:

; 371  :             }
; 372  :             test();

  005a5	e8 00 00 00 00	 call	 _test

; 373  :             if (negative != 0) 

  005aa	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _negative$[ebp], 0
  005b1	74 37		 je	 SHORT $LN37@dtx_dec

; 374  :             {
; 375  :                st->lsf_hist_mean[i+j*M] = -st->lsf_hist_mean[i+j*M];move16();

  005b3	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  005b7	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  005bb	6b d1 0a	 imul	 edx, ecx, 10
  005be	03 c2		 add	 eax, edx
  005c0	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  005c3	0f bf 94 41 d6
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax*2+214]
  005cb	f7 da		 neg	 edx
  005cd	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  005d1	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  005d5	6b c9 0a	 imul	 ecx, ecx, 10
  005d8	03 c1		 add	 eax, ecx
  005da	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  005dd	66 89 94 41 d6
	00 00 00	 mov	 WORD PTR [ecx+eax*2+214], dx
  005e5	e8 00 00 00 00	 call	 _move16
$LN37@dtx_dec:

; 376  :             }
; 377  :             
; 378  :          }

  005ea	e9 bd fd ff ff	 jmp	 $LN43@dtx_dec
$LN42@dtx_dec:

; 379  :       }

  005ef	e9 0c fd ff ff	 jmp	 $LN49@dtx_dec
$LN65@dtx_dec:

; 380  :    }
; 381  :    
; 382  :    test();

  005f4	e8 00 00 00 00	 call	 _test

; 383  :    if (st->sid_frame != 0 )

  005f9	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  005fc	0f bf 88 90 01
	00 00		 movsx	 ecx, WORD PTR [eax+400]
  00603	85 c9		 test	 ecx, ecx
  00605	0f 84 7e 03 00
	00		 je	 $LN36@dtx_dec

; 384  :    {
; 385  :       /* Set old SID parameters, always shift */
; 386  :       /* even if there is no new valid_data   */
; 387  :       Copy(st->lsp, st->lsp_old, M);

  0060b	6a 0a		 push	 10			; 0000000aH
  0060d	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00610	83 c0 20	 add	 eax, 32			; 00000020H
  00613	50		 push	 eax
  00614	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00617	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0061a	51		 push	 ecx
  0061b	e8 00 00 00 00	 call	 _Copy
  00620	83 c4 0c	 add	 esp, 12			; 0000000cH

; 388  :       st->old_log_en = st->log_en;                                  move16();

  00623	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00626	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00629	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  0062d	66 89 50 06	 mov	 WORD PTR [eax+6], dx
  00631	e8 00 00 00 00	 call	 _move16

; 389  : 
; 390  :       test();

  00636	e8 00 00 00 00	 call	 _test

; 391  :       if (st->valid_data != 0 )  /* new data available (no CRC) */

  0063b	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0063e	0f bf 88 92 01
	00 00		 movsx	 ecx, WORD PTR [eax+402]
  00645	85 c9		 test	 ecx, ecx
  00647	0f 84 c7 01 00
	00		 je	 $LN35@dtx_dec

; 392  :       {
; 393  :          /* Compute interpolation factor, since the division only works *
; 394  :           * for values of since_last_sid < 32 we have to limit the      *
; 395  :           * interpolation to 32 frames                                  */
; 396  :          tmp_int_length = st->since_last_sid;                       move16();

  0064d	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00650	66 8b 08	 mov	 cx, WORD PTR [eax]
  00653	66 89 8d a0 fd
	ff ff		 mov	 WORD PTR _tmp_int_length$[ebp], cx
  0065a	e8 00 00 00 00	 call	 _move16

; 397  :          st->since_last_sid = 0;                                    move16();

  0065f	33 c0		 xor	 eax, eax
  00661	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00664	66 89 01	 mov	 WORD PTR [ecx], ax
  00667	e8 00 00 00 00	 call	 _move16

; 398  : 
; 399  :          test();

  0066c	e8 00 00 00 00	 call	 _test

; 400  :          if (sub(tmp_int_length, 32) > 0)

  00671	6a 20		 push	 32			; 00000020H
  00673	0f b7 85 a0 fd
	ff ff		 movzx	 eax, WORD PTR _tmp_int_length$[ebp]
  0067a	50		 push	 eax
  0067b	e8 00 00 00 00	 call	 _sub
  00680	83 c4 08	 add	 esp, 8
  00683	0f bf c8	 movsx	 ecx, ax
  00686	85 c9		 test	 ecx, ecx
  00688	7e 11		 jle	 SHORT $LN34@dtx_dec

; 401  :          {
; 402  :             tmp_int_length = 32;                                    move16();

  0068a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0068f	66 89 85 a0 fd
	ff ff		 mov	 WORD PTR _tmp_int_length$[ebp], ax
  00696	e8 00 00 00 00	 call	 _move16
$LN34@dtx_dec:

; 403  :          }
; 404  :          test();

  0069b	e8 00 00 00 00	 call	 _test

; 405  :          if (sub(tmp_int_length, 2) >= 0)

  006a0	6a 02		 push	 2
  006a2	0f b7 85 a0 fd
	ff ff		 movzx	 eax, WORD PTR _tmp_int_length$[ebp]
  006a9	50		 push	 eax
  006aa	e8 00 00 00 00	 call	 _sub
  006af	83 c4 08	 add	 esp, 8
  006b2	0f bf c8	 movsx	 ecx, ax
  006b5	85 c9		 test	 ecx, ecx
  006b7	7c 31		 jl	 SHORT $LN33@dtx_dec

; 406  :          {
; 407  :             move16();

  006b9	e8 00 00 00 00	 call	 _move16

; 408  :             st->true_sid_period_inv = div_s(1 << 10, shl(tmp_int_length, 10)); 

  006be	6a 0a		 push	 10			; 0000000aH
  006c0	0f b7 85 a0 fd
	ff ff		 movzx	 eax, WORD PTR _tmp_int_length$[ebp]
  006c7	50		 push	 eax
  006c8	e8 00 00 00 00	 call	 _shl
  006cd	83 c4 08	 add	 esp, 8
  006d0	0f b7 c8	 movzx	 ecx, ax
  006d3	51		 push	 ecx
  006d4	68 00 04 00 00	 push	 1024			; 00000400H
  006d9	e8 00 00 00 00	 call	 _div_s
  006de	83 c4 08	 add	 esp, 8
  006e1	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  006e4	66 89 42 02	 mov	 WORD PTR [edx+2], ax

; 409  :          }
; 410  :          else

  006e8	eb 11		 jmp	 SHORT $LN32@dtx_dec
$LN33@dtx_dec:

; 411  :          {
; 412  :             st->true_sid_period_inv = 1 << 14; /* 0.5 it Q15 */     move16();

  006ea	b8 00 40 00 00	 mov	 eax, 16384		; 00004000H
  006ef	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  006f2	66 89 41 02	 mov	 WORD PTR [ecx+2], ax
  006f6	e8 00 00 00 00	 call	 _move16
$LN32@dtx_dec:

; 413  :          }
; 414  :          
; 415  :          Init_D_plsf_3(lsfState, parm[0]);  /* temporay initialization */ 

  006fb	b8 02 00 00 00	 mov	 eax, 2
  00700	6b c8 00	 imul	 ecx, eax, 0
  00703	8b 55 24	 mov	 edx, DWORD PTR _parm$[ebp]
  00706	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0070a	50		 push	 eax
  0070b	8b 4d 10	 mov	 ecx, DWORD PTR _lsfState$[ebp]
  0070e	51		 push	 ecx
  0070f	e8 00 00 00 00	 call	 _Init_D_plsf_3
  00714	83 c4 08	 add	 esp, 8

; 416  :          D_plsf_3(lsfState, MRDTX, 0, &parm[1], st->lsp);

  00717	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0071a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0071d	50		 push	 eax
  0071e	b9 02 00 00 00	 mov	 ecx, 2
  00723	c1 e1 00	 shl	 ecx, 0
  00726	03 4d 24	 add	 ecx, DWORD PTR _parm$[ebp]
  00729	51		 push	 ecx
  0072a	6a 00		 push	 0
  0072c	6a 08		 push	 8
  0072e	8b 55 10	 mov	 edx, DWORD PTR _lsfState$[ebp]
  00731	52		 push	 edx
  00732	e8 00 00 00 00	 call	 _D_plsf_3
  00737	83 c4 14	 add	 esp, 20			; 00000014H

; 417  :          Set_zero(lsfState->past_r_q, M);   /* reset for next speech frame */ 

  0073a	6a 0a		 push	 10			; 0000000aH
  0073c	8b 45 10	 mov	 eax, DWORD PTR _lsfState$[ebp]
  0073f	50		 push	 eax
  00740	e8 00 00 00 00	 call	 _Set_zero
  00745	83 c4 08	 add	 esp, 8

; 418  : 
; 419  :          log_en_index = parm[4];                                    move16();

  00748	b8 02 00 00 00	 mov	 eax, 2
  0074d	c1 e0 02	 shl	 eax, 2
  00750	8b 4d 24	 mov	 ecx, DWORD PTR _parm$[ebp]
  00753	66 8b 14 01	 mov	 dx, WORD PTR [ecx+eax]
  00757	66 89 55 f4	 mov	 WORD PTR _log_en_index$[ebp], dx
  0075b	e8 00 00 00 00	 call	 _move16

; 420  :          /* Q11 and divide by 4 */
; 421  :          st->log_en = shl(log_en_index, (11 - 2));                  move16();

  00760	6a 09		 push	 9
  00762	0f b7 45 f4	 movzx	 eax, WORD PTR _log_en_index$[ebp]
  00766	50		 push	 eax
  00767	e8 00 00 00 00	 call	 _shl
  0076c	83 c4 08	 add	 esp, 8
  0076f	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00772	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  00776	e8 00 00 00 00	 call	 _move16

; 422  :          
; 423  :          /* Subtract 2.5 in Q11 */
; 424  :          st->log_en = sub(st->log_en, (2560 * 2));

  0077b	68 00 14 00 00	 push	 5120			; 00001400H
  00780	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00783	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00787	51		 push	 ecx
  00788	e8 00 00 00 00	 call	 _sub
  0078d	83 c4 08	 add	 esp, 8
  00790	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00793	66 89 42 04	 mov	 WORD PTR [edx+4], ax

; 425  :          
; 426  :          /* Index 0 is reserved for silence */
; 427  :          test();

  00797	e8 00 00 00 00	 call	 _test

; 428  :          if (log_en_index == 0)

  0079c	0f bf 45 f4	 movsx	 eax, WORD PTR _log_en_index$[ebp]
  007a0	85 c0		 test	 eax, eax
  007a2	75 11		 jne	 SHORT $LN31@dtx_dec

; 429  :          {
; 430  :             st->log_en = MIN_16;                                    move16();

  007a4	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H
  007a9	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  007ac	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  007b0	e8 00 00 00 00	 call	 _move16
$LN31@dtx_dec:

; 431  :          }
; 432  :          
; 433  :          /* no interpolation at startup after coder reset        */
; 434  :          /* or when SID_UPD has been received right after SPEECH */
; 435  :          test(); test();

  007b5	e8 00 00 00 00	 call	 _test
  007ba	e8 00 00 00 00	 call	 _test

; 436  :          if ((st->data_updated == 0) ||
; 437  :              (sub(st->dtxGlobalState, SPEECH) == 0)
; 438  :              ) 

  007bf	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  007c2	0f bf 88 9c 01
	00 00		 movsx	 ecx, WORD PTR [eax+412]
  007c9	85 c9		 test	 ecx, ecx
  007cb	74 1c		 je	 SHORT $LN29@dtx_dec
  007cd	6a 00		 push	 0
  007cf	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  007d2	0f b7 88 98 01
	00 00		 movzx	 ecx, WORD PTR [eax+408]
  007d9	51		 push	 ecx
  007da	e8 00 00 00 00	 call	 _sub
  007df	83 c4 08	 add	 esp, 8
  007e2	0f bf d0	 movsx	 edx, ax
  007e5	85 d2		 test	 edx, edx
  007e7	75 2b		 jne	 SHORT $LN35@dtx_dec
$LN29@dtx_dec:

; 439  :          {
; 440  :             Copy(st->lsp, st->lsp_old, M);

  007e9	6a 0a		 push	 10			; 0000000aH
  007eb	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  007ee	83 c0 20	 add	 eax, 32			; 00000020H
  007f1	50		 push	 eax
  007f2	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  007f5	83 c1 0c	 add	 ecx, 12			; 0000000cH
  007f8	51		 push	 ecx
  007f9	e8 00 00 00 00	 call	 _Copy
  007fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 441  :             st->old_log_en = st->log_en;                            move16();

  00801	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00804	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00807	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  0080b	66 89 50 06	 mov	 WORD PTR [eax+6], dx
  0080f	e8 00 00 00 00	 call	 _move16
$LN35@dtx_dec:

; 442  :          }         
; 443  :       } /* endif valid_data */
; 444  : 
; 445  :       /* initialize gain predictor memory of other modes */       
; 446  :       ma_pred_init = sub(shr(st->log_en,1), 9000);                  move16();

  00814	68 28 23 00 00	 push	 9000			; 00002328H
  00819	6a 01		 push	 1
  0081b	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0081e	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00822	51		 push	 ecx
  00823	e8 00 00 00 00	 call	 _shr
  00828	83 c4 08	 add	 esp, 8
  0082b	0f b7 d0	 movzx	 edx, ax
  0082e	52		 push	 edx
  0082f	e8 00 00 00 00	 call	 _sub
  00834	83 c4 08	 add	 esp, 8
  00837	66 89 85 d8 fe
	ff ff		 mov	 WORD PTR _ma_pred_init$[ebp], ax
  0083e	e8 00 00 00 00	 call	 _move16

; 447  :       test();

  00843	e8 00 00 00 00	 call	 _test

; 448  :       if (ma_pred_init > 0)

  00848	0f bf 85 d8 fe
	ff ff		 movsx	 eax, WORD PTR _ma_pred_init$[ebp]
  0084f	85 c0		 test	 eax, eax
  00851	7e 0e		 jle	 SHORT $LN28@dtx_dec

; 449  :       {                   
; 450  :          ma_pred_init = 0;                                          move16();  

  00853	33 c0		 xor	 eax, eax
  00855	66 89 85 d8 fe
	ff ff		 mov	 WORD PTR _ma_pred_init$[ebp], ax
  0085c	e8 00 00 00 00	 call	 _move16
$LN28@dtx_dec:

; 451  :       }      
; 452  :       test();

  00861	e8 00 00 00 00	 call	 _test

; 453  :       if (sub(ma_pred_init, -14436) < 0)

  00866	68 9c c7 ff ff	 push	 -14436			; ffffc79cH
  0086b	0f b7 85 d8 fe
	ff ff		 movzx	 eax, WORD PTR _ma_pred_init$[ebp]
  00872	50		 push	 eax
  00873	e8 00 00 00 00	 call	 _sub
  00878	83 c4 08	 add	 esp, 8
  0087b	0f bf c8	 movsx	 ecx, ax
  0087e	85 c9		 test	 ecx, ecx
  00880	7d 11		 jge	 SHORT $LN27@dtx_dec

; 454  :       {
; 455  :          ma_pred_init = -14436;                                     move16();

  00882	b8 9c c7 ff ff	 mov	 eax, -14436		; ffffc79cH
  00887	66 89 85 d8 fe
	ff ff		 mov	 WORD PTR _ma_pred_init$[ebp], ax
  0088e	e8 00 00 00 00	 call	 _move16
$LN27@dtx_dec:

; 456  :       }
; 457  :       
; 458  :       predState->past_qua_en[0] = ma_pred_init;                     move16();

  00893	b8 02 00 00 00	 mov	 eax, 2
  00898	6b c8 00	 imul	 ecx, eax, 0
  0089b	8b 55 14	 mov	 edx, DWORD PTR _predState$[ebp]
  0089e	66 8b 85 d8 fe
	ff ff		 mov	 ax, WORD PTR _ma_pred_init$[ebp]
  008a5	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  008a9	e8 00 00 00 00	 call	 _move16

; 459  :       predState->past_qua_en[1] = ma_pred_init;                     move16();

  008ae	b8 02 00 00 00	 mov	 eax, 2
  008b3	c1 e0 00	 shl	 eax, 0
  008b6	8b 4d 14	 mov	 ecx, DWORD PTR _predState$[ebp]
  008b9	66 8b 95 d8 fe
	ff ff		 mov	 dx, WORD PTR _ma_pred_init$[ebp]
  008c0	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx
  008c4	e8 00 00 00 00	 call	 _move16

; 460  :       predState->past_qua_en[2] = ma_pred_init;                     move16();

  008c9	b8 02 00 00 00	 mov	 eax, 2
  008ce	d1 e0		 shl	 eax, 1
  008d0	8b 4d 14	 mov	 ecx, DWORD PTR _predState$[ebp]
  008d3	66 8b 95 d8 fe
	ff ff		 mov	 dx, WORD PTR _ma_pred_init$[ebp]
  008da	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx
  008de	e8 00 00 00 00	 call	 _move16

; 461  :       predState->past_qua_en[3] = ma_pred_init;                     move16();

  008e3	b8 02 00 00 00	 mov	 eax, 2
  008e8	6b c8 03	 imul	 ecx, eax, 3
  008eb	8b 55 14	 mov	 edx, DWORD PTR _predState$[ebp]
  008ee	66 8b 85 d8 fe
	ff ff		 mov	 ax, WORD PTR _ma_pred_init$[ebp]
  008f5	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  008f9	e8 00 00 00 00	 call	 _move16

; 462  : 
; 463  :       /* past_qua_en for other modes than MR122 */      
; 464  :       ma_pred_init = mult(5443, ma_pred_init); 

  008fe	0f b7 85 d8 fe
	ff ff		 movzx	 eax, WORD PTR _ma_pred_init$[ebp]
  00905	50		 push	 eax
  00906	68 43 15 00 00	 push	 5443			; 00001543H
  0090b	e8 00 00 00 00	 call	 _mult
  00910	83 c4 08	 add	 esp, 8
  00913	66 89 85 d8 fe
	ff ff		 mov	 WORD PTR _ma_pred_init$[ebp], ax

; 465  :       /* scale down by factor 20*log10(2) in Q15 */
; 466  :       predState->past_qua_en_MR122[0] = ma_pred_init;               move16();

  0091a	b8 02 00 00 00	 mov	 eax, 2
  0091f	6b c8 00	 imul	 ecx, eax, 0
  00922	8b 55 14	 mov	 edx, DWORD PTR _predState$[ebp]
  00925	66 8b 85 d8 fe
	ff ff		 mov	 ax, WORD PTR _ma_pred_init$[ebp]
  0092c	66 89 44 0a 08	 mov	 WORD PTR [edx+ecx+8], ax
  00931	e8 00 00 00 00	 call	 _move16

; 467  :       predState->past_qua_en_MR122[1] = ma_pred_init;               move16();

  00936	b8 02 00 00 00	 mov	 eax, 2
  0093b	c1 e0 00	 shl	 eax, 0
  0093e	8b 4d 14	 mov	 ecx, DWORD PTR _predState$[ebp]
  00941	66 8b 95 d8 fe
	ff ff		 mov	 dx, WORD PTR _ma_pred_init$[ebp]
  00948	66 89 54 01 08	 mov	 WORD PTR [ecx+eax+8], dx
  0094d	e8 00 00 00 00	 call	 _move16

; 468  :       predState->past_qua_en_MR122[2] = ma_pred_init;               move16();

  00952	b8 02 00 00 00	 mov	 eax, 2
  00957	d1 e0		 shl	 eax, 1
  00959	8b 4d 14	 mov	 ecx, DWORD PTR _predState$[ebp]
  0095c	66 8b 95 d8 fe
	ff ff		 mov	 dx, WORD PTR _ma_pred_init$[ebp]
  00963	66 89 54 01 08	 mov	 WORD PTR [ecx+eax+8], dx
  00968	e8 00 00 00 00	 call	 _move16

; 469  :       predState->past_qua_en_MR122[3] = ma_pred_init;               move16();

  0096d	b8 02 00 00 00	 mov	 eax, 2
  00972	6b c8 03	 imul	 ecx, eax, 3
  00975	8b 55 14	 mov	 edx, DWORD PTR _predState$[ebp]
  00978	66 8b 85 d8 fe
	ff ff		 mov	 ax, WORD PTR _ma_pred_init$[ebp]
  0097f	66 89 44 0a 08	 mov	 WORD PTR [edx+ecx+8], ax
  00984	e8 00 00 00 00	 call	 _move16
$LN36@dtx_dec:

; 470  :    } /* endif sid_frame */
; 471  :    
; 472  :    /* CN generation */
; 473  :    /* recompute level adjustment factor Q11             *
; 474  :     * st->log_en_adjust = 0.9*st->log_en_adjust +       *
; 475  :     *                     0.1*dtx_log_en_adjust[mode]); */
; 476  :    move16();

  00989	e8 00 00 00 00	 call	 _move16

; 477  :    st->log_en_adjust = add(mult(st->log_en_adjust, 29491),
; 478  :                            shr(mult(shl(dtx_log_en_adjust[mode],5),3277),5));

  0098e	6a 05		 push	 5
  00990	68 cd 0c 00 00	 push	 3277			; 00000ccdH
  00995	6a 05		 push	 5
  00997	8b 45 20	 mov	 eax, DWORD PTR _mode$[ebp]
  0099a	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _dtx_log_en_adjust[eax*2]
  009a2	51		 push	 ecx
  009a3	e8 00 00 00 00	 call	 _shl
  009a8	83 c4 08	 add	 esp, 8
  009ab	0f b7 d0	 movzx	 edx, ax
  009ae	52		 push	 edx
  009af	e8 00 00 00 00	 call	 _mult
  009b4	83 c4 08	 add	 esp, 8
  009b7	0f b7 c0	 movzx	 eax, ax
  009ba	50		 push	 eax
  009bb	e8 00 00 00 00	 call	 _shr
  009c0	83 c4 08	 add	 esp, 8
  009c3	0f b7 c8	 movzx	 ecx, ax
  009c6	51		 push	 ecx
  009c7	68 33 73 00 00	 push	 29491			; 00007333H
  009cc	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  009cf	0f b7 82 8a 01
	00 00		 movzx	 eax, WORD PTR [edx+394]
  009d6	50		 push	 eax
  009d7	e8 00 00 00 00	 call	 _mult
  009dc	83 c4 08	 add	 esp, 8
  009df	0f b7 c8	 movzx	 ecx, ax
  009e2	51		 push	 ecx
  009e3	e8 00 00 00 00	 call	 _add
  009e8	83 c4 08	 add	 esp, 8
  009eb	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  009ee	66 89 82 8a 01
	00 00		 mov	 WORD PTR [edx+394], ax

; 479  : 
; 480  :    /* Interpolate SID info */
; 481  :    int_fac = shl(add(1,st->since_last_sid), 10); /* Q10 */                 move16();

  009f5	6a 0a		 push	 10			; 0000000aH
  009f7	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  009fa	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  009fd	51		 push	 ecx
  009fe	6a 01		 push	 1
  00a00	e8 00 00 00 00	 call	 _add
  00a05	83 c4 08	 add	 esp, 8
  00a08	0f b7 d0	 movzx	 edx, ax
  00a0b	52		 push	 edx
  00a0c	e8 00 00 00 00	 call	 _shl
  00a11	83 c4 08	 add	 esp, 8
  00a14	66 89 45 d0	 mov	 WORD PTR _int_fac$[ebp], ax
  00a18	e8 00 00 00 00	 call	 _move16

; 482  :    int_fac = mult(int_fac, st->true_sid_period_inv); /* Q10 * Q15 -> Q10 */

  00a1d	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00a20	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00a24	51		 push	 ecx
  00a25	0f b7 55 d0	 movzx	 edx, WORD PTR _int_fac$[ebp]
  00a29	52		 push	 edx
  00a2a	e8 00 00 00 00	 call	 _mult
  00a2f	83 c4 08	 add	 esp, 8
  00a32	66 89 45 d0	 mov	 WORD PTR _int_fac$[ebp], ax

; 483  :    
; 484  :    /* Maximize to 1.0 in Q10 */
; 485  :    test();

  00a36	e8 00 00 00 00	 call	 _test

; 486  :    if (sub(int_fac, 1024) > 0)

  00a3b	68 00 04 00 00	 push	 1024			; 00000400H
  00a40	0f b7 45 d0	 movzx	 eax, WORD PTR _int_fac$[ebp]
  00a44	50		 push	 eax
  00a45	e8 00 00 00 00	 call	 _sub
  00a4a	83 c4 08	 add	 esp, 8
  00a4d	0f bf c8	 movsx	 ecx, ax
  00a50	85 c9		 test	 ecx, ecx
  00a52	7e 0e		 jle	 SHORT $LN26@dtx_dec

; 487  :    {
; 488  :       int_fac = 1024;                                               move16();

  00a54	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00a59	66 89 45 d0	 mov	 WORD PTR _int_fac$[ebp], ax
  00a5d	e8 00 00 00 00	 call	 _move16
$LN26@dtx_dec:

; 489  :    }
; 490  :    int_fac = shl(int_fac, 4); /* Q10 -> Q14 */

  00a62	6a 04		 push	 4
  00a64	0f b7 45 d0	 movzx	 eax, WORD PTR _int_fac$[ebp]
  00a68	50		 push	 eax
  00a69	e8 00 00 00 00	 call	 _shl
  00a6e	83 c4 08	 add	 esp, 8
  00a71	66 89 45 d0	 mov	 WORD PTR _int_fac$[ebp], ax

; 491  :    
; 492  :    L_log_en_int = L_mult(int_fac, st->log_en); /* Q14 * Q11->Q26 */ move32();

  00a75	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00a78	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00a7c	51		 push	 ecx
  00a7d	0f b7 55 d0	 movzx	 edx, WORD PTR _int_fac$[ebp]
  00a81	52		 push	 edx
  00a82	e8 00 00 00 00	 call	 _L_mult
  00a87	83 c4 08	 add	 esp, 8
  00a8a	89 45 c4	 mov	 DWORD PTR _L_log_en_int$[ebp], eax
  00a8d	e8 00 00 00 00	 call	 _move32

; 493  :    for(i = 0; i < M; i++)

  00a92	33 c0		 xor	 eax, eax
  00a94	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  00a98	eb 0c		 jmp	 SHORT $LN25@dtx_dec
$LN24@dtx_dec:
  00a9a	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00a9e	66 83 c0 01	 add	 ax, 1
  00aa2	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN25@dtx_dec:
  00aa6	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00aaa	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00aad	7d 2a		 jge	 SHORT $LN23@dtx_dec

; 494  :    {
; 495  :       lsp_int[i] = mult(int_fac, st->lsp[i]);/* Q14 * Q15 -> Q14 */ move16();

  00aaf	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00ab3	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00ab6	0f b7 54 41 0c	 movzx	 edx, WORD PTR [ecx+eax*2+12]
  00abb	52		 push	 edx
  00abc	0f b7 45 d0	 movzx	 eax, WORD PTR _int_fac$[ebp]
  00ac0	50		 push	 eax
  00ac1	e8 00 00 00 00	 call	 _mult
  00ac6	83 c4 08	 add	 esp, 8
  00ac9	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  00acd	66 89 44 4d a8	 mov	 WORD PTR _lsp_int$[ebp+ecx*2], ax
  00ad2	e8 00 00 00 00	 call	 _move16

; 496  :    }

  00ad7	eb c1		 jmp	 SHORT $LN24@dtx_dec
$LN23@dtx_dec:

; 497  :    
; 498  :    int_fac = sub(16384, int_fac); /* 1-k in Q14 */                  move16();

  00ad9	0f b7 45 d0	 movzx	 eax, WORD PTR _int_fac$[ebp]
  00add	50		 push	 eax
  00ade	68 00 40 00 00	 push	 16384			; 00004000H
  00ae3	e8 00 00 00 00	 call	 _sub
  00ae8	83 c4 08	 add	 esp, 8
  00aeb	66 89 45 d0	 mov	 WORD PTR _int_fac$[ebp], ax
  00aef	e8 00 00 00 00	 call	 _move16

; 499  : 
; 500  :    /* (Q14 * Q11 -> Q26) + Q26 -> Q26 */
; 501  :    L_log_en_int = L_mac(L_log_en_int, int_fac, st->old_log_en);

  00af4	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00af7	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00afb	51		 push	 ecx
  00afc	0f b7 55 d0	 movzx	 edx, WORD PTR _int_fac$[ebp]
  00b00	52		 push	 edx
  00b01	8b 45 c4	 mov	 eax, DWORD PTR _L_log_en_int$[ebp]
  00b04	50		 push	 eax
  00b05	e8 00 00 00 00	 call	 _L_mac
  00b0a	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b0d	89 45 c4	 mov	 DWORD PTR _L_log_en_int$[ebp], eax

; 502  :    for(i = 0; i < M; i++)

  00b10	33 c0		 xor	 eax, eax
  00b12	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  00b16	eb 0c		 jmp	 SHORT $LN22@dtx_dec
$LN21@dtx_dec:
  00b18	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00b1c	66 83 c0 01	 add	 ax, 1
  00b20	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN22@dtx_dec:
  00b24	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00b28	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00b2b	7d 62		 jge	 SHORT $LN20@dtx_dec

; 503  :    {
; 504  :       /* Q14 + (Q14 * Q15 -> Q14) -> Q14 */
; 505  :       lsp_int[i] = add(lsp_int[i], mult(int_fac, st->lsp_old[i]));  move16();

  00b2d	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00b31	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00b34	0f b7 54 41 20	 movzx	 edx, WORD PTR [ecx+eax*2+32]
  00b39	52		 push	 edx
  00b3a	0f b7 45 d0	 movzx	 eax, WORD PTR _int_fac$[ebp]
  00b3e	50		 push	 eax
  00b3f	e8 00 00 00 00	 call	 _mult
  00b44	83 c4 08	 add	 esp, 8
  00b47	0f b7 c8	 movzx	 ecx, ax
  00b4a	51		 push	 ecx
  00b4b	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  00b4f	0f b7 44 55 a8	 movzx	 eax, WORD PTR _lsp_int$[ebp+edx*2]
  00b54	50		 push	 eax
  00b55	e8 00 00 00 00	 call	 _add
  00b5a	83 c4 08	 add	 esp, 8
  00b5d	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  00b61	66 89 44 4d a8	 mov	 WORD PTR _lsp_int$[ebp+ecx*2], ax
  00b66	e8 00 00 00 00	 call	 _move16

; 506  :       lsp_int[i] = shl(lsp_int[i], 1); /* Q14 -> Q15 */             move16();

  00b6b	6a 01		 push	 1
  00b6d	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00b71	0f b7 4c 45 a8	 movzx	 ecx, WORD PTR _lsp_int$[ebp+eax*2]
  00b76	51		 push	 ecx
  00b77	e8 00 00 00 00	 call	 _shl
  00b7c	83 c4 08	 add	 esp, 8
  00b7f	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  00b83	66 89 44 55 a8	 mov	 WORD PTR _lsp_int$[ebp+edx*2], ax
  00b88	e8 00 00 00 00	 call	 _move16

; 507  :    }

  00b8d	eb 89		 jmp	 SHORT $LN21@dtx_dec
$LN20@dtx_dec:

; 508  :    
; 509  :    /* compute the amount of lsf variability */
; 510  :    lsf_variab_factor = sub(st->log_pg_mean,2457); /* -0.6 in Q12 */ move16();

  00b8f	68 99 09 00 00	 push	 2457			; 00000999H
  00b94	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00b97	0f b7 88 76 01
	00 00		 movzx	 ecx, WORD PTR [eax+374]
  00b9e	51		 push	 ecx
  00b9f	e8 00 00 00 00	 call	 _sub
  00ba4	83 c4 08	 add	 esp, 8
  00ba7	66 89 85 78 fe
	ff ff		 mov	 WORD PTR _lsf_variab_factor$[ebp], ax
  00bae	e8 00 00 00 00	 call	 _move16

; 511  :    /* *0.3 Q12*Q15 -> Q12 */
; 512  :    lsf_variab_factor = sub(4096, mult(lsf_variab_factor, 9830)); 

  00bb3	68 66 26 00 00	 push	 9830			; 00002666H
  00bb8	0f b7 85 78 fe
	ff ff		 movzx	 eax, WORD PTR _lsf_variab_factor$[ebp]
  00bbf	50		 push	 eax
  00bc0	e8 00 00 00 00	 call	 _mult
  00bc5	83 c4 08	 add	 esp, 8
  00bc8	0f b7 c8	 movzx	 ecx, ax
  00bcb	51		 push	 ecx
  00bcc	68 00 10 00 00	 push	 4096			; 00001000H
  00bd1	e8 00 00 00 00	 call	 _sub
  00bd6	83 c4 08	 add	 esp, 8
  00bd9	66 89 85 78 fe
	ff ff		 mov	 WORD PTR _lsf_variab_factor$[ebp], ax

; 513  : 
; 514  :    /* limit to values between 0..1 in Q12 */ 
; 515  :    test();

  00be0	e8 00 00 00 00	 call	 _test

; 516  :    if (sub(lsf_variab_factor, 4096) > 0)

  00be5	68 00 10 00 00	 push	 4096			; 00001000H
  00bea	0f b7 85 78 fe
	ff ff		 movzx	 eax, WORD PTR _lsf_variab_factor$[ebp]
  00bf1	50		 push	 eax
  00bf2	e8 00 00 00 00	 call	 _sub
  00bf7	83 c4 08	 add	 esp, 8
  00bfa	0f bf c8	 movsx	 ecx, ax
  00bfd	85 c9		 test	 ecx, ecx
  00bff	7e 11		 jle	 SHORT $LN19@dtx_dec

; 517  :    {
; 518  :       lsf_variab_factor = 4096;                                     move16();

  00c01	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  00c06	66 89 85 78 fe
	ff ff		 mov	 WORD PTR _lsf_variab_factor$[ebp], ax
  00c0d	e8 00 00 00 00	 call	 _move16
$LN19@dtx_dec:

; 519  :    }
; 520  :    test();

  00c12	e8 00 00 00 00	 call	 _test

; 521  :    if (lsf_variab_factor < 0)

  00c17	0f bf 85 78 fe
	ff ff		 movsx	 eax, WORD PTR _lsf_variab_factor$[ebp]
  00c1e	85 c0		 test	 eax, eax
  00c20	7d 0e		 jge	 SHORT $LN18@dtx_dec

; 522  :    {
; 523  :       lsf_variab_factor = 0;                                        move16(); 

  00c22	33 c0		 xor	 eax, eax
  00c24	66 89 85 78 fe
	ff ff		 mov	 WORD PTR _lsf_variab_factor$[ebp], ax
  00c2b	e8 00 00 00 00	 call	 _move16
$LN18@dtx_dec:

; 524  :    }
; 525  :    lsf_variab_factor = shl(lsf_variab_factor, 3); /* -> Q15 */      move16();

  00c30	6a 03		 push	 3
  00c32	0f b7 85 78 fe
	ff ff		 movzx	 eax, WORD PTR _lsf_variab_factor$[ebp]
  00c39	50		 push	 eax
  00c3a	e8 00 00 00 00	 call	 _shl
  00c3f	83 c4 08	 add	 esp, 8
  00c42	66 89 85 78 fe
	ff ff		 mov	 WORD PTR _lsf_variab_factor$[ebp], ax
  00c49	e8 00 00 00 00	 call	 _move16

; 526  : 
; 527  :    /* get index of vector to do variability with */
; 528  :    lsf_variab_index = pseudonoise(&st->L_pn_seed_rx, 3);            move16();

  00c4e	6a 03		 push	 3
  00c50	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00c53	83 c0 08	 add	 eax, 8
  00c56	50		 push	 eax
  00c57	e8 00 00 00 00	 call	 _pseudonoise
  00c5c	83 c4 08	 add	 esp, 8
  00c5f	66 89 85 84 fe
	ff ff		 mov	 WORD PTR _lsf_variab_index$[ebp], ax
  00c66	e8 00 00 00 00	 call	 _move16

; 529  : 
; 530  :    /* convert to lsf */
; 531  :    Lsp_lsf(lsp_int, lsf_int, M);

  00c6b	6a 0a		 push	 10			; 0000000aH
  00c6d	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _lsf_int$[ebp]
  00c73	50		 push	 eax
  00c74	8d 4d a8	 lea	 ecx, DWORD PTR _lsp_int$[ebp]
  00c77	51		 push	 ecx
  00c78	e8 00 00 00 00	 call	 _Lsp_lsf
  00c7d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 532  : 
; 533  :    /* apply lsf variability */
; 534  :    Copy(lsf_int, lsf_int_variab, M);

  00c80	6a 0a		 push	 10			; 0000000aH
  00c82	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _lsf_int_variab$[ebp]
  00c88	50		 push	 eax
  00c89	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _lsf_int$[ebp]
  00c8f	51		 push	 ecx
  00c90	e8 00 00 00 00	 call	 _Copy
  00c95	83 c4 0c	 add	 esp, 12			; 0000000cH

; 535  :    for(i = 0; i < M; i++)

  00c98	33 c0		 xor	 eax, eax
  00c9a	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  00c9e	eb 0c		 jmp	 SHORT $LN17@dtx_dec
$LN16@dtx_dec:
  00ca0	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00ca4	66 83 c0 01	 add	 ax, 1
  00ca8	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN17@dtx_dec:
  00cac	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00cb0	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00cb3	7d 58		 jge	 SHORT $LN15@dtx_dec

; 536  :    {
; 537  :       move16();

  00cb5	e8 00 00 00 00	 call	 _move16

; 538  :       lsf_int_variab[i] = add(lsf_int_variab[i], 
; 539  :                               mult(lsf_variab_factor,
; 540  :                                    st->lsf_hist_mean[i+lsf_variab_index*M]));

  00cba	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00cbe	0f bf 8d 84 fe
	ff ff		 movsx	 ecx, WORD PTR _lsf_variab_index$[ebp]
  00cc5	6b d1 0a	 imul	 edx, ecx, 10
  00cc8	03 c2		 add	 eax, edx
  00cca	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00ccd	0f b7 94 41 d6
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+214]
  00cd5	52		 push	 edx
  00cd6	0f b7 85 78 fe
	ff ff		 movzx	 eax, WORD PTR _lsf_variab_factor$[ebp]
  00cdd	50		 push	 eax
  00cde	e8 00 00 00 00	 call	 _mult
  00ce3	83 c4 08	 add	 esp, 8
  00ce6	0f b7 c8	 movzx	 ecx, ax
  00ce9	51		 push	 ecx
  00cea	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  00cee	0f b7 84 55 40
	fe ff ff	 movzx	 eax, WORD PTR _lsf_int_variab$[ebp+edx*2]
  00cf6	50		 push	 eax
  00cf7	e8 00 00 00 00	 call	 _add
  00cfc	83 c4 08	 add	 esp, 8
  00cff	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  00d03	66 89 84 4d 40
	fe ff ff	 mov	 WORD PTR _lsf_int_variab$[ebp+ecx*2], ax

; 541  :    }

  00d0b	eb 93		 jmp	 SHORT $LN16@dtx_dec
$LN15@dtx_dec:

; 542  : 
; 543  :    /* make sure that LSP's are ordered */
; 544  :    Reorder_lsf(lsf_int, LSF_GAP, M);

  00d0d	6a 0a		 push	 10			; 0000000aH
  00d0f	68 cd 00 00 00	 push	 205			; 000000cdH
  00d14	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _lsf_int$[ebp]
  00d1a	50		 push	 eax
  00d1b	e8 00 00 00 00	 call	 _Reorder_lsf
  00d20	83 c4 0c	 add	 esp, 12			; 0000000cH

; 545  :    Reorder_lsf(lsf_int_variab, LSF_GAP, M);

  00d23	6a 0a		 push	 10			; 0000000aH
  00d25	68 cd 00 00 00	 push	 205			; 000000cdH
  00d2a	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _lsf_int_variab$[ebp]
  00d30	50		 push	 eax
  00d31	e8 00 00 00 00	 call	 _Reorder_lsf
  00d36	83 c4 0c	 add	 esp, 12			; 0000000cH

; 546  : 
; 547  :    /* copy lsf to speech decoders lsf state */
; 548  :    Copy(lsf_int, lsfState->past_lsf_q, M);

  00d39	6a 0a		 push	 10			; 0000000aH
  00d3b	8b 45 10	 mov	 eax, DWORD PTR _lsfState$[ebp]
  00d3e	83 c0 14	 add	 eax, 20			; 00000014H
  00d41	50		 push	 eax
  00d42	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _lsf_int$[ebp]
  00d48	51		 push	 ecx
  00d49	e8 00 00 00 00	 call	 _Copy
  00d4e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 549  : 
; 550  :    /* convert to lsp */
; 551  :    Lsf_lsp(lsf_int, lsp_int, M);

  00d51	6a 0a		 push	 10			; 0000000aH
  00d53	8d 45 a8	 lea	 eax, DWORD PTR _lsp_int$[ebp]
  00d56	50		 push	 eax
  00d57	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _lsf_int$[ebp]
  00d5d	51		 push	 ecx
  00d5e	e8 00 00 00 00	 call	 _Lsf_lsp
  00d63	83 c4 0c	 add	 esp, 12			; 0000000cH

; 552  :    Lsf_lsp(lsf_int_variab, lsp_int_variab, M);

  00d66	6a 0a		 push	 10			; 0000000aH
  00d68	8d 85 24 fe ff
	ff		 lea	 eax, DWORD PTR _lsp_int_variab$[ebp]
  00d6e	50		 push	 eax
  00d6f	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _lsf_int_variab$[ebp]
  00d75	51		 push	 ecx
  00d76	e8 00 00 00 00	 call	 _Lsf_lsp
  00d7b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 553  : 
; 554  :    /* Compute acoeffs Q12 acoeff is used for level    * 
; 555  :     * normalization and postfilter, acoeff_variab is  *
; 556  :     * used for synthesis filter                       *
; 557  :     * by doing this we make sure that the level       *
; 558  :     * in high frequenncies does not jump up and down  */
; 559  : 
; 560  :    Lsp_Az(lsp_int, acoeff);

  00d7e	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _acoeff$[ebp]
  00d84	50		 push	 eax
  00d85	8d 4d a8	 lea	 ecx, DWORD PTR _lsp_int$[ebp]
  00d88	51		 push	 ecx
  00d89	e8 00 00 00 00	 call	 _Lsp_Az
  00d8e	83 c4 08	 add	 esp, 8

; 561  :    Lsp_Az(lsp_int_variab, acoeff_variab);

  00d91	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _acoeff_variab$[ebp]
  00d97	50		 push	 eax
  00d98	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR _lsp_int_variab$[ebp]
  00d9e	51		 push	 ecx
  00d9f	e8 00 00 00 00	 call	 _Lsp_Az
  00da4	83 c4 08	 add	 esp, 8

; 562  :    
; 563  :    /* For use in postfilter */
; 564  :    Copy(acoeff, &A_t[0],           M + 1);

  00da7	6a 0b		 push	 11			; 0000000bH
  00da9	b8 02 00 00 00	 mov	 eax, 2
  00dae	6b c8 00	 imul	 ecx, eax, 0
  00db1	03 4d 2c	 add	 ecx, DWORD PTR _A_t$[ebp]
  00db4	51		 push	 ecx
  00db5	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _acoeff$[ebp]
  00dbb	52		 push	 edx
  00dbc	e8 00 00 00 00	 call	 _Copy
  00dc1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 565  :    Copy(acoeff, &A_t[M + 1],       M + 1);

  00dc4	6a 0b		 push	 11			; 0000000bH
  00dc6	b8 02 00 00 00	 mov	 eax, 2
  00dcb	6b c8 0b	 imul	 ecx, eax, 11
  00dce	03 4d 2c	 add	 ecx, DWORD PTR _A_t$[ebp]
  00dd1	51		 push	 ecx
  00dd2	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _acoeff$[ebp]
  00dd8	52		 push	 edx
  00dd9	e8 00 00 00 00	 call	 _Copy
  00dde	83 c4 0c	 add	 esp, 12			; 0000000cH

; 566  :    Copy(acoeff, &A_t[2 * (M + 1)], M + 1);

  00de1	6a 0b		 push	 11			; 0000000bH
  00de3	b8 02 00 00 00	 mov	 eax, 2
  00de8	6b c8 16	 imul	 ecx, eax, 22
  00deb	03 4d 2c	 add	 ecx, DWORD PTR _A_t$[ebp]
  00dee	51		 push	 ecx
  00def	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _acoeff$[ebp]
  00df5	52		 push	 edx
  00df6	e8 00 00 00 00	 call	 _Copy
  00dfb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 567  :    Copy(acoeff, &A_t[3 * (M + 1)], M + 1);

  00dfe	6a 0b		 push	 11			; 0000000bH
  00e00	b8 02 00 00 00	 mov	 eax, 2
  00e05	6b c8 21	 imul	 ecx, eax, 33
  00e08	03 4d 2c	 add	 ecx, DWORD PTR _A_t$[ebp]
  00e0b	51		 push	 ecx
  00e0c	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _acoeff$[ebp]
  00e12	52		 push	 edx
  00e13	e8 00 00 00 00	 call	 _Copy
  00e18	83 c4 0c	 add	 esp, 12			; 0000000cH

; 568  :    
; 569  :    /* Compute reflection coefficients Q15 */
; 570  :    A_Refl(&acoeff[1], refl);

  00e1b	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _refl$[ebp]
  00e21	50		 push	 eax
  00e22	b9 02 00 00 00	 mov	 ecx, 2
  00e27	c1 e1 00	 shl	 ecx, 0
  00e2a	8d 94 0d 64 ff
	ff ff		 lea	 edx, DWORD PTR _acoeff$[ebp+ecx]
  00e31	52		 push	 edx
  00e32	e8 00 00 00 00	 call	 _A_Refl
  00e37	83 c4 08	 add	 esp, 8

; 571  :    
; 572  :    /* Compute prediction error in Q15 */
; 573  :    pred_err = MAX_16; /* 0.99997 in Q15 */                          move16();

  00e3a	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00e3f	66 89 85 3c ff
	ff ff		 mov	 WORD PTR _pred_err$[ebp], ax
  00e46	e8 00 00 00 00	 call	 _move16

; 574  :    for (i = 0; i < M; i++)

  00e4b	33 c0		 xor	 eax, eax
  00e4d	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  00e51	eb 0c		 jmp	 SHORT $LN14@dtx_dec
$LN13@dtx_dec:
  00e53	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  00e57	66 83 c0 01	 add	 ax, 1
  00e5b	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN14@dtx_dec:
  00e5f	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00e63	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00e66	7d 50		 jge	 SHORT $LN12@dtx_dec

; 575  :    { 
; 576  :       pred_err = mult(pred_err, sub(MAX_16, mult(refl[i], refl[i])));

  00e68	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  00e6c	0f b7 8c 45 48
	ff ff ff	 movzx	 ecx, WORD PTR _refl$[ebp+eax*2]
  00e74	51		 push	 ecx
  00e75	0f bf 55 e8	 movsx	 edx, WORD PTR _i$[ebp]
  00e79	0f b7 84 55 48
	ff ff ff	 movzx	 eax, WORD PTR _refl$[ebp+edx*2]
  00e81	50		 push	 eax
  00e82	e8 00 00 00 00	 call	 _mult
  00e87	83 c4 08	 add	 esp, 8
  00e8a	0f b7 c8	 movzx	 ecx, ax
  00e8d	51		 push	 ecx
  00e8e	68 ff 7f 00 00	 push	 32767			; 00007fffH
  00e93	e8 00 00 00 00	 call	 _sub
  00e98	83 c4 08	 add	 esp, 8
  00e9b	0f b7 d0	 movzx	 edx, ax
  00e9e	52		 push	 edx
  00e9f	0f b7 85 3c ff
	ff ff		 movzx	 eax, WORD PTR _pred_err$[ebp]
  00ea6	50		 push	 eax
  00ea7	e8 00 00 00 00	 call	 _mult
  00eac	83 c4 08	 add	 esp, 8
  00eaf	66 89 85 3c ff
	ff ff		 mov	 WORD PTR _pred_err$[ebp], ax

; 577  :    }

  00eb6	eb 9b		 jmp	 SHORT $LN13@dtx_dec
$LN12@dtx_dec:

; 578  : 
; 579  :    /* compute logarithm of prediction gain */   
; 580  :    Log2(L_deposit_l(pred_err), &log_pg_e, &log_pg_m);

  00eb8	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _log_pg_m$[ebp]
  00ebe	50		 push	 eax
  00ebf	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _log_pg_e$[ebp]
  00ec5	51		 push	 ecx
  00ec6	0f b7 95 3c ff
	ff ff		 movzx	 edx, WORD PTR _pred_err$[ebp]
  00ecd	52		 push	 edx
  00ece	e8 00 00 00 00	 call	 _L_deposit_l
  00ed3	83 c4 04	 add	 esp, 4
  00ed6	50		 push	 eax
  00ed7	e8 00 00 00 00	 call	 _Log2
  00edc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 581  :    
; 582  :    /* convert exponent and mantissa to Word16 Q12 */
; 583  :    log_pg = shl(sub(log_pg_e,15), 12);  /* Q12 */                   move16();

  00edf	6a 0c		 push	 12			; 0000000cH
  00ee1	6a 0f		 push	 15			; 0000000fH
  00ee3	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _log_pg_e$[ebp]
  00eea	50		 push	 eax
  00eeb	e8 00 00 00 00	 call	 _sub
  00ef0	83 c4 08	 add	 esp, 8
  00ef3	0f b7 c8	 movzx	 ecx, ax
  00ef6	51		 push	 ecx
  00ef7	e8 00 00 00 00	 call	 _shl
  00efc	83 c4 08	 add	 esp, 8
  00eff	66 89 85 b4 fe
	ff ff		 mov	 WORD PTR _log_pg$[ebp], ax
  00f06	e8 00 00 00 00	 call	 _move16

; 584  :    log_pg = shr(sub(0,add(log_pg, shr(log_pg_m, 15-12))), 1);       move16();

  00f0b	6a 01		 push	 1
  00f0d	6a 03		 push	 3
  00f0f	0f b7 85 c0 fe
	ff ff		 movzx	 eax, WORD PTR _log_pg_m$[ebp]
  00f16	50		 push	 eax
  00f17	e8 00 00 00 00	 call	 _shr
  00f1c	83 c4 08	 add	 esp, 8
  00f1f	0f b7 c8	 movzx	 ecx, ax
  00f22	51		 push	 ecx
  00f23	0f b7 95 b4 fe
	ff ff		 movzx	 edx, WORD PTR _log_pg$[ebp]
  00f2a	52		 push	 edx
  00f2b	e8 00 00 00 00	 call	 _add
  00f30	83 c4 08	 add	 esp, 8
  00f33	0f b7 c0	 movzx	 eax, ax
  00f36	50		 push	 eax
  00f37	6a 00		 push	 0
  00f39	e8 00 00 00 00	 call	 _sub
  00f3e	83 c4 08	 add	 esp, 8
  00f41	0f b7 c8	 movzx	 ecx, ax
  00f44	51		 push	 ecx
  00f45	e8 00 00 00 00	 call	 _shr
  00f4a	83 c4 08	 add	 esp, 8
  00f4d	66 89 85 b4 fe
	ff ff		 mov	 WORD PTR _log_pg$[ebp], ax
  00f54	e8 00 00 00 00	 call	 _move16

; 585  :    st->log_pg_mean = add(mult(29491,st->log_pg_mean),
; 586  :                          mult(3277, log_pg));                       move16();

  00f59	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _log_pg$[ebp]
  00f60	50		 push	 eax
  00f61	68 cd 0c 00 00	 push	 3277			; 00000ccdH
  00f66	e8 00 00 00 00	 call	 _mult
  00f6b	83 c4 08	 add	 esp, 8
  00f6e	0f b7 c8	 movzx	 ecx, ax
  00f71	51		 push	 ecx
  00f72	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00f75	0f b7 82 76 01
	00 00		 movzx	 eax, WORD PTR [edx+374]
  00f7c	50		 push	 eax
  00f7d	68 33 73 00 00	 push	 29491			; 00007333H
  00f82	e8 00 00 00 00	 call	 _mult
  00f87	83 c4 08	 add	 esp, 8
  00f8a	0f b7 c8	 movzx	 ecx, ax
  00f8d	51		 push	 ecx
  00f8e	e8 00 00 00 00	 call	 _add
  00f93	83 c4 08	 add	 esp, 8
  00f96	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00f99	66 89 82 76 01
	00 00		 mov	 WORD PTR [edx+374], ax
  00fa0	e8 00 00 00 00	 call	 _move16

; 587  : 
; 588  :    /* Compute interpolated log energy */
; 589  :    L_log_en_int = L_shr(L_log_en_int, 10); /* Q26 -> Q16 */         move32();

  00fa5	6a 0a		 push	 10			; 0000000aH
  00fa7	8b 45 c4	 mov	 eax, DWORD PTR _L_log_en_int$[ebp]
  00faa	50		 push	 eax
  00fab	e8 00 00 00 00	 call	 _L_shr
  00fb0	83 c4 08	 add	 esp, 8
  00fb3	89 45 c4	 mov	 DWORD PTR _L_log_en_int$[ebp], eax
  00fb6	e8 00 00 00 00	 call	 _move32

; 590  : 
; 591  :    /* Add 4 in Q16 */
; 592  :    L_log_en_int = L_add(L_log_en_int, 4 * 65536L);                  move32();

  00fbb	68 00 00 04 00	 push	 262144			; 00040000H
  00fc0	8b 45 c4	 mov	 eax, DWORD PTR _L_log_en_int$[ebp]
  00fc3	50		 push	 eax
  00fc4	e8 00 00 00 00	 call	 _L_add
  00fc9	83 c4 08	 add	 esp, 8
  00fcc	89 45 c4	 mov	 DWORD PTR _L_log_en_int$[ebp], eax
  00fcf	e8 00 00 00 00	 call	 _move32

; 593  : 
; 594  :    /* subtract prediction gain */
; 595  :    L_log_en_int = L_sub(L_log_en_int, L_shl(L_deposit_l(log_pg), 4));move32();

  00fd4	6a 04		 push	 4
  00fd6	0f b7 85 b4 fe
	ff ff		 movzx	 eax, WORD PTR _log_pg$[ebp]
  00fdd	50		 push	 eax
  00fde	e8 00 00 00 00	 call	 _L_deposit_l
  00fe3	83 c4 04	 add	 esp, 4
  00fe6	50		 push	 eax
  00fe7	e8 00 00 00 00	 call	 _L_shl
  00fec	83 c4 08	 add	 esp, 8
  00fef	50		 push	 eax
  00ff0	8b 4d c4	 mov	 ecx, DWORD PTR _L_log_en_int$[ebp]
  00ff3	51		 push	 ecx
  00ff4	e8 00 00 00 00	 call	 _L_sub
  00ff9	83 c4 08	 add	 esp, 8
  00ffc	89 45 c4	 mov	 DWORD PTR _L_log_en_int$[ebp], eax
  00fff	e8 00 00 00 00	 call	 _move32

; 596  : 
; 597  :    /* adjust level to speech coder mode */
; 598  :    L_log_en_int = L_add(L_log_en_int, 
; 599  :                         L_shl(L_deposit_l(st->log_en_adjust), 5));  move32();

  01004	6a 05		 push	 5
  01006	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  01009	0f b7 88 8a 01
	00 00		 movzx	 ecx, WORD PTR [eax+394]
  01010	51		 push	 ecx
  01011	e8 00 00 00 00	 call	 _L_deposit_l
  01016	83 c4 04	 add	 esp, 4
  01019	50		 push	 eax
  0101a	e8 00 00 00 00	 call	 _L_shl
  0101f	83 c4 08	 add	 esp, 8
  01022	50		 push	 eax
  01023	8b 55 c4	 mov	 edx, DWORD PTR _L_log_en_int$[ebp]
  01026	52		 push	 edx
  01027	e8 00 00 00 00	 call	 _L_add
  0102c	83 c4 08	 add	 esp, 8
  0102f	89 45 c4	 mov	 DWORD PTR _L_log_en_int$[ebp], eax
  01032	e8 00 00 00 00	 call	 _move32

; 600  :        
; 601  :    log_en_int_e = extract_h(L_log_en_int);                    move16();

  01037	8b 45 c4	 mov	 eax, DWORD PTR _L_log_en_int$[ebp]
  0103a	50		 push	 eax
  0103b	e8 00 00 00 00	 call	 _extract_h
  01040	83 c4 04	 add	 esp, 4
  01043	66 89 45 9c	 mov	 WORD PTR _log_en_int_e$[ebp], ax
  01047	e8 00 00 00 00	 call	 _move16

; 602  :    move16();

  0104c	e8 00 00 00 00	 call	 _move16

; 603  :    log_en_int_m = extract_l(L_shr(L_sub(L_log_en_int, 
; 604  :                                         L_deposit_h(log_en_int_e)), 1));

  01051	6a 01		 push	 1
  01053	0f b7 45 9c	 movzx	 eax, WORD PTR _log_en_int_e$[ebp]
  01057	50		 push	 eax
  01058	e8 00 00 00 00	 call	 _L_deposit_h
  0105d	83 c4 04	 add	 esp, 4
  01060	50		 push	 eax
  01061	8b 4d c4	 mov	 ecx, DWORD PTR _L_log_en_int$[ebp]
  01064	51		 push	 ecx
  01065	e8 00 00 00 00	 call	 _L_sub
  0106a	83 c4 08	 add	 esp, 8
  0106d	50		 push	 eax
  0106e	e8 00 00 00 00	 call	 _L_shr
  01073	83 c4 08	 add	 esp, 8
  01076	50		 push	 eax
  01077	e8 00 00 00 00	 call	 _extract_l
  0107c	83 c4 04	 add	 esp, 4
  0107f	66 89 45 90	 mov	 WORD PTR _log_en_int_m$[ebp], ax

; 605  :    level = extract_l(Pow2(log_en_int_e, log_en_int_m)); /* Q4 */ move16();

  01083	0f b7 45 90	 movzx	 eax, WORD PTR _log_en_int_m$[ebp]
  01087	50		 push	 eax
  01088	0f b7 4d 9c	 movzx	 ecx, WORD PTR _log_en_int_e$[ebp]
  0108c	51		 push	 ecx
  0108d	e8 00 00 00 00	 call	 _Pow2
  01092	83 c4 08	 add	 esp, 8
  01095	50		 push	 eax
  01096	e8 00 00 00 00	 call	 _extract_l
  0109b	83 c4 04	 add	 esp, 4
  0109e	66 89 45 84	 mov	 WORD PTR _level$[ebp], ax
  010a2	e8 00 00 00 00	 call	 _move16

; 606  :    
; 607  :    for (i = 0; i < 4; i++)

  010a7	33 c0		 xor	 eax, eax
  010a9	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
  010ad	eb 0c		 jmp	 SHORT $LN11@dtx_dec
$LN10@dtx_dec:
  010af	66 8b 45 e8	 mov	 ax, WORD PTR _i$[ebp]
  010b3	66 83 c0 01	 add	 ax, 1
  010b7	66 89 45 e8	 mov	 WORD PTR _i$[ebp], ax
$LN11@dtx_dec:
  010bb	0f bf 45 e8	 movsx	 eax, WORD PTR _i$[ebp]
  010bf	83 f8 04	 cmp	 eax, 4
  010c2	0f 8d 91 00 00
	00		 jge	 $LN9@dtx_dec

; 608  :    {             
; 609  :       /* Compute innovation vector */
; 610  :       build_CN_code(&st->L_pn_seed_rx, ex);

  010c8	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _ex$[ebp]
  010ce	50		 push	 eax
  010cf	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  010d2	83 c1 08	 add	 ecx, 8
  010d5	51		 push	 ecx
  010d6	e8 00 00 00 00	 call	 _build_CN_code
  010db	83 c4 08	 add	 esp, 8

; 611  :       for (j = 0; j < L_SUBFR; j++)

  010de	33 c0		 xor	 eax, eax
  010e0	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
  010e4	eb 0c		 jmp	 SHORT $LN8@dtx_dec
$LN7@dtx_dec:
  010e6	66 8b 45 dc	 mov	 ax, WORD PTR _j$[ebp]
  010ea	66 83 c0 01	 add	 ax, 1
  010ee	66 89 45 dc	 mov	 WORD PTR _j$[ebp], ax
$LN8@dtx_dec:
  010f2	0f bf 45 dc	 movsx	 eax, WORD PTR _j$[ebp]
  010f6	83 f8 28	 cmp	 eax, 40			; 00000028H
  010f9	7d 2d		 jge	 SHORT $LN6@dtx_dec

; 612  :       {
; 613  :          ex[j] = mult(level, ex[j]);                                move16();

  010fb	0f bf 45 dc	 movsx	 eax, WORD PTR _j$[ebp]
  010ff	0f b7 8c 45 e4
	fe ff ff	 movzx	 ecx, WORD PTR _ex$[ebp+eax*2]
  01107	51		 push	 ecx
  01108	0f b7 55 84	 movzx	 edx, WORD PTR _level$[ebp]
  0110c	52		 push	 edx
  0110d	e8 00 00 00 00	 call	 _mult
  01112	83 c4 08	 add	 esp, 8
  01115	0f bf 4d dc	 movsx	 ecx, WORD PTR _j$[ebp]
  01119	66 89 84 4d e4
	fe ff ff	 mov	 WORD PTR _ex$[ebp+ecx*2], ax
  01121	e8 00 00 00 00	 call	 _move16

; 614  :       }

  01126	eb be		 jmp	 SHORT $LN7@dtx_dec
$LN6@dtx_dec:

; 615  :       /* Synthesize */
; 616  :       Syn_filt(acoeff_variab, ex, &synth[i * L_SUBFR], L_SUBFR, 
; 617  :                mem_syn, 1);

  01128	6a 01		 push	 1
  0112a	8b 45 0c	 mov	 eax, DWORD PTR _mem_syn$[ebp]
  0112d	50		 push	 eax
  0112e	6a 28		 push	 40			; 00000028H
  01130	0f bf 4d e8	 movsx	 ecx, WORD PTR _i$[ebp]
  01134	6b d1 28	 imul	 edx, ecx, 40
  01137	8b 45 28	 mov	 eax, DWORD PTR _synth$[ebp]
  0113a	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0113d	51		 push	 ecx
  0113e	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _ex$[ebp]
  01144	52		 push	 edx
  01145	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _acoeff_variab$[ebp]
  0114b	50		 push	 eax
  0114c	e8 00 00 00 00	 call	 _Syn_filt
  01151	83 c4 18	 add	 esp, 24			; 00000018H

; 618  :       
; 619  :    } /* next i */

  01154	e9 56 ff ff ff	 jmp	 $LN10@dtx_dec
$LN9@dtx_dec:

; 620  :    
; 621  :    /* reset codebook averaging variables */ 
; 622  :    averState->hangVar = 20;                                         move16();

  01159	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0115e	8b 4d 18	 mov	 ecx, DWORD PTR _averState$[ebp]
  01161	66 89 41 0e	 mov	 WORD PTR [ecx+14], ax
  01165	e8 00 00 00 00	 call	 _move16

; 623  :    averState->hangCount = 0;                                        move16();

  0116a	33 c0		 xor	 eax, eax
  0116c	8b 4d 18	 mov	 ecx, DWORD PTR _averState$[ebp]
  0116f	66 89 41 10	 mov	 WORD PTR [ecx+16], ax
  01173	e8 00 00 00 00	 call	 _move16

; 624  :     
; 625  :    test();

  01178	e8 00 00 00 00	 call	 _test

; 626  :    if (sub(new_state, DTX_MUTE) == 0)

  0117d	6a 02		 push	 2
  0117f	0f b7 45 1c	 movzx	 eax, WORD PTR _new_state$[ebp]
  01183	50		 push	 eax
  01184	e8 00 00 00 00	 call	 _sub
  01189	83 c4 08	 add	 esp, 8
  0118c	0f bf c8	 movsx	 ecx, ax
  0118f	85 c9		 test	 ecx, ecx
  01191	0f 85 ea 00 00
	00		 jne	 $LN5@dtx_dec

; 627  :    {
; 628  :       /* mute comfort noise as it has been quite a long time since  
; 629  :        * last SID update  was performed                            */
; 630  :       
; 631  :       tmp_int_length = st->since_last_sid;                          move16();

  01197	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0119a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0119d	66 89 8d a0 fd
	ff ff		 mov	 WORD PTR _tmp_int_length$[ebp], cx
  011a4	e8 00 00 00 00	 call	 _move16

; 632  :       test();

  011a9	e8 00 00 00 00	 call	 _test

; 633  :       if (sub(tmp_int_length, 32) > 0)

  011ae	6a 20		 push	 32			; 00000020H
  011b0	0f b7 85 a0 fd
	ff ff		 movzx	 eax, WORD PTR _tmp_int_length$[ebp]
  011b7	50		 push	 eax
  011b8	e8 00 00 00 00	 call	 _sub
  011bd	83 c4 08	 add	 esp, 8
  011c0	0f bf c8	 movsx	 ecx, ax
  011c3	85 c9		 test	 ecx, ecx
  011c5	7e 11		 jle	 SHORT $LN4@dtx_dec

; 634  :       {
; 635  :          tmp_int_length = 32;                                       move16();

  011c7	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  011cc	66 89 85 a0 fd
	ff ff		 mov	 WORD PTR _tmp_int_length$[ebp], ax
  011d3	e8 00 00 00 00	 call	 _move16
$LN4@dtx_dec:

; 636  :       }
; 637  :       
; 638  :       /* safety guard against division by zero */
; 639  :       test();

  011d8	e8 00 00 00 00	 call	 _test

; 640  :       if(tmp_int_length <= 0) {

  011dd	0f bf 85 a0 fd
	ff ff		 movsx	 eax, WORD PTR _tmp_int_length$[ebp]
  011e4	85 c0		 test	 eax, eax
  011e6	7f 11		 jg	 SHORT $LN3@dtx_dec

; 641  :          tmp_int_length = 8;                                       move16();

  011e8	b8 08 00 00 00	 mov	 eax, 8
  011ed	66 89 85 a0 fd
	ff ff		 mov	 WORD PTR _tmp_int_length$[ebp], ax
  011f4	e8 00 00 00 00	 call	 _move16
$LN3@dtx_dec:

; 642  :       }      
; 643  :       
; 644  :       move16();

  011f9	e8 00 00 00 00	 call	 _move16

; 645  :       st->true_sid_period_inv = div_s(1 << 10, shl(tmp_int_length, 10)); 

  011fe	6a 0a		 push	 10			; 0000000aH
  01200	0f b7 85 a0 fd
	ff ff		 movzx	 eax, WORD PTR _tmp_int_length$[ebp]
  01207	50		 push	 eax
  01208	e8 00 00 00 00	 call	 _shl
  0120d	83 c4 08	 add	 esp, 8
  01210	0f b7 c8	 movzx	 ecx, ax
  01213	51		 push	 ecx
  01214	68 00 04 00 00	 push	 1024			; 00000400H
  01219	e8 00 00 00 00	 call	 _div_s
  0121e	83 c4 08	 add	 esp, 8
  01221	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  01224	66 89 42 02	 mov	 WORD PTR [edx+2], ax

; 646  : 
; 647  :       st->since_last_sid = 0;                                       move16();

  01228	33 c0		 xor	 eax, eax
  0122a	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0122d	66 89 01	 mov	 WORD PTR [ecx], ax
  01230	e8 00 00 00 00	 call	 _move16

; 648  :       Copy(st->lsp, st->lsp_old, M);

  01235	6a 0a		 push	 10			; 0000000aH
  01237	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0123a	83 c0 20	 add	 eax, 32			; 00000020H
  0123d	50		 push	 eax
  0123e	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  01241	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01244	51		 push	 ecx
  01245	e8 00 00 00 00	 call	 _Copy
  0124a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 649  :       st->old_log_en = st->log_en;                                  move16();

  0124d	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  01250	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  01253	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  01257	66 89 50 06	 mov	 WORD PTR [eax+6], dx
  0125b	e8 00 00 00 00	 call	 _move16

; 650  :       /* subtract 1/8 in Q11 i.e -6/8 dB */
; 651  :       st->log_en = sub(st->log_en, 256);                            move16();  

  01260	68 00 01 00 00	 push	 256			; 00000100H
  01265	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  01268	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  0126c	51		 push	 ecx
  0126d	e8 00 00 00 00	 call	 _sub
  01272	83 c4 08	 add	 esp, 8
  01275	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  01278	66 89 42 04	 mov	 WORD PTR [edx+4], ax
  0127c	e8 00 00 00 00	 call	 _move16
$LN5@dtx_dec:

; 652  :    }
; 653  : 
; 654  :    /* reset interpolation length timer 
; 655  :     * if data has been updated.        */
; 656  :    test(); test(); test(); test();

  01281	e8 00 00 00 00	 call	 _test
  01286	e8 00 00 00 00	 call	 _test
  0128b	e8 00 00 00 00	 call	 _test
  01290	e8 00 00 00 00	 call	 _test

; 657  :    if ((st->sid_frame != 0) && 
; 658  :        ((st->valid_data != 0) || 
; 659  :         ((st->valid_data == 0) &&  (st->dtxHangoverAdded) != 0))) 

  01295	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  01298	0f bf 88 90 01
	00 00		 movsx	 ecx, WORD PTR [eax+400]
  0129f	85 c9		 test	 ecx, ecx
  012a1	74 4b		 je	 SHORT $LN2@dtx_dec
  012a3	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  012a6	0f bf 88 92 01
	00 00		 movsx	 ecx, WORD PTR [eax+402]
  012ad	85 c9		 test	 ecx, ecx
  012af	75 1c		 jne	 SHORT $LN1@dtx_dec
  012b1	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  012b4	0f bf 88 92 01
	00 00		 movsx	 ecx, WORD PTR [eax+402]
  012bb	85 c9		 test	 ecx, ecx
  012bd	75 2f		 jne	 SHORT $LN2@dtx_dec
  012bf	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  012c2	0f bf 88 94 01
	00 00		 movsx	 ecx, WORD PTR [eax+404]
  012c9	85 c9		 test	 ecx, ecx
  012cb	74 21		 je	 SHORT $LN2@dtx_dec
$LN1@dtx_dec:

; 660  :    {
; 661  :       st->since_last_sid =  0;                                      move16();

  012cd	33 c0		 xor	 eax, eax
  012cf	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  012d2	66 89 01	 mov	 WORD PTR [ecx], ax
  012d5	e8 00 00 00 00	 call	 _move16

; 662  :       st->data_updated = 1;                                         move16();

  012da	b8 01 00 00 00	 mov	 eax, 1
  012df	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  012e2	66 89 81 9c 01
	00 00		 mov	 WORD PTR [ecx+412], ax
  012e9	e8 00 00 00 00	 call	 _move16
$LN2@dtx_dec:

; 663  :    }
; 664  :          
; 665  :    return 0;

  012ee	33 c0		 xor	 eax, eax

; 666  : }

  012f0	52		 push	 edx
  012f1	8b cd		 mov	 ecx, ebp
  012f3	50		 push	 eax
  012f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN81@dtx_dec
  012fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  012ff	58		 pop	 eax
  01300	5a		 pop	 edx
  01301	5f		 pop	 edi
  01302	5e		 pop	 esi
  01303	5b		 pop	 ebx
  01304	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01307	33 cd		 xor	 ecx, ebp
  01309	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0130e	81 c4 24 03 00
	00		 add	 esp, 804		; 00000324H
  01314	3b ec		 cmp	 ebp, esp
  01316	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0131b	8b e5		 mov	 esp, ebp
  0131d	5d		 pop	 ebp
  0131e	c3		 ret	 0
  0131f	90		 npad	 1
$LN81@dtx_dec:
  01320	0c 00 00 00	 DD	 12			; 0000000cH
  01324	00 00 00 00	 DD	 $LN80@dtx_dec
$LN80@dtx_dec:
  01328	a8 ff ff ff	 DD	 -88			; ffffffa8H
  0132c	14 00 00 00	 DD	 20			; 00000014H
  01330	00 00 00 00	 DD	 $LN68@dtx_dec
  01334	64 ff ff ff	 DD	 -156			; ffffff64H
  01338	16 00 00 00	 DD	 22			; 00000016H
  0133c	00 00 00 00	 DD	 $LN69@dtx_dec
  01340	48 ff ff ff	 DD	 -184			; ffffff48H
  01344	14 00 00 00	 DD	 20			; 00000014H
  01348	00 00 00 00	 DD	 $LN70@dtx_dec
  0134c	e4 fe ff ff	 DD	 -284			; fffffee4H
  01350	50 00 00 00	 DD	 80			; 00000050H
  01354	00 00 00 00	 DD	 $LN71@dtx_dec
  01358	cc fe ff ff	 DD	 -308			; fffffeccH
  0135c	02 00 00 00	 DD	 2
  01360	00 00 00 00	 DD	 $LN72@dtx_dec
  01364	c0 fe ff ff	 DD	 -320			; fffffec0H
  01368	02 00 00 00	 DD	 2
  0136c	00 00 00 00	 DD	 $LN73@dtx_dec
  01370	5c fe ff ff	 DD	 -420			; fffffe5cH
  01374	14 00 00 00	 DD	 20			; 00000014H
  01378	00 00 00 00	 DD	 $LN74@dtx_dec
  0137c	40 fe ff ff	 DD	 -448			; fffffe40H
  01380	14 00 00 00	 DD	 20			; 00000014H
  01384	00 00 00 00	 DD	 $LN75@dtx_dec
  01388	24 fe ff ff	 DD	 -476			; fffffe24H
  0138c	14 00 00 00	 DD	 20			; 00000014H
  01390	00 00 00 00	 DD	 $LN76@dtx_dec
  01394	04 fe ff ff	 DD	 -508			; fffffe04H
  01398	16 00 00 00	 DD	 22			; 00000016H
  0139c	00 00 00 00	 DD	 $LN77@dtx_dec
  013a0	e8 fd ff ff	 DD	 -536			; fffffde8H
  013a4	14 00 00 00	 DD	 20			; 00000014H
  013a8	00 00 00 00	 DD	 $LN78@dtx_dec
  013ac	b8 fd ff ff	 DD	 -584			; fffffdb8H
  013b0	28 00 00 00	 DD	 40			; 00000028H
  013b4	00 00 00 00	 DD	 $LN79@dtx_dec
$LN79@dtx_dec:
  013b8	4c		 DB	 76			; 0000004cH
  013b9	5f		 DB	 95			; 0000005fH
  013ba	6c		 DB	 108			; 0000006cH
  013bb	73		 DB	 115			; 00000073H
  013bc	66		 DB	 102			; 00000066H
  013bd	00		 DB	 0
$LN78@dtx_dec:
  013be	6c		 DB	 108			; 0000006cH
  013bf	73		 DB	 115			; 00000073H
  013c0	66		 DB	 102			; 00000066H
  013c1	00		 DB	 0
$LN77@dtx_dec:
  013c2	61		 DB	 97			; 00000061H
  013c3	63		 DB	 99			; 00000063H
  013c4	6f		 DB	 111			; 0000006fH
  013c5	65		 DB	 101			; 00000065H
  013c6	66		 DB	 102			; 00000066H
  013c7	66		 DB	 102			; 00000066H
  013c8	5f		 DB	 95			; 0000005fH
  013c9	76		 DB	 118			; 00000076H
  013ca	61		 DB	 97			; 00000061H
  013cb	72		 DB	 114			; 00000072H
  013cc	69		 DB	 105			; 00000069H
  013cd	61		 DB	 97			; 00000061H
  013ce	62		 DB	 98			; 00000062H
  013cf	00		 DB	 0
$LN76@dtx_dec:
  013d0	6c		 DB	 108			; 0000006cH
  013d1	73		 DB	 115			; 00000073H
  013d2	70		 DB	 112			; 00000070H
  013d3	5f		 DB	 95			; 0000005fH
  013d4	69		 DB	 105			; 00000069H
  013d5	6e		 DB	 110			; 0000006eH
  013d6	74		 DB	 116			; 00000074H
  013d7	5f		 DB	 95			; 0000005fH
  013d8	76		 DB	 118			; 00000076H
  013d9	61		 DB	 97			; 00000061H
  013da	72		 DB	 114			; 00000072H
  013db	69		 DB	 105			; 00000069H
  013dc	61		 DB	 97			; 00000061H
  013dd	62		 DB	 98			; 00000062H
  013de	00		 DB	 0
$LN75@dtx_dec:
  013df	6c		 DB	 108			; 0000006cH
  013e0	73		 DB	 115			; 00000073H
  013e1	66		 DB	 102			; 00000066H
  013e2	5f		 DB	 95			; 0000005fH
  013e3	69		 DB	 105			; 00000069H
  013e4	6e		 DB	 110			; 0000006eH
  013e5	74		 DB	 116			; 00000074H
  013e6	5f		 DB	 95			; 0000005fH
  013e7	76		 DB	 118			; 00000076H
  013e8	61		 DB	 97			; 00000061H
  013e9	72		 DB	 114			; 00000072H
  013ea	69		 DB	 105			; 00000069H
  013eb	61		 DB	 97			; 00000061H
  013ec	62		 DB	 98			; 00000062H
  013ed	00		 DB	 0
$LN74@dtx_dec:
  013ee	6c		 DB	 108			; 0000006cH
  013ef	73		 DB	 115			; 00000073H
  013f0	66		 DB	 102			; 00000066H
  013f1	5f		 DB	 95			; 0000005fH
  013f2	69		 DB	 105			; 00000069H
  013f3	6e		 DB	 110			; 0000006eH
  013f4	74		 DB	 116			; 00000074H
  013f5	00		 DB	 0
$LN73@dtx_dec:
  013f6	6c		 DB	 108			; 0000006cH
  013f7	6f		 DB	 111			; 0000006fH
  013f8	67		 DB	 103			; 00000067H
  013f9	5f		 DB	 95			; 0000005fH
  013fa	70		 DB	 112			; 00000070H
  013fb	67		 DB	 103			; 00000067H
  013fc	5f		 DB	 95			; 0000005fH
  013fd	6d		 DB	 109			; 0000006dH
  013fe	00		 DB	 0
$LN72@dtx_dec:
  013ff	6c		 DB	 108			; 0000006cH
  01400	6f		 DB	 111			; 0000006fH
  01401	67		 DB	 103			; 00000067H
  01402	5f		 DB	 95			; 0000005fH
  01403	70		 DB	 112			; 00000070H
  01404	67		 DB	 103			; 00000067H
  01405	5f		 DB	 95			; 0000005fH
  01406	65		 DB	 101			; 00000065H
  01407	00		 DB	 0
$LN71@dtx_dec:
  01408	65		 DB	 101			; 00000065H
  01409	78		 DB	 120			; 00000078H
  0140a	00		 DB	 0
$LN70@dtx_dec:
  0140b	72		 DB	 114			; 00000072H
  0140c	65		 DB	 101			; 00000065H
  0140d	66		 DB	 102			; 00000066H
  0140e	6c		 DB	 108			; 0000006cH
  0140f	00		 DB	 0
$LN69@dtx_dec:
  01410	61		 DB	 97			; 00000061H
  01411	63		 DB	 99			; 00000063H
  01412	6f		 DB	 111			; 0000006fH
  01413	65		 DB	 101			; 00000065H
  01414	66		 DB	 102			; 00000066H
  01415	66		 DB	 102			; 00000066H
  01416	00		 DB	 0
$LN68@dtx_dec:
  01417	6c		 DB	 108			; 0000006cH
  01418	73		 DB	 115			; 00000073H
  01419	70		 DB	 112			; 00000070H
  0141a	5f		 DB	 95			; 0000005fH
  0141b	69		 DB	 105			; 00000069H
  0141c	6e		 DB	 110			; 0000006eH
  0141d	74		 DB	 116			; 00000074H
  0141e	00		 DB	 0
_dtx_dec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dtx_dec.c
;	COMDAT _dtx_dec_exit
_TEXT	SEGMENT
_st$ = 8						; size = 4
_dtx_dec_exit PROC					; COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 193  :    if (st == NULL || *st == NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _st$[ebp], 0
  00022	74 08		 je	 SHORT $LN1@dtx_dec_ex
  00024	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 02		 jne	 SHORT $LN2@dtx_dec_ex
$LN1@dtx_dec_ex:

; 194  :       return;

  0002c	eb 21		 jmp	 SHORT $LN3@dtx_dec_ex
$LN2@dtx_dec_ex:

; 195  :    
; 196  :    /* deallocate memory */
; 197  :    free(*st);

  0002e	8b f4		 mov	 esi, esp
  00030	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0003c	83 c4 04	 add	 esp, 4
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 198  :    *st = NULL;

  00046	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@dtx_dec_ex:

; 199  :    
; 200  :    return;
; 201  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_dtx_dec_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dtx_dec.c
;	COMDAT _dtx_dec_reset
_TEXT	SEGMENT
_i$ = -8						; size = 4
_st$ = 8						; size = 4
_dtx_dec_reset PROC					; COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 131  :    int i;
; 132  : 
; 133  :    if (st == (dtx_decState *) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _st$[ebp], 0
  00022	75 38		 jne	 SHORT $LN7@dtx_dec_re

; 134  :       fprintf(stderr, "dtx_dec_reset: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@OPKPKAGI@dtx_dec_reset?3?5invalid?5parameter@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 135  :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	e9 a2 01 00 00	 jmp	 $LN8@dtx_dec_re
$LN7@dtx_dec_re:

; 136  :    }
; 137  :    
; 138  :    st->since_last_sid = 0;

  0005c	33 c0		 xor	 eax, eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00061	66 89 01	 mov	 WORD PTR [ecx], ax

; 139  :    st->true_sid_period_inv = (1 << 13); 

  00064	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0006c	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 140  :  
; 141  :    st->log_en = 3500;  

  00070	b8 ac 0d 00 00	 mov	 eax, 3500		; 00000dacH
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00078	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 142  :    st->old_log_en = 3500;

  0007c	b8 ac 0d 00 00	 mov	 eax, 3500		; 00000dacH
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00084	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 143  :    /* low level noise for better performance in  DTX handover cases*/
; 144  :    
; 145  :    st->L_pn_seed_rx = PN_INITIAL_SEED;

  00088	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0008b	c7 40 08 58 69
	81 70		 mov	 DWORD PTR [eax+8], 1887529304 ; 70816958H

; 146  : 
; 147  :    /* Initialize state->lsp [] and state->lsp_old [] */
; 148  :    Copy(lsp_init_data, &st->lsp[0], M);

  00092	6a 0a		 push	 10			; 0000000aH
  00094	b8 02 00 00 00	 mov	 eax, 2
  00099	6b c8 00	 imul	 ecx, eax, 0
  0009c	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  0009f	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  000a3	50		 push	 eax
  000a4	68 00 00 00 00	 push	 OFFSET _lsp_init_data
  000a9	e8 00 00 00 00	 call	 _Copy
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 149  :    Copy(lsp_init_data, &st->lsp_old[0], M);

  000b1	6a 0a		 push	 10			; 0000000aH
  000b3	b8 02 00 00 00	 mov	 eax, 2
  000b8	6b c8 00	 imul	 ecx, eax, 0
  000bb	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  000be	8d 44 0a 20	 lea	 eax, DWORD PTR [edx+ecx+32]
  000c2	50		 push	 eax
  000c3	68 00 00 00 00	 push	 OFFSET _lsp_init_data
  000c8	e8 00 00 00 00	 call	 _Copy
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 150  : 
; 151  :    st->lsf_hist_ptr = 0;

  000d0	33 c0		 xor	 eax, eax
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  000d5	66 89 81 d4 00
	00 00		 mov	 WORD PTR [ecx+212], ax

; 152  :    st->log_pg_mean = 0;

  000dc	33 c0		 xor	 eax, eax
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  000e1	66 89 81 76 01
	00 00		 mov	 WORD PTR [ecx+374], ax

; 153  :    st->log_en_hist_ptr = 0;

  000e8	33 c0		 xor	 eax, eax
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  000ed	66 89 81 88 01
	00 00		 mov	 WORD PTR [ecx+392], ax

; 154  : 
; 155  :    /* initialize decoder lsf history */
; 156  :    Copy(mean_lsf, &st->lsf_hist[0], M);

  000f4	6a 0a		 push	 10			; 0000000aH
  000f6	b8 02 00 00 00	 mov	 eax, 2
  000fb	6b c8 00	 imul	 ecx, eax, 0
  000fe	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00101	8d 44 0a 34	 lea	 eax, DWORD PTR [edx+ecx+52]
  00105	50		 push	 eax
  00106	68 00 00 00 00	 push	 OFFSET _mean_lsf
  0010b	e8 00 00 00 00	 call	 _Copy
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 
; 158  :    for (i = 1; i < DTX_HIST_SIZE; i++)

  00113	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0011a	eb 09		 jmp	 SHORT $LN6@dtx_dec_re
$LN5@dtx_dec_re:
  0011c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0011f	83 c0 01	 add	 eax, 1
  00122	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN6@dtx_dec_re:
  00125	83 7d f8 08	 cmp	 DWORD PTR _i$[ebp], 8
  00129	7d 28		 jge	 SHORT $LN4@dtx_dec_re

; 159  :    {
; 160  :       Copy(&st->lsf_hist[0], &st->lsf_hist[M*i], M);

  0012b	6a 0a		 push	 10			; 0000000aH
  0012d	6b 45 f8 0a	 imul	 eax, DWORD PTR _i$[ebp], 10
  00131	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00134	8d 54 41 34	 lea	 edx, DWORD PTR [ecx+eax*2+52]
  00138	52		 push	 edx
  00139	b8 02 00 00 00	 mov	 eax, 2
  0013e	6b c8 00	 imul	 ecx, eax, 0
  00141	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00144	8d 44 0a 34	 lea	 eax, DWORD PTR [edx+ecx+52]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _Copy
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 161  :    }

  00151	eb c9		 jmp	 SHORT $LN5@dtx_dec_re
$LN4@dtx_dec_re:

; 162  :    Set_zero(st->lsf_hist_mean, M*DTX_HIST_SIZE);

  00153	6a 50		 push	 80			; 00000050H
  00155	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00158	05 d6 00 00 00	 add	 eax, 214		; 000000d6H
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 _Set_zero
  00163	83 c4 08	 add	 esp, 8

; 163  : 
; 164  :    /* initialize decoder log frame energy */ 
; 165  :    for (i = 0; i < DTX_HIST_SIZE; i++)

  00166	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0016d	eb 09		 jmp	 SHORT $LN3@dtx_dec_re
$LN2@dtx_dec_re:
  0016f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00172	83 c0 01	 add	 eax, 1
  00175	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN3@dtx_dec_re:
  00178	83 7d f8 08	 cmp	 DWORD PTR _i$[ebp], 8
  0017c	7d 17		 jge	 SHORT $LN1@dtx_dec_re

; 166  :    {
; 167  :       st->log_en_hist[i] = st->log_en;

  0017e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00184	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00187	66 8b 52 04	 mov	 dx, WORD PTR [edx+4]
  0018b	66 89 94 41 78
	01 00 00	 mov	 WORD PTR [ecx+eax*2+376], dx

; 168  :    }

  00193	eb da		 jmp	 SHORT $LN2@dtx_dec_re
$LN1@dtx_dec_re:

; 169  : 
; 170  :    st->log_en_adjust = 0;

  00195	33 c0		 xor	 eax, eax
  00197	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0019a	66 89 81 8a 01
	00 00		 mov	 WORD PTR [ecx+394], ax

; 171  : 
; 172  :    st->dtxHangoverCount = DTX_HANG_CONST;

  001a1	b8 07 00 00 00	 mov	 eax, 7
  001a6	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001a9	66 89 81 8c 01
	00 00		 mov	 WORD PTR [ecx+396], ax

; 173  :    st->decAnaElapsedCount = 32767;   

  001b0	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  001b5	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001b8	66 89 81 8e 01
	00 00		 mov	 WORD PTR [ecx+398], ax

; 174  : 
; 175  :    st->sid_frame = 0;       

  001bf	33 c0		 xor	 eax, eax
  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001c4	66 89 81 90 01
	00 00		 mov	 WORD PTR [ecx+400], ax

; 176  :    st->valid_data = 0;             

  001cb	33 c0		 xor	 eax, eax
  001cd	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001d0	66 89 81 92 01
	00 00		 mov	 WORD PTR [ecx+402], ax

; 177  :    st->dtxHangoverAdded = 0; 

  001d7	33 c0		 xor	 eax, eax
  001d9	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001dc	66 89 81 94 01
	00 00		 mov	 WORD PTR [ecx+404], ax

; 178  :   
; 179  :    st->dtxGlobalState = DTX;    

  001e3	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  001e6	c7 80 98 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+408], 1

; 180  :    st->data_updated = 0; 

  001f0	33 c0		 xor	 eax, eax
  001f2	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001f5	66 89 81 9c 01
	00 00		 mov	 WORD PTR [ecx+412], ax

; 181  :    return 0;

  001fc	33 c0		 xor	 eax, eax
$LN8@dtx_dec_re:

; 182  : }

  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5b		 pop	 ebx
  00201	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00207	3b ec		 cmp	 ebp, esp
  00209	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c3		 ret	 0
_dtx_dec_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dtx_dec.c
;	COMDAT _dtx_dec_init
_TEXT	SEGMENT
_s$ = -8						; size = 4
_st$ = 8						; size = 4
_dtx_dec_init PROC					; COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 101  :    dtx_decState* s;
; 102  :    
; 103  :    if (st == (dtx_decState **) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _st$[ebp], 0
  00022	75 35		 jne	 SHORT $LN2@dtx_dec_in

; 104  :       fprintf(stderr, "dtx_dec_init: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LABEIKEE@dtx_dec_init?3?5invalid?5parameter?6@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  :       return -1; 

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 74		 jmp	 SHORT $LN3@dtx_dec_in
$LN2@dtx_dec_in:

; 106  :    }
; 107  :    
; 108  :    *st = NULL;

  00059	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 109  :    
; 110  :    /* allocate memory */
; 111  :    if ((s= (dtx_decState *) malloc(sizeof(dtx_decState))) == NULL){

  00062	8b f4		 mov	 esi, esp
  00064	68 a0 01 00 00	 push	 416			; 000001a0H
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006f	83 c4 04	 add	 esp, 4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  0007c	83 7d f8 00	 cmp	 DWORD PTR _s$[ebp], 0
  00080	75 35		 jne	 SHORT $LN1@dtx_dec_in

; 112  :       fprintf(stderr, "dtx_dec_init: can not malloc state structure\n");

  00082	8b f4		 mov	 esi, esp
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KHMAKKFJ@dtx_dec_init?3?5can?5not?5malloc?5sta@
  00089	8b fc		 mov	 edi, esp
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00091	3b fc		 cmp	 edi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009d	d1 e1		 shl	 ecx, 1
  0009f	03 c1		 add	 eax, ecx
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  000a8	83 c4 08	 add	 esp, 8
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 113  :       return -1;

  000b2	83 c8 ff	 or	 eax, -1
  000b5	eb 16		 jmp	 SHORT $LN3@dtx_dec_in
$LN1@dtx_dec_in:

; 114  :    }
; 115  :    
; 116  :    dtx_dec_reset(s);

  000b7	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _dtx_dec_reset
  000c0	83 c4 04	 add	 esp, 4

; 117  :    *st = s;

  000c3	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000c9	89 08		 mov	 DWORD PTR [eax], ecx

; 118  :    
; 119  :    return 0;

  000cb	33 c0		 xor	 eax, eax
$LN3@dtx_dec_in:

; 120  : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000d6	3b ec		 cmp	 ebp, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
_dtx_dec_init ENDP
_TEXT	ENDS
END
