; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\pow2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_pow2_id
CONST	SEGMENT
_pow2_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_table	DW	04000H
	DW	04167H
	DW	042d5H
	DW	0444cH
	DW	045cbH
	DW	04752H
	DW	048e2H
	DW	04a7aH
	DW	04c1cH
	DW	04dc7H
	DW	04f7bH
	DW	05138H
	DW	052ffH
	DW	054d1H
	DW	056acH
	DW	05892H
	DW	05a82H
	DW	05c7eH
	DW	05e84H
	DW	06096H
	DW	062b4H
	DW	064ddH
	DW	06712H
	DW	06954H
	DW	06ba2H
	DW	06dfeH
	DW	07066H
	DW	072ddH
	DW	07560H
	DW	077f2H
	DW	07a93H
	DW	07d42H
	DW	07fffH
CONST	ENDS
PUBLIC	_Pow2
EXTRN	_sub:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_msu:PROC
EXTRN	_L_shr:PROC
EXTRN	_L_deposit_h:PROC
EXTRN	_L_shr_r:PROC
EXTRN	_logic16:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pow2.c
;	COMDAT _Pow2
_TEXT	SEGMENT
_L_x$ = -56						; size = 4
_tmp$ = -44						; size = 2
_a$ = -32						; size = 2
_i$ = -20						; size = 2
_exp$ = -8						; size = 2
_exponent$ = 8						; size = 2
_fraction$ = 12						; size = 2
_Pow2	PROC						; COMDAT

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 64   :     Word16 exp, i, a, tmp;
; 65   :     Word32 L_x;
; 66   : 
; 67   :     L_x = L_mult (fraction, 32);/* L_x = fraction<<6           */

  0001e	6a 20		 push	 32			; 00000020H
  00020	0f b7 45 0c	 movzx	 eax, WORD PTR _fraction$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _L_mult
  0002a	83 c4 08	 add	 esp, 8
  0002d	89 45 c8	 mov	 DWORD PTR _L_x$[ebp], eax

; 68   :     i = extract_h (L_x);        /* Extract b10-b16 of fraction */

  00030	8b 45 c8	 mov	 eax, DWORD PTR _L_x$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _extract_h
  00039	83 c4 04	 add	 esp, 4
  0003c	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 69   :     L_x = L_shr (L_x, 1);

  00040	6a 01		 push	 1
  00042	8b 45 c8	 mov	 eax, DWORD PTR _L_x$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _L_shr
  0004b	83 c4 08	 add	 esp, 8
  0004e	89 45 c8	 mov	 DWORD PTR _L_x$[ebp], eax

; 70   :     a = extract_l (L_x);        /* Extract b0-b9   of fraction */

  00051	8b 45 c8	 mov	 eax, DWORD PTR _L_x$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _extract_l
  0005a	83 c4 04	 add	 esp, 4
  0005d	66 89 45 e0	 mov	 WORD PTR _a$[ebp], ax

; 71   :     a = a & (Word16) 0x7fff;    logic16 (); 

  00061	0f bf 45 e0	 movsx	 eax, WORD PTR _a$[ebp]
  00065	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  0006a	66 89 45 e0	 mov	 WORD PTR _a$[ebp], ax
  0006e	e8 00 00 00 00	 call	 _logic16

; 72   : 
; 73   :     L_x = L_deposit_h (table[i]);       /* table[i] << 16        */

  00073	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  00077	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _table[eax*2]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 _L_deposit_h
  00085	83 c4 04	 add	 esp, 4
  00088	89 45 c8	 mov	 DWORD PTR _L_x$[ebp], eax

; 74   :     tmp = sub (table[i], table[i + 1]); /* table[i] - table[i+1] */

  0008b	0f bf 45 ec	 movsx	 eax, WORD PTR _i$[ebp]
  0008f	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _table[eax*2+2]
  00097	51		 push	 ecx
  00098	0f bf 55 ec	 movsx	 edx, WORD PTR _i$[ebp]
  0009c	0f b7 04 55 00
	00 00 00	 movzx	 eax, WORD PTR _table[edx*2]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _sub
  000aa	83 c4 08	 add	 esp, 8
  000ad	66 89 45 d4	 mov	 WORD PTR _tmp$[ebp], ax

; 75   :     L_x = L_msu (L_x, tmp, a);  /* L_x -= tmp*a*2        */

  000b1	0f b7 45 e0	 movzx	 eax, WORD PTR _a$[ebp]
  000b5	50		 push	 eax
  000b6	0f b7 4d d4	 movzx	 ecx, WORD PTR _tmp$[ebp]
  000ba	51		 push	 ecx
  000bb	8b 55 c8	 mov	 edx, DWORD PTR _L_x$[ebp]
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 _L_msu
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c7	89 45 c8	 mov	 DWORD PTR _L_x$[ebp], eax

; 76   : 
; 77   :     exp = sub (30, exponent);

  000ca	0f b7 45 08	 movzx	 eax, WORD PTR _exponent$[ebp]
  000ce	50		 push	 eax
  000cf	6a 1e		 push	 30			; 0000001eH
  000d1	e8 00 00 00 00	 call	 _sub
  000d6	83 c4 08	 add	 esp, 8
  000d9	66 89 45 f8	 mov	 WORD PTR _exp$[ebp], ax

; 78   :     L_x = L_shr_r (L_x, exp);

  000dd	0f b7 45 f8	 movzx	 eax, WORD PTR _exp$[ebp]
  000e1	50		 push	 eax
  000e2	8b 4d c8	 mov	 ecx, DWORD PTR _L_x$[ebp]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 _L_shr_r
  000eb	83 c4 08	 add	 esp, 8
  000ee	89 45 c8	 mov	 DWORD PTR _L_x$[ebp], eax

; 79   : 
; 80   :     return (L_x);

  000f1	8b 45 c8	 mov	 eax, DWORD PTR _L_x$[ebp]

; 81   : }

  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000fd	3b ec		 cmp	 ebp, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
_Pow2	ENDP
_TEXT	ENDS
END
