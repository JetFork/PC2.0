; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\bgnscd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_bgnscd_id
CONST	SEGMENT
_bgnscd_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Bgn_scd_init
PUBLIC	_Bgn_scd_reset
PUBLIC	_Bgn_scd_exit
PUBLIC	_Bgn_scd
PUBLIC	??_C@_0CB@NBHDLMJL@Bgn_scd_init?3?5invalid?5parameter?6@ ; `string'
PUBLIC	??_C@_0CO@JFIOBCBL@Bgn_scd_init?3?5can?5not?5malloc?5sta@ ; `string'
PUBLIC	??_C@_0CC@PJKCAIBL@Bgn_scd_reset?3?5invalid?5parameter@ ; `string'
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_extract_h:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_shl:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	_Set_zero:PROC
EXTRN	_gmed_n:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CC@PJKCAIBL@Bgn_scd_reset?3?5invalid?5parameter@
CONST	SEGMENT
??_C@_0CC@PJKCAIBL@Bgn_scd_reset?3?5invalid?5parameter@ DB 'Bgn_scd_reset'
	DB	': invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JFIOBCBL@Bgn_scd_init?3?5can?5not?5malloc?5sta@
CONST	SEGMENT
??_C@_0CO@JFIOBCBL@Bgn_scd_init?3?5can?5not?5malloc?5sta@ DB 'Bgn_scd_ini'
	DB	't: can not malloc state structure', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NBHDLMJL@Bgn_scd_init?3?5invalid?5parameter?6@
CONST	SEGMENT
??_C@_0CB@NBHDLMJL@Bgn_scd_init?3?5invalid?5parameter?6@ DB 'Bgn_scd_init'
	DB	': invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\bgnscd.c
;	COMDAT _Bgn_scd
_TEXT	SEGMENT
_s$ = -128						; size = 4
_maxEnergyLastPart$ = -116				; size = 2
_maxEnergy$ = -104					; size = 2
_noiseFloor$ = -92					; size = 2
_currEnergy$ = -80					; size = 2
_frameEnergyMin$ = -68					; size = 2
_ltpLimit$ = -56					; size = 2
_temp$ = -44						; size = 2
_inbgNoise$ = -32					; size = 2
_prevVoiced$ = -20					; size = 2
_i$ = -8						; size = 2
_st$ = 8						; size = 4
_ltpGainHist$ = 12					; size = 4
_speech$ = 16						; size = 4
_voicedHangover$ = 20					; size = 4
_Bgn_scd PROC						; COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd bc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-324]
  00012	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 141  :    Word16 i;
; 142  :    Word16 prevVoiced, inbgNoise;
; 143  :    Word16 temp;
; 144  :    Word16 ltpLimit, frameEnergyMin;
; 145  :    Word16 currEnergy, noiseFloor, maxEnergy, maxEnergyLastPart;
; 146  :    Word32 s;
; 147  :    
; 148  :    /* Update the inBackgroundNoise flag (valid for use in next frame if BFI) */
; 149  :    /* it now works as a energy detector floating on top                      */ 
; 150  :    /* not as good as a VAD.                                                  */
; 151  : 
; 152  :    currEnergy = 0;                                   move16 ();

  0001e	33 c0		 xor	 eax, eax
  00020	66 89 45 b0	 mov	 WORD PTR _currEnergy$[ebp], ax
  00024	e8 00 00 00 00	 call	 _move16

; 153  :    s = (Word32) 0;                                   move32 ();

  00029	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], 0
  00030	e8 00 00 00 00	 call	 _move32

; 154  : 
; 155  :    for (i = 0; i < L_FRAME; i++)

  00035	33 c0		 xor	 eax, eax
  00037	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0003b	eb 0c		 jmp	 SHORT $LN34@Bgn_scd
$LN33@Bgn_scd:
  0003d	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00041	66 83 c0 01	 add	 ax, 1
  00045	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN34@Bgn_scd:
  00049	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0004d	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  00052	7d 29		 jge	 SHORT $LN32@Bgn_scd

; 156  :    {
; 157  :        s = L_mac (s, speech[i], speech[i]);

  00054	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00058	8b 4d 10	 mov	 ecx, DWORD PTR _speech$[ebp]
  0005b	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0005f	52		 push	 edx
  00060	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00064	8b 4d 10	 mov	 ecx, DWORD PTR _speech$[ebp]
  00067	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0006b	52		 push	 edx
  0006c	8b 45 80	 mov	 eax, DWORD PTR _s$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _L_mac
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
  00078	89 45 80	 mov	 DWORD PTR _s$[ebp], eax

; 158  :    }

  0007b	eb c0		 jmp	 SHORT $LN33@Bgn_scd
$LN32@Bgn_scd:

; 159  : 
; 160  :    s = L_shl(s, 2);  

  0007d	6a 02		 push	 2
  0007f	8b 45 80	 mov	 eax, DWORD PTR _s$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _L_shl
  00088	83 c4 08	 add	 esp, 8
  0008b	89 45 80	 mov	 DWORD PTR _s$[ebp], eax

; 161  : 
; 162  :    currEnergy = extract_h (s);

  0008e	8b 45 80	 mov	 eax, DWORD PTR _s$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _extract_h
  00097	83 c4 04	 add	 esp, 4
  0009a	66 89 45 b0	 mov	 WORD PTR _currEnergy$[ebp], ax

; 163  : 
; 164  :    frameEnergyMin = 32767;                     move16 ();

  0009e	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  000a3	66 89 45 bc	 mov	 WORD PTR _frameEnergyMin$[ebp], ax
  000a7	e8 00 00 00 00	 call	 _move16

; 165  : 
; 166  :    for (i = 0; i < L_ENERGYHIST; i++)

  000ac	33 c0		 xor	 eax, eax
  000ae	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  000b2	eb 0c		 jmp	 SHORT $LN31@Bgn_scd
$LN30@Bgn_scd:
  000b4	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  000b8	66 83 c0 01	 add	 ax, 1
  000bc	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN31@Bgn_scd:
  000c0	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000c4	83 f8 3c	 cmp	 eax, 60			; 0000003cH
  000c7	7d 3b		 jge	 SHORT $LN29@Bgn_scd

; 167  :    {
; 168  :       test ();

  000c9	e8 00 00 00 00	 call	 _test

; 169  :       if (sub(st->frameEnergyHist[i], frameEnergyMin) < 0)

  000ce	0f b7 45 bc	 movzx	 eax, WORD PTR _frameEnergyMin$[ebp]
  000d2	50		 push	 eax
  000d3	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000d7	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  000da	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _sub
  000e4	83 c4 08	 add	 esp, 8
  000e7	0f bf c8	 movsx	 ecx, ax
  000ea	85 c9		 test	 ecx, ecx
  000ec	7d 0f		 jge	 SHORT $LN28@Bgn_scd

; 170  :          frameEnergyMin = st->frameEnergyHist[i];           move16 ();

  000ee	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  000f5	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  000f9	66 89 55 bc	 mov	 WORD PTR _frameEnergyMin$[ebp], dx
$LN28@Bgn_scd:
  000fd	e8 00 00 00 00	 call	 _move16

; 171  :    }

  00102	eb b0		 jmp	 SHORT $LN30@Bgn_scd
$LN29@Bgn_scd:

; 172  : 
; 173  :    noiseFloor = shl (frameEnergyMin, 4); /* Frame Energy Margin of 16 */

  00104	6a 04		 push	 4
  00106	0f b7 45 bc	 movzx	 eax, WORD PTR _frameEnergyMin$[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _shl
  00110	83 c4 08	 add	 esp, 8
  00113	66 89 45 a4	 mov	 WORD PTR _noiseFloor$[ebp], ax

; 174  : 
; 175  :    maxEnergy = st->frameEnergyHist[0];               move16 ();

  00117	b8 02 00 00 00	 mov	 eax, 2
  0011c	6b c8 00	 imul	 ecx, eax, 0
  0011f	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00122	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  00126	66 89 45 98	 mov	 WORD PTR _maxEnergy$[ebp], ax
  0012a	e8 00 00 00 00	 call	 _move16

; 176  :    for (i = 1; i < L_ENERGYHIST-4; i++)

  0012f	b8 01 00 00 00	 mov	 eax, 1
  00134	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00138	eb 0c		 jmp	 SHORT $LN27@Bgn_scd
$LN26@Bgn_scd:
  0013a	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0013e	66 83 c0 01	 add	 ax, 1
  00142	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN27@Bgn_scd:
  00146	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0014a	83 f8 38	 cmp	 eax, 56			; 00000038H
  0014d	7d 3b		 jge	 SHORT $LN25@Bgn_scd

; 177  :    {
; 178  :       test ();

  0014f	e8 00 00 00 00	 call	 _test

; 179  :       if ( sub (maxEnergy, st->frameEnergyHist[i]) < 0)

  00154	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00158	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0015b	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0015f	52		 push	 edx
  00160	0f b7 45 98	 movzx	 eax, WORD PTR _maxEnergy$[ebp]
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 _sub
  0016a	83 c4 08	 add	 esp, 8
  0016d	0f bf c8	 movsx	 ecx, ax
  00170	85 c9		 test	 ecx, ecx
  00172	7d 14		 jge	 SHORT $LN24@Bgn_scd

; 180  :       {
; 181  :          maxEnergy = st->frameEnergyHist[i];         move16 ();

  00174	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00178	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  0017b	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  0017f	66 89 55 98	 mov	 WORD PTR _maxEnergy$[ebp], dx
  00183	e8 00 00 00 00	 call	 _move16
$LN24@Bgn_scd:

; 182  :       }
; 183  :    }

  00188	eb b0		 jmp	 SHORT $LN26@Bgn_scd
$LN25@Bgn_scd:

; 184  :    
; 185  :    maxEnergyLastPart = st->frameEnergyHist[2*L_ENERGYHIST/3]; move16 ();

  0018a	b8 02 00 00 00	 mov	 eax, 2
  0018f	6b c8 28	 imul	 ecx, eax, 40
  00192	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00195	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  00199	66 89 45 8c	 mov	 WORD PTR _maxEnergyLastPart$[ebp], ax
  0019d	e8 00 00 00 00	 call	 _move16

; 186  :    for (i = 2*L_ENERGYHIST/3+1; i < L_ENERGYHIST; i++)

  001a2	b8 29 00 00 00	 mov	 eax, 41			; 00000029H
  001a7	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  001ab	eb 0c		 jmp	 SHORT $LN23@Bgn_scd
$LN22@Bgn_scd:
  001ad	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  001b1	66 83 c0 01	 add	 ax, 1
  001b5	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN23@Bgn_scd:
  001b9	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  001bd	83 f8 3c	 cmp	 eax, 60			; 0000003cH
  001c0	7d 3b		 jge	 SHORT $LN21@Bgn_scd

; 187  :    {
; 188  :       test ();

  001c2	e8 00 00 00 00	 call	 _test

; 189  :       if ( sub (maxEnergyLastPart, st->frameEnergyHist[i] ) < 0)

  001c7	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  001cb	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001ce	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  001d2	52		 push	 edx
  001d3	0f b7 45 8c	 movzx	 eax, WORD PTR _maxEnergyLastPart$[ebp]
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 _sub
  001dd	83 c4 08	 add	 esp, 8
  001e0	0f bf c8	 movsx	 ecx, ax
  001e3	85 c9		 test	 ecx, ecx
  001e5	7d 14		 jge	 SHORT $LN20@Bgn_scd

; 190  :       {
; 191  :          maxEnergyLastPart = st->frameEnergyHist[i]; move16 ();     

  001e7	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  001eb	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  001ee	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  001f2	66 89 55 8c	 mov	 WORD PTR _maxEnergyLastPart$[ebp], dx
  001f6	e8 00 00 00 00	 call	 _move16
$LN20@Bgn_scd:

; 192  :       }
; 193  :    }

  001fb	eb b0		 jmp	 SHORT $LN22@Bgn_scd
$LN21@Bgn_scd:

; 194  : 
; 195  :    inbgNoise = 0;        /* false */                 move16 (); 

  001fd	33 c0		 xor	 eax, eax
  001ff	66 89 45 e0	 mov	 WORD PTR _inbgNoise$[ebp], ax
  00203	e8 00 00 00 00	 call	 _move16

; 196  : 
; 197  :    /* Do not consider silence as noise */
; 198  :    /* Do not consider continuous high volume as noise */
; 199  :    /* Or if the current noise level is very low */
; 200  :    /* Mark as noise if under current noise limit */
; 201  :    /* OR if the maximum energy is below the upper limit */
; 202  : 
; 203  :    test (); test (); test (); test (); test (); 

  00208	e8 00 00 00 00	 call	 _test
  0020d	e8 00 00 00 00	 call	 _test
  00212	e8 00 00 00 00	 call	 _test
  00217	e8 00 00 00 00	 call	 _test
  0021c	e8 00 00 00 00	 call	 _test

; 204  :    if ( (sub(maxEnergy, LOWERNOISELIMIT) > 0) &&
; 205  :         (sub(currEnergy, FRAMEENERGYLIMIT) < 0) &&
; 206  :         (sub(currEnergy, LOWERNOISELIMIT) > 0) &&
; 207  :         ( (sub(currEnergy, noiseFloor) < 0) ||
; 208  :           (sub(maxEnergyLastPart, UPPERNOISELIMIT) < 0)))

  00221	6a 14		 push	 20			; 00000014H
  00223	0f b7 45 98	 movzx	 eax, WORD PTR _maxEnergy$[ebp]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _sub
  0022d	83 c4 08	 add	 esp, 8
  00230	0f bf c8	 movsx	 ecx, ax
  00233	85 c9		 test	 ecx, ecx
  00235	0f 8e c1 00 00
	00		 jle	 $LN19@Bgn_scd
  0023b	68 aa 44 00 00	 push	 17578			; 000044aaH
  00240	0f b7 45 b0	 movzx	 eax, WORD PTR _currEnergy$[ebp]
  00244	50		 push	 eax
  00245	e8 00 00 00 00	 call	 _sub
  0024a	83 c4 08	 add	 esp, 8
  0024d	0f bf c8	 movsx	 ecx, ax
  00250	85 c9		 test	 ecx, ecx
  00252	0f 8d a4 00 00
	00		 jge	 $LN19@Bgn_scd
  00258	6a 14		 push	 20			; 00000014H
  0025a	0f b7 45 b0	 movzx	 eax, WORD PTR _currEnergy$[ebp]
  0025e	50		 push	 eax
  0025f	e8 00 00 00 00	 call	 _sub
  00264	83 c4 08	 add	 esp, 8
  00267	0f bf c8	 movsx	 ecx, ax
  0026a	85 c9		 test	 ecx, ecx
  0026c	0f 8e 8a 00 00
	00		 jle	 $LN19@Bgn_scd
  00272	0f b7 45 a4	 movzx	 eax, WORD PTR _noiseFloor$[ebp]
  00276	50		 push	 eax
  00277	0f b7 4d b0	 movzx	 ecx, WORD PTR _currEnergy$[ebp]
  0027b	51		 push	 ecx
  0027c	e8 00 00 00 00	 call	 _sub
  00281	83 c4 08	 add	 esp, 8
  00284	0f bf d0	 movsx	 edx, ax
  00287	85 d2		 test	 edx, edx
  00289	7c 19		 jl	 SHORT $LN18@Bgn_scd
  0028b	68 a1 07 00 00	 push	 1953			; 000007a1H
  00290	0f b7 45 8c	 movzx	 eax, WORD PTR _maxEnergyLastPart$[ebp]
  00294	50		 push	 eax
  00295	e8 00 00 00 00	 call	 _sub
  0029a	83 c4 08	 add	 esp, 8
  0029d	0f bf c8	 movsx	 ecx, ax
  002a0	85 c9		 test	 ecx, ecx
  002a2	7d 58		 jge	 SHORT $LN19@Bgn_scd
$LN18@Bgn_scd:

; 209  :    {
; 210  :       test ();

  002a4	e8 00 00 00 00	 call	 _test

; 211  :       if (sub(add(st->bgHangover, 1), 30) > 0)

  002a9	6a 1e		 push	 30			; 0000001eH
  002ab	6a 01		 push	 1
  002ad	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  002b0	0f b7 48 78	 movzx	 ecx, WORD PTR [eax+120]
  002b4	51		 push	 ecx
  002b5	e8 00 00 00 00	 call	 _add
  002ba	83 c4 08	 add	 esp, 8
  002bd	0f b7 d0	 movzx	 edx, ax
  002c0	52		 push	 edx
  002c1	e8 00 00 00 00	 call	 _sub
  002c6	83 c4 08	 add	 esp, 8
  002c9	98		 cwde
  002ca	85 c0		 test	 eax, eax
  002cc	7e 13		 jle	 SHORT $LN17@Bgn_scd

; 212  :       {
; 213  :          st->bgHangover = 30;                         move16 ();

  002ce	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  002d3	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  002d6	66 89 41 78	 mov	 WORD PTR [ecx+120], ax
  002da	e8 00 00 00 00	 call	 _move16

; 214  :       } else

  002df	eb 19		 jmp	 SHORT $LN16@Bgn_scd
$LN17@Bgn_scd:

; 215  :       {
; 216  :          st->bgHangover = add(st->bgHangover, 1);

  002e1	6a 01		 push	 1
  002e3	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  002e6	0f b7 48 78	 movzx	 ecx, WORD PTR [eax+120]
  002ea	51		 push	 ecx
  002eb	e8 00 00 00 00	 call	 _add
  002f0	83 c4 08	 add	 esp, 8
  002f3	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  002f6	66 89 42 78	 mov	 WORD PTR [edx+120], ax
$LN16@Bgn_scd:

; 217  :       }
; 218  :    }
; 219  :    else

  002fa	eb 0e		 jmp	 SHORT $LN15@Bgn_scd
$LN19@Bgn_scd:

; 220  :    {
; 221  :       st->bgHangover = 0;                             move16 ();    

  002fc	33 c0		 xor	 eax, eax
  002fe	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  00301	66 89 41 78	 mov	 WORD PTR [ecx+120], ax
  00305	e8 00 00 00 00	 call	 _move16
$LN15@Bgn_scd:

; 222  :    }
; 223  :    
; 224  :    /* make final decision about frame state , act somewhat cautiosly */
; 225  :    test ();

  0030a	e8 00 00 00 00	 call	 _test

; 226  :    if (sub(st->bgHangover,1) > 0)

  0030f	6a 01		 push	 1
  00311	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00314	0f b7 48 78	 movzx	 ecx, WORD PTR [eax+120]
  00318	51		 push	 ecx
  00319	e8 00 00 00 00	 call	 _sub
  0031e	83 c4 08	 add	 esp, 8
  00321	0f bf d0	 movsx	 edx, ax
  00324	85 d2		 test	 edx, edx
  00326	7e 09		 jle	 SHORT $LN14@Bgn_scd

; 227  :       inbgNoise = 1;       /* true  */               move16 ();  

  00328	b8 01 00 00 00	 mov	 eax, 1
  0032d	66 89 45 e0	 mov	 WORD PTR _inbgNoise$[ebp], ax
$LN14@Bgn_scd:
  00331	e8 00 00 00 00	 call	 _move16

; 228  : 
; 229  :    for (i = 0; i < L_ENERGYHIST-1; i++)

  00336	33 c0		 xor	 eax, eax
  00338	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0033c	eb 0c		 jmp	 SHORT $LN13@Bgn_scd
$LN12@Bgn_scd:
  0033e	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00342	66 83 c0 01	 add	 ax, 1
  00346	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN13@Bgn_scd:
  0034a	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0034e	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00351	7d 1e		 jge	 SHORT $LN11@Bgn_scd

; 230  :    {
; 231  :       st->frameEnergyHist[i] = st->frameEnergyHist[i+1]; move16 ();

  00353	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00357	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  0035b	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  0035e	8b 75 08	 mov	 esi, DWORD PTR _st$[ebp]
  00361	66 8b 44 46 02	 mov	 ax, WORD PTR [esi+eax*2+2]
  00366	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0036a	e8 00 00 00 00	 call	 _move16

; 232  :    }

  0036f	eb cd		 jmp	 SHORT $LN12@Bgn_scd
$LN11@Bgn_scd:

; 233  :    st->frameEnergyHist[L_ENERGYHIST-1] = currEnergy;              move16 ();

  00371	b8 02 00 00 00	 mov	 eax, 2
  00376	6b c8 3b	 imul	 ecx, eax, 59
  00379	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  0037c	66 8b 45 b0	 mov	 ax, WORD PTR _currEnergy$[ebp]
  00380	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  00384	e8 00 00 00 00	 call	 _move16

; 234  :    
; 235  :    /* prepare for voicing decision; tighten the threshold after some 
; 236  :       time in noise */
; 237  :    ltpLimit = 13926;             /* 0.85  Q14 */     move16 (); 

  00389	b8 66 36 00 00	 mov	 eax, 13926		; 00003666H
  0038e	66 89 45 c8	 mov	 WORD PTR _ltpLimit$[ebp], ax
  00392	e8 00 00 00 00	 call	 _move16

; 238  :    test ();

  00397	e8 00 00 00 00	 call	 _test

; 239  :    if (sub(st->bgHangover, 8) > 0)

  0039c	6a 08		 push	 8
  0039e	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  003a1	0f b7 48 78	 movzx	 ecx, WORD PTR [eax+120]
  003a5	51		 push	 ecx
  003a6	e8 00 00 00 00	 call	 _sub
  003ab	83 c4 08	 add	 esp, 8
  003ae	0f bf d0	 movsx	 edx, ax
  003b1	85 d2		 test	 edx, edx
  003b3	7e 0e		 jle	 SHORT $LN10@Bgn_scd

; 240  :    {
; 241  :       ltpLimit = 15565;          /* 0.95  Q14 */     move16 ();

  003b5	b8 cd 3c 00 00	 mov	 eax, 15565		; 00003ccdH
  003ba	66 89 45 c8	 mov	 WORD PTR _ltpLimit$[ebp], ax
  003be	e8 00 00 00 00	 call	 _move16
$LN10@Bgn_scd:

; 242  :    }
; 243  :    test ();

  003c3	e8 00 00 00 00	 call	 _test

; 244  :    if (sub(st->bgHangover, 15) > 0)

  003c8	6a 0f		 push	 15			; 0000000fH
  003ca	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  003cd	0f b7 48 78	 movzx	 ecx, WORD PTR [eax+120]
  003d1	51		 push	 ecx
  003d2	e8 00 00 00 00	 call	 _sub
  003d7	83 c4 08	 add	 esp, 8
  003da	0f bf d0	 movsx	 edx, ax
  003dd	85 d2		 test	 edx, edx
  003df	7e 0e		 jle	 SHORT $LN9@Bgn_scd

; 245  :    {
; 246  :       ltpLimit = 16383;          /* 1.00  Q14 */     move16 ();

  003e1	b8 ff 3f 00 00	 mov	 eax, 16383		; 00003fffH
  003e6	66 89 45 c8	 mov	 WORD PTR _ltpLimit$[ebp], ax
  003ea	e8 00 00 00 00	 call	 _move16
$LN9@Bgn_scd:

; 247  :    }
; 248  : 
; 249  :    /* weak sort of voicing indication. */
; 250  :    prevVoiced = 0;        /* false */                move16 ();

  003ef	33 c0		 xor	 eax, eax
  003f1	66 89 45 ec	 mov	 WORD PTR _prevVoiced$[ebp], ax
  003f5	e8 00 00 00 00	 call	 _move16

; 251  :    test ();

  003fa	e8 00 00 00 00	 call	 _test

; 252  : 
; 253  :    if (sub(gmed_n(&ltpGainHist[4], 5), ltpLimit) > 0)

  003ff	0f b7 45 c8	 movzx	 eax, WORD PTR _ltpLimit$[ebp]
  00403	50		 push	 eax
  00404	6a 05		 push	 5
  00406	b9 02 00 00 00	 mov	 ecx, 2
  0040b	c1 e1 02	 shl	 ecx, 2
  0040e	03 4d 0c	 add	 ecx, DWORD PTR _ltpGainHist$[ebp]
  00411	51		 push	 ecx
  00412	e8 00 00 00 00	 call	 _gmed_n
  00417	83 c4 08	 add	 esp, 8
  0041a	0f b7 d0	 movzx	 edx, ax
  0041d	52		 push	 edx
  0041e	e8 00 00 00 00	 call	 _sub
  00423	83 c4 08	 add	 esp, 8
  00426	98		 cwde
  00427	85 c0		 test	 eax, eax
  00429	7e 0e		 jle	 SHORT $LN8@Bgn_scd

; 254  :    {
; 255  :       prevVoiced = 1;     /* true  */                move16 ();

  0042b	b8 01 00 00 00	 mov	 eax, 1
  00430	66 89 45 ec	 mov	 WORD PTR _prevVoiced$[ebp], ax
  00434	e8 00 00 00 00	 call	 _move16
$LN8@Bgn_scd:

; 256  :    }
; 257  :    test ();   

  00439	e8 00 00 00 00	 call	 _test

; 258  :    if (sub(st->bgHangover, 20) > 0) {

  0043e	6a 14		 push	 20			; 00000014H
  00440	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00443	0f b7 48 78	 movzx	 ecx, WORD PTR [eax+120]
  00447	51		 push	 ecx
  00448	e8 00 00 00 00	 call	 _sub
  0044d	83 c4 08	 add	 esp, 8
  00450	0f bf d0	 movsx	 edx, ax
  00453	85 d2		 test	 edx, edx
  00455	7e 3f		 jle	 SHORT $LN7@Bgn_scd

; 259  :       if (sub(gmed_n(ltpGainHist, 9), ltpLimit) > 0)

  00457	0f b7 45 c8	 movzx	 eax, WORD PTR _ltpLimit$[ebp]
  0045b	50		 push	 eax
  0045c	6a 09		 push	 9
  0045e	8b 4d 0c	 mov	 ecx, DWORD PTR _ltpGainHist$[ebp]
  00461	51		 push	 ecx
  00462	e8 00 00 00 00	 call	 _gmed_n
  00467	83 c4 08	 add	 esp, 8
  0046a	0f b7 d0	 movzx	 edx, ax
  0046d	52		 push	 edx
  0046e	e8 00 00 00 00	 call	 _sub
  00473	83 c4 08	 add	 esp, 8
  00476	98		 cwde
  00477	85 c0		 test	 eax, eax
  00479	7e 10		 jle	 SHORT $LN6@Bgn_scd

; 260  :       {
; 261  :          prevVoiced = 1;  /* true  */                move16 ();

  0047b	b8 01 00 00 00	 mov	 eax, 1
  00480	66 89 45 ec	 mov	 WORD PTR _prevVoiced$[ebp], ax
  00484	e8 00 00 00 00	 call	 _move16

; 262  :       }
; 263  :       else

  00489	eb 0b		 jmp	 SHORT $LN7@Bgn_scd
$LN6@Bgn_scd:

; 264  :       {
; 265  :          prevVoiced = 0;  /* false  */                move16 ();

  0048b	33 c0		 xor	 eax, eax
  0048d	66 89 45 ec	 mov	 WORD PTR _prevVoiced$[ebp], ax
  00491	e8 00 00 00 00	 call	 _move16
$LN7@Bgn_scd:

; 266  :       }
; 267  :    }
; 268  :    
; 269  :    test ();

  00496	e8 00 00 00 00	 call	 _test

; 270  :    if (prevVoiced)

  0049b	0f bf 45 ec	 movsx	 eax, WORD PTR _prevVoiced$[ebp]
  0049f	85 c0		 test	 eax, eax
  004a1	74 0f		 je	 SHORT $LN4@Bgn_scd

; 271  :    {
; 272  :       *voicedHangover = 0;                        move16 ();

  004a3	33 c0		 xor	 eax, eax
  004a5	8b 4d 14	 mov	 ecx, DWORD PTR _voicedHangover$[ebp]
  004a8	66 89 01	 mov	 WORD PTR [ecx], ax
  004ab	e8 00 00 00 00	 call	 _move16

; 273  :    }
; 274  :    else

  004b0	eb 51		 jmp	 SHORT $LN3@Bgn_scd
$LN4@Bgn_scd:

; 275  :    {
; 276  :       temp = add(*voicedHangover, 1);

  004b2	6a 01		 push	 1
  004b4	8b 45 14	 mov	 eax, DWORD PTR _voicedHangover$[ebp]
  004b7	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  004ba	51		 push	 ecx
  004bb	e8 00 00 00 00	 call	 _add
  004c0	83 c4 08	 add	 esp, 8
  004c3	66 89 45 d4	 mov	 WORD PTR _temp$[ebp], ax

; 277  :       test ();

  004c7	e8 00 00 00 00	 call	 _test

; 278  :       if (sub(temp, 10) > 0)

  004cc	6a 0a		 push	 10			; 0000000aH
  004ce	0f b7 45 d4	 movzx	 eax, WORD PTR _temp$[ebp]
  004d2	50		 push	 eax
  004d3	e8 00 00 00 00	 call	 _sub
  004d8	83 c4 08	 add	 esp, 8
  004db	0f bf c8	 movsx	 ecx, ax
  004de	85 c9		 test	 ecx, ecx
  004e0	7e 12		 jle	 SHORT $LN2@Bgn_scd

; 279  :       {
; 280  :          *voicedHangover = 10;                    move16 ();

  004e2	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  004e7	8b 4d 14	 mov	 ecx, DWORD PTR _voicedHangover$[ebp]
  004ea	66 89 01	 mov	 WORD PTR [ecx], ax
  004ed	e8 00 00 00 00	 call	 _move16

; 281  :       }
; 282  :       else

  004f2	eb 0f		 jmp	 SHORT $LN3@Bgn_scd
$LN2@Bgn_scd:

; 283  :       {
; 284  :          *voicedHangover = temp;                  move16 ();

  004f4	8b 45 14	 mov	 eax, DWORD PTR _voicedHangover$[ebp]
  004f7	66 8b 4d d4	 mov	 cx, WORD PTR _temp$[ebp]
  004fb	66 89 08	 mov	 WORD PTR [eax], cx
  004fe	e8 00 00 00 00	 call	 _move16
$LN3@Bgn_scd:

; 285  :       }
; 286  :    }
; 287  : 
; 288  :    return inbgNoise;

  00503	66 8b 45 e0	 mov	 ax, WORD PTR _inbgNoise$[ebp]

; 289  : }

  00507	5f		 pop	 edi
  00508	5e		 pop	 esi
  00509	5b		 pop	 ebx
  0050a	81 c4 44 01 00
	00		 add	 esp, 324		; 00000144H
  00510	3b ec		 cmp	 ebp, esp
  00512	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00517	8b e5		 mov	 esp, ebp
  00519	5d		 pop	 ebp
  0051a	c3		 ret	 0
_Bgn_scd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\bgnscd.c
;	COMDAT _Bgn_scd_exit
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Bgn_scd_exit PROC					; COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 115  :    if (state == NULL || *state == NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	74 08		 je	 SHORT $LN1@Bgn_scd_ex
  00024	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 02		 jne	 SHORT $LN2@Bgn_scd_ex
$LN1@Bgn_scd_ex:

; 116  :       return;

  0002c	eb 21		 jmp	 SHORT $LN3@Bgn_scd_ex
$LN2@Bgn_scd_ex:

; 117  : 
; 118  :    /* deallocate memory */
; 119  :    free(*state);

  0002e	8b f4		 mov	 esi, esp
  00030	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0003c	83 c4 04	 add	 esp, 4
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 120  :    *state = NULL;

  00046	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@Bgn_scd_ex:

; 121  :    
; 122  :    return;
; 123  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_Bgn_scd_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\bgnscd.c
;	COMDAT _Bgn_scd_reset
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Bgn_scd_reset PROC					; COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 91   :    if (state == (Bgn_scdState *) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 35		 jne	 SHORT $LN1@Bgn_scd_re

; 92   :       fprintf(stderr, "Bgn_scd_reset: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PJKCAIBL@Bgn_scd_reset?3?5invalid?5parameter@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 19		 jmp	 SHORT $LN2@Bgn_scd_re
$LN1@Bgn_scd_re:

; 94   :    }
; 95   : 
; 96   :    /* Static vectors to zero */
; 97   :    Set_zero (state->frameEnergyHist, L_ENERGYHIST);

  00059	6a 3c		 push	 60			; 0000003cH
  0005b	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _Set_zero
  00064	83 c4 08	 add	 esp, 8

; 98   : 
; 99   :    /* Initialize hangover handling */
; 100  :    state->bgHangover = 0;

  00067	33 c0		 xor	 eax, eax
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  0006c	66 89 41 78	 mov	 WORD PTR [ecx+120], ax

; 101  :    
; 102  :    return 0;

  00070	33 c0		 xor	 eax, eax
$LN2@Bgn_scd_re:

; 103  : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_Bgn_scd_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\bgnscd.c
;	COMDAT _Bgn_scd_init
_TEXT	SEGMENT
_s$ = -8						; size = 4
_state$ = 8						; size = 4
_Bgn_scd_init PROC					; COMDAT

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 61   :    Bgn_scdState* s;
; 62   :    
; 63   :    if (state == (Bgn_scdState **) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 35		 jne	 SHORT $LN2@Bgn_scd_in

; 64   :       fprintf(stderr, "Bgn_scd_init: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@NBHDLMJL@Bgn_scd_init?3?5invalid?5parameter?6@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 65   :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 71		 jmp	 SHORT $LN3@Bgn_scd_in
$LN2@Bgn_scd_in:

; 66   :    }
; 67   :    *state = NULL;

  00059	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 68   :    
; 69   :    /* allocate memory */
; 70   :    if ((s= (Bgn_scdState *) malloc(sizeof(Bgn_scdState))) == NULL){

  00062	8b f4		 mov	 esi, esp
  00064	6a 7a		 push	 122			; 0000007aH
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006c	83 c4 04	 add	 esp, 4
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  00079	83 7d f8 00	 cmp	 DWORD PTR _s$[ebp], 0
  0007d	75 35		 jne	 SHORT $LN1@Bgn_scd_in

; 71   :      fprintf(stderr, "Bgn_scd_init: can not malloc state structure\n");

  0007f	8b f4		 mov	 esi, esp
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@JFIOBCBL@Bgn_scd_init?3?5can?5not?5malloc?5sta@
  00086	8b fc		 mov	 edi, esp
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0008e	3b fc		 cmp	 edi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009a	d1 e1		 shl	 ecx, 1
  0009c	03 c1		 add	 eax, ecx
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  000a5	83 c4 08	 add	 esp, 8
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 72   :      return -1;

  000af	83 c8 ff	 or	 eax, -1
  000b2	eb 16		 jmp	 SHORT $LN3@Bgn_scd_in
$LN1@Bgn_scd_in:

; 73   :    }
; 74   :    
; 75   :    Bgn_scd_reset(s);

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _Bgn_scd_reset
  000bd	83 c4 04	 add	 esp, 4

; 76   :    *state = s;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000c6	89 08		 mov	 DWORD PTR [eax], ecx

; 77   :    
; 78   :    return 0;

  000c8	33 c0		 xor	 eax, eax
$LN3@Bgn_scd_in:

; 79   : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_Bgn_scd_init ENDP
_TEXT	ENDS
END
