; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\int_lpc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_int_lpc_id
CONST	SEGMENT
_int_lpc_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Int_lpc_1and3
PUBLIC	_Int_lpc_1and3_2
PUBLIC	_Int_lpc_1to3
PUBLIC	_Int_lpc_1to3_2
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shr:PROC
EXTRN	_move16:PROC
EXTRN	_Lsp_Az:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\int_lpc.c
;	COMDAT _Int_lpc_1to3_2
_TEXT	SEGMENT
_lsp$ = -40						; size = 20
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_lsp_old$ = 8						; size = 4
_lsp_new$ = 12						; size = 4
_Az$ = 16						; size = 4
_Int_lpc_1to3_2 PROC					; COMDAT

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 229  :     Word16 i;
; 230  :     Word16 lsp[M];
; 231  : 
; 232  :     for (i = 0; i < M; i++) {

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0002e	eb 0c		 jmp	 SHORT $LN9@Int_lpc_1t
$LN8@Int_lpc_1t:
  00030	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00034	66 83 c0 01	 add	 ax, 1
  00038	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN9@Int_lpc_1t:
  0003c	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00040	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00043	7d 64		 jge	 SHORT $LN7@Int_lpc_1t

; 233  :         lsp[i] = add(shr(lsp_new[i], 2), sub(lsp_old[i], shr(lsp_old[i], 2)));

  00045	6a 02		 push	 2
  00047	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _lsp_old$[ebp]
  0004e	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 _shr
  00058	83 c4 08	 add	 esp, 8
  0005b	0f b7 c0	 movzx	 eax, ax
  0005e	50		 push	 eax
  0005f	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00063	8b 55 08	 mov	 edx, DWORD PTR _lsp_old$[ebp]
  00066	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _sub
  00070	83 c4 08	 add	 esp, 8
  00073	0f b7 c8	 movzx	 ecx, ax
  00076	51		 push	 ecx
  00077	6a 02		 push	 2
  00079	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _lsp_new$[ebp]
  00080	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _shr
  0008a	83 c4 08	 add	 esp, 8
  0008d	0f b7 d0	 movzx	 edx, ax
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 _add
  00096	83 c4 08	 add	 esp, 8
  00099	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  0009d	66 89 44 4d d8	 mov	 WORD PTR _lsp$[ebp+ecx*2], ax

; 234  : 		                    move16 ();

  000a2	e8 00 00 00 00	 call	 _move16

; 235  :     }

  000a7	eb 87		 jmp	 SHORT $LN8@Int_lpc_1t
$LN7@Int_lpc_1t:

; 236  : 
; 237  :     Lsp_Az(lsp, Az);        /* Subframe 1 */

  000a9	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  000ac	50		 push	 eax
  000ad	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 _Lsp_Az
  000b6	83 c4 08	 add	 esp, 8

; 238  :     Az += MP1;              move16 ();

  000b9	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  000bc	83 c0 16	 add	 eax, 22			; 00000016H
  000bf	89 45 10	 mov	 DWORD PTR _Az$[ebp], eax
  000c2	e8 00 00 00 00	 call	 _move16

; 239  : 
; 240  :     for (i = 0; i < M; i++) {

  000c7	33 c0		 xor	 eax, eax
  000c9	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  000cd	eb 0c		 jmp	 SHORT $LN6@Int_lpc_1t
$LN5@Int_lpc_1t:
  000cf	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  000d3	66 83 c0 01	 add	 ax, 1
  000d7	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN6@Int_lpc_1t:
  000db	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000df	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000e2	7d 4c		 jge	 SHORT $LN4@Int_lpc_1t

; 241  :         lsp[i] = add(shr(lsp_old[i], 1), shr(lsp_new[i], 1));

  000e4	6a 01		 push	 1
  000e6	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR _lsp_new$[ebp]
  000ed	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000f1	52		 push	 edx
  000f2	e8 00 00 00 00	 call	 _shr
  000f7	83 c4 08	 add	 esp, 8
  000fa	0f b7 c0	 movzx	 eax, ax
  000fd	50		 push	 eax
  000fe	6a 01		 push	 1
  00100	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00104	8b 55 08	 mov	 edx, DWORD PTR _lsp_old$[ebp]
  00107	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _shr
  00111	83 c4 08	 add	 esp, 8
  00114	0f b7 c8	 movzx	 ecx, ax
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 _add
  0011d	83 c4 08	 add	 esp, 8
  00120	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  00124	66 89 44 55 d8	 mov	 WORD PTR _lsp$[ebp+edx*2], ax

; 242  : 		                    move16 ();

  00129	e8 00 00 00 00	 call	 _move16

; 243  :     }

  0012e	eb 9f		 jmp	 SHORT $LN5@Int_lpc_1t
$LN4@Int_lpc_1t:

; 244  : 
; 245  :     Lsp_Az(lsp, Az);        /* Subframe 2 */

  00130	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  00133	50		 push	 eax
  00134	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  00137	51		 push	 ecx
  00138	e8 00 00 00 00	 call	 _Lsp_Az
  0013d	83 c4 08	 add	 esp, 8

; 246  :     Az += MP1;              move16 ();

  00140	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  00143	83 c0 16	 add	 eax, 22			; 00000016H
  00146	89 45 10	 mov	 DWORD PTR _Az$[ebp], eax
  00149	e8 00 00 00 00	 call	 _move16

; 247  : 
; 248  :     for (i = 0; i < M; i++) {

  0014e	33 c0		 xor	 eax, eax
  00150	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00154	eb 0c		 jmp	 SHORT $LN3@Int_lpc_1t
$LN2@Int_lpc_1t:
  00156	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0015a	66 83 c0 01	 add	 ax, 1
  0015e	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN3@Int_lpc_1t:
  00162	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00166	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00169	7d 64		 jge	 SHORT $LN1@Int_lpc_1t

; 249  :         lsp[i] = add(shr(lsp_old[i], 2), sub(lsp_new[i], shr(lsp_new[i], 2)));

  0016b	6a 02		 push	 2
  0016d	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00171	8b 4d 0c	 mov	 ecx, DWORD PTR _lsp_new$[ebp]
  00174	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00178	52		 push	 edx
  00179	e8 00 00 00 00	 call	 _shr
  0017e	83 c4 08	 add	 esp, 8
  00181	0f b7 c0	 movzx	 eax, ax
  00184	50		 push	 eax
  00185	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00189	8b 55 0c	 mov	 edx, DWORD PTR _lsp_new$[ebp]
  0018c	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 _sub
  00196	83 c4 08	 add	 esp, 8
  00199	0f b7 c8	 movzx	 ecx, ax
  0019c	51		 push	 ecx
  0019d	6a 02		 push	 2
  0019f	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  001a3	8b 45 08	 mov	 eax, DWORD PTR _lsp_old$[ebp]
  001a6	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  001aa	51		 push	 ecx
  001ab	e8 00 00 00 00	 call	 _shr
  001b0	83 c4 08	 add	 esp, 8
  001b3	0f b7 d0	 movzx	 edx, ax
  001b6	52		 push	 edx
  001b7	e8 00 00 00 00	 call	 _add
  001bc	83 c4 08	 add	 esp, 8
  001bf	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  001c3	66 89 44 4d d8	 mov	 WORD PTR _lsp$[ebp+ecx*2], ax

; 250  : 		                    move16 ();

  001c8	e8 00 00 00 00	 call	 _move16

; 251  :     }

  001cd	eb 87		 jmp	 SHORT $LN2@Int_lpc_1t
$LN1@Int_lpc_1t:

; 252  : 
; 253  :     Lsp_Az(lsp, Az);        /* Subframe 3 */

  001cf	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  001d2	50		 push	 eax
  001d3	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  001d6	51		 push	 ecx
  001d7	e8 00 00 00 00	 call	 _Lsp_Az
  001dc	83 c4 08	 add	 esp, 8

; 254  : 
; 255  :     return;
; 256  : }

  001df	52		 push	 edx
  001e0	8b cd		 mov	 ecx, ebp
  001e2	50		 push	 eax
  001e3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@Int_lpc_1t
  001e9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001ee	58		 pop	 eax
  001ef	5a		 pop	 edx
  001f0	5f		 pop	 edi
  001f1	5e		 pop	 esi
  001f2	5b		 pop	 ebx
  001f3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f6	33 cd		 xor	 ecx, ebp
  001f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fd	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00203	3b ec		 cmp	 ebp, esp
  00205	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c3		 ret	 0
  0020e	8b ff		 npad	 2
$LN14@Int_lpc_1t:
  00210	01 00 00 00	 DD	 1
  00214	00 00 00 00	 DD	 $LN13@Int_lpc_1t
$LN13@Int_lpc_1t:
  00218	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0021c	14 00 00 00	 DD	 20			; 00000014H
  00220	00 00 00 00	 DD	 $LN12@Int_lpc_1t
$LN12@Int_lpc_1t:
  00224	6c		 DB	 108			; 0000006cH
  00225	73		 DB	 115			; 00000073H
  00226	70		 DB	 112			; 00000070H
  00227	00		 DB	 0
_Int_lpc_1to3_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\int_lpc.c
;	COMDAT _Int_lpc_1to3
_TEXT	SEGMENT
_lsp$ = -40						; size = 20
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_lsp_old$ = 8						; size = 4
_lsp_new$ = 12						; size = 4
_Az$ = 16						; size = 4
_Int_lpc_1to3 PROC					; COMDAT

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 183  :     Word16 i;
; 184  :     Word16 lsp[M];
; 185  : 
; 186  :     for (i = 0; i < M; i++) {

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0002e	eb 0c		 jmp	 SHORT $LN9@Int_lpc_1t
$LN8@Int_lpc_1t:
  00030	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00034	66 83 c0 01	 add	 ax, 1
  00038	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN9@Int_lpc_1t:
  0003c	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00040	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00043	7d 64		 jge	 SHORT $LN7@Int_lpc_1t

; 187  :         lsp[i] = add(shr(lsp_new[i], 2), sub(lsp_old[i], shr(lsp_old[i], 2)));

  00045	6a 02		 push	 2
  00047	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _lsp_old$[ebp]
  0004e	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 _shr
  00058	83 c4 08	 add	 esp, 8
  0005b	0f b7 c0	 movzx	 eax, ax
  0005e	50		 push	 eax
  0005f	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00063	8b 55 08	 mov	 edx, DWORD PTR _lsp_old$[ebp]
  00066	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _sub
  00070	83 c4 08	 add	 esp, 8
  00073	0f b7 c8	 movzx	 ecx, ax
  00076	51		 push	 ecx
  00077	6a 02		 push	 2
  00079	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _lsp_new$[ebp]
  00080	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _shr
  0008a	83 c4 08	 add	 esp, 8
  0008d	0f b7 d0	 movzx	 edx, ax
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 _add
  00096	83 c4 08	 add	 esp, 8
  00099	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  0009d	66 89 44 4d d8	 mov	 WORD PTR _lsp$[ebp+ecx*2], ax

; 188  : 		                    move16 ();

  000a2	e8 00 00 00 00	 call	 _move16

; 189  :     }

  000a7	eb 87		 jmp	 SHORT $LN8@Int_lpc_1t
$LN7@Int_lpc_1t:

; 190  : 
; 191  :     Lsp_Az(lsp, Az);        /* Subframe 1 */

  000a9	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  000ac	50		 push	 eax
  000ad	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 _Lsp_Az
  000b6	83 c4 08	 add	 esp, 8

; 192  :     Az += MP1;              move16 (); 

  000b9	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  000bc	83 c0 16	 add	 eax, 22			; 00000016H
  000bf	89 45 10	 mov	 DWORD PTR _Az$[ebp], eax
  000c2	e8 00 00 00 00	 call	 _move16

; 193  : 
; 194  : 
; 195  :     for (i = 0; i < M; i++) {

  000c7	33 c0		 xor	 eax, eax
  000c9	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  000cd	eb 0c		 jmp	 SHORT $LN6@Int_lpc_1t
$LN5@Int_lpc_1t:
  000cf	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  000d3	66 83 c0 01	 add	 ax, 1
  000d7	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN6@Int_lpc_1t:
  000db	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000df	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000e2	7d 4c		 jge	 SHORT $LN4@Int_lpc_1t

; 196  :         lsp[i] = add(shr(lsp_old[i], 1), shr(lsp_new[i], 1));

  000e4	6a 01		 push	 1
  000e6	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR _lsp_new$[ebp]
  000ed	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000f1	52		 push	 edx
  000f2	e8 00 00 00 00	 call	 _shr
  000f7	83 c4 08	 add	 esp, 8
  000fa	0f b7 c0	 movzx	 eax, ax
  000fd	50		 push	 eax
  000fe	6a 01		 push	 1
  00100	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00104	8b 55 08	 mov	 edx, DWORD PTR _lsp_old$[ebp]
  00107	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _shr
  00111	83 c4 08	 add	 esp, 8
  00114	0f b7 c8	 movzx	 ecx, ax
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 _add
  0011d	83 c4 08	 add	 esp, 8
  00120	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  00124	66 89 44 55 d8	 mov	 WORD PTR _lsp$[ebp+edx*2], ax

; 197  : 		                    move16 ();

  00129	e8 00 00 00 00	 call	 _move16

; 198  :     }

  0012e	eb 9f		 jmp	 SHORT $LN5@Int_lpc_1t
$LN4@Int_lpc_1t:

; 199  : 
; 200  :     Lsp_Az(lsp, Az);        /* Subframe 2 */

  00130	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  00133	50		 push	 eax
  00134	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  00137	51		 push	 ecx
  00138	e8 00 00 00 00	 call	 _Lsp_Az
  0013d	83 c4 08	 add	 esp, 8

; 201  :     Az += MP1;              move16 ();

  00140	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  00143	83 c0 16	 add	 eax, 22			; 00000016H
  00146	89 45 10	 mov	 DWORD PTR _Az$[ebp], eax
  00149	e8 00 00 00 00	 call	 _move16

; 202  : 
; 203  :     for (i = 0; i < M; i++) {

  0014e	33 c0		 xor	 eax, eax
  00150	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00154	eb 0c		 jmp	 SHORT $LN3@Int_lpc_1t
$LN2@Int_lpc_1t:
  00156	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0015a	66 83 c0 01	 add	 ax, 1
  0015e	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN3@Int_lpc_1t:
  00162	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00166	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00169	7d 64		 jge	 SHORT $LN1@Int_lpc_1t

; 204  :         lsp[i] = add(shr(lsp_old[i], 2), sub(lsp_new[i], shr(lsp_new[i], 2)));

  0016b	6a 02		 push	 2
  0016d	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00171	8b 4d 0c	 mov	 ecx, DWORD PTR _lsp_new$[ebp]
  00174	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00178	52		 push	 edx
  00179	e8 00 00 00 00	 call	 _shr
  0017e	83 c4 08	 add	 esp, 8
  00181	0f b7 c0	 movzx	 eax, ax
  00184	50		 push	 eax
  00185	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00189	8b 55 0c	 mov	 edx, DWORD PTR _lsp_new$[ebp]
  0018c	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 _sub
  00196	83 c4 08	 add	 esp, 8
  00199	0f b7 c8	 movzx	 ecx, ax
  0019c	51		 push	 ecx
  0019d	6a 02		 push	 2
  0019f	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  001a3	8b 45 08	 mov	 eax, DWORD PTR _lsp_old$[ebp]
  001a6	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  001aa	51		 push	 ecx
  001ab	e8 00 00 00 00	 call	 _shr
  001b0	83 c4 08	 add	 esp, 8
  001b3	0f b7 d0	 movzx	 edx, ax
  001b6	52		 push	 edx
  001b7	e8 00 00 00 00	 call	 _add
  001bc	83 c4 08	 add	 esp, 8
  001bf	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  001c3	66 89 44 4d d8	 mov	 WORD PTR _lsp$[ebp+ecx*2], ax

; 205  : 		                    move16 ();

  001c8	e8 00 00 00 00	 call	 _move16

; 206  :     }

  001cd	eb 87		 jmp	 SHORT $LN2@Int_lpc_1t
$LN1@Int_lpc_1t:

; 207  : 
; 208  :     Lsp_Az(lsp, Az);       /* Subframe 3 */

  001cf	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  001d2	50		 push	 eax
  001d3	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  001d6	51		 push	 ecx
  001d7	e8 00 00 00 00	 call	 _Lsp_Az
  001dc	83 c4 08	 add	 esp, 8

; 209  :     Az += MP1;              move16 ();

  001df	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  001e2	83 c0 16	 add	 eax, 22			; 00000016H
  001e5	89 45 10	 mov	 DWORD PTR _Az$[ebp], eax
  001e8	e8 00 00 00 00	 call	 _move16

; 210  : 
; 211  :     Lsp_Az(lsp_new, Az);        /* Subframe 4 */

  001ed	8b 45 10	 mov	 eax, DWORD PTR _Az$[ebp]
  001f0	50		 push	 eax
  001f1	8b 4d 0c	 mov	 ecx, DWORD PTR _lsp_new$[ebp]
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _Lsp_Az
  001fa	83 c4 08	 add	 esp, 8

; 212  : 
; 213  :     return;
; 214  : }

  001fd	52		 push	 edx
  001fe	8b cd		 mov	 ecx, ebp
  00200	50		 push	 eax
  00201	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@Int_lpc_1t
  00207	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0020c	58		 pop	 eax
  0020d	5a		 pop	 edx
  0020e	5f		 pop	 edi
  0020f	5e		 pop	 esi
  00210	5b		 pop	 ebx
  00211	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00214	33 cd		 xor	 ecx, ebp
  00216	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021b	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00221	3b ec		 cmp	 ebp, esp
  00223	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c3		 ret	 0
$LN14@Int_lpc_1t:
  0022c	01 00 00 00	 DD	 1
  00230	00 00 00 00	 DD	 $LN13@Int_lpc_1t
$LN13@Int_lpc_1t:
  00234	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00238	14 00 00 00	 DD	 20			; 00000014H
  0023c	00 00 00 00	 DD	 $LN12@Int_lpc_1t
$LN12@Int_lpc_1t:
  00240	6c		 DB	 108			; 0000006cH
  00241	73		 DB	 115			; 00000073H
  00242	70		 DB	 112			; 00000070H
  00243	00		 DB	 0
_Int_lpc_1to3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\int_lpc.c
;	COMDAT _Int_lpc_1and3_2
_TEXT	SEGMENT
_lsp$ = -40						; size = 20
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_lsp_old$ = 8						; size = 4
_lsp_mid$ = 12						; size = 4
_lsp_new$ = 16						; size = 4
_Az$ = 20						; size = 4
_Int_lpc_1and3_2 PROC					; COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  :     Word16 i;
; 136  :     Word16 lsp[M];
; 137  : 
; 138  :     /*  lsp[i] = lsp_mid[i] * 0.5 + lsp_old[i] * 0.5 */
; 139  : 
; 140  :     for (i = 0; i < M; i++)

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0002e	eb 0c		 jmp	 SHORT $LN6@Int_lpc_1a
$LN5@Int_lpc_1a:
  00030	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00034	66 83 c0 01	 add	 ax, 1
  00038	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN6@Int_lpc_1a:
  0003c	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00040	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00043	7d 4c		 jge	 SHORT $LN4@Int_lpc_1a

; 141  :     {
; 142  :         lsp[i] = add (shr (lsp_mid[i], 1), shr (lsp_old[i], 1));

  00045	6a 01		 push	 1
  00047	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _lsp_old$[ebp]
  0004e	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 _shr
  00058	83 c4 08	 add	 esp, 8
  0005b	0f b7 c0	 movzx	 eax, ax
  0005e	50		 push	 eax
  0005f	6a 01		 push	 1
  00061	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00065	8b 55 0c	 mov	 edx, DWORD PTR _lsp_mid$[ebp]
  00068	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _shr
  00072	83 c4 08	 add	 esp, 8
  00075	0f b7 c8	 movzx	 ecx, ax
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 _add
  0007e	83 c4 08	 add	 esp, 8
  00081	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  00085	66 89 44 55 d8	 mov	 WORD PTR _lsp$[ebp+edx*2], ax

; 143  :                                 move16 (); 

  0008a	e8 00 00 00 00	 call	 _move16

; 144  :     }

  0008f	eb 9f		 jmp	 SHORT $LN5@Int_lpc_1a
$LN4@Int_lpc_1a:

; 145  :     Lsp_Az (lsp, Az);           /* Subframe 1 */

  00091	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  00094	50		 push	 eax
  00095	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _Lsp_Az
  0009e	83 c4 08	 add	 esp, 8

; 146  :     Az += MP1 * 2;              move16 (); 

  000a1	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  000a4	83 c0 2c	 add	 eax, 44			; 0000002cH
  000a7	89 45 14	 mov	 DWORD PTR _Az$[ebp], eax
  000aa	e8 00 00 00 00	 call	 _move16

; 147  : 
; 148  :     for (i = 0; i < M; i++)

  000af	33 c0		 xor	 eax, eax
  000b1	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  000b5	eb 0c		 jmp	 SHORT $LN3@Int_lpc_1a
$LN2@Int_lpc_1a:
  000b7	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  000bb	66 83 c0 01	 add	 ax, 1
  000bf	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN3@Int_lpc_1a:
  000c3	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000c7	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000ca	7d 4c		 jge	 SHORT $LN1@Int_lpc_1a

; 149  :     {
; 150  :         lsp[i] = add (shr (lsp_mid[i], 1), shr (lsp_new[i], 1));

  000cc	6a 01		 push	 1
  000ce	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000d2	8b 4d 10	 mov	 ecx, DWORD PTR _lsp_new$[ebp]
  000d5	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000d9	52		 push	 edx
  000da	e8 00 00 00 00	 call	 _shr
  000df	83 c4 08	 add	 esp, 8
  000e2	0f b7 c0	 movzx	 eax, ax
  000e5	50		 push	 eax
  000e6	6a 01		 push	 1
  000e8	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  000ec	8b 55 0c	 mov	 edx, DWORD PTR _lsp_mid$[ebp]
  000ef	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 _shr
  000f9	83 c4 08	 add	 esp, 8
  000fc	0f b7 c8	 movzx	 ecx, ax
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 _add
  00105	83 c4 08	 add	 esp, 8
  00108	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  0010c	66 89 44 55 d8	 mov	 WORD PTR _lsp$[ebp+edx*2], ax

; 151  :                                 move16 (); 

  00111	e8 00 00 00 00	 call	 _move16

; 152  :     }

  00116	eb 9f		 jmp	 SHORT $LN2@Int_lpc_1a
$LN1@Int_lpc_1a:

; 153  :     Lsp_Az (lsp, Az);           /* Subframe 3 */

  00118	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  0011b	50		 push	 eax
  0011c	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  0011f	51		 push	 ecx
  00120	e8 00 00 00 00	 call	 _Lsp_Az
  00125	83 c4 08	 add	 esp, 8

; 154  : 
; 155  :     return;
; 156  : }

  00128	52		 push	 edx
  00129	8b cd		 mov	 ecx, ebp
  0012b	50		 push	 eax
  0012c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Int_lpc_1a
  00132	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00137	58		 pop	 eax
  00138	5a		 pop	 edx
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013f	33 cd		 xor	 ecx, ebp
  00141	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00146	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  0014c	3b ec		 cmp	 ebp, esp
  0014e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
  00157	90		 npad	 1
$LN11@Int_lpc_1a:
  00158	01 00 00 00	 DD	 1
  0015c	00 00 00 00	 DD	 $LN10@Int_lpc_1a
$LN10@Int_lpc_1a:
  00160	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00164	14 00 00 00	 DD	 20			; 00000014H
  00168	00 00 00 00	 DD	 $LN9@Int_lpc_1a
$LN9@Int_lpc_1a:
  0016c	6c		 DB	 108			; 0000006cH
  0016d	73		 DB	 115			; 00000073H
  0016e	70		 DB	 112			; 00000070H
  0016f	00		 DB	 0
_Int_lpc_1and3_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\int_lpc.c
;	COMDAT _Int_lpc_1and3
_TEXT	SEGMENT
_lsp$ = -40						; size = 20
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_lsp_old$ = 8						; size = 4
_lsp_mid$ = 12						; size = 4
_lsp_new$ = 16						; size = 4
_Az$ = 20						; size = 4
_Int_lpc_1and3 PROC					; COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 83   :     Word16 i;
; 84   :     Word16 lsp[M];
; 85   : 
; 86   :     /*  lsp[i] = lsp_mid[i] * 0.5 + lsp_old[i] * 0.5 */
; 87   : 
; 88   :     for (i = 0; i < M; i++)

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0002e	eb 0c		 jmp	 SHORT $LN6@Int_lpc_1a
$LN5@Int_lpc_1a:
  00030	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00034	66 83 c0 01	 add	 ax, 1
  00038	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN6@Int_lpc_1a:
  0003c	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00040	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00043	7d 4c		 jge	 SHORT $LN4@Int_lpc_1a

; 89   :     {
; 90   :         lsp[i] = add (shr (lsp_mid[i], 1), shr (lsp_old[i], 1));

  00045	6a 01		 push	 1
  00047	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _lsp_old$[ebp]
  0004e	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 _shr
  00058	83 c4 08	 add	 esp, 8
  0005b	0f b7 c0	 movzx	 eax, ax
  0005e	50		 push	 eax
  0005f	6a 01		 push	 1
  00061	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  00065	8b 55 0c	 mov	 edx, DWORD PTR _lsp_mid$[ebp]
  00068	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _shr
  00072	83 c4 08	 add	 esp, 8
  00075	0f b7 c8	 movzx	 ecx, ax
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 _add
  0007e	83 c4 08	 add	 esp, 8
  00081	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  00085	66 89 44 55 d8	 mov	 WORD PTR _lsp$[ebp+edx*2], ax

; 91   :                                 move16 (); 

  0008a	e8 00 00 00 00	 call	 _move16

; 92   :     }

  0008f	eb 9f		 jmp	 SHORT $LN5@Int_lpc_1a
$LN4@Int_lpc_1a:

; 93   : 
; 94   :     Lsp_Az (lsp, Az);           /* Subframe 1 */

  00091	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  00094	50		 push	 eax
  00095	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _Lsp_Az
  0009e	83 c4 08	 add	 esp, 8

; 95   :     Az += MP1;                  move16 (); 

  000a1	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  000a4	83 c0 16	 add	 eax, 22			; 00000016H
  000a7	89 45 14	 mov	 DWORD PTR _Az$[ebp], eax
  000aa	e8 00 00 00 00	 call	 _move16

; 96   : 
; 97   :     Lsp_Az (lsp_mid, Az);       /* Subframe 2 */

  000af	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  000b2	50		 push	 eax
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _lsp_mid$[ebp]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 _Lsp_Az
  000bc	83 c4 08	 add	 esp, 8

; 98   :     Az += MP1;                  move16 (); 

  000bf	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  000c2	83 c0 16	 add	 eax, 22			; 00000016H
  000c5	89 45 14	 mov	 DWORD PTR _Az$[ebp], eax
  000c8	e8 00 00 00 00	 call	 _move16

; 99   : 
; 100  :     for (i = 0; i < M; i++)

  000cd	33 c0		 xor	 eax, eax
  000cf	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  000d3	eb 0c		 jmp	 SHORT $LN3@Int_lpc_1a
$LN2@Int_lpc_1a:
  000d5	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  000d9	66 83 c0 01	 add	 ax, 1
  000dd	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN3@Int_lpc_1a:
  000e1	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000e5	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000e8	7d 4c		 jge	 SHORT $LN1@Int_lpc_1a

; 101  :     {
; 102  :         lsp[i] = add (shr (lsp_mid[i], 1), shr (lsp_new[i], 1));

  000ea	6a 01		 push	 1
  000ec	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000f0	8b 4d 10	 mov	 ecx, DWORD PTR _lsp_new$[ebp]
  000f3	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 _shr
  000fd	83 c4 08	 add	 esp, 8
  00100	0f b7 c0	 movzx	 eax, ax
  00103	50		 push	 eax
  00104	6a 01		 push	 1
  00106	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  0010a	8b 55 0c	 mov	 edx, DWORD PTR _lsp_mid$[ebp]
  0010d	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 _shr
  00117	83 c4 08	 add	 esp, 8
  0011a	0f b7 c8	 movzx	 ecx, ax
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 _add
  00123	83 c4 08	 add	 esp, 8
  00126	0f bf 55 f4	 movsx	 edx, WORD PTR _i$[ebp]
  0012a	66 89 44 55 d8	 mov	 WORD PTR _lsp$[ebp+edx*2], ax

; 103  :                                 move16 (); 

  0012f	e8 00 00 00 00	 call	 _move16

; 104  :     }

  00134	eb 9f		 jmp	 SHORT $LN2@Int_lpc_1a
$LN1@Int_lpc_1a:

; 105  : 
; 106  :     Lsp_Az (lsp, Az);           /* Subframe 3 */

  00136	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  00139	50		 push	 eax
  0013a	8d 4d d8	 lea	 ecx, DWORD PTR _lsp$[ebp]
  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 _Lsp_Az
  00143	83 c4 08	 add	 esp, 8

; 107  :     Az += MP1;                  move16 (); 

  00146	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  00149	83 c0 16	 add	 eax, 22			; 00000016H
  0014c	89 45 14	 mov	 DWORD PTR _Az$[ebp], eax
  0014f	e8 00 00 00 00	 call	 _move16

; 108  : 
; 109  :     Lsp_Az (lsp_new, Az);       /* Subframe 4 */

  00154	8b 45 14	 mov	 eax, DWORD PTR _Az$[ebp]
  00157	50		 push	 eax
  00158	8b 4d 10	 mov	 ecx, DWORD PTR _lsp_new$[ebp]
  0015b	51		 push	 ecx
  0015c	e8 00 00 00 00	 call	 _Lsp_Az
  00161	83 c4 08	 add	 esp, 8

; 110  : 
; 111  :     return;
; 112  : }

  00164	52		 push	 edx
  00165	8b cd		 mov	 ecx, ebp
  00167	50		 push	 eax
  00168	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Int_lpc_1a
  0016e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00173	58		 pop	 eax
  00174	5a		 pop	 edx
  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017b	33 cd		 xor	 ecx, ebp
  0017d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00182	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00188	3b ec		 cmp	 ebp, esp
  0018a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018f	8b e5		 mov	 esp, ebp
  00191	5d		 pop	 ebp
  00192	c3		 ret	 0
  00193	90		 npad	 1
$LN11@Int_lpc_1a:
  00194	01 00 00 00	 DD	 1
  00198	00 00 00 00	 DD	 $LN10@Int_lpc_1a
$LN10@Int_lpc_1a:
  0019c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  001a0	14 00 00 00	 DD	 20			; 00000014H
  001a4	00 00 00 00	 DD	 $LN9@Int_lpc_1a
$LN9@Int_lpc_1a:
  001a8	6c		 DB	 108			; 0000006cH
  001a9	73		 DB	 115			; 00000073H
  001aa	70		 DB	 112			; 00000070H
  001ab	00		 DB	 0
_Int_lpc_1and3 ENDP
_TEXT	ENDS
END
