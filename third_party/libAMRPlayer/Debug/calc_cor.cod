; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\calc_cor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_calc_cor_id
CONST	SEGMENT
_calc_cor_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_comp_corr
EXTRN	_L_mac:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\calc_cor.c
;	COMDAT _comp_corr
_TEXT	SEGMENT
_t0$ = -56						; size = 4
_p1$ = -44						; size = 4
_p$ = -32						; size = 4
_j$ = -20						; size = 2
_i$ = -8						; size = 2
_scal_sig$ = 8						; size = 4
_L_frame$ = 12						; size = 2
_lag_max$ = 16						; size = 2
_lag_min$ = 20						; size = 2
_corr$ = 24						; size = 4
_comp_corr PROC						; COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 62   :     Word16 i, j;
; 63   :     Word16 *p, *p1;
; 64   :     Word32 t0;
; 65   :     
; 66   :     for (i = lag_max; i >= lag_min; i--)

  0001e	66 8b 45 10	 mov	 ax, WORD PTR _lag_max$[ebp]
  00022	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00026	eb 0c		 jmp	 SHORT $LN6@comp_corr
$LN5@comp_corr:
  00028	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0002c	66 83 e8 01	 sub	 ax, 1
  00030	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN6@comp_corr:
  00034	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00038	0f bf 4d 14	 movsx	 ecx, WORD PTR _lag_min$[ebp]
  0003c	3b c1		 cmp	 eax, ecx
  0003e	0f 8c 95 00 00
	00		 jl	 $LN7@comp_corr

; 67   :     {
; 68   :        p = scal_sig;           move16 (); 

  00044	8b 45 08	 mov	 eax, DWORD PTR _scal_sig$[ebp]
  00047	89 45 e0	 mov	 DWORD PTR _p$[ebp], eax
  0004a	e8 00 00 00 00	 call	 _move16

; 69   :        p1 = &scal_sig[-i];     move16 (); 

  0004f	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00053	f7 d8		 neg	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _scal_sig$[ebp]
  00058	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0005b	89 55 d4	 mov	 DWORD PTR _p1$[ebp], edx
  0005e	e8 00 00 00 00	 call	 _move16

; 70   :        t0 = 0;                 move32 (); 

  00063	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _t0$[ebp], 0
  0006a	e8 00 00 00 00	 call	 _move32

; 71   :        
; 72   :        for (j = 0; j < L_frame; j++, p++, p1++)

  0006f	33 c0		 xor	 eax, eax
  00071	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
  00075	eb 1e		 jmp	 SHORT $LN3@comp_corr
$LN2@comp_corr:
  00077	66 8b 45 ec	 mov	 ax, WORD PTR _j$[ebp]
  0007b	66 83 c0 01	 add	 ax, 1
  0007f	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
  00083	8b 4d e0	 mov	 ecx, DWORD PTR _p$[ebp]
  00086	83 c1 02	 add	 ecx, 2
  00089	89 4d e0	 mov	 DWORD PTR _p$[ebp], ecx
  0008c	8b 55 d4	 mov	 edx, DWORD PTR _p1$[ebp]
  0008f	83 c2 02	 add	 edx, 2
  00092	89 55 d4	 mov	 DWORD PTR _p1$[ebp], edx
$LN3@comp_corr:
  00095	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  00099	0f bf 4d 0c	 movsx	 ecx, WORD PTR _L_frame$[ebp]
  0009d	3b c1		 cmp	 eax, ecx
  0009f	7d 1f		 jge	 SHORT $LN1@comp_corr

; 73   :        {
; 74   :           t0 = L_mac (t0, *p, *p1);             

  000a1	8b 45 d4	 mov	 eax, DWORD PTR _p1$[ebp]
  000a4	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000a7	51		 push	 ecx
  000a8	8b 55 e0	 mov	 edx, DWORD PTR _p$[ebp]
  000ab	0f b7 02	 movzx	 eax, WORD PTR [edx]
  000ae	50		 push	 eax
  000af	8b 4d c8	 mov	 ecx, DWORD PTR _t0$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _L_mac
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	89 45 c8	 mov	 DWORD PTR _t0$[ebp], eax

; 75   :        }

  000be	eb b7		 jmp	 SHORT $LN2@comp_corr
$LN1@comp_corr:

; 76   :        corr[-i] = t0;          move32 ();

  000c0	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000c4	f7 d8		 neg	 eax
  000c6	8b 4d 18	 mov	 ecx, DWORD PTR _corr$[ebp]
  000c9	8b 55 c8	 mov	 edx, DWORD PTR _t0$[ebp]
  000cc	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  000cf	e8 00 00 00 00	 call	 _move32

; 77   :     }

  000d4	e9 4f ff ff ff	 jmp	 $LN5@comp_corr
$LN7@comp_corr:

; 78   : 
; 79   :     return;
; 80   : }

  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000e2	3b ec		 cmp	 ebp, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
_comp_corr ENDP
_TEXT	ENDS
END
