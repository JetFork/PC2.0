; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\dec_lag3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_dec_lag3_id
CONST	SEGMENT
_dec_lag3_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Dec_lag3
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_mult:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
;	COMDAT _Dec_lag3
_TEXT	SEGMENT
_tmp_lag$ = -20						; size = 2
_i$ = -8						; size = 2
_index$ = 8						; size = 2
_t0_min$ = 12						; size = 2
_t0_max$ = 16						; size = 2
_i_subfr$ = 20						; size = 2
_T0_prev$ = 24						; size = 2
_T0$ = 28						; size = 4
_T0_frac$ = 32						; size = 4
_flag4$ = 36						; size = 2
_Dec_lag3 PROC						; COMDAT

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 72   :     Word16 i;
; 73   :     Word16 tmp_lag;
; 74   :     
; 75   :     test (); 

  0001e	e8 00 00 00 00	 call	 _test

; 76   :     if (i_subfr == 0) {    /* if 1st or 3rd subframe */

  00023	0f bf 45 14	 movsx	 eax, WORD PTR _i_subfr$[ebp]
  00027	85 c0		 test	 eax, eax
  00029	0f 85 d2 00 00
	00		 jne	 $LN12@Dec_lag3

; 77   :        test ();

  0002f	e8 00 00 00 00	 call	 _test

; 78   : 	   if (sub(index, 197) < 0) {

  00034	68 c5 00 00 00	 push	 197			; 000000c5H
  00039	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _sub
  00043	83 c4 08	 add	 esp, 8
  00046	0f bf c8	 movsx	 ecx, ax
  00049	85 c9		 test	 ecx, ecx
  0004b	0f 8d 89 00 00
	00		 jge	 $LN11@Dec_lag3

; 79   :           
; 80   :           *T0 = add(mult(add(index, 2), 10923), 19);

  00051	6a 13		 push	 19			; 00000013H
  00053	68 ab 2a 00 00	 push	 10923			; 00002aabH
  00058	6a 02		 push	 2
  0005a	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _add
  00064	83 c4 08	 add	 esp, 8
  00067	0f b7 c8	 movzx	 ecx, ax
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 _mult
  00070	83 c4 08	 add	 esp, 8
  00073	0f b7 d0	 movzx	 edx, ax
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 _add
  0007c	83 c4 08	 add	 esp, 8
  0007f	8b 4d 1c	 mov	 ecx, DWORD PTR _T0$[ebp]
  00082	66 89 01	 mov	 WORD PTR [ecx], ax

; 81   :            
; 82   :           i = add(add(*T0, *T0), *T0);

  00085	8b 45 1c	 mov	 eax, DWORD PTR _T0$[ebp]
  00088	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0008b	51		 push	 ecx
  0008c	8b 55 1c	 mov	 edx, DWORD PTR _T0$[ebp]
  0008f	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00092	50		 push	 eax
  00093	8b 4d 1c	 mov	 ecx, DWORD PTR _T0$[ebp]
  00096	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00099	52		 push	 edx
  0009a	e8 00 00 00 00	 call	 _add
  0009f	83 c4 08	 add	 esp, 8
  000a2	0f b7 c0	 movzx	 eax, ax
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _add
  000ab	83 c4 08	 add	 esp, 8
  000ae	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 83   :           *T0_frac = add(sub(index, i), 58);

  000b2	6a 3a		 push	 58			; 0000003aH
  000b4	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  000b8	50		 push	 eax
  000b9	0f b7 4d 08	 movzx	 ecx, WORD PTR _index$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _sub
  000c3	83 c4 08	 add	 esp, 8
  000c6	0f b7 d0	 movzx	 edx, ax
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 _add
  000cf	83 c4 08	 add	 esp, 8
  000d2	8b 4d 20	 mov	 ecx, DWORD PTR _T0_frac$[ebp]
  000d5	66 89 01	 mov	 WORD PTR [ecx], ax

; 84   :        } else {

  000d8	eb 22		 jmp	 SHORT $LN10@Dec_lag3
$LN11@Dec_lag3:

; 85   :           *T0 = sub(index, 112);

  000da	6a 70		 push	 112			; 00000070H
  000dc	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _sub
  000e6	83 c4 08	 add	 esp, 8
  000e9	8b 4d 1c	 mov	 ecx, DWORD PTR _T0$[ebp]
  000ec	66 89 01	 mov	 WORD PTR [ecx], ax

; 86   :           *T0_frac = 0;                                        move16 ();

  000ef	33 c0		 xor	 eax, eax
  000f1	8b 4d 20	 mov	 ecx, DWORD PTR _T0_frac$[ebp]
  000f4	66 89 01	 mov	 WORD PTR [ecx], ax
  000f7	e8 00 00 00 00	 call	 _move16
$LN10@Dec_lag3:

; 87   :        }
; 88   :        
; 89   :     } else {    /* 2nd or 4th subframe */

  000fc	e9 8a 02 00 00	 jmp	 $LN13@Dec_lag3
$LN12@Dec_lag3:

; 90   : 
; 91   :        test ();

  00101	e8 00 00 00 00	 call	 _test

; 92   :        if (flag4 == 0) {

  00106	0f bf 45 24	 movsx	 eax, WORD PTR _flag4$[ebp]
  0010a	85 c0		 test	 eax, eax
  0010c	0f 85 9c 00 00
	00		 jne	 $LN8@Dec_lag3

; 93   :           
; 94   :           /* 'normal' decoding: either with 5 or 6 bit resolution */
; 95   :           
; 96   :           i = sub(mult(add(index, 2), 10923), 1);

  00112	6a 01		 push	 1
  00114	68 ab 2a 00 00	 push	 10923			; 00002aabH
  00119	6a 02		 push	 2
  0011b	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _add
  00125	83 c4 08	 add	 esp, 8
  00128	0f b7 c8	 movzx	 ecx, ax
  0012b	51		 push	 ecx
  0012c	e8 00 00 00 00	 call	 _mult
  00131	83 c4 08	 add	 esp, 8
  00134	0f b7 d0	 movzx	 edx, ax
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 _sub
  0013d	83 c4 08	 add	 esp, 8
  00140	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 97   :           *T0 = add(i, t0_min);

  00144	0f b7 45 0c	 movzx	 eax, WORD PTR _t0_min$[ebp]
  00148	50		 push	 eax
  00149	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 _add
  00153	83 c4 08	 add	 esp, 8
  00156	8b 55 1c	 mov	 edx, DWORD PTR _T0$[ebp]
  00159	66 89 02	 mov	 WORD PTR [edx], ax

; 98   :           
; 99   :           i = add(add(i, i), i);

  0015c	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  00160	50		 push	 eax
  00161	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  00165	51		 push	 ecx
  00166	0f b7 55 f8	 movzx	 edx, WORD PTR _i$[ebp]
  0016a	52		 push	 edx
  0016b	e8 00 00 00 00	 call	 _add
  00170	83 c4 08	 add	 esp, 8
  00173	0f b7 c0	 movzx	 eax, ax
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _add
  0017c	83 c4 08	 add	 esp, 8
  0017f	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 100  :           *T0_frac = sub(sub(index, 2), i);

  00183	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  00187	50		 push	 eax
  00188	6a 02		 push	 2
  0018a	0f b7 4d 08	 movzx	 ecx, WORD PTR _index$[ebp]
  0018e	51		 push	 ecx
  0018f	e8 00 00 00 00	 call	 _sub
  00194	83 c4 08	 add	 esp, 8
  00197	0f b7 d0	 movzx	 edx, ax
  0019a	52		 push	 edx
  0019b	e8 00 00 00 00	 call	 _sub
  001a0	83 c4 08	 add	 esp, 8
  001a3	8b 4d 20	 mov	 ecx, DWORD PTR _T0_frac$[ebp]
  001a6	66 89 01	 mov	 WORD PTR [ecx], ax

; 101  :        }
; 102  :        else {

  001a9	e9 dd 01 00 00	 jmp	 $LN13@Dec_lag3
$LN8@Dec_lag3:

; 103  :           
; 104  :           /* decoding with 4 bit resolution */
; 105  :           
; 106  :           tmp_lag = T0_prev;                                   move16 ();

  001ae	66 8b 45 18	 mov	 ax, WORD PTR _T0_prev$[ebp]
  001b2	66 89 45 ec	 mov	 WORD PTR _tmp_lag$[ebp], ax
  001b6	e8 00 00 00 00	 call	 _move16

; 107  : 
; 108  :           test ();

  001bb	e8 00 00 00 00	 call	 _test

; 109  :           if ( sub( sub(tmp_lag, t0_min), 5) > 0)

  001c0	6a 05		 push	 5
  001c2	0f b7 45 0c	 movzx	 eax, WORD PTR _t0_min$[ebp]
  001c6	50		 push	 eax
  001c7	0f b7 4d ec	 movzx	 ecx, WORD PTR _tmp_lag$[ebp]
  001cb	51		 push	 ecx
  001cc	e8 00 00 00 00	 call	 _sub
  001d1	83 c4 08	 add	 esp, 8
  001d4	0f b7 d0	 movzx	 edx, ax
  001d7	52		 push	 edx
  001d8	e8 00 00 00 00	 call	 _sub
  001dd	83 c4 08	 add	 esp, 8
  001e0	98		 cwde
  001e1	85 c0		 test	 eax, eax
  001e3	7e 13		 jle	 SHORT $LN6@Dec_lag3

; 110  :              tmp_lag = add (t0_min, 5);

  001e5	6a 05		 push	 5
  001e7	0f b7 45 0c	 movzx	 eax, WORD PTR _t0_min$[ebp]
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 _add
  001f1	83 c4 08	 add	 esp, 8
  001f4	66 89 45 ec	 mov	 WORD PTR _tmp_lag$[ebp], ax
$LN6@Dec_lag3:

; 111  :           test ();

  001f8	e8 00 00 00 00	 call	 _test

; 112  :           if ( sub( sub(t0_max, tmp_lag), 4) > 0)

  001fd	6a 04		 push	 4
  001ff	0f b7 45 ec	 movzx	 eax, WORD PTR _tmp_lag$[ebp]
  00203	50		 push	 eax
  00204	0f b7 4d 10	 movzx	 ecx, WORD PTR _t0_max$[ebp]
  00208	51		 push	 ecx
  00209	e8 00 00 00 00	 call	 _sub
  0020e	83 c4 08	 add	 esp, 8
  00211	0f b7 d0	 movzx	 edx, ax
  00214	52		 push	 edx
  00215	e8 00 00 00 00	 call	 _sub
  0021a	83 c4 08	 add	 esp, 8
  0021d	98		 cwde
  0021e	85 c0		 test	 eax, eax
  00220	7e 13		 jle	 SHORT $LN5@Dec_lag3

; 113  :              tmp_lag = sub (t0_max, 4);

  00222	6a 04		 push	 4
  00224	0f b7 45 10	 movzx	 eax, WORD PTR _t0_max$[ebp]
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 _sub
  0022e	83 c4 08	 add	 esp, 8
  00231	66 89 45 ec	 mov	 WORD PTR _tmp_lag$[ebp], ax
$LN5@Dec_lag3:

; 114  :           
; 115  :           test ();          

  00235	e8 00 00 00 00	 call	 _test

; 116  :           if (sub(index, 4) < 0)

  0023a	6a 04		 push	 4
  0023c	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  00240	50		 push	 eax
  00241	e8 00 00 00 00	 call	 _sub
  00246	83 c4 08	 add	 esp, 8
  00249	0f bf c8	 movsx	 ecx, ax
  0024c	85 c9		 test	 ecx, ecx
  0024e	7d 3d		 jge	 SHORT $LN4@Dec_lag3

; 117  :           {
; 118  :              i = sub(tmp_lag, 5);

  00250	6a 05		 push	 5
  00252	0f b7 45 ec	 movzx	 eax, WORD PTR _tmp_lag$[ebp]
  00256	50		 push	 eax
  00257	e8 00 00 00 00	 call	 _sub
  0025c	83 c4 08	 add	 esp, 8
  0025f	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 119  :              *T0 = add(i, index);

  00263	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  00267	50		 push	 eax
  00268	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  0026c	51		 push	 ecx
  0026d	e8 00 00 00 00	 call	 _add
  00272	83 c4 08	 add	 esp, 8
  00275	8b 55 1c	 mov	 edx, DWORD PTR _T0$[ebp]
  00278	66 89 02	 mov	 WORD PTR [edx], ax

; 120  :              *T0_frac = 0;                                     move16 ();

  0027b	33 c0		 xor	 eax, eax
  0027d	8b 4d 20	 mov	 ecx, DWORD PTR _T0_frac$[ebp]
  00280	66 89 01	 mov	 WORD PTR [ecx], ax
  00283	e8 00 00 00 00	 call	 _move16

; 121  :           }
; 122  :           else

  00288	e9 fe 00 00 00	 jmp	 $LN13@Dec_lag3
$LN4@Dec_lag3:

; 123  :           {
; 124  :              test ();

  0028d	e8 00 00 00 00	 call	 _test

; 125  :              if (sub(index, 12) < 0)

  00292	6a 0c		 push	 12			; 0000000cH
  00294	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 _sub
  0029e	83 c4 08	 add	 esp, 8
  002a1	0f bf c8	 movsx	 ecx, ax
  002a4	85 c9		 test	 ecx, ecx
  002a6	0f 8d 99 00 00
	00		 jge	 $LN2@Dec_lag3

; 126  :              {
; 127  :                 i = sub(mult(sub(index, 5), 10923), 1);

  002ac	6a 01		 push	 1
  002ae	68 ab 2a 00 00	 push	 10923			; 00002aabH
  002b3	6a 05		 push	 5
  002b5	0f b7 45 08	 movzx	 eax, WORD PTR _index$[ebp]
  002b9	50		 push	 eax
  002ba	e8 00 00 00 00	 call	 _sub
  002bf	83 c4 08	 add	 esp, 8
  002c2	0f b7 c8	 movzx	 ecx, ax
  002c5	51		 push	 ecx
  002c6	e8 00 00 00 00	 call	 _mult
  002cb	83 c4 08	 add	 esp, 8
  002ce	0f b7 d0	 movzx	 edx, ax
  002d1	52		 push	 edx
  002d2	e8 00 00 00 00	 call	 _sub
  002d7	83 c4 08	 add	 esp, 8
  002da	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 128  :                 *T0 = add(i, tmp_lag);

  002de	0f b7 45 ec	 movzx	 eax, WORD PTR _tmp_lag$[ebp]
  002e2	50		 push	 eax
  002e3	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  002e7	51		 push	 ecx
  002e8	e8 00 00 00 00	 call	 _add
  002ed	83 c4 08	 add	 esp, 8
  002f0	8b 55 1c	 mov	 edx, DWORD PTR _T0$[ebp]
  002f3	66 89 02	 mov	 WORD PTR [edx], ax

; 129  :                 
; 130  :                 i = add(add(i, i), i);

  002f6	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  002fa	50		 push	 eax
  002fb	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  002ff	51		 push	 ecx
  00300	0f b7 55 f8	 movzx	 edx, WORD PTR _i$[ebp]
  00304	52		 push	 edx
  00305	e8 00 00 00 00	 call	 _add
  0030a	83 c4 08	 add	 esp, 8
  0030d	0f b7 c0	 movzx	 eax, ax
  00310	50		 push	 eax
  00311	e8 00 00 00 00	 call	 _add
  00316	83 c4 08	 add	 esp, 8
  00319	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 131  :                 *T0_frac = sub(sub(index, 9), i);

  0031d	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  00321	50		 push	 eax
  00322	6a 09		 push	 9
  00324	0f b7 4d 08	 movzx	 ecx, WORD PTR _index$[ebp]
  00328	51		 push	 ecx
  00329	e8 00 00 00 00	 call	 _sub
  0032e	83 c4 08	 add	 esp, 8
  00331	0f b7 d0	 movzx	 edx, ax
  00334	52		 push	 edx
  00335	e8 00 00 00 00	 call	 _sub
  0033a	83 c4 08	 add	 esp, 8
  0033d	8b 4d 20	 mov	 ecx, DWORD PTR _T0_frac$[ebp]
  00340	66 89 01	 mov	 WORD PTR [ecx], ax

; 132  :              }
; 133  :              else

  00343	eb 46		 jmp	 SHORT $LN13@Dec_lag3
$LN2@Dec_lag3:

; 134  :              {
; 135  :                 i = add( sub (index, 12), tmp_lag);

  00345	0f b7 45 ec	 movzx	 eax, WORD PTR _tmp_lag$[ebp]
  00349	50		 push	 eax
  0034a	6a 0c		 push	 12			; 0000000cH
  0034c	0f b7 4d 08	 movzx	 ecx, WORD PTR _index$[ebp]
  00350	51		 push	 ecx
  00351	e8 00 00 00 00	 call	 _sub
  00356	83 c4 08	 add	 esp, 8
  00359	0f b7 d0	 movzx	 edx, ax
  0035c	52		 push	 edx
  0035d	e8 00 00 00 00	 call	 _add
  00362	83 c4 08	 add	 esp, 8
  00365	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 136  :                 *T0 = add (i, 1);                

  00369	6a 01		 push	 1
  0036b	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  0036f	50		 push	 eax
  00370	e8 00 00 00 00	 call	 _add
  00375	83 c4 08	 add	 esp, 8
  00378	8b 4d 1c	 mov	 ecx, DWORD PTR _T0$[ebp]
  0037b	66 89 01	 mov	 WORD PTR [ecx], ax

; 137  :                 *T0_frac = 0;                                  move16 ();

  0037e	33 c0		 xor	 eax, eax
  00380	8b 4d 20	 mov	 ecx, DWORD PTR _T0_frac$[ebp]
  00383	66 89 01	 mov	 WORD PTR [ecx], ax
  00386	e8 00 00 00 00	 call	 _move16
$LN13@Dec_lag3:

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  0038b	5f		 pop	 edi
  0038c	5e		 pop	 esi
  0038d	5b		 pop	 ebx
  0038e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00394	3b ec		 cmp	 ebp, esp
  00396	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039b	8b e5		 mov	 esp, ebp
  0039d	5d		 pop	 ebp
  0039e	c3		 ret	 0
_Dec_lag3 ENDP
_TEXT	ENDS
END
