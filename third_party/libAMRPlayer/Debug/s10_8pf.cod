; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\s10_8pf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_s10_8pf_id
CONST	SEGMENT
_s10_8pf_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_search_10and8i40
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_mult:PROC
EXTRN	_L_mult:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_msu:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\s10_8pf.c
;	COMDAT _search_10and8i40
_TEXT	SEGMENT
_gsmefrFlag$ = -460					; size = 2
_alp2$ = -448						; size = 4
_alp1$ = -436						; size = 4
_alp0$ = -424						; size = 4
_s$ = -412						; size = 4
_rrv$ = -400						; size = 80
_alp_16$ = -312						; size = 2
_alp$ = -300						; size = 2
_alpk$ = -288						; size = 2
_sq2$ = -276						; size = 2
_sq$ = -264						; size = 2
_ps2$ = -252						; size = 2
_ps1$ = -240						; size = 2
_ps0$ = -228						; size = 2
_ps$ = -216						; size = 2
_psk$ = -204						; size = 2
_ib$ = -192						; size = 2
_ia$ = -180						; size = 2
_pos$ = -168						; size = 2
_k$ = -156						; size = 2
_j$ = -144						; size = 2
_i$ = -132						; size = 2
_i9$ = -120						; size = 2
_i8$ = -108						; size = 2
_i7$ = -96						; size = 2
_i6$ = -84						; size = 2
_i5$ = -72						; size = 2
_i4$ = -60						; size = 2
_i3$ = -48						; size = 2
_i2$ = -36						; size = 2
_i1$ = -24						; size = 2
_i0$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_nbPulse$ = 8						; size = 2
_step$ = 12						; size = 2
_nbTracks$ = 16						; size = 2
_dn$ = 20						; size = 4
_rr$ = 24						; size = 4
_ipos$ = 28						; size = 4
_pos_max$ = 32						; size = 4
_codvec$ = 36						; size = 4
_search_10and8i40 PROC					; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 02 00
	00		 sub	 esp, 656		; 00000290H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 70 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-656]
  00012	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 70   :    Word16 i0, i1, i2, i3, i4, i5, i6, i7, i8, i9;
; 71   :    Word16 i, j, k, pos, ia, ib;
; 72   :    Word16 psk, ps, ps0, ps1, ps2, sq, sq2;
; 73   :    Word16 alpk, alp, alp_16;
; 74   :    Word16 rrv[L_CODE];
; 75   :    Word32 s, alp0, alp1, alp2;
; 76   :    Word16 gsmefrFlag;
; 77   :    
; 78   : 
; 79   :    test(); 

  00028	e8 00 00 00 00	 call	 _test

; 80   :    if (sub(nbPulse, 10) == 0)

  0002d	6a 0a		 push	 10			; 0000000aH
  0002f	0f b7 45 08	 movzx	 eax, WORD PTR _nbPulse$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _sub
  00039	83 c4 08	 add	 esp, 8
  0003c	0f bf c8	 movsx	 ecx, ax
  0003f	85 c9		 test	 ecx, ecx
  00041	75 13		 jne	 SHORT $LN54@search_10a

; 81   :    {
; 82   :       gsmefrFlag=1;                             move16 ();

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	66 89 85 34 fe
	ff ff		 mov	 WORD PTR _gsmefrFlag$[ebp], ax
  0004f	e8 00 00 00 00	 call	 _move16

; 83   :    }
; 84   :    else

  00054	eb 0e		 jmp	 SHORT $LN53@search_10a
$LN54@search_10a:

; 85   :    {
; 86   :       gsmefrFlag=0;                             move16 (); 

  00056	33 c0		 xor	 eax, eax
  00058	66 89 85 34 fe
	ff ff		 mov	 WORD PTR _gsmefrFlag$[ebp], ax
  0005f	e8 00 00 00 00	 call	 _move16
$LN53@search_10a:

; 87   :    }
; 88   : 
; 89   :    /* fix i0 on maximum of correlation position */
; 90   :    i0 = pos_max[ipos[0]];                       move16 (); 

  00064	b8 02 00 00 00	 mov	 eax, 2
  00069	6b c8 00	 imul	 ecx, eax, 0
  0006c	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  0006f	0f bf 04 0a	 movsx	 eax, WORD PTR [edx+ecx]
  00073	8b 4d 20	 mov	 ecx, DWORD PTR _pos_max$[ebp]
  00076	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  0007a	66 89 55 f4	 mov	 WORD PTR _i0$[ebp], dx
  0007e	e8 00 00 00 00	 call	 _move16

; 91   :    
; 92   :    /*------------------------------------------------------------------*
; 93   :     * i1 loop:                                                         *
; 94   :     *------------------------------------------------------------------*/
; 95   :    
; 96   :    /* Default value */
; 97   :    psk = -1;                                    move16 (); 

  00083	83 c8 ff	 or	 eax, -1
  00086	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _psk$[ebp], ax
  0008d	e8 00 00 00 00	 call	 _move16

; 98   :    alpk = 1;                                    move16 (); 

  00092	b8 01 00 00 00	 mov	 eax, 1
  00097	66 89 85 e0 fe
	ff ff		 mov	 WORD PTR _alpk$[ebp], ax
  0009e	e8 00 00 00 00	 call	 _move16

; 99   :    for (i = 0; i < nbPulse; i++)

  000a3	33 c0		 xor	 eax, eax
  000a5	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
  000ac	eb 12		 jmp	 SHORT $LN52@search_10a
$LN51@search_10a:
  000ae	66 8b 85 7c ff
	ff ff		 mov	 ax, WORD PTR _i$[ebp]
  000b5	66 83 c0 01	 add	 ax, 1
  000b9	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
$LN52@search_10a:
  000c0	0f bf 85 7c ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  000c7	0f bf 4d 08	 movsx	 ecx, WORD PTR _nbPulse$[ebp]
  000cb	3b c1		 cmp	 eax, ecx
  000cd	7d 1c		 jge	 SHORT $LN50@search_10a

; 100  :    {
; 101  :       codvec[i] = i;                            move16 ();

  000cf	0f bf 85 7c ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  000d6	8b 4d 24	 mov	 ecx, DWORD PTR _codvec$[ebp]
  000d9	66 8b 95 7c ff
	ff ff		 mov	 dx, WORD PTR _i$[ebp]
  000e0	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  000e4	e8 00 00 00 00	 call	 _move16

; 102  :    }

  000e9	eb c3		 jmp	 SHORT $LN51@search_10a
$LN50@search_10a:

; 103  : 
; 104  :    for (i = 1; i < nbTracks; i++)

  000eb	b8 01 00 00 00	 mov	 eax, 1
  000f0	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
  000f7	eb 12		 jmp	 SHORT $LN49@search_10a
$LN48@search_10a:
  000f9	66 8b 85 7c ff
	ff ff		 mov	 ax, WORD PTR _i$[ebp]
  00100	66 83 c0 01	 add	 ax, 1
  00104	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _i$[ebp], ax
$LN49@search_10a:
  0010b	0f bf 85 7c ff
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  00112	0f bf 4d 10	 movsx	 ecx, WORD PTR _nbTracks$[ebp]
  00116	3b c1		 cmp	 eax, ecx
  00118	0f 8d d3 17 00
	00		 jge	 $LN55@search_10a

; 105  :    {
; 106  :       i1 = pos_max[ipos[1]];                    move16 (); 

  0011e	b8 02 00 00 00	 mov	 eax, 2
  00123	c1 e0 00	 shl	 eax, 0
  00126	8b 4d 1c	 mov	 ecx, DWORD PTR _ipos$[ebp]
  00129	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  0012d	8b 45 20	 mov	 eax, DWORD PTR _pos_max$[ebp]
  00130	66 8b 0c 50	 mov	 cx, WORD PTR [eax+edx*2]
  00134	66 89 4d e8	 mov	 WORD PTR _i1$[ebp], cx
  00138	e8 00 00 00 00	 call	 _move16

; 107  :       ps0 = add (dn[i0], dn[i1]);

  0013d	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  00141	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  00144	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00148	52		 push	 edx
  00149	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  0014d	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  00150	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 _add
  0015a	83 c4 08	 add	 esp, 8
  0015d	66 89 85 1c ff
	ff ff		 mov	 WORD PTR _ps0$[ebp], ax

; 108  :       alp0 = L_mult (rr[i0][i0], _1_16);

  00164	68 00 08 00 00	 push	 2048			; 00000800H
  00169	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  0016d	6b c8 50	 imul	 ecx, eax, 80
  00170	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00173	0f bf 55 f4	 movsx	 edx, WORD PTR _i0$[ebp]
  00177	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _L_mult
  00181	83 c4 08	 add	 esp, 8
  00184	89 85 58 fe ff
	ff		 mov	 DWORD PTR _alp0$[ebp], eax

; 109  :       alp0 = L_mac (alp0, rr[i1][i1], _1_16);

  0018a	68 00 08 00 00	 push	 2048			; 00000800H
  0018f	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  00193	6b c8 50	 imul	 ecx, eax, 80
  00196	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00199	0f bf 55 e8	 movsx	 edx, WORD PTR _i1$[ebp]
  0019d	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  001a1	50		 push	 eax
  001a2	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _alp0$[ebp]
  001a8	51		 push	 ecx
  001a9	e8 00 00 00 00	 call	 _L_mac
  001ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b1	89 85 58 fe ff
	ff		 mov	 DWORD PTR _alp0$[ebp], eax

; 110  :       alp0 = L_mac (alp0, rr[i0][i1], _1_8);

  001b7	68 00 10 00 00	 push	 4096			; 00001000H
  001bc	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  001c0	6b c8 50	 imul	 ecx, eax, 80
  001c3	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  001c6	0f bf 55 e8	 movsx	 edx, WORD PTR _i1$[ebp]
  001ca	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  001ce	50		 push	 eax
  001cf	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _alp0$[ebp]
  001d5	51		 push	 ecx
  001d6	e8 00 00 00 00	 call	 _L_mac
  001db	83 c4 0c	 add	 esp, 12			; 0000000cH
  001de	89 85 58 fe ff
	ff		 mov	 DWORD PTR _alp0$[ebp], eax

; 111  :       
; 112  :       /*----------------------------------------------------------------*
; 113  :        * i2 and i3 loop:                                                *
; 114  :        *----------------------------------------------------------------*/
; 115  :       
; 116  :       /* initialize 4 indices for next loop. */
; 117  :       move16 (); /* initialize "rr[i3][i3]" pointer */

  001e4	e8 00 00 00 00	 call	 _move16

; 118  :       move16 (); /* initialize "rr[i0][i3]" pointer */

  001e9	e8 00 00 00 00	 call	 _move16

; 119  :       move16 (); /* initialize "rr[i1][i3]" pointer */

  001ee	e8 00 00 00 00	 call	 _move16

; 120  :       move16 (); /* initialize "rrv[i3]" pointer    */

  001f3	e8 00 00 00 00	 call	 _move16

; 121  :       
; 122  :       for (i3 = ipos[3]; i3 < L_CODE; i3 += step)

  001f8	b8 02 00 00 00	 mov	 eax, 2
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  00203	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  00207	66 89 45 d0	 mov	 WORD PTR _i3$[ebp], ax
  0020b	eb 0e		 jmp	 SHORT $LN46@search_10a
$LN45@search_10a:
  0020d	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  00211	0f bf 4d d0	 movsx	 ecx, WORD PTR _i3$[ebp]
  00215	03 c8		 add	 ecx, eax
  00217	66 89 4d d0	 mov	 WORD PTR _i3$[ebp], cx
$LN46@search_10a:
  0021b	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  0021f	83 f8 28	 cmp	 eax, 40			; 00000028H
  00222	0f 8d a5 00 00
	00		 jge	 $LN44@search_10a

; 123  :       {
; 124  :          s = L_mult (rr[i3][i3], _1_8);       /* index incr= step+L_CODE */

  00228	68 00 10 00 00	 push	 4096			; 00001000H
  0022d	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  00231	6b c8 50	 imul	 ecx, eax, 80
  00234	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00237	0f bf 55 d0	 movsx	 edx, WORD PTR _i3$[ebp]
  0023b	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0023f	50		 push	 eax
  00240	e8 00 00 00 00	 call	 _L_mult
  00245	83 c4 08	 add	 esp, 8
  00248	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 125  :          s = L_mac (s, rr[i0][i3], _1_4);     /* index increment = step  */

  0024e	68 00 20 00 00	 push	 8192			; 00002000H
  00253	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  00257	6b c8 50	 imul	 ecx, eax, 80
  0025a	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  0025d	0f bf 55 d0	 movsx	 edx, WORD PTR _i3$[ebp]
  00261	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00265	50		 push	 eax
  00266	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  0026c	51		 push	 ecx
  0026d	e8 00 00 00 00	 call	 _L_mac
  00272	83 c4 0c	 add	 esp, 12			; 0000000cH
  00275	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 126  :          s = L_mac (s, rr[i1][i3], _1_4);     /* index increment = step  */

  0027b	68 00 20 00 00	 push	 8192			; 00002000H
  00280	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  00284	6b c8 50	 imul	 ecx, eax, 80
  00287	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  0028a	0f bf 55 d0	 movsx	 edx, WORD PTR _i3$[ebp]
  0028e	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00292	50		 push	 eax
  00293	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00299	51		 push	 ecx
  0029a	e8 00 00 00 00	 call	 _L_mac
  0029f	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a2	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 127  :          rrv[i3] = round (s);                 move16 (); 

  002a8	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  002ae	50		 push	 eax
  002af	e8 00 00 00 00	 call	 _round
  002b4	83 c4 04	 add	 esp, 4
  002b7	0f bf 4d d0	 movsx	 ecx, WORD PTR _i3$[ebp]
  002bb	66 89 84 4d 70
	fe ff ff	 mov	 WORD PTR _rrv$[ebp+ecx*2], ax
  002c3	e8 00 00 00 00	 call	 _move16

; 128  :       }

  002c8	e9 40 ff ff ff	 jmp	 $LN45@search_10a
$LN44@search_10a:

; 129  :       
; 130  :       /* Default value */
; 131  :       sq = -1;                                 move16 (); 

  002cd	83 c8 ff	 or	 eax, -1
  002d0	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _sq$[ebp], ax
  002d7	e8 00 00 00 00	 call	 _move16

; 132  :       alp = 1;                                 move16 (); 

  002dc	b8 01 00 00 00	 mov	 eax, 1
  002e1	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _alp$[ebp], ax
  002e8	e8 00 00 00 00	 call	 _move16

; 133  :       ps = 0;                                  move16 ();

  002ed	33 c0		 xor	 eax, eax
  002ef	66 89 85 28 ff
	ff ff		 mov	 WORD PTR _ps$[ebp], ax
  002f6	e8 00 00 00 00	 call	 _move16

; 134  :       ia = ipos[2];                            move16 ();

  002fb	b8 02 00 00 00	 mov	 eax, 2
  00300	d1 e0		 shl	 eax, 1
  00302	8b 4d 1c	 mov	 ecx, DWORD PTR _ipos$[ebp]
  00305	66 8b 14 01	 mov	 dx, WORD PTR [ecx+eax]
  00309	66 89 95 4c ff
	ff ff		 mov	 WORD PTR _ia$[ebp], dx
  00310	e8 00 00 00 00	 call	 _move16

; 135  :       ib = ipos[3];                            move16 ();

  00315	b8 02 00 00 00	 mov	 eax, 2
  0031a	6b c8 03	 imul	 ecx, eax, 3
  0031d	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  00320	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  00324	66 89 85 40 ff
	ff ff		 mov	 WORD PTR _ib$[ebp], ax
  0032b	e8 00 00 00 00	 call	 _move16

; 136  :       
; 137  :       /* initialize 4 indices for i2 loop. */
; 138  :       move16 (); /* initialize "dn[i2]" pointer     */

  00330	e8 00 00 00 00	 call	 _move16

; 139  :       move16 (); /* initialize "rr[i2][i2]" pointer */

  00335	e8 00 00 00 00	 call	 _move16

; 140  :       move16 (); /* initialize "rr[i0][i2]" pointer */

  0033a	e8 00 00 00 00	 call	 _move16

; 141  :       move16 (); /* initialize "rr[i1][i2]" pointer */

  0033f	e8 00 00 00 00	 call	 _move16

; 142  :         
; 143  :       for (i2 = ipos[2]; i2 < L_CODE; i2 += step)

  00344	b8 02 00 00 00	 mov	 eax, 2
  00349	d1 e0		 shl	 eax, 1
  0034b	8b 4d 1c	 mov	 ecx, DWORD PTR _ipos$[ebp]
  0034e	66 8b 14 01	 mov	 dx, WORD PTR [ecx+eax]
  00352	66 89 55 dc	 mov	 WORD PTR _i2$[ebp], dx
  00356	eb 0e		 jmp	 SHORT $LN43@search_10a
$LN42@search_10a:
  00358	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  0035c	0f bf 4d dc	 movsx	 ecx, WORD PTR _i2$[ebp]
  00360	03 c8		 add	 ecx, eax
  00362	66 89 4d dc	 mov	 WORD PTR _i2$[ebp], cx
$LN43@search_10a:
  00366	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  0036a	83 f8 28	 cmp	 eax, 40			; 00000028H
  0036d	0f 8d 3d 02 00
	00		 jge	 $LN41@search_10a

; 144  :       {
; 145  :          /* index increment = step  */            
; 146  :          ps1 = add (ps0, dn[i2]);    

  00373	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  00377	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  0037a	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0037e	52		 push	 edx
  0037f	0f b7 85 1c ff
	ff ff		 movzx	 eax, WORD PTR _ps0$[ebp]
  00386	50		 push	 eax
  00387	e8 00 00 00 00	 call	 _add
  0038c	83 c4 08	 add	 esp, 8
  0038f	66 89 85 10 ff
	ff ff		 mov	 WORD PTR _ps1$[ebp], ax

; 147  :          
; 148  :          /* index incr= step+L_CODE */
; 149  :          alp1 = L_mac (alp0, rr[i2][i2], _1_16);

  00396	68 00 08 00 00	 push	 2048			; 00000800H
  0039b	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  0039f	6b c8 50	 imul	 ecx, eax, 80
  003a2	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  003a5	0f bf 55 dc	 movsx	 edx, WORD PTR _i2$[ebp]
  003a9	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  003ad	50		 push	 eax
  003ae	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _alp0$[ebp]
  003b4	51		 push	 ecx
  003b5	e8 00 00 00 00	 call	 _L_mac
  003ba	83 c4 0c	 add	 esp, 12			; 0000000cH
  003bd	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 150  :             /* index increment = step  */
; 151  :          alp1 = L_mac (alp1, rr[i0][i2], _1_8);

  003c3	68 00 10 00 00	 push	 4096			; 00001000H
  003c8	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  003cc	6b c8 50	 imul	 ecx, eax, 80
  003cf	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  003d2	0f bf 55 dc	 movsx	 edx, WORD PTR _i2$[ebp]
  003d6	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  003da	50		 push	 eax
  003db	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  003e1	51		 push	 ecx
  003e2	e8 00 00 00 00	 call	 _L_mac
  003e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ea	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 152  :          /* index increment = step  */
; 153  :          alp1 = L_mac (alp1, rr[i1][i2], _1_8);

  003f0	68 00 10 00 00	 push	 4096			; 00001000H
  003f5	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  003f9	6b c8 50	 imul	 ecx, eax, 80
  003fc	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  003ff	0f bf 55 dc	 movsx	 edx, WORD PTR _i2$[ebp]
  00403	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00407	50		 push	 eax
  00408	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  0040e	51		 push	 ecx
  0040f	e8 00 00 00 00	 call	 _L_mac
  00414	83 c4 0c	 add	 esp, 12			; 0000000cH
  00417	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 154  :          
; 155  :          /* initialize 3 indices for i3 inner loop */
; 156  :          move16 (); /* initialize "dn[i3]" pointer     */

  0041d	e8 00 00 00 00	 call	 _move16

; 157  :          move16 (); /* initialize "rrv[i3]" pointer    */

  00422	e8 00 00 00 00	 call	 _move16

; 158  :          move16 (); /* initialize "rr[i2][i3]" pointer */

  00427	e8 00 00 00 00	 call	 _move16

; 159  :          
; 160  :          for (i3 = ipos[3]; i3 < L_CODE; i3 += step)

  0042c	b8 02 00 00 00	 mov	 eax, 2
  00431	6b c8 03	 imul	 ecx, eax, 3
  00434	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  00437	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  0043b	66 89 45 d0	 mov	 WORD PTR _i3$[ebp], ax
  0043f	eb 0e		 jmp	 SHORT $LN40@search_10a
$LN39@search_10a:
  00441	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  00445	0f bf 4d d0	 movsx	 ecx, WORD PTR _i3$[ebp]
  00449	03 c8		 add	 ecx, eax
  0044b	66 89 4d d0	 mov	 WORD PTR _i3$[ebp], cx
$LN40@search_10a:
  0044f	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  00453	83 f8 28	 cmp	 eax, 40			; 00000028H
  00456	0f 8d 4f 01 00
	00		 jge	 $LN38@search_10a

; 161  :          {
; 162  :             /* index increment = step */                
; 163  :             ps2 = add (ps1, dn[i3]);    

  0045c	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  00460	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  00463	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00467	52		 push	 edx
  00468	0f b7 85 10 ff
	ff ff		 movzx	 eax, WORD PTR _ps1$[ebp]
  0046f	50		 push	 eax
  00470	e8 00 00 00 00	 call	 _add
  00475	83 c4 08	 add	 esp, 8
  00478	66 89 85 04 ff
	ff ff		 mov	 WORD PTR _ps2$[ebp], ax

; 164  :                 
; 165  :             /* index increment = step */
; 166  :             alp2 = L_mac (alp1, rrv[i3], _1_2);

  0047f	68 00 40 00 00	 push	 16384			; 00004000H
  00484	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  00488	0f b7 8c 45 70
	fe ff ff	 movzx	 ecx, WORD PTR _rrv$[ebp+eax*2]
  00490	51		 push	 ecx
  00491	8b 95 4c fe ff
	ff		 mov	 edx, DWORD PTR _alp1$[ebp]
  00497	52		 push	 edx
  00498	e8 00 00 00 00	 call	 _L_mac
  0049d	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a0	89 85 40 fe ff
	ff		 mov	 DWORD PTR _alp2$[ebp], eax

; 167  :             /* index increment = step */
; 168  :             alp2 = L_mac (alp2, rr[i2][i3], _1_8);

  004a6	68 00 10 00 00	 push	 4096			; 00001000H
  004ab	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  004af	6b c8 50	 imul	 ecx, eax, 80
  004b2	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  004b5	0f bf 55 d0	 movsx	 edx, WORD PTR _i3$[ebp]
  004b9	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  004bd	50		 push	 eax
  004be	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR _alp2$[ebp]
  004c4	51		 push	 ecx
  004c5	e8 00 00 00 00	 call	 _L_mac
  004ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  004cd	89 85 40 fe ff
	ff		 mov	 DWORD PTR _alp2$[ebp], eax

; 169  :             
; 170  :             sq2 = mult (ps2, ps2);

  004d3	0f b7 85 04 ff
	ff ff		 movzx	 eax, WORD PTR _ps2$[ebp]
  004da	50		 push	 eax
  004db	0f b7 8d 04 ff
	ff ff		 movzx	 ecx, WORD PTR _ps2$[ebp]
  004e2	51		 push	 ecx
  004e3	e8 00 00 00 00	 call	 _mult
  004e8	83 c4 08	 add	 esp, 8
  004eb	66 89 85 ec fe
	ff ff		 mov	 WORD PTR _sq2$[ebp], ax

; 171  :             
; 172  :             alp_16 = round (alp2);

  004f2	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _alp2$[ebp]
  004f8	50		 push	 eax
  004f9	e8 00 00 00 00	 call	 _round
  004fe	83 c4 04	 add	 esp, 4
  00501	66 89 85 c8 fe
	ff ff		 mov	 WORD PTR _alp_16$[ebp], ax

; 173  :             
; 174  :             s = L_msu (L_mult (alp, sq2), sq, alp_16);

  00508	0f b7 85 c8 fe
	ff ff		 movzx	 eax, WORD PTR _alp_16$[ebp]
  0050f	50		 push	 eax
  00510	0f b7 8d f8 fe
	ff ff		 movzx	 ecx, WORD PTR _sq$[ebp]
  00517	51		 push	 ecx
  00518	0f b7 95 ec fe
	ff ff		 movzx	 edx, WORD PTR _sq2$[ebp]
  0051f	52		 push	 edx
  00520	0f b7 85 d4 fe
	ff ff		 movzx	 eax, WORD PTR _alp$[ebp]
  00527	50		 push	 eax
  00528	e8 00 00 00 00	 call	 _L_mult
  0052d	83 c4 08	 add	 esp, 8
  00530	50		 push	 eax
  00531	e8 00 00 00 00	 call	 _L_msu
  00536	83 c4 0c	 add	 esp, 12			; 0000000cH
  00539	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 175  :                 
; 176  :             test (); 

  0053f	e8 00 00 00 00	 call	 _test

; 177  :             if (s > 0)

  00544	83 bd 64 fe ff
	ff 00		 cmp	 DWORD PTR _s$[ebp], 0
  0054b	7e 59		 jle	 SHORT $LN37@search_10a

; 178  :             {
; 179  :                sq = sq2;                    move16 (); 

  0054d	66 8b 85 ec fe
	ff ff		 mov	 ax, WORD PTR _sq2$[ebp]
  00554	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _sq$[ebp], ax
  0055b	e8 00 00 00 00	 call	 _move16

; 180  :                ps = ps2;                    move16 (); 

  00560	66 8b 85 04 ff
	ff ff		 mov	 ax, WORD PTR _ps2$[ebp]
  00567	66 89 85 28 ff
	ff ff		 mov	 WORD PTR _ps$[ebp], ax
  0056e	e8 00 00 00 00	 call	 _move16

; 181  :                alp = alp_16;                move16 (); 

  00573	66 8b 85 c8 fe
	ff ff		 mov	 ax, WORD PTR _alp_16$[ebp]
  0057a	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _alp$[ebp], ax
  00581	e8 00 00 00 00	 call	 _move16

; 182  :                ia = i2;                     move16 (); 

  00586	66 8b 45 dc	 mov	 ax, WORD PTR _i2$[ebp]
  0058a	66 89 85 4c ff
	ff ff		 mov	 WORD PTR _ia$[ebp], ax
  00591	e8 00 00 00 00	 call	 _move16

; 183  :                ib = i3;                     move16 (); 

  00596	66 8b 45 d0	 mov	 ax, WORD PTR _i3$[ebp]
  0059a	66 89 85 40 ff
	ff ff		 mov	 WORD PTR _ib$[ebp], ax
  005a1	e8 00 00 00 00	 call	 _move16
$LN37@search_10a:

; 184  :             }
; 185  :          }

  005a6	e9 96 fe ff ff	 jmp	 $LN39@search_10a
$LN38@search_10a:

; 186  :       }

  005ab	e9 a8 fd ff ff	 jmp	 $LN42@search_10a
$LN41@search_10a:

; 187  :       i2 = ia;                                 move16 (); 

  005b0	66 8b 85 4c ff
	ff ff		 mov	 ax, WORD PTR _ia$[ebp]
  005b7	66 89 45 dc	 mov	 WORD PTR _i2$[ebp], ax
  005bb	e8 00 00 00 00	 call	 _move16

; 188  :       i3 = ib;                                 move16 (); 

  005c0	66 8b 85 40 ff
	ff ff		 mov	 ax, WORD PTR _ib$[ebp]
  005c7	66 89 45 d0	 mov	 WORD PTR _i3$[ebp], ax
  005cb	e8 00 00 00 00	 call	 _move16

; 189  :       
; 190  :         /*----------------------------------------------------------------*
; 191  :          * i4 and i5 loop:                                                *
; 192  :          *----------------------------------------------------------------*/
; 193  :         
; 194  :         ps0 = ps;                                move16 (); 

  005d0	66 8b 85 28 ff
	ff ff		 mov	 ax, WORD PTR _ps$[ebp]
  005d7	66 89 85 1c ff
	ff ff		 mov	 WORD PTR _ps0$[ebp], ax
  005de	e8 00 00 00 00	 call	 _move16

; 195  :         alp0 = L_mult (alp, _1_2);

  005e3	68 00 40 00 00	 push	 16384			; 00004000H
  005e8	0f b7 85 d4 fe
	ff ff		 movzx	 eax, WORD PTR _alp$[ebp]
  005ef	50		 push	 eax
  005f0	e8 00 00 00 00	 call	 _L_mult
  005f5	83 c4 08	 add	 esp, 8
  005f8	89 85 58 fe ff
	ff		 mov	 DWORD PTR _alp0$[ebp], eax

; 196  :         
; 197  :         /* initialize 6 indices for next loop (see i2-i3 loop) */
; 198  :         move16 (); move16 (); move16 (); move16 (); move16 (); move16 (); 

  005fe	e8 00 00 00 00	 call	 _move16
  00603	e8 00 00 00 00	 call	 _move16
  00608	e8 00 00 00 00	 call	 _move16
  0060d	e8 00 00 00 00	 call	 _move16
  00612	e8 00 00 00 00	 call	 _move16
  00617	e8 00 00 00 00	 call	 _move16

; 199  :         
; 200  :         for (i5 = ipos[5]; i5 < L_CODE; i5 += step)

  0061c	b8 02 00 00 00	 mov	 eax, 2
  00621	6b c8 05	 imul	 ecx, eax, 5
  00624	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  00627	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  0062b	66 89 45 b8	 mov	 WORD PTR _i5$[ebp], ax
  0062f	eb 0e		 jmp	 SHORT $LN36@search_10a
$LN35@search_10a:
  00631	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  00635	0f bf 4d b8	 movsx	 ecx, WORD PTR _i5$[ebp]
  00639	03 c8		 add	 ecx, eax
  0063b	66 89 4d b8	 mov	 WORD PTR _i5$[ebp], cx
$LN36@search_10a:
  0063f	0f bf 45 b8	 movsx	 eax, WORD PTR _i5$[ebp]
  00643	83 f8 28	 cmp	 eax, 40			; 00000028H
  00646	0f 8d ff 00 00
	00		 jge	 $LN34@search_10a

; 201  :         {
; 202  :             s = L_mult (rr[i5][i5], _1_8);

  0064c	68 00 10 00 00	 push	 4096			; 00001000H
  00651	0f bf 45 b8	 movsx	 eax, WORD PTR _i5$[ebp]
  00655	6b c8 50	 imul	 ecx, eax, 80
  00658	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  0065b	0f bf 55 b8	 movsx	 edx, WORD PTR _i5$[ebp]
  0065f	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00663	50		 push	 eax
  00664	e8 00 00 00 00	 call	 _L_mult
  00669	83 c4 08	 add	 esp, 8
  0066c	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 203  :             s = L_mac (s, rr[i0][i5], _1_4);

  00672	68 00 20 00 00	 push	 8192			; 00002000H
  00677	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  0067b	6b c8 50	 imul	 ecx, eax, 80
  0067e	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00681	0f bf 55 b8	 movsx	 edx, WORD PTR _i5$[ebp]
  00685	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00689	50		 push	 eax
  0068a	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00690	51		 push	 ecx
  00691	e8 00 00 00 00	 call	 _L_mac
  00696	83 c4 0c	 add	 esp, 12			; 0000000cH
  00699	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 204  :             s = L_mac (s, rr[i1][i5], _1_4);

  0069f	68 00 20 00 00	 push	 8192			; 00002000H
  006a4	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  006a8	6b c8 50	 imul	 ecx, eax, 80
  006ab	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  006ae	0f bf 55 b8	 movsx	 edx, WORD PTR _i5$[ebp]
  006b2	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  006b6	50		 push	 eax
  006b7	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  006bd	51		 push	 ecx
  006be	e8 00 00 00 00	 call	 _L_mac
  006c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  006c6	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 205  :             s = L_mac (s, rr[i2][i5], _1_4);

  006cc	68 00 20 00 00	 push	 8192			; 00002000H
  006d1	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  006d5	6b c8 50	 imul	 ecx, eax, 80
  006d8	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  006db	0f bf 55 b8	 movsx	 edx, WORD PTR _i5$[ebp]
  006df	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  006e3	50		 push	 eax
  006e4	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  006ea	51		 push	 ecx
  006eb	e8 00 00 00 00	 call	 _L_mac
  006f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  006f3	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 206  :             s = L_mac (s, rr[i3][i5], _1_4);

  006f9	68 00 20 00 00	 push	 8192			; 00002000H
  006fe	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  00702	6b c8 50	 imul	 ecx, eax, 80
  00705	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00708	0f bf 55 b8	 movsx	 edx, WORD PTR _i5$[ebp]
  0070c	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00710	50		 push	 eax
  00711	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00717	51		 push	 ecx
  00718	e8 00 00 00 00	 call	 _L_mac
  0071d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00720	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 207  :             rrv[i5] = round (s);                 move16 (); 

  00726	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  0072c	50		 push	 eax
  0072d	e8 00 00 00 00	 call	 _round
  00732	83 c4 04	 add	 esp, 4
  00735	0f bf 4d b8	 movsx	 ecx, WORD PTR _i5$[ebp]
  00739	66 89 84 4d 70
	fe ff ff	 mov	 WORD PTR _rrv$[ebp+ecx*2], ax
  00741	e8 00 00 00 00	 call	 _move16

; 208  :         }

  00746	e9 e6 fe ff ff	 jmp	 $LN35@search_10a
$LN34@search_10a:

; 209  :         
; 210  :         /* Default value */
; 211  :         sq = -1;                                 move16 (); 

  0074b	83 c8 ff	 or	 eax, -1
  0074e	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _sq$[ebp], ax
  00755	e8 00 00 00 00	 call	 _move16

; 212  :         alp = 1;                                 move16 (); 

  0075a	b8 01 00 00 00	 mov	 eax, 1
  0075f	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _alp$[ebp], ax
  00766	e8 00 00 00 00	 call	 _move16

; 213  :         ps = 0;                                  move16 ();

  0076b	33 c0		 xor	 eax, eax
  0076d	66 89 85 28 ff
	ff ff		 mov	 WORD PTR _ps$[ebp], ax
  00774	e8 00 00 00 00	 call	 _move16

; 214  :         ia = ipos[4];                            move16 ();

  00779	b8 02 00 00 00	 mov	 eax, 2
  0077e	c1 e0 02	 shl	 eax, 2
  00781	8b 4d 1c	 mov	 ecx, DWORD PTR _ipos$[ebp]
  00784	66 8b 14 01	 mov	 dx, WORD PTR [ecx+eax]
  00788	66 89 95 4c ff
	ff ff		 mov	 WORD PTR _ia$[ebp], dx
  0078f	e8 00 00 00 00	 call	 _move16

; 215  :         ib = ipos[5];                            move16 ();

  00794	b8 02 00 00 00	 mov	 eax, 2
  00799	6b c8 05	 imul	 ecx, eax, 5
  0079c	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  0079f	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  007a3	66 89 85 40 ff
	ff ff		 mov	 WORD PTR _ib$[ebp], ax
  007aa	e8 00 00 00 00	 call	 _move16

; 216  :         
; 217  :         /* initialize 6 indices for i4 loop (see i2-i3 loop) */
; 218  :         move16 (); move16 (); move16 (); move16 (); move16 (); move16 (); 

  007af	e8 00 00 00 00	 call	 _move16
  007b4	e8 00 00 00 00	 call	 _move16
  007b9	e8 00 00 00 00	 call	 _move16
  007be	e8 00 00 00 00	 call	 _move16
  007c3	e8 00 00 00 00	 call	 _move16
  007c8	e8 00 00 00 00	 call	 _move16

; 219  :         
; 220  :         for (i4 = ipos[4]; i4 < L_CODE; i4 += step)

  007cd	b8 02 00 00 00	 mov	 eax, 2
  007d2	c1 e0 02	 shl	 eax, 2
  007d5	8b 4d 1c	 mov	 ecx, DWORD PTR _ipos$[ebp]
  007d8	66 8b 14 01	 mov	 dx, WORD PTR [ecx+eax]
  007dc	66 89 55 c4	 mov	 WORD PTR _i4$[ebp], dx
  007e0	eb 0e		 jmp	 SHORT $LN33@search_10a
$LN32@search_10a:
  007e2	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  007e6	0f bf 4d c4	 movsx	 ecx, WORD PTR _i4$[ebp]
  007ea	03 c8		 add	 ecx, eax
  007ec	66 89 4d c4	 mov	 WORD PTR _i4$[ebp], cx
$LN33@search_10a:
  007f0	0f bf 45 c4	 movsx	 eax, WORD PTR _i4$[ebp]
  007f4	83 f8 28	 cmp	 eax, 40			; 00000028H
  007f7	0f 8d 97 02 00
	00		 jge	 $LN31@search_10a

; 221  :         {
; 222  :             ps1 = add (ps0, dn[i4]);

  007fd	0f bf 45 c4	 movsx	 eax, WORD PTR _i4$[ebp]
  00801	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  00804	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00808	52		 push	 edx
  00809	0f b7 85 1c ff
	ff ff		 movzx	 eax, WORD PTR _ps0$[ebp]
  00810	50		 push	 eax
  00811	e8 00 00 00 00	 call	 _add
  00816	83 c4 08	 add	 esp, 8
  00819	66 89 85 10 ff
	ff ff		 mov	 WORD PTR _ps1$[ebp], ax

; 223  :             
; 224  :             alp1 = L_mac (alp0, rr[i4][i4], _1_32);

  00820	68 00 04 00 00	 push	 1024			; 00000400H
  00825	0f bf 45 c4	 movsx	 eax, WORD PTR _i4$[ebp]
  00829	6b c8 50	 imul	 ecx, eax, 80
  0082c	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  0082f	0f bf 55 c4	 movsx	 edx, WORD PTR _i4$[ebp]
  00833	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00837	50		 push	 eax
  00838	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _alp0$[ebp]
  0083e	51		 push	 ecx
  0083f	e8 00 00 00 00	 call	 _L_mac
  00844	83 c4 0c	 add	 esp, 12			; 0000000cH
  00847	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 225  :             alp1 = L_mac (alp1, rr[i0][i4], _1_16);

  0084d	68 00 08 00 00	 push	 2048			; 00000800H
  00852	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  00856	6b c8 50	 imul	 ecx, eax, 80
  00859	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  0085c	0f bf 55 c4	 movsx	 edx, WORD PTR _i4$[ebp]
  00860	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00864	50		 push	 eax
  00865	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  0086b	51		 push	 ecx
  0086c	e8 00 00 00 00	 call	 _L_mac
  00871	83 c4 0c	 add	 esp, 12			; 0000000cH
  00874	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 226  :             alp1 = L_mac (alp1, rr[i1][i4], _1_16);

  0087a	68 00 08 00 00	 push	 2048			; 00000800H
  0087f	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  00883	6b c8 50	 imul	 ecx, eax, 80
  00886	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00889	0f bf 55 c4	 movsx	 edx, WORD PTR _i4$[ebp]
  0088d	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00891	50		 push	 eax
  00892	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  00898	51		 push	 ecx
  00899	e8 00 00 00 00	 call	 _L_mac
  0089e	83 c4 0c	 add	 esp, 12			; 0000000cH
  008a1	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 227  :             alp1 = L_mac (alp1, rr[i2][i4], _1_16);

  008a7	68 00 08 00 00	 push	 2048			; 00000800H
  008ac	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  008b0	6b c8 50	 imul	 ecx, eax, 80
  008b3	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  008b6	0f bf 55 c4	 movsx	 edx, WORD PTR _i4$[ebp]
  008ba	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  008be	50		 push	 eax
  008bf	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  008c5	51		 push	 ecx
  008c6	e8 00 00 00 00	 call	 _L_mac
  008cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  008ce	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 228  :             alp1 = L_mac (alp1, rr[i3][i4], _1_16);

  008d4	68 00 08 00 00	 push	 2048			; 00000800H
  008d9	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  008dd	6b c8 50	 imul	 ecx, eax, 80
  008e0	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  008e3	0f bf 55 c4	 movsx	 edx, WORD PTR _i4$[ebp]
  008e7	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  008eb	50		 push	 eax
  008ec	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  008f2	51		 push	 ecx
  008f3	e8 00 00 00 00	 call	 _L_mac
  008f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  008fb	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 229  :             
; 230  :             /* initialize 3 indices for i5 inner loop (see i2-i3 loop) */
; 231  :             move16 (); move16 (); move16 (); 

  00901	e8 00 00 00 00	 call	 _move16
  00906	e8 00 00 00 00	 call	 _move16
  0090b	e8 00 00 00 00	 call	 _move16

; 232  :             
; 233  :             for (i5 = ipos[5]; i5 < L_CODE; i5 += step)

  00910	b8 02 00 00 00	 mov	 eax, 2
  00915	6b c8 05	 imul	 ecx, eax, 5
  00918	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  0091b	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  0091f	66 89 45 b8	 mov	 WORD PTR _i5$[ebp], ax
  00923	eb 0e		 jmp	 SHORT $LN30@search_10a
$LN29@search_10a:
  00925	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  00929	0f bf 4d b8	 movsx	 ecx, WORD PTR _i5$[ebp]
  0092d	03 c8		 add	 ecx, eax
  0092f	66 89 4d b8	 mov	 WORD PTR _i5$[ebp], cx
$LN30@search_10a:
  00933	0f bf 45 b8	 movsx	 eax, WORD PTR _i5$[ebp]
  00937	83 f8 28	 cmp	 eax, 40			; 00000028H
  0093a	0f 8d 4f 01 00
	00		 jge	 $LN28@search_10a

; 234  :             {
; 235  :                 ps2 = add (ps1, dn[i5]);

  00940	0f bf 45 b8	 movsx	 eax, WORD PTR _i5$[ebp]
  00944	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  00947	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0094b	52		 push	 edx
  0094c	0f b7 85 10 ff
	ff ff		 movzx	 eax, WORD PTR _ps1$[ebp]
  00953	50		 push	 eax
  00954	e8 00 00 00 00	 call	 _add
  00959	83 c4 08	 add	 esp, 8
  0095c	66 89 85 04 ff
	ff ff		 mov	 WORD PTR _ps2$[ebp], ax

; 236  :                 
; 237  :                 alp2 = L_mac (alp1, rrv[i5], _1_4);

  00963	68 00 20 00 00	 push	 8192			; 00002000H
  00968	0f bf 45 b8	 movsx	 eax, WORD PTR _i5$[ebp]
  0096c	0f b7 8c 45 70
	fe ff ff	 movzx	 ecx, WORD PTR _rrv$[ebp+eax*2]
  00974	51		 push	 ecx
  00975	8b 95 4c fe ff
	ff		 mov	 edx, DWORD PTR _alp1$[ebp]
  0097b	52		 push	 edx
  0097c	e8 00 00 00 00	 call	 _L_mac
  00981	83 c4 0c	 add	 esp, 12			; 0000000cH
  00984	89 85 40 fe ff
	ff		 mov	 DWORD PTR _alp2$[ebp], eax

; 238  :                 alp2 = L_mac (alp2, rr[i4][i5], _1_16);

  0098a	68 00 08 00 00	 push	 2048			; 00000800H
  0098f	0f bf 45 c4	 movsx	 eax, WORD PTR _i4$[ebp]
  00993	6b c8 50	 imul	 ecx, eax, 80
  00996	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00999	0f bf 55 b8	 movsx	 edx, WORD PTR _i5$[ebp]
  0099d	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  009a1	50		 push	 eax
  009a2	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR _alp2$[ebp]
  009a8	51		 push	 ecx
  009a9	e8 00 00 00 00	 call	 _L_mac
  009ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  009b1	89 85 40 fe ff
	ff		 mov	 DWORD PTR _alp2$[ebp], eax

; 239  :                 
; 240  :                 sq2 = mult (ps2, ps2);

  009b7	0f b7 85 04 ff
	ff ff		 movzx	 eax, WORD PTR _ps2$[ebp]
  009be	50		 push	 eax
  009bf	0f b7 8d 04 ff
	ff ff		 movzx	 ecx, WORD PTR _ps2$[ebp]
  009c6	51		 push	 ecx
  009c7	e8 00 00 00 00	 call	 _mult
  009cc	83 c4 08	 add	 esp, 8
  009cf	66 89 85 ec fe
	ff ff		 mov	 WORD PTR _sq2$[ebp], ax

; 241  :                 
; 242  :                 alp_16 = round (alp2);

  009d6	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _alp2$[ebp]
  009dc	50		 push	 eax
  009dd	e8 00 00 00 00	 call	 _round
  009e2	83 c4 04	 add	 esp, 4
  009e5	66 89 85 c8 fe
	ff ff		 mov	 WORD PTR _alp_16$[ebp], ax

; 243  :                 
; 244  :                 s = L_msu (L_mult (alp, sq2), sq, alp_16);

  009ec	0f b7 85 c8 fe
	ff ff		 movzx	 eax, WORD PTR _alp_16$[ebp]
  009f3	50		 push	 eax
  009f4	0f b7 8d f8 fe
	ff ff		 movzx	 ecx, WORD PTR _sq$[ebp]
  009fb	51		 push	 ecx
  009fc	0f b7 95 ec fe
	ff ff		 movzx	 edx, WORD PTR _sq2$[ebp]
  00a03	52		 push	 edx
  00a04	0f b7 85 d4 fe
	ff ff		 movzx	 eax, WORD PTR _alp$[ebp]
  00a0b	50		 push	 eax
  00a0c	e8 00 00 00 00	 call	 _L_mult
  00a11	83 c4 08	 add	 esp, 8
  00a14	50		 push	 eax
  00a15	e8 00 00 00 00	 call	 _L_msu
  00a1a	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a1d	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 245  :                 
; 246  :                 test (); 

  00a23	e8 00 00 00 00	 call	 _test

; 247  :                 if (s > 0)

  00a28	83 bd 64 fe ff
	ff 00		 cmp	 DWORD PTR _s$[ebp], 0
  00a2f	7e 59		 jle	 SHORT $LN27@search_10a

; 248  :                 {
; 249  :                     sq = sq2;                    move16 (); 

  00a31	66 8b 85 ec fe
	ff ff		 mov	 ax, WORD PTR _sq2$[ebp]
  00a38	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _sq$[ebp], ax
  00a3f	e8 00 00 00 00	 call	 _move16

; 250  :                     ps = ps2;                    move16 (); 

  00a44	66 8b 85 04 ff
	ff ff		 mov	 ax, WORD PTR _ps2$[ebp]
  00a4b	66 89 85 28 ff
	ff ff		 mov	 WORD PTR _ps$[ebp], ax
  00a52	e8 00 00 00 00	 call	 _move16

; 251  :                     alp = alp_16;                move16 (); 

  00a57	66 8b 85 c8 fe
	ff ff		 mov	 ax, WORD PTR _alp_16$[ebp]
  00a5e	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _alp$[ebp], ax
  00a65	e8 00 00 00 00	 call	 _move16

; 252  :                     ia = i4;                     move16 (); 

  00a6a	66 8b 45 c4	 mov	 ax, WORD PTR _i4$[ebp]
  00a6e	66 89 85 4c ff
	ff ff		 mov	 WORD PTR _ia$[ebp], ax
  00a75	e8 00 00 00 00	 call	 _move16

; 253  :                     ib = i5;                     move16 (); 

  00a7a	66 8b 45 b8	 mov	 ax, WORD PTR _i5$[ebp]
  00a7e	66 89 85 40 ff
	ff ff		 mov	 WORD PTR _ib$[ebp], ax
  00a85	e8 00 00 00 00	 call	 _move16
$LN27@search_10a:

; 254  :                 }
; 255  :             }

  00a8a	e9 96 fe ff ff	 jmp	 $LN29@search_10a
$LN28@search_10a:

; 256  :         }

  00a8f	e9 4e fd ff ff	 jmp	 $LN32@search_10a
$LN31@search_10a:

; 257  :         i4 = ia;                                 move16 (); 

  00a94	66 8b 85 4c ff
	ff ff		 mov	 ax, WORD PTR _ia$[ebp]
  00a9b	66 89 45 c4	 mov	 WORD PTR _i4$[ebp], ax
  00a9f	e8 00 00 00 00	 call	 _move16

; 258  :         i5 = ib;                                 move16 (); 

  00aa4	66 8b 85 40 ff
	ff ff		 mov	 ax, WORD PTR _ib$[ebp]
  00aab	66 89 45 b8	 mov	 WORD PTR _i5$[ebp], ax
  00aaf	e8 00 00 00 00	 call	 _move16

; 259  :         
; 260  :         /*----------------------------------------------------------------*
; 261  :          * i6 and i7 loop:                                                *
; 262  :          *----------------------------------------------------------------*/
; 263  :         
; 264  :         ps0 = ps;                                move16 (); 

  00ab4	66 8b 85 28 ff
	ff ff		 mov	 ax, WORD PTR _ps$[ebp]
  00abb	66 89 85 1c ff
	ff ff		 mov	 WORD PTR _ps0$[ebp], ax
  00ac2	e8 00 00 00 00	 call	 _move16

; 265  :         alp0 = L_mult (alp, _1_2);

  00ac7	68 00 40 00 00	 push	 16384			; 00004000H
  00acc	0f b7 85 d4 fe
	ff ff		 movzx	 eax, WORD PTR _alp$[ebp]
  00ad3	50		 push	 eax
  00ad4	e8 00 00 00 00	 call	 _L_mult
  00ad9	83 c4 08	 add	 esp, 8
  00adc	89 85 58 fe ff
	ff		 mov	 DWORD PTR _alp0$[ebp], eax

; 266  :         
; 267  :         /* initialize 8 indices for next loop (see i2-i3 loop) */
; 268  :         move16 (); move16 (); move16 (); move16 (); 

  00ae2	e8 00 00 00 00	 call	 _move16
  00ae7	e8 00 00 00 00	 call	 _move16
  00aec	e8 00 00 00 00	 call	 _move16
  00af1	e8 00 00 00 00	 call	 _move16

; 269  :         move16 (); move16 (); move16 (); move16 (); 

  00af6	e8 00 00 00 00	 call	 _move16
  00afb	e8 00 00 00 00	 call	 _move16
  00b00	e8 00 00 00 00	 call	 _move16
  00b05	e8 00 00 00 00	 call	 _move16

; 270  :         
; 271  :         for (i7 = ipos[7]; i7 < L_CODE; i7 += step)

  00b0a	b8 02 00 00 00	 mov	 eax, 2
  00b0f	6b c8 07	 imul	 ecx, eax, 7
  00b12	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  00b15	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  00b19	66 89 45 a0	 mov	 WORD PTR _i7$[ebp], ax
  00b1d	eb 0e		 jmp	 SHORT $LN26@search_10a
$LN25@search_10a:
  00b1f	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  00b23	0f bf 4d a0	 movsx	 ecx, WORD PTR _i7$[ebp]
  00b27	03 c8		 add	 ecx, eax
  00b29	66 89 4d a0	 mov	 WORD PTR _i7$[ebp], cx
$LN26@search_10a:
  00b2d	0f bf 45 a0	 movsx	 eax, WORD PTR _i7$[ebp]
  00b31	83 f8 28	 cmp	 eax, 40			; 00000028H
  00b34	0f 8d 59 01 00
	00		 jge	 $LN24@search_10a

; 272  :         {
; 273  :             s = L_mult (rr[i7][i7], _1_16);

  00b3a	68 00 08 00 00	 push	 2048			; 00000800H
  00b3f	0f bf 45 a0	 movsx	 eax, WORD PTR _i7$[ebp]
  00b43	6b c8 50	 imul	 ecx, eax, 80
  00b46	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00b49	0f bf 55 a0	 movsx	 edx, WORD PTR _i7$[ebp]
  00b4d	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00b51	50		 push	 eax
  00b52	e8 00 00 00 00	 call	 _L_mult
  00b57	83 c4 08	 add	 esp, 8
  00b5a	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 274  :             s = L_mac (s, rr[i0][i7], _1_8);

  00b60	68 00 10 00 00	 push	 4096			; 00001000H
  00b65	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  00b69	6b c8 50	 imul	 ecx, eax, 80
  00b6c	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00b6f	0f bf 55 a0	 movsx	 edx, WORD PTR _i7$[ebp]
  00b73	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00b77	50		 push	 eax
  00b78	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00b7e	51		 push	 ecx
  00b7f	e8 00 00 00 00	 call	 _L_mac
  00b84	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b87	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 275  :             s = L_mac (s, rr[i1][i7], _1_8);

  00b8d	68 00 10 00 00	 push	 4096			; 00001000H
  00b92	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  00b96	6b c8 50	 imul	 ecx, eax, 80
  00b99	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00b9c	0f bf 55 a0	 movsx	 edx, WORD PTR _i7$[ebp]
  00ba0	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00ba4	50		 push	 eax
  00ba5	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00bab	51		 push	 ecx
  00bac	e8 00 00 00 00	 call	 _L_mac
  00bb1	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bb4	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 276  :             s = L_mac (s, rr[i2][i7], _1_8);

  00bba	68 00 10 00 00	 push	 4096			; 00001000H
  00bbf	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  00bc3	6b c8 50	 imul	 ecx, eax, 80
  00bc6	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00bc9	0f bf 55 a0	 movsx	 edx, WORD PTR _i7$[ebp]
  00bcd	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00bd1	50		 push	 eax
  00bd2	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00bd8	51		 push	 ecx
  00bd9	e8 00 00 00 00	 call	 _L_mac
  00bde	83 c4 0c	 add	 esp, 12			; 0000000cH
  00be1	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 277  :             s = L_mac (s, rr[i3][i7], _1_8);

  00be7	68 00 10 00 00	 push	 4096			; 00001000H
  00bec	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  00bf0	6b c8 50	 imul	 ecx, eax, 80
  00bf3	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00bf6	0f bf 55 a0	 movsx	 edx, WORD PTR _i7$[ebp]
  00bfa	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00bfe	50		 push	 eax
  00bff	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00c05	51		 push	 ecx
  00c06	e8 00 00 00 00	 call	 _L_mac
  00c0b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c0e	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 278  :             s = L_mac (s, rr[i4][i7], _1_8);

  00c14	68 00 10 00 00	 push	 4096			; 00001000H
  00c19	0f bf 45 c4	 movsx	 eax, WORD PTR _i4$[ebp]
  00c1d	6b c8 50	 imul	 ecx, eax, 80
  00c20	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00c23	0f bf 55 a0	 movsx	 edx, WORD PTR _i7$[ebp]
  00c27	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00c2b	50		 push	 eax
  00c2c	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00c32	51		 push	 ecx
  00c33	e8 00 00 00 00	 call	 _L_mac
  00c38	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c3b	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 279  :             s = L_mac (s, rr[i5][i7], _1_8);

  00c41	68 00 10 00 00	 push	 4096			; 00001000H
  00c46	0f bf 45 b8	 movsx	 eax, WORD PTR _i5$[ebp]
  00c4a	6b c8 50	 imul	 ecx, eax, 80
  00c4d	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00c50	0f bf 55 a0	 movsx	 edx, WORD PTR _i7$[ebp]
  00c54	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00c58	50		 push	 eax
  00c59	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00c5f	51		 push	 ecx
  00c60	e8 00 00 00 00	 call	 _L_mac
  00c65	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c68	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 280  :             rrv[i7] = round (s);                 move16 (); 

  00c6e	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  00c74	50		 push	 eax
  00c75	e8 00 00 00 00	 call	 _round
  00c7a	83 c4 04	 add	 esp, 4
  00c7d	0f bf 4d a0	 movsx	 ecx, WORD PTR _i7$[ebp]
  00c81	66 89 84 4d 70
	fe ff ff	 mov	 WORD PTR _rrv$[ebp+ecx*2], ax
  00c89	e8 00 00 00 00	 call	 _move16

; 281  :         }

  00c8e	e9 8c fe ff ff	 jmp	 $LN25@search_10a
$LN24@search_10a:

; 282  :         
; 283  :         /* Default value */
; 284  :         sq = -1;                                 move16 (); 

  00c93	83 c8 ff	 or	 eax, -1
  00c96	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _sq$[ebp], ax
  00c9d	e8 00 00 00 00	 call	 _move16

; 285  :         alp = 1;                                 move16 (); 

  00ca2	b8 01 00 00 00	 mov	 eax, 1
  00ca7	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _alp$[ebp], ax
  00cae	e8 00 00 00 00	 call	 _move16

; 286  :         ps = 0;                                  move16 ();

  00cb3	33 c0		 xor	 eax, eax
  00cb5	66 89 85 28 ff
	ff ff		 mov	 WORD PTR _ps$[ebp], ax
  00cbc	e8 00 00 00 00	 call	 _move16

; 287  :         ia = ipos[6];                            move16 ();

  00cc1	b8 02 00 00 00	 mov	 eax, 2
  00cc6	6b c8 06	 imul	 ecx, eax, 6
  00cc9	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  00ccc	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  00cd0	66 89 85 4c ff
	ff ff		 mov	 WORD PTR _ia$[ebp], ax
  00cd7	e8 00 00 00 00	 call	 _move16

; 288  :         ib = ipos[7];                            move16 ();

  00cdc	b8 02 00 00 00	 mov	 eax, 2
  00ce1	6b c8 07	 imul	 ecx, eax, 7
  00ce4	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  00ce7	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  00ceb	66 89 85 40 ff
	ff ff		 mov	 WORD PTR _ib$[ebp], ax
  00cf2	e8 00 00 00 00	 call	 _move16

; 289  :         
; 290  :         /* initialize 8 indices for i6 loop (see i2-i3 loop) */
; 291  :         move16 (); move16 (); move16 (); move16 (); 

  00cf7	e8 00 00 00 00	 call	 _move16
  00cfc	e8 00 00 00 00	 call	 _move16
  00d01	e8 00 00 00 00	 call	 _move16
  00d06	e8 00 00 00 00	 call	 _move16

; 292  :         move16 (); move16 (); move16 (); move16 (); 

  00d0b	e8 00 00 00 00	 call	 _move16
  00d10	e8 00 00 00 00	 call	 _move16
  00d15	e8 00 00 00 00	 call	 _move16
  00d1a	e8 00 00 00 00	 call	 _move16

; 293  :         
; 294  :         for (i6 = ipos[6]; i6 < L_CODE; i6 += step)

  00d1f	b8 02 00 00 00	 mov	 eax, 2
  00d24	6b c8 06	 imul	 ecx, eax, 6
  00d27	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  00d2a	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  00d2e	66 89 45 ac	 mov	 WORD PTR _i6$[ebp], ax
  00d32	eb 0e		 jmp	 SHORT $LN23@search_10a
$LN22@search_10a:
  00d34	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  00d38	0f bf 4d ac	 movsx	 ecx, WORD PTR _i6$[ebp]
  00d3c	03 c8		 add	 ecx, eax
  00d3e	66 89 4d ac	 mov	 WORD PTR _i6$[ebp], cx
$LN23@search_10a:
  00d42	0f bf 45 ac	 movsx	 eax, WORD PTR _i6$[ebp]
  00d46	83 f8 28	 cmp	 eax, 40			; 00000028H
  00d49	0f 8d f1 02 00
	00		 jge	 $LN21@search_10a

; 295  :         {
; 296  :             ps1 = add (ps0, dn[i6]);

  00d4f	0f bf 45 ac	 movsx	 eax, WORD PTR _i6$[ebp]
  00d53	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  00d56	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00d5a	52		 push	 edx
  00d5b	0f b7 85 1c ff
	ff ff		 movzx	 eax, WORD PTR _ps0$[ebp]
  00d62	50		 push	 eax
  00d63	e8 00 00 00 00	 call	 _add
  00d68	83 c4 08	 add	 esp, 8
  00d6b	66 89 85 10 ff
	ff ff		 mov	 WORD PTR _ps1$[ebp], ax

; 297  :             
; 298  :             alp1 = L_mac (alp0, rr[i6][i6], _1_64);

  00d72	68 00 02 00 00	 push	 512			; 00000200H
  00d77	0f bf 45 ac	 movsx	 eax, WORD PTR _i6$[ebp]
  00d7b	6b c8 50	 imul	 ecx, eax, 80
  00d7e	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00d81	0f bf 55 ac	 movsx	 edx, WORD PTR _i6$[ebp]
  00d85	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00d89	50		 push	 eax
  00d8a	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _alp0$[ebp]
  00d90	51		 push	 ecx
  00d91	e8 00 00 00 00	 call	 _L_mac
  00d96	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d99	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 299  :             alp1 = L_mac (alp1, rr[i0][i6], _1_32);

  00d9f	68 00 04 00 00	 push	 1024			; 00000400H
  00da4	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  00da8	6b c8 50	 imul	 ecx, eax, 80
  00dab	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00dae	0f bf 55 ac	 movsx	 edx, WORD PTR _i6$[ebp]
  00db2	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00db6	50		 push	 eax
  00db7	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  00dbd	51		 push	 ecx
  00dbe	e8 00 00 00 00	 call	 _L_mac
  00dc3	83 c4 0c	 add	 esp, 12			; 0000000cH
  00dc6	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 300  :             alp1 = L_mac (alp1, rr[i1][i6], _1_32);

  00dcc	68 00 04 00 00	 push	 1024			; 00000400H
  00dd1	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  00dd5	6b c8 50	 imul	 ecx, eax, 80
  00dd8	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00ddb	0f bf 55 ac	 movsx	 edx, WORD PTR _i6$[ebp]
  00ddf	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00de3	50		 push	 eax
  00de4	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  00dea	51		 push	 ecx
  00deb	e8 00 00 00 00	 call	 _L_mac
  00df0	83 c4 0c	 add	 esp, 12			; 0000000cH
  00df3	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 301  :             alp1 = L_mac (alp1, rr[i2][i6], _1_32);

  00df9	68 00 04 00 00	 push	 1024			; 00000400H
  00dfe	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  00e02	6b c8 50	 imul	 ecx, eax, 80
  00e05	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00e08	0f bf 55 ac	 movsx	 edx, WORD PTR _i6$[ebp]
  00e0c	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00e10	50		 push	 eax
  00e11	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  00e17	51		 push	 ecx
  00e18	e8 00 00 00 00	 call	 _L_mac
  00e1d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e20	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 302  :             alp1 = L_mac (alp1, rr[i3][i6], _1_32);

  00e26	68 00 04 00 00	 push	 1024			; 00000400H
  00e2b	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  00e2f	6b c8 50	 imul	 ecx, eax, 80
  00e32	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00e35	0f bf 55 ac	 movsx	 edx, WORD PTR _i6$[ebp]
  00e39	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00e3d	50		 push	 eax
  00e3e	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  00e44	51		 push	 ecx
  00e45	e8 00 00 00 00	 call	 _L_mac
  00e4a	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e4d	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 303  :             alp1 = L_mac (alp1, rr[i4][i6], _1_32);

  00e53	68 00 04 00 00	 push	 1024			; 00000400H
  00e58	0f bf 45 c4	 movsx	 eax, WORD PTR _i4$[ebp]
  00e5c	6b c8 50	 imul	 ecx, eax, 80
  00e5f	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00e62	0f bf 55 ac	 movsx	 edx, WORD PTR _i6$[ebp]
  00e66	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00e6a	50		 push	 eax
  00e6b	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  00e71	51		 push	 ecx
  00e72	e8 00 00 00 00	 call	 _L_mac
  00e77	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e7a	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 304  :             alp1 = L_mac (alp1, rr[i5][i6], _1_32);

  00e80	68 00 04 00 00	 push	 1024			; 00000400H
  00e85	0f bf 45 b8	 movsx	 eax, WORD PTR _i5$[ebp]
  00e89	6b c8 50	 imul	 ecx, eax, 80
  00e8c	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00e8f	0f bf 55 ac	 movsx	 edx, WORD PTR _i6$[ebp]
  00e93	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00e97	50		 push	 eax
  00e98	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  00e9e	51		 push	 ecx
  00e9f	e8 00 00 00 00	 call	 _L_mac
  00ea4	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ea7	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 305  :             
; 306  :             /* initialize 3 indices for i7 inner loop (see i2-i3 loop) */
; 307  :             move16 (); move16 (); move16 (); 

  00ead	e8 00 00 00 00	 call	 _move16
  00eb2	e8 00 00 00 00	 call	 _move16
  00eb7	e8 00 00 00 00	 call	 _move16

; 308  :             
; 309  :             for (i7 = ipos[7]; i7 < L_CODE; i7 += step)

  00ebc	b8 02 00 00 00	 mov	 eax, 2
  00ec1	6b c8 07	 imul	 ecx, eax, 7
  00ec4	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  00ec7	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  00ecb	66 89 45 a0	 mov	 WORD PTR _i7$[ebp], ax
  00ecf	eb 0e		 jmp	 SHORT $LN20@search_10a
$LN19@search_10a:
  00ed1	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  00ed5	0f bf 4d a0	 movsx	 ecx, WORD PTR _i7$[ebp]
  00ed9	03 c8		 add	 ecx, eax
  00edb	66 89 4d a0	 mov	 WORD PTR _i7$[ebp], cx
$LN20@search_10a:
  00edf	0f bf 45 a0	 movsx	 eax, WORD PTR _i7$[ebp]
  00ee3	83 f8 28	 cmp	 eax, 40			; 00000028H
  00ee6	0f 8d 4f 01 00
	00		 jge	 $LN18@search_10a

; 310  :             {
; 311  :                 ps2 = add (ps1, dn[i7]);

  00eec	0f bf 45 a0	 movsx	 eax, WORD PTR _i7$[ebp]
  00ef0	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  00ef3	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00ef7	52		 push	 edx
  00ef8	0f b7 85 10 ff
	ff ff		 movzx	 eax, WORD PTR _ps1$[ebp]
  00eff	50		 push	 eax
  00f00	e8 00 00 00 00	 call	 _add
  00f05	83 c4 08	 add	 esp, 8
  00f08	66 89 85 04 ff
	ff ff		 mov	 WORD PTR _ps2$[ebp], ax

; 312  :                 
; 313  :                 alp2 = L_mac (alp1, rrv[i7], _1_4);

  00f0f	68 00 20 00 00	 push	 8192			; 00002000H
  00f14	0f bf 45 a0	 movsx	 eax, WORD PTR _i7$[ebp]
  00f18	0f b7 8c 45 70
	fe ff ff	 movzx	 ecx, WORD PTR _rrv$[ebp+eax*2]
  00f20	51		 push	 ecx
  00f21	8b 95 4c fe ff
	ff		 mov	 edx, DWORD PTR _alp1$[ebp]
  00f27	52		 push	 edx
  00f28	e8 00 00 00 00	 call	 _L_mac
  00f2d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f30	89 85 40 fe ff
	ff		 mov	 DWORD PTR _alp2$[ebp], eax

; 314  :                 alp2 = L_mac (alp2, rr[i6][i7], _1_32);

  00f36	68 00 04 00 00	 push	 1024			; 00000400H
  00f3b	0f bf 45 ac	 movsx	 eax, WORD PTR _i6$[ebp]
  00f3f	6b c8 50	 imul	 ecx, eax, 80
  00f42	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  00f45	0f bf 55 a0	 movsx	 edx, WORD PTR _i7$[ebp]
  00f49	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  00f4d	50		 push	 eax
  00f4e	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR _alp2$[ebp]
  00f54	51		 push	 ecx
  00f55	e8 00 00 00 00	 call	 _L_mac
  00f5a	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f5d	89 85 40 fe ff
	ff		 mov	 DWORD PTR _alp2$[ebp], eax

; 315  :                 
; 316  :                 sq2 = mult (ps2, ps2);

  00f63	0f b7 85 04 ff
	ff ff		 movzx	 eax, WORD PTR _ps2$[ebp]
  00f6a	50		 push	 eax
  00f6b	0f b7 8d 04 ff
	ff ff		 movzx	 ecx, WORD PTR _ps2$[ebp]
  00f72	51		 push	 ecx
  00f73	e8 00 00 00 00	 call	 _mult
  00f78	83 c4 08	 add	 esp, 8
  00f7b	66 89 85 ec fe
	ff ff		 mov	 WORD PTR _sq2$[ebp], ax

; 317  :                 
; 318  :                 alp_16 = round (alp2);

  00f82	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _alp2$[ebp]
  00f88	50		 push	 eax
  00f89	e8 00 00 00 00	 call	 _round
  00f8e	83 c4 04	 add	 esp, 4
  00f91	66 89 85 c8 fe
	ff ff		 mov	 WORD PTR _alp_16$[ebp], ax

; 319  :                 
; 320  :                 s = L_msu (L_mult (alp, sq2), sq, alp_16);

  00f98	0f b7 85 c8 fe
	ff ff		 movzx	 eax, WORD PTR _alp_16$[ebp]
  00f9f	50		 push	 eax
  00fa0	0f b7 8d f8 fe
	ff ff		 movzx	 ecx, WORD PTR _sq$[ebp]
  00fa7	51		 push	 ecx
  00fa8	0f b7 95 ec fe
	ff ff		 movzx	 edx, WORD PTR _sq2$[ebp]
  00faf	52		 push	 edx
  00fb0	0f b7 85 d4 fe
	ff ff		 movzx	 eax, WORD PTR _alp$[ebp]
  00fb7	50		 push	 eax
  00fb8	e8 00 00 00 00	 call	 _L_mult
  00fbd	83 c4 08	 add	 esp, 8
  00fc0	50		 push	 eax
  00fc1	e8 00 00 00 00	 call	 _L_msu
  00fc6	83 c4 0c	 add	 esp, 12			; 0000000cH
  00fc9	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 321  :                 
; 322  :                 test (); 

  00fcf	e8 00 00 00 00	 call	 _test

; 323  :                 if (s > 0)

  00fd4	83 bd 64 fe ff
	ff 00		 cmp	 DWORD PTR _s$[ebp], 0
  00fdb	7e 59		 jle	 SHORT $LN17@search_10a

; 324  :                 {
; 325  :                     sq = sq2;                    move16 (); 

  00fdd	66 8b 85 ec fe
	ff ff		 mov	 ax, WORD PTR _sq2$[ebp]
  00fe4	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _sq$[ebp], ax
  00feb	e8 00 00 00 00	 call	 _move16

; 326  :                     ps = ps2;                    move16 (); 

  00ff0	66 8b 85 04 ff
	ff ff		 mov	 ax, WORD PTR _ps2$[ebp]
  00ff7	66 89 85 28 ff
	ff ff		 mov	 WORD PTR _ps$[ebp], ax
  00ffe	e8 00 00 00 00	 call	 _move16

; 327  :                     alp = alp_16;                move16 (); 

  01003	66 8b 85 c8 fe
	ff ff		 mov	 ax, WORD PTR _alp_16$[ebp]
  0100a	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _alp$[ebp], ax
  01011	e8 00 00 00 00	 call	 _move16

; 328  :                     ia = i6;                     move16 (); 

  01016	66 8b 45 ac	 mov	 ax, WORD PTR _i6$[ebp]
  0101a	66 89 85 4c ff
	ff ff		 mov	 WORD PTR _ia$[ebp], ax
  01021	e8 00 00 00 00	 call	 _move16

; 329  :                     ib = i7;                     move16 (); 

  01026	66 8b 45 a0	 mov	 ax, WORD PTR _i7$[ebp]
  0102a	66 89 85 40 ff
	ff ff		 mov	 WORD PTR _ib$[ebp], ax
  01031	e8 00 00 00 00	 call	 _move16
$LN17@search_10a:

; 330  :                 }
; 331  :             }

  01036	e9 96 fe ff ff	 jmp	 $LN19@search_10a
$LN18@search_10a:

; 332  :         }

  0103b	e9 f4 fc ff ff	 jmp	 $LN22@search_10a
$LN21@search_10a:

; 333  :         i6 = ia;                                 move16 (); 

  01040	66 8b 85 4c ff
	ff ff		 mov	 ax, WORD PTR _ia$[ebp]
  01047	66 89 45 ac	 mov	 WORD PTR _i6$[ebp], ax
  0104b	e8 00 00 00 00	 call	 _move16

; 334  :         i7 = ib;                                 move16 (); 

  01050	66 8b 85 40 ff
	ff ff		 mov	 ax, WORD PTR _ib$[ebp]
  01057	66 89 45 a0	 mov	 WORD PTR _i7$[ebp], ax
  0105b	e8 00 00 00 00	 call	 _move16

; 335  :         
; 336  :         /* now finished searching a set of 8 pulses */
; 337  : 
; 338  :         test();

  01060	e8 00 00 00 00	 call	 _test

; 339  :         if(gsmefrFlag != 0){

  01065	0f bf 85 34 fe
	ff ff		 movsx	 eax, WORD PTR _gsmefrFlag$[ebp]
  0106c	85 c0		 test	 eax, eax
  0106e	0f 84 54 06 00
	00		 je	 $LN16@search_10a

; 340  :            /* go on with the two last pulses for GSMEFR                      */
; 341  :            /*----------------------------------------------------------------*
; 342  :             * i8 and i9 loop:                                                *
; 343  :             *----------------------------------------------------------------*/
; 344  :         
; 345  :            ps0 = ps;                                move16 (); 

  01074	66 8b 85 28 ff
	ff ff		 mov	 ax, WORD PTR _ps$[ebp]
  0107b	66 89 85 1c ff
	ff ff		 mov	 WORD PTR _ps0$[ebp], ax
  01082	e8 00 00 00 00	 call	 _move16

; 346  :            alp0 = L_mult (alp, _1_2);

  01087	68 00 40 00 00	 push	 16384			; 00004000H
  0108c	0f b7 85 d4 fe
	ff ff		 movzx	 eax, WORD PTR _alp$[ebp]
  01093	50		 push	 eax
  01094	e8 00 00 00 00	 call	 _L_mult
  01099	83 c4 08	 add	 esp, 8
  0109c	89 85 58 fe ff
	ff		 mov	 DWORD PTR _alp0$[ebp], eax

; 347  :            
; 348  :            /* initialize 10 indices for next loop (see i2-i3 loop) */
; 349  :            move16 (); move16 (); move16 (); move16 (); move16 (); 

  010a2	e8 00 00 00 00	 call	 _move16
  010a7	e8 00 00 00 00	 call	 _move16
  010ac	e8 00 00 00 00	 call	 _move16
  010b1	e8 00 00 00 00	 call	 _move16
  010b6	e8 00 00 00 00	 call	 _move16

; 350  :            move16 (); move16 (); move16 (); move16 (); move16 (); 

  010bb	e8 00 00 00 00	 call	 _move16
  010c0	e8 00 00 00 00	 call	 _move16
  010c5	e8 00 00 00 00	 call	 _move16
  010ca	e8 00 00 00 00	 call	 _move16
  010cf	e8 00 00 00 00	 call	 _move16

; 351  :            
; 352  :            for (i9 = ipos[9]; i9 < L_CODE; i9 += step)

  010d4	b8 02 00 00 00	 mov	 eax, 2
  010d9	6b c8 09	 imul	 ecx, eax, 9
  010dc	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  010df	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  010e3	66 89 45 88	 mov	 WORD PTR _i9$[ebp], ax
  010e7	eb 0e		 jmp	 SHORT $LN15@search_10a
$LN14@search_10a:
  010e9	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  010ed	0f bf 4d 88	 movsx	 ecx, WORD PTR _i9$[ebp]
  010f1	03 c8		 add	 ecx, eax
  010f3	66 89 4d 88	 mov	 WORD PTR _i9$[ebp], cx
$LN15@search_10a:
  010f7	0f bf 45 88	 movsx	 eax, WORD PTR _i9$[ebp]
  010fb	83 f8 28	 cmp	 eax, 40			; 00000028H
  010fe	0f 8d b3 01 00
	00		 jge	 $LN13@search_10a

; 353  :            {
; 354  :               s = L_mult (rr[i9][i9], _1_16);

  01104	68 00 08 00 00	 push	 2048			; 00000800H
  01109	0f bf 45 88	 movsx	 eax, WORD PTR _i9$[ebp]
  0110d	6b c8 50	 imul	 ecx, eax, 80
  01110	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01113	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  01117	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0111b	50		 push	 eax
  0111c	e8 00 00 00 00	 call	 _L_mult
  01121	83 c4 08	 add	 esp, 8
  01124	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 355  :               s = L_mac (s, rr[i0][i9], _1_8);

  0112a	68 00 10 00 00	 push	 4096			; 00001000H
  0112f	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  01133	6b c8 50	 imul	 ecx, eax, 80
  01136	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01139	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  0113d	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  01141	50		 push	 eax
  01142	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  01148	51		 push	 ecx
  01149	e8 00 00 00 00	 call	 _L_mac
  0114e	83 c4 0c	 add	 esp, 12			; 0000000cH
  01151	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 356  :               s = L_mac (s, rr[i1][i9], _1_8);

  01157	68 00 10 00 00	 push	 4096			; 00001000H
  0115c	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  01160	6b c8 50	 imul	 ecx, eax, 80
  01163	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01166	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  0116a	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0116e	50		 push	 eax
  0116f	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  01175	51		 push	 ecx
  01176	e8 00 00 00 00	 call	 _L_mac
  0117b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0117e	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 357  :               s = L_mac (s, rr[i2][i9], _1_8);

  01184	68 00 10 00 00	 push	 4096			; 00001000H
  01189	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  0118d	6b c8 50	 imul	 ecx, eax, 80
  01190	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01193	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  01197	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0119b	50		 push	 eax
  0119c	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  011a2	51		 push	 ecx
  011a3	e8 00 00 00 00	 call	 _L_mac
  011a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  011ab	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 358  :               s = L_mac (s, rr[i3][i9], _1_8);

  011b1	68 00 10 00 00	 push	 4096			; 00001000H
  011b6	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  011ba	6b c8 50	 imul	 ecx, eax, 80
  011bd	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  011c0	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  011c4	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  011c8	50		 push	 eax
  011c9	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  011cf	51		 push	 ecx
  011d0	e8 00 00 00 00	 call	 _L_mac
  011d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  011d8	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 359  :               s = L_mac (s, rr[i4][i9], _1_8);

  011de	68 00 10 00 00	 push	 4096			; 00001000H
  011e3	0f bf 45 c4	 movsx	 eax, WORD PTR _i4$[ebp]
  011e7	6b c8 50	 imul	 ecx, eax, 80
  011ea	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  011ed	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  011f1	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  011f5	50		 push	 eax
  011f6	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  011fc	51		 push	 ecx
  011fd	e8 00 00 00 00	 call	 _L_mac
  01202	83 c4 0c	 add	 esp, 12			; 0000000cH
  01205	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 360  :               s = L_mac (s, rr[i5][i9], _1_8);

  0120b	68 00 10 00 00	 push	 4096			; 00001000H
  01210	0f bf 45 b8	 movsx	 eax, WORD PTR _i5$[ebp]
  01214	6b c8 50	 imul	 ecx, eax, 80
  01217	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  0121a	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  0121e	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  01222	50		 push	 eax
  01223	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  01229	51		 push	 ecx
  0122a	e8 00 00 00 00	 call	 _L_mac
  0122f	83 c4 0c	 add	 esp, 12			; 0000000cH
  01232	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 361  :               s = L_mac (s, rr[i6][i9], _1_8);

  01238	68 00 10 00 00	 push	 4096			; 00001000H
  0123d	0f bf 45 ac	 movsx	 eax, WORD PTR _i6$[ebp]
  01241	6b c8 50	 imul	 ecx, eax, 80
  01244	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01247	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  0124b	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0124f	50		 push	 eax
  01250	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  01256	51		 push	 ecx
  01257	e8 00 00 00 00	 call	 _L_mac
  0125c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0125f	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 362  :               s = L_mac (s, rr[i7][i9], _1_8);

  01265	68 00 10 00 00	 push	 4096			; 00001000H
  0126a	0f bf 45 a0	 movsx	 eax, WORD PTR _i7$[ebp]
  0126e	6b c8 50	 imul	 ecx, eax, 80
  01271	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01274	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  01278	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0127c	50		 push	 eax
  0127d	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  01283	51		 push	 ecx
  01284	e8 00 00 00 00	 call	 _L_mac
  01289	83 c4 0c	 add	 esp, 12			; 0000000cH
  0128c	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 363  :               rrv[i9] = round (s);                 move16 (); 

  01292	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  01298	50		 push	 eax
  01299	e8 00 00 00 00	 call	 _round
  0129e	83 c4 04	 add	 esp, 4
  012a1	0f bf 4d 88	 movsx	 ecx, WORD PTR _i9$[ebp]
  012a5	66 89 84 4d 70
	fe ff ff	 mov	 WORD PTR _rrv$[ebp+ecx*2], ax
  012ad	e8 00 00 00 00	 call	 _move16

; 364  :            }

  012b2	e9 32 fe ff ff	 jmp	 $LN14@search_10a
$LN13@search_10a:

; 365  :            
; 366  :            /* Default value */
; 367  :            sq = -1;                                 move16 (); 

  012b7	83 c8 ff	 or	 eax, -1
  012ba	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _sq$[ebp], ax
  012c1	e8 00 00 00 00	 call	 _move16

; 368  :            alp = 1;                                 move16 (); 

  012c6	b8 01 00 00 00	 mov	 eax, 1
  012cb	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _alp$[ebp], ax
  012d2	e8 00 00 00 00	 call	 _move16

; 369  :            ps = 0;                                  move16 ();

  012d7	33 c0		 xor	 eax, eax
  012d9	66 89 85 28 ff
	ff ff		 mov	 WORD PTR _ps$[ebp], ax
  012e0	e8 00 00 00 00	 call	 _move16

; 370  :            ia = ipos[8];                            move16 ();

  012e5	b8 02 00 00 00	 mov	 eax, 2
  012ea	c1 e0 03	 shl	 eax, 3
  012ed	8b 4d 1c	 mov	 ecx, DWORD PTR _ipos$[ebp]
  012f0	66 8b 14 01	 mov	 dx, WORD PTR [ecx+eax]
  012f4	66 89 95 4c ff
	ff ff		 mov	 WORD PTR _ia$[ebp], dx
  012fb	e8 00 00 00 00	 call	 _move16

; 371  :            ib = ipos[9];                            move16 ();

  01300	b8 02 00 00 00	 mov	 eax, 2
  01305	6b c8 09	 imul	 ecx, eax, 9
  01308	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  0130b	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  0130f	66 89 85 40 ff
	ff ff		 mov	 WORD PTR _ib$[ebp], ax
  01316	e8 00 00 00 00	 call	 _move16

; 372  :            
; 373  :            /* initialize 10 indices for i8 loop (see i2-i3 loop) */
; 374  :            move16 (); move16 (); move16 (); move16 (); move16 (); 

  0131b	e8 00 00 00 00	 call	 _move16
  01320	e8 00 00 00 00	 call	 _move16
  01325	e8 00 00 00 00	 call	 _move16
  0132a	e8 00 00 00 00	 call	 _move16
  0132f	e8 00 00 00 00	 call	 _move16

; 375  :            move16 (); move16 (); move16 (); move16 (); move16 (); 

  01334	e8 00 00 00 00	 call	 _move16
  01339	e8 00 00 00 00	 call	 _move16
  0133e	e8 00 00 00 00	 call	 _move16
  01343	e8 00 00 00 00	 call	 _move16
  01348	e8 00 00 00 00	 call	 _move16

; 376  :            
; 377  :            for (i8 = ipos[8]; i8 < L_CODE; i8 += step)

  0134d	b8 02 00 00 00	 mov	 eax, 2
  01352	c1 e0 03	 shl	 eax, 3
  01355	8b 4d 1c	 mov	 ecx, DWORD PTR _ipos$[ebp]
  01358	66 8b 14 01	 mov	 dx, WORD PTR [ecx+eax]
  0135c	66 89 55 94	 mov	 WORD PTR _i8$[ebp], dx
  01360	eb 0e		 jmp	 SHORT $LN12@search_10a
$LN11@search_10a:
  01362	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  01366	0f bf 4d 94	 movsx	 ecx, WORD PTR _i8$[ebp]
  0136a	03 c8		 add	 ecx, eax
  0136c	66 89 4d 94	 mov	 WORD PTR _i8$[ebp], cx
$LN12@search_10a:
  01370	0f bf 45 94	 movsx	 eax, WORD PTR _i8$[ebp]
  01374	83 f8 28	 cmp	 eax, 40			; 00000028H
  01377	0f 8d 4b 03 00
	00		 jge	 $LN16@search_10a

; 378  :            {
; 379  :               ps1 = add (ps0, dn[i8]);

  0137d	0f bf 45 94	 movsx	 eax, WORD PTR _i8$[ebp]
  01381	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  01384	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  01388	52		 push	 edx
  01389	0f b7 85 1c ff
	ff ff		 movzx	 eax, WORD PTR _ps0$[ebp]
  01390	50		 push	 eax
  01391	e8 00 00 00 00	 call	 _add
  01396	83 c4 08	 add	 esp, 8
  01399	66 89 85 10 ff
	ff ff		 mov	 WORD PTR _ps1$[ebp], ax

; 380  :               
; 381  :               alp1 = L_mac (alp0, rr[i8][i8], _1_128);

  013a0	68 00 01 00 00	 push	 256			; 00000100H
  013a5	0f bf 45 94	 movsx	 eax, WORD PTR _i8$[ebp]
  013a9	6b c8 50	 imul	 ecx, eax, 80
  013ac	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  013af	0f bf 55 94	 movsx	 edx, WORD PTR _i8$[ebp]
  013b3	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  013b7	50		 push	 eax
  013b8	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _alp0$[ebp]
  013be	51		 push	 ecx
  013bf	e8 00 00 00 00	 call	 _L_mac
  013c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  013c7	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 382  :               alp1 = L_mac (alp1, rr[i0][i8], _1_64);

  013cd	68 00 02 00 00	 push	 512			; 00000200H
  013d2	0f bf 45 f4	 movsx	 eax, WORD PTR _i0$[ebp]
  013d6	6b c8 50	 imul	 ecx, eax, 80
  013d9	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  013dc	0f bf 55 94	 movsx	 edx, WORD PTR _i8$[ebp]
  013e0	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  013e4	50		 push	 eax
  013e5	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  013eb	51		 push	 ecx
  013ec	e8 00 00 00 00	 call	 _L_mac
  013f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  013f4	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 383  :               alp1 = L_mac (alp1, rr[i1][i8], _1_64);

  013fa	68 00 02 00 00	 push	 512			; 00000200H
  013ff	0f bf 45 e8	 movsx	 eax, WORD PTR _i1$[ebp]
  01403	6b c8 50	 imul	 ecx, eax, 80
  01406	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01409	0f bf 55 94	 movsx	 edx, WORD PTR _i8$[ebp]
  0140d	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  01411	50		 push	 eax
  01412	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  01418	51		 push	 ecx
  01419	e8 00 00 00 00	 call	 _L_mac
  0141e	83 c4 0c	 add	 esp, 12			; 0000000cH
  01421	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 384  :               alp1 = L_mac (alp1, rr[i2][i8], _1_64);

  01427	68 00 02 00 00	 push	 512			; 00000200H
  0142c	0f bf 45 dc	 movsx	 eax, WORD PTR _i2$[ebp]
  01430	6b c8 50	 imul	 ecx, eax, 80
  01433	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01436	0f bf 55 94	 movsx	 edx, WORD PTR _i8$[ebp]
  0143a	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0143e	50		 push	 eax
  0143f	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  01445	51		 push	 ecx
  01446	e8 00 00 00 00	 call	 _L_mac
  0144b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0144e	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 385  :               alp1 = L_mac (alp1, rr[i3][i8], _1_64);

  01454	68 00 02 00 00	 push	 512			; 00000200H
  01459	0f bf 45 d0	 movsx	 eax, WORD PTR _i3$[ebp]
  0145d	6b c8 50	 imul	 ecx, eax, 80
  01460	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01463	0f bf 55 94	 movsx	 edx, WORD PTR _i8$[ebp]
  01467	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0146b	50		 push	 eax
  0146c	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  01472	51		 push	 ecx
  01473	e8 00 00 00 00	 call	 _L_mac
  01478	83 c4 0c	 add	 esp, 12			; 0000000cH
  0147b	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 386  :               alp1 = L_mac (alp1, rr[i4][i8], _1_64);

  01481	68 00 02 00 00	 push	 512			; 00000200H
  01486	0f bf 45 c4	 movsx	 eax, WORD PTR _i4$[ebp]
  0148a	6b c8 50	 imul	 ecx, eax, 80
  0148d	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01490	0f bf 55 94	 movsx	 edx, WORD PTR _i8$[ebp]
  01494	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  01498	50		 push	 eax
  01499	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  0149f	51		 push	 ecx
  014a0	e8 00 00 00 00	 call	 _L_mac
  014a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  014a8	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 387  :               alp1 = L_mac (alp1, rr[i5][i8], _1_64);

  014ae	68 00 02 00 00	 push	 512			; 00000200H
  014b3	0f bf 45 b8	 movsx	 eax, WORD PTR _i5$[ebp]
  014b7	6b c8 50	 imul	 ecx, eax, 80
  014ba	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  014bd	0f bf 55 94	 movsx	 edx, WORD PTR _i8$[ebp]
  014c1	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  014c5	50		 push	 eax
  014c6	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  014cc	51		 push	 ecx
  014cd	e8 00 00 00 00	 call	 _L_mac
  014d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  014d5	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 388  :               alp1 = L_mac (alp1, rr[i6][i8], _1_64);

  014db	68 00 02 00 00	 push	 512			; 00000200H
  014e0	0f bf 45 ac	 movsx	 eax, WORD PTR _i6$[ebp]
  014e4	6b c8 50	 imul	 ecx, eax, 80
  014e7	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  014ea	0f bf 55 94	 movsx	 edx, WORD PTR _i8$[ebp]
  014ee	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  014f2	50		 push	 eax
  014f3	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  014f9	51		 push	 ecx
  014fa	e8 00 00 00 00	 call	 _L_mac
  014ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  01502	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 389  :               alp1 = L_mac (alp1, rr[i7][i8], _1_64);

  01508	68 00 02 00 00	 push	 512			; 00000200H
  0150d	0f bf 45 a0	 movsx	 eax, WORD PTR _i7$[ebp]
  01511	6b c8 50	 imul	 ecx, eax, 80
  01514	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  01517	0f bf 55 94	 movsx	 edx, WORD PTR _i8$[ebp]
  0151b	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  0151f	50		 push	 eax
  01520	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _alp1$[ebp]
  01526	51		 push	 ecx
  01527	e8 00 00 00 00	 call	 _L_mac
  0152c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0152f	89 85 4c fe ff
	ff		 mov	 DWORD PTR _alp1$[ebp], eax

; 390  :               
; 391  :               /* initialize 3 indices for i9 inner loop (see i2-i3 loop) */
; 392  :               move16 (); move16 (); move16 (); 

  01535	e8 00 00 00 00	 call	 _move16
  0153a	e8 00 00 00 00	 call	 _move16
  0153f	e8 00 00 00 00	 call	 _move16

; 393  :               
; 394  :               for (i9 = ipos[9]; i9 < L_CODE; i9 += step)

  01544	b8 02 00 00 00	 mov	 eax, 2
  01549	6b c8 09	 imul	 ecx, eax, 9
  0154c	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  0154f	66 8b 04 0a	 mov	 ax, WORD PTR [edx+ecx]
  01553	66 89 45 88	 mov	 WORD PTR _i9$[ebp], ax
  01557	eb 0e		 jmp	 SHORT $LN9@search_10a
$LN8@search_10a:
  01559	0f bf 45 0c	 movsx	 eax, WORD PTR _step$[ebp]
  0155d	0f bf 4d 88	 movsx	 ecx, WORD PTR _i9$[ebp]
  01561	03 c8		 add	 ecx, eax
  01563	66 89 4d 88	 mov	 WORD PTR _i9$[ebp], cx
$LN9@search_10a:
  01567	0f bf 45 88	 movsx	 eax, WORD PTR _i9$[ebp]
  0156b	83 f8 28	 cmp	 eax, 40			; 00000028H
  0156e	0f 8d 4f 01 00
	00		 jge	 $LN7@search_10a

; 395  :               {
; 396  :                  ps2 = add (ps1, dn[i9]);

  01574	0f bf 45 88	 movsx	 eax, WORD PTR _i9$[ebp]
  01578	8b 4d 14	 mov	 ecx, DWORD PTR _dn$[ebp]
  0157b	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0157f	52		 push	 edx
  01580	0f b7 85 10 ff
	ff ff		 movzx	 eax, WORD PTR _ps1$[ebp]
  01587	50		 push	 eax
  01588	e8 00 00 00 00	 call	 _add
  0158d	83 c4 08	 add	 esp, 8
  01590	66 89 85 04 ff
	ff ff		 mov	 WORD PTR _ps2$[ebp], ax

; 397  :                  
; 398  :                  alp2 = L_mac (alp1, rrv[i9], _1_8);

  01597	68 00 10 00 00	 push	 4096			; 00001000H
  0159c	0f bf 45 88	 movsx	 eax, WORD PTR _i9$[ebp]
  015a0	0f b7 8c 45 70
	fe ff ff	 movzx	 ecx, WORD PTR _rrv$[ebp+eax*2]
  015a8	51		 push	 ecx
  015a9	8b 95 4c fe ff
	ff		 mov	 edx, DWORD PTR _alp1$[ebp]
  015af	52		 push	 edx
  015b0	e8 00 00 00 00	 call	 _L_mac
  015b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  015b8	89 85 40 fe ff
	ff		 mov	 DWORD PTR _alp2$[ebp], eax

; 399  :                  alp2 = L_mac (alp2, rr[i8][i9], _1_64);

  015be	68 00 02 00 00	 push	 512			; 00000200H
  015c3	0f bf 45 94	 movsx	 eax, WORD PTR _i8$[ebp]
  015c7	6b c8 50	 imul	 ecx, eax, 80
  015ca	03 4d 18	 add	 ecx, DWORD PTR _rr$[ebp]
  015cd	0f bf 55 88	 movsx	 edx, WORD PTR _i9$[ebp]
  015d1	0f b7 04 51	 movzx	 eax, WORD PTR [ecx+edx*2]
  015d5	50		 push	 eax
  015d6	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR _alp2$[ebp]
  015dc	51		 push	 ecx
  015dd	e8 00 00 00 00	 call	 _L_mac
  015e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  015e5	89 85 40 fe ff
	ff		 mov	 DWORD PTR _alp2$[ebp], eax

; 400  :                  
; 401  :                  sq2 = mult (ps2, ps2);

  015eb	0f b7 85 04 ff
	ff ff		 movzx	 eax, WORD PTR _ps2$[ebp]
  015f2	50		 push	 eax
  015f3	0f b7 8d 04 ff
	ff ff		 movzx	 ecx, WORD PTR _ps2$[ebp]
  015fa	51		 push	 ecx
  015fb	e8 00 00 00 00	 call	 _mult
  01600	83 c4 08	 add	 esp, 8
  01603	66 89 85 ec fe
	ff ff		 mov	 WORD PTR _sq2$[ebp], ax

; 402  :                 
; 403  :                  alp_16 = round (alp2);

  0160a	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _alp2$[ebp]
  01610	50		 push	 eax
  01611	e8 00 00 00 00	 call	 _round
  01616	83 c4 04	 add	 esp, 4
  01619	66 89 85 c8 fe
	ff ff		 mov	 WORD PTR _alp_16$[ebp], ax

; 404  :                  
; 405  :                  s = L_msu (L_mult (alp, sq2), sq, alp_16);

  01620	0f b7 85 c8 fe
	ff ff		 movzx	 eax, WORD PTR _alp_16$[ebp]
  01627	50		 push	 eax
  01628	0f b7 8d f8 fe
	ff ff		 movzx	 ecx, WORD PTR _sq$[ebp]
  0162f	51		 push	 ecx
  01630	0f b7 95 ec fe
	ff ff		 movzx	 edx, WORD PTR _sq2$[ebp]
  01637	52		 push	 edx
  01638	0f b7 85 d4 fe
	ff ff		 movzx	 eax, WORD PTR _alp$[ebp]
  0163f	50		 push	 eax
  01640	e8 00 00 00 00	 call	 _L_mult
  01645	83 c4 08	 add	 esp, 8
  01648	50		 push	 eax
  01649	e8 00 00 00 00	 call	 _L_msu
  0164e	83 c4 0c	 add	 esp, 12			; 0000000cH
  01651	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 406  :                  
; 407  :                  test (); 

  01657	e8 00 00 00 00	 call	 _test

; 408  :                  if (s > 0)

  0165c	83 bd 64 fe ff
	ff 00		 cmp	 DWORD PTR _s$[ebp], 0
  01663	7e 59		 jle	 SHORT $LN6@search_10a

; 409  :                  {
; 410  :                     sq = sq2;                    move16 (); 

  01665	66 8b 85 ec fe
	ff ff		 mov	 ax, WORD PTR _sq2$[ebp]
  0166c	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _sq$[ebp], ax
  01673	e8 00 00 00 00	 call	 _move16

; 411  :                     ps = ps2;                    move16 (); 

  01678	66 8b 85 04 ff
	ff ff		 mov	 ax, WORD PTR _ps2$[ebp]
  0167f	66 89 85 28 ff
	ff ff		 mov	 WORD PTR _ps$[ebp], ax
  01686	e8 00 00 00 00	 call	 _move16

; 412  :                     alp = alp_16;                move16 (); 

  0168b	66 8b 85 c8 fe
	ff ff		 mov	 ax, WORD PTR _alp_16$[ebp]
  01692	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _alp$[ebp], ax
  01699	e8 00 00 00 00	 call	 _move16

; 413  :                     ia = i8;                     move16 (); 

  0169e	66 8b 45 94	 mov	 ax, WORD PTR _i8$[ebp]
  016a2	66 89 85 4c ff
	ff ff		 mov	 WORD PTR _ia$[ebp], ax
  016a9	e8 00 00 00 00	 call	 _move16

; 414  :                     ib = i9;                     move16 (); 

  016ae	66 8b 45 88	 mov	 ax, WORD PTR _i9$[ebp]
  016b2	66 89 85 40 ff
	ff ff		 mov	 WORD PTR _ib$[ebp], ax
  016b9	e8 00 00 00 00	 call	 _move16
$LN6@search_10a:

; 415  :                  }
; 416  :               }

  016be	e9 96 fe ff ff	 jmp	 $LN8@search_10a
$LN7@search_10a:

; 417  :            }

  016c3	e9 9a fc ff ff	 jmp	 $LN11@search_10a
$LN16@search_10a:

; 418  :         }/* end  gsmefrFlag */
; 419  :         
; 420  :         /*----------------------------------------------------------------  *
; 421  :          * test and memorise if this combination is better than the last one.*
; 422  :          *----------------------------------------------------------------*/
; 423  :         
; 424  :         s = L_msu (L_mult (alpk, sq), psk, alp);

  016c8	0f b7 85 d4 fe
	ff ff		 movzx	 eax, WORD PTR _alp$[ebp]
  016cf	50		 push	 eax
  016d0	0f b7 8d 34 ff
	ff ff		 movzx	 ecx, WORD PTR _psk$[ebp]
  016d7	51		 push	 ecx
  016d8	0f b7 95 f8 fe
	ff ff		 movzx	 edx, WORD PTR _sq$[ebp]
  016df	52		 push	 edx
  016e0	0f b7 85 e0 fe
	ff ff		 movzx	 eax, WORD PTR _alpk$[ebp]
  016e7	50		 push	 eax
  016e8	e8 00 00 00 00	 call	 _L_mult
  016ed	83 c4 08	 add	 esp, 8
  016f0	50		 push	 eax
  016f1	e8 00 00 00 00	 call	 _L_msu
  016f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  016f9	89 85 64 fe ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 425  :         
; 426  :         test (); 

  016ff	e8 00 00 00 00	 call	 _test

; 427  :         if (s > 0)

  01704	83 bd 64 fe ff
	ff 00		 cmp	 DWORD PTR _s$[ebp], 0
  0170b	0f 8e 2b 01 00
	00		 jle	 $LN5@search_10a

; 428  :         {
; 429  :             psk = sq;                            move16 (); 

  01711	66 8b 85 f8 fe
	ff ff		 mov	 ax, WORD PTR _sq$[ebp]
  01718	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _psk$[ebp], ax
  0171f	e8 00 00 00 00	 call	 _move16

; 430  :             alpk = alp;                          move16 (); 

  01724	66 8b 85 d4 fe
	ff ff		 mov	 ax, WORD PTR _alp$[ebp]
  0172b	66 89 85 e0 fe
	ff ff		 mov	 WORD PTR _alpk$[ebp], ax
  01732	e8 00 00 00 00	 call	 _move16

; 431  :             codvec[0] = i0;                      move16 (); 

  01737	b8 02 00 00 00	 mov	 eax, 2
  0173c	6b c8 00	 imul	 ecx, eax, 0
  0173f	8b 55 24	 mov	 edx, DWORD PTR _codvec$[ebp]
  01742	66 8b 45 f4	 mov	 ax, WORD PTR _i0$[ebp]
  01746	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  0174a	e8 00 00 00 00	 call	 _move16

; 432  :             codvec[1] = i1;                      move16 (); 

  0174f	b8 02 00 00 00	 mov	 eax, 2
  01754	c1 e0 00	 shl	 eax, 0
  01757	8b 4d 24	 mov	 ecx, DWORD PTR _codvec$[ebp]
  0175a	66 8b 55 e8	 mov	 dx, WORD PTR _i1$[ebp]
  0175e	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx
  01762	e8 00 00 00 00	 call	 _move16

; 433  :             codvec[2] = i2;                      move16 (); 

  01767	b8 02 00 00 00	 mov	 eax, 2
  0176c	d1 e0		 shl	 eax, 1
  0176e	8b 4d 24	 mov	 ecx, DWORD PTR _codvec$[ebp]
  01771	66 8b 55 dc	 mov	 dx, WORD PTR _i2$[ebp]
  01775	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx
  01779	e8 00 00 00 00	 call	 _move16

; 434  :             codvec[3] = i3;                      move16 (); 

  0177e	b8 02 00 00 00	 mov	 eax, 2
  01783	6b c8 03	 imul	 ecx, eax, 3
  01786	8b 55 24	 mov	 edx, DWORD PTR _codvec$[ebp]
  01789	66 8b 45 d0	 mov	 ax, WORD PTR _i3$[ebp]
  0178d	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  01791	e8 00 00 00 00	 call	 _move16

; 435  :             codvec[4] = i4;                      move16 (); 

  01796	b8 02 00 00 00	 mov	 eax, 2
  0179b	c1 e0 02	 shl	 eax, 2
  0179e	8b 4d 24	 mov	 ecx, DWORD PTR _codvec$[ebp]
  017a1	66 8b 55 c4	 mov	 dx, WORD PTR _i4$[ebp]
  017a5	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx
  017a9	e8 00 00 00 00	 call	 _move16

; 436  :             codvec[5] = i5;                      move16 (); 

  017ae	b8 02 00 00 00	 mov	 eax, 2
  017b3	6b c8 05	 imul	 ecx, eax, 5
  017b6	8b 55 24	 mov	 edx, DWORD PTR _codvec$[ebp]
  017b9	66 8b 45 b8	 mov	 ax, WORD PTR _i5$[ebp]
  017bd	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  017c1	e8 00 00 00 00	 call	 _move16

; 437  :             codvec[6] = i6;                      move16 (); 

  017c6	b8 02 00 00 00	 mov	 eax, 2
  017cb	6b c8 06	 imul	 ecx, eax, 6
  017ce	8b 55 24	 mov	 edx, DWORD PTR _codvec$[ebp]
  017d1	66 8b 45 ac	 mov	 ax, WORD PTR _i6$[ebp]
  017d5	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  017d9	e8 00 00 00 00	 call	 _move16

; 438  :             codvec[7] = i7;                      move16 ();

  017de	b8 02 00 00 00	 mov	 eax, 2
  017e3	6b c8 07	 imul	 ecx, eax, 7
  017e6	8b 55 24	 mov	 edx, DWORD PTR _codvec$[ebp]
  017e9	66 8b 45 a0	 mov	 ax, WORD PTR _i7$[ebp]
  017ed	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  017f1	e8 00 00 00 00	 call	 _move16

; 439  :          
; 440  :             test();

  017f6	e8 00 00 00 00	 call	 _test

; 441  :             if (gsmefrFlag != 0)

  017fb	0f bf 85 34 fe
	ff ff		 movsx	 eax, WORD PTR _gsmefrFlag$[ebp]
  01802	85 c0		 test	 eax, eax
  01804	74 36		 je	 SHORT $LN5@search_10a

; 442  :             {
; 443  :                codvec[8] = ia;                   move16 (); 

  01806	b8 02 00 00 00	 mov	 eax, 2
  0180b	c1 e0 03	 shl	 eax, 3
  0180e	8b 4d 24	 mov	 ecx, DWORD PTR _codvec$[ebp]
  01811	66 8b 95 4c ff
	ff ff		 mov	 dx, WORD PTR _ia$[ebp]
  01818	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx
  0181c	e8 00 00 00 00	 call	 _move16

; 444  :                codvec[9] = ib;                   move16 (); 

  01821	b8 02 00 00 00	 mov	 eax, 2
  01826	6b c8 09	 imul	 ecx, eax, 9
  01829	8b 55 24	 mov	 edx, DWORD PTR _codvec$[ebp]
  0182c	66 8b 85 40 ff
	ff ff		 mov	 ax, WORD PTR _ib$[ebp]
  01833	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
  01837	e8 00 00 00 00	 call	 _move16
$LN5@search_10a:

; 445  :             }
; 446  :         }
; 447  :         /*----------------------------------------------------------------*
; 448  :          * Cyclic permutation of i1,i2,i3,i4,i5,i6,i7,(i8 and i9).          *
; 449  :          *----------------------------------------------------------------*/
; 450  :         
; 451  :         pos = ipos[1];                           move16 (); 

  0183c	b8 02 00 00 00	 mov	 eax, 2
  01841	c1 e0 00	 shl	 eax, 0
  01844	8b 4d 1c	 mov	 ecx, DWORD PTR _ipos$[ebp]
  01847	66 8b 14 01	 mov	 dx, WORD PTR [ecx+eax]
  0184b	66 89 95 58 ff
	ff ff		 mov	 WORD PTR _pos$[ebp], dx
  01852	e8 00 00 00 00	 call	 _move16

; 452  :         for (j = 1, k = 2; k < nbPulse; j++, k++)

  01857	b8 01 00 00 00	 mov	 eax, 1
  0185c	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _j$[ebp], ax
  01863	b9 02 00 00 00	 mov	 ecx, 2
  01868	66 89 8d 64 ff
	ff ff		 mov	 WORD PTR _k$[ebp], cx
  0186f	eb 24		 jmp	 SHORT $LN3@search_10a
$LN2@search_10a:
  01871	66 8b 85 70 ff
	ff ff		 mov	 ax, WORD PTR _j$[ebp]
  01878	66 83 c0 01	 add	 ax, 1
  0187c	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _j$[ebp], ax
  01883	66 8b 8d 64 ff
	ff ff		 mov	 cx, WORD PTR _k$[ebp]
  0188a	66 83 c1 01	 add	 cx, 1
  0188e	66 89 8d 64 ff
	ff ff		 mov	 WORD PTR _k$[ebp], cx
$LN3@search_10a:
  01895	0f bf 85 64 ff
	ff ff		 movsx	 eax, WORD PTR _k$[ebp]
  0189c	0f bf 4d 08	 movsx	 ecx, WORD PTR _nbPulse$[ebp]
  018a0	3b c1		 cmp	 eax, ecx
  018a2	7d 23		 jge	 SHORT $LN1@search_10a

; 453  :         {
; 454  :             ipos[j] = ipos[k];                   move16 (); 

  018a4	0f bf 85 64 ff
	ff ff		 movsx	 eax, WORD PTR _k$[ebp]
  018ab	0f bf 8d 70 ff
	ff ff		 movsx	 ecx, WORD PTR _j$[ebp]
  018b2	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  018b5	8b 75 1c	 mov	 esi, DWORD PTR _ipos$[ebp]
  018b8	66 8b 04 46	 mov	 ax, WORD PTR [esi+eax*2]
  018bc	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  018c0	e8 00 00 00 00	 call	 _move16

; 455  :         }

  018c5	eb aa		 jmp	 SHORT $LN2@search_10a
$LN1@search_10a:

; 456  :         ipos[sub(nbPulse,1)] = pos;              move16 (); 

  018c7	6a 01		 push	 1
  018c9	0f b7 45 08	 movzx	 eax, WORD PTR _nbPulse$[ebp]
  018cd	50		 push	 eax
  018ce	e8 00 00 00 00	 call	 _sub
  018d3	83 c4 08	 add	 esp, 8
  018d6	0f bf c8	 movsx	 ecx, ax
  018d9	8b 55 1c	 mov	 edx, DWORD PTR _ipos$[ebp]
  018dc	66 8b 85 58 ff
	ff ff		 mov	 ax, WORD PTR _pos$[ebp]
  018e3	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  018e7	e8 00 00 00 00	 call	 _move16

; 457  :    } /* end 1..nbTracks  loop*/

  018ec	e9 08 e8 ff ff	 jmp	 $LN48@search_10a
$LN55@search_10a:

; 458  : }

  018f1	52		 push	 edx
  018f2	8b cd		 mov	 ecx, ebp
  018f4	50		 push	 eax
  018f5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN59@search_10a
  018fb	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01900	58		 pop	 eax
  01901	5a		 pop	 edx
  01902	5f		 pop	 edi
  01903	5e		 pop	 esi
  01904	5b		 pop	 ebx
  01905	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01908	33 cd		 xor	 ecx, ebp
  0190a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0190f	81 c4 90 02 00
	00		 add	 esp, 656		; 00000290H
  01915	3b ec		 cmp	 ebp, esp
  01917	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0191c	8b e5		 mov	 esp, ebp
  0191e	5d		 pop	 ebp
  0191f	c3		 ret	 0
$LN59@search_10a:
  01920	01 00 00 00	 DD	 1
  01924	00 00 00 00	 DD	 $LN58@search_10a
$LN58@search_10a:
  01928	70 fe ff ff	 DD	 -400			; fffffe70H
  0192c	50 00 00 00	 DD	 80			; 00000050H
  01930	00 00 00 00	 DD	 $LN57@search_10a
$LN57@search_10a:
  01934	72		 DB	 114			; 00000072H
  01935	72		 DB	 114			; 00000072H
  01936	76		 DB	 118			; 00000076H
  01937	00		 DB	 0
_search_10and8i40 ENDP
_TEXT	ENDS
END
