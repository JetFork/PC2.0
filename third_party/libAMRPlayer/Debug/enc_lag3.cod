; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\enc_lag3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_enc_lag3_id
CONST	SEGMENT
_enc_lag3_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Enc_lag3
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\enc_lag3.c
;	COMDAT _Enc_lag3
_TEXT	SEGMENT
_tmp_lag$ = -56						; size = 2
_uplag$ = -44						; size = 2
_tmp_ind$ = -32						; size = 2
_i$ = -20						; size = 2
_index$ = -8						; size = 2
_T0$ = 8						; size = 2
_T0_frac$ = 12						; size = 2
_T0_prev$ = 16						; size = 2
_T0_min$ = 20						; size = 2
_T0_max$ = 24						; size = 2
_delta_flag$ = 28					; size = 2
_flag4$ = 32						; size = 2
_Enc_lag3 PROC						; COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 82   :    Word16 index, i, tmp_ind, uplag;
; 83   :    Word16 tmp_lag;
; 84   :    
; 85   :    test (); 

  0001e	e8 00 00 00 00	 call	 _test

; 86   :    if (delta_flag == 0)

  00023	0f bf 45 1c	 movsx	 eax, WORD PTR _delta_flag$[ebp]
  00027	85 c0		 test	 eax, eax
  00029	0f 85 80 00 00
	00		 jne	 $LN12@Enc_lag3

; 87   :    {  /* if 1st or 3rd subframe */
; 88   : 
; 89   :       /* encode pitch delay (with fraction) */
; 90   :       
; 91   :       test (); 

  0002f	e8 00 00 00 00	 call	 _test

; 92   :       if (sub (T0, 85) <= 0)

  00034	6a 55		 push	 85			; 00000055H
  00036	0f b7 45 08	 movzx	 eax, WORD PTR _T0$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _sub
  00040	83 c4 08	 add	 esp, 8
  00043	0f bf c8	 movsx	 ecx, ax
  00046	85 c9		 test	 ecx, ecx
  00048	7f 4d		 jg	 SHORT $LN11@Enc_lag3

; 93   :       {
; 94   :          /* index = T0*3 - 58 + T0_frac   */
; 95   :          i = add (add (T0, T0), T0);

  0004a	0f b7 45 08	 movzx	 eax, WORD PTR _T0$[ebp]
  0004e	50		 push	 eax
  0004f	0f b7 4d 08	 movzx	 ecx, WORD PTR _T0$[ebp]
  00053	51		 push	 ecx
  00054	0f b7 55 08	 movzx	 edx, WORD PTR _T0$[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 _add
  0005e	83 c4 08	 add	 esp, 8
  00061	0f b7 c0	 movzx	 eax, ax
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _add
  0006a	83 c4 08	 add	 esp, 8
  0006d	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 96   :          index = add (sub (i, 58), T0_frac);

  00071	0f b7 45 0c	 movzx	 eax, WORD PTR _T0_frac$[ebp]
  00075	50		 push	 eax
  00076	6a 3a		 push	 58			; 0000003aH
  00078	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$[ebp]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 _sub
  00082	83 c4 08	 add	 esp, 8
  00085	0f b7 d0	 movzx	 edx, ax
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _add
  0008e	83 c4 08	 add	 esp, 8
  00091	66 89 45 f8	 mov	 WORD PTR _index$[ebp], ax

; 97   :       }
; 98   :       else

  00095	eb 13		 jmp	 SHORT $LN10@Enc_lag3
$LN11@Enc_lag3:

; 99   :       {
; 100  :          index = add (T0, 112);

  00097	6a 70		 push	 112			; 00000070H
  00099	0f b7 45 08	 movzx	 eax, WORD PTR _T0$[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _add
  000a3	83 c4 08	 add	 esp, 8
  000a6	66 89 45 f8	 mov	 WORD PTR _index$[ebp], ax
$LN10@Enc_lag3:

; 101  :       }
; 102  :    }
; 103  :    else

  000aa	e9 55 02 00 00	 jmp	 $LN9@Enc_lag3
$LN12@Enc_lag3:

; 104  :    {   /* if second or fourth subframe */
; 105  :       test (); 

  000af	e8 00 00 00 00	 call	 _test

; 106  :       if (flag4 == 0) {

  000b4	0f bf 45 20	 movsx	 eax, WORD PTR _flag4$[ebp]
  000b8	85 c0		 test	 eax, eax
  000ba	75 66		 jne	 SHORT $LN8@Enc_lag3

; 107  :          
; 108  :          /* 'normal' encoding: either with 5 or 6 bit resolution */
; 109  : 		  
; 110  :          /* index = 3*(T0 - T0_min) + 2 + T0_frac */
; 111  :          i = sub (T0, T0_min);

  000bc	0f b7 45 14	 movzx	 eax, WORD PTR _T0_min$[ebp]
  000c0	50		 push	 eax
  000c1	0f b7 4d 08	 movzx	 ecx, WORD PTR _T0$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 _sub
  000cb	83 c4 08	 add	 esp, 8
  000ce	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 112  :          i = add (add (i, i), i);

  000d2	0f b7 45 ec	 movzx	 eax, WORD PTR _i$[ebp]
  000d6	50		 push	 eax
  000d7	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$[ebp]
  000db	51		 push	 ecx
  000dc	0f b7 55 ec	 movzx	 edx, WORD PTR _i$[ebp]
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 _add
  000e6	83 c4 08	 add	 esp, 8
  000e9	0f b7 c0	 movzx	 eax, ax
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 _add
  000f2	83 c4 08	 add	 esp, 8
  000f5	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 113  :          index = add (add (i, 2), T0_frac);

  000f9	0f b7 45 0c	 movzx	 eax, WORD PTR _T0_frac$[ebp]
  000fd	50		 push	 eax
  000fe	6a 02		 push	 2
  00100	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$[ebp]
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 _add
  0010a	83 c4 08	 add	 esp, 8
  0010d	0f b7 d0	 movzx	 edx, ax
  00110	52		 push	 edx
  00111	e8 00 00 00 00	 call	 _add
  00116	83 c4 08	 add	 esp, 8
  00119	66 89 45 f8	 mov	 WORD PTR _index$[ebp], ax

; 114  :       }
; 115  :       else {

  0011d	e9 e2 01 00 00	 jmp	 $LN9@Enc_lag3
$LN8@Enc_lag3:

; 116  :          
; 117  :          /* encoding with 4 bit resolution */
; 118  :          
; 119  :          tmp_lag = T0_prev;                                   move16 ();

  00122	66 8b 45 10	 mov	 ax, WORD PTR _T0_prev$[ebp]
  00126	66 89 45 c8	 mov	 WORD PTR _tmp_lag$[ebp], ax
  0012a	e8 00 00 00 00	 call	 _move16

; 120  : 
; 121  :          test ();

  0012f	e8 00 00 00 00	 call	 _test

; 122  :          if ( sub( sub(tmp_lag, T0_min), 5) > 0)

  00134	6a 05		 push	 5
  00136	0f b7 45 14	 movzx	 eax, WORD PTR _T0_min$[ebp]
  0013a	50		 push	 eax
  0013b	0f b7 4d c8	 movzx	 ecx, WORD PTR _tmp_lag$[ebp]
  0013f	51		 push	 ecx
  00140	e8 00 00 00 00	 call	 _sub
  00145	83 c4 08	 add	 esp, 8
  00148	0f b7 d0	 movzx	 edx, ax
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 _sub
  00151	83 c4 08	 add	 esp, 8
  00154	98		 cwde
  00155	85 c0		 test	 eax, eax
  00157	7e 13		 jle	 SHORT $LN6@Enc_lag3

; 123  :             tmp_lag = add (T0_min, 5);

  00159	6a 05		 push	 5
  0015b	0f b7 45 14	 movzx	 eax, WORD PTR _T0_min$[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 _add
  00165	83 c4 08	 add	 esp, 8
  00168	66 89 45 c8	 mov	 WORD PTR _tmp_lag$[ebp], ax
$LN6@Enc_lag3:

; 124  :          test ();

  0016c	e8 00 00 00 00	 call	 _test

; 125  :          if ( sub( sub(T0_max, tmp_lag), 4) > 0)

  00171	6a 04		 push	 4
  00173	0f b7 45 c8	 movzx	 eax, WORD PTR _tmp_lag$[ebp]
  00177	50		 push	 eax
  00178	0f b7 4d 18	 movzx	 ecx, WORD PTR _T0_max$[ebp]
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 _sub
  00182	83 c4 08	 add	 esp, 8
  00185	0f b7 d0	 movzx	 edx, ax
  00188	52		 push	 edx
  00189	e8 00 00 00 00	 call	 _sub
  0018e	83 c4 08	 add	 esp, 8
  00191	98		 cwde
  00192	85 c0		 test	 eax, eax
  00194	7e 13		 jle	 SHORT $LN5@Enc_lag3

; 126  :             tmp_lag = sub (T0_max, 4);

  00196	6a 04		 push	 4
  00198	0f b7 45 18	 movzx	 eax, WORD PTR _T0_max$[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _sub
  001a2	83 c4 08	 add	 esp, 8
  001a5	66 89 45 c8	 mov	 WORD PTR _tmp_lag$[ebp], ax
$LN5@Enc_lag3:

; 127  :          
; 128  :          uplag = add (add (add (T0, T0), T0), T0_frac);

  001a9	0f b7 45 0c	 movzx	 eax, WORD PTR _T0_frac$[ebp]
  001ad	50		 push	 eax
  001ae	0f b7 4d 08	 movzx	 ecx, WORD PTR _T0$[ebp]
  001b2	51		 push	 ecx
  001b3	0f b7 55 08	 movzx	 edx, WORD PTR _T0$[ebp]
  001b7	52		 push	 edx
  001b8	0f b7 45 08	 movzx	 eax, WORD PTR _T0$[ebp]
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 _add
  001c2	83 c4 08	 add	 esp, 8
  001c5	0f b7 c8	 movzx	 ecx, ax
  001c8	51		 push	 ecx
  001c9	e8 00 00 00 00	 call	 _add
  001ce	83 c4 08	 add	 esp, 8
  001d1	0f b7 d0	 movzx	 edx, ax
  001d4	52		 push	 edx
  001d5	e8 00 00 00 00	 call	 _add
  001da	83 c4 08	 add	 esp, 8
  001dd	66 89 45 d4	 mov	 WORD PTR _uplag$[ebp], ax

; 129  :          
; 130  :          i = sub (tmp_lag, 2);

  001e1	6a 02		 push	 2
  001e3	0f b7 45 c8	 movzx	 eax, WORD PTR _tmp_lag$[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 _sub
  001ed	83 c4 08	 add	 esp, 8
  001f0	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 131  :          tmp_ind = add (add (i, i), i);

  001f4	0f b7 45 ec	 movzx	 eax, WORD PTR _i$[ebp]
  001f8	50		 push	 eax
  001f9	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$[ebp]
  001fd	51		 push	 ecx
  001fe	0f b7 55 ec	 movzx	 edx, WORD PTR _i$[ebp]
  00202	52		 push	 edx
  00203	e8 00 00 00 00	 call	 _add
  00208	83 c4 08	 add	 esp, 8
  0020b	0f b7 c0	 movzx	 eax, ax
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 _add
  00214	83 c4 08	 add	 esp, 8
  00217	66 89 45 e0	 mov	 WORD PTR _tmp_ind$[ebp], ax

; 132  :          
; 133  :          test ();

  0021b	e8 00 00 00 00	 call	 _test

; 134  :          if (sub (tmp_ind, uplag) >= 0) { 

  00220	0f b7 45 d4	 movzx	 eax, WORD PTR _uplag$[ebp]
  00224	50		 push	 eax
  00225	0f b7 4d e0	 movzx	 ecx, WORD PTR _tmp_ind$[ebp]
  00229	51		 push	 ecx
  0022a	e8 00 00 00 00	 call	 _sub
  0022f	83 c4 08	 add	 esp, 8
  00232	0f bf d0	 movsx	 edx, ax
  00235	85 d2		 test	 edx, edx
  00237	7c 29		 jl	 SHORT $LN4@Enc_lag3

; 135  :             index = add (sub (T0, tmp_lag), 5);

  00239	6a 05		 push	 5
  0023b	0f b7 45 c8	 movzx	 eax, WORD PTR _tmp_lag$[ebp]
  0023f	50		 push	 eax
  00240	0f b7 4d 08	 movzx	 ecx, WORD PTR _T0$[ebp]
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 _sub
  0024a	83 c4 08	 add	 esp, 8
  0024d	0f b7 d0	 movzx	 edx, ax
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 _add
  00256	83 c4 08	 add	 esp, 8
  00259	66 89 45 f8	 mov	 WORD PTR _index$[ebp], ax

; 136  :          } 
; 137  :          else {

  0025d	e9 a2 00 00 00	 jmp	 $LN9@Enc_lag3
$LN4@Enc_lag3:

; 138  :             
; 139  :             i = add (tmp_lag, 1);

  00262	6a 01		 push	 1
  00264	0f b7 45 c8	 movzx	 eax, WORD PTR _tmp_lag$[ebp]
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 _add
  0026e	83 c4 08	 add	 esp, 8
  00271	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 140  :             i = add (add (i, i), i);

  00275	0f b7 45 ec	 movzx	 eax, WORD PTR _i$[ebp]
  00279	50		 push	 eax
  0027a	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$[ebp]
  0027e	51		 push	 ecx
  0027f	0f b7 55 ec	 movzx	 edx, WORD PTR _i$[ebp]
  00283	52		 push	 edx
  00284	e8 00 00 00 00	 call	 _add
  00289	83 c4 08	 add	 esp, 8
  0028c	0f b7 c0	 movzx	 eax, ax
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 _add
  00295	83 c4 08	 add	 esp, 8
  00298	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 141  :             
; 142  :             test ();

  0029c	e8 00 00 00 00	 call	 _test

; 143  :             if (sub (i, uplag) > 0) {

  002a1	0f b7 45 d4	 movzx	 eax, WORD PTR _uplag$[ebp]
  002a5	50		 push	 eax
  002a6	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$[ebp]
  002aa	51		 push	 ecx
  002ab	e8 00 00 00 00	 call	 _sub
  002b0	83 c4 08	 add	 esp, 8
  002b3	0f bf d0	 movsx	 edx, ax
  002b6	85 d2		 test	 edx, edx
  002b8	7e 26		 jle	 SHORT $LN2@Enc_lag3

; 144  :                
; 145  :                 index = add ( sub (uplag, tmp_ind), 3);                

  002ba	6a 03		 push	 3
  002bc	0f b7 45 e0	 movzx	 eax, WORD PTR _tmp_ind$[ebp]
  002c0	50		 push	 eax
  002c1	0f b7 4d d4	 movzx	 ecx, WORD PTR _uplag$[ebp]
  002c5	51		 push	 ecx
  002c6	e8 00 00 00 00	 call	 _sub
  002cb	83 c4 08	 add	 esp, 8
  002ce	0f b7 d0	 movzx	 edx, ax
  002d1	52		 push	 edx
  002d2	e8 00 00 00 00	 call	 _add
  002d7	83 c4 08	 add	 esp, 8
  002da	66 89 45 f8	 mov	 WORD PTR _index$[ebp], ax

; 146  :             }
; 147  :             else {

  002de	eb 24		 jmp	 SHORT $LN9@Enc_lag3
$LN2@Enc_lag3:

; 148  :                
; 149  :                index = add (sub (T0, tmp_lag), 11);

  002e0	6a 0b		 push	 11			; 0000000bH
  002e2	0f b7 45 c8	 movzx	 eax, WORD PTR _tmp_lag$[ebp]
  002e6	50		 push	 eax
  002e7	0f b7 4d 08	 movzx	 ecx, WORD PTR _T0$[ebp]
  002eb	51		 push	 ecx
  002ec	e8 00 00 00 00	 call	 _sub
  002f1	83 c4 08	 add	 esp, 8
  002f4	0f b7 d0	 movzx	 edx, ax
  002f7	52		 push	 edx
  002f8	e8 00 00 00 00	 call	 _add
  002fd	83 c4 08	 add	 esp, 8
  00300	66 89 45 f8	 mov	 WORD PTR _index$[ebp], ax
$LN9@Enc_lag3:

; 150  :             }
; 151  :          }
; 152  :          
; 153  :       } /* end if (encoding with 4 bit resolution) */
; 154  :    }   /* end if (second of fourth subframe) */
; 155  :    
; 156  :    return index;

  00304	66 8b 45 f8	 mov	 ax, WORD PTR _index$[ebp]

; 157  : }

  00308	5f		 pop	 edi
  00309	5e		 pop	 esi
  0030a	5b		 pop	 ebx
  0030b	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00311	3b ec		 cmp	 ebp, esp
  00313	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00318	8b e5		 mov	 esp, ebp
  0031a	5d		 pop	 ebp
  0031b	c3		 ret	 0
_Enc_lag3 ENDP
_TEXT	ENDS
END
