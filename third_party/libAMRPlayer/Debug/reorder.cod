; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\reorder.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_reorder_id
CONST	SEGMENT
_reorder_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Reorder_lsf
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\reorder.c
;	COMDAT _Reorder_lsf
_TEXT	SEGMENT
_lsf_min$ = -20						; size = 2
_i$ = -8						; size = 2
_lsf$ = 8						; size = 4
_min_dist$ = 12						; size = 2
_n$ = 16						; size = 2
_Reorder_lsf PROC					; COMDAT

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 61   :     Word16 i;
; 62   :     Word16 lsf_min;
; 63   : 
; 64   :     lsf_min = min_dist;         move16 (); 

  0001e	66 8b 45 0c	 mov	 ax, WORD PTR _min_dist$[ebp]
  00022	66 89 45 ec	 mov	 WORD PTR _lsf_min$[ebp], ax
  00026	e8 00 00 00 00	 call	 _move16

; 65   :     for (i = 0; i < n; i++)

  0002b	33 c0		 xor	 eax, eax
  0002d	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00031	eb 0c		 jmp	 SHORT $LN4@Reorder_ls
$LN3@Reorder_ls:
  00033	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00037	66 83 c0 01	 add	 ax, 1
  0003b	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN4@Reorder_ls:
  0003f	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00043	0f bf 4d 10	 movsx	 ecx, WORD PTR _n$[ebp]
  00047	3b c1		 cmp	 eax, ecx
  00049	7d 58		 jge	 SHORT $LN5@Reorder_ls

; 66   :     {
; 67   :         test (); 

  0004b	e8 00 00 00 00	 call	 _test

; 68   :         if (sub (lsf[i], lsf_min) < 0)

  00050	0f b7 45 ec	 movzx	 eax, WORD PTR _lsf_min$[ebp]
  00054	50		 push	 eax
  00055	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00059	8b 55 08	 mov	 edx, DWORD PTR _lsf$[ebp]
  0005c	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _sub
  00066	83 c4 08	 add	 esp, 8
  00069	0f bf c8	 movsx	 ecx, ax
  0006c	85 c9		 test	 ecx, ecx
  0006e	7d 14		 jge	 SHORT $LN1@Reorder_ls

; 69   :         {
; 70   :             lsf[i] = lsf_min;   move16 (); 

  00070	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _lsf$[ebp]
  00077	66 8b 55 ec	 mov	 dx, WORD PTR _lsf_min$[ebp]
  0007b	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0007f	e8 00 00 00 00	 call	 _move16
$LN1@Reorder_ls:

; 71   :         }
; 72   :         lsf_min = add (lsf[i], min_dist);

  00084	0f b7 45 0c	 movzx	 eax, WORD PTR _min_dist$[ebp]
  00088	50		 push	 eax
  00089	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  0008d	8b 55 08	 mov	 edx, DWORD PTR _lsf$[ebp]
  00090	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _add
  0009a	83 c4 08	 add	 esp, 8
  0009d	66 89 45 ec	 mov	 WORD PTR _lsf_min$[ebp], ax

; 73   :     }

  000a1	eb 90		 jmp	 SHORT $LN3@Reorder_ls
$LN5@Reorder_ls:

; 74   : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_Reorder_lsf ENDP
_TEXT	ENDS
END
