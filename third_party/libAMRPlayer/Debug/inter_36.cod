; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\inter_36.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_inter_36_id
CONST	SEGMENT
_inter_36_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_inter_6 DW	0734fH
	DW	06e9cH
	DW	0614aH
	DW	04d7eH
	DW	03648H
	DW	01f09H
	DW	0ac3H
	DW	0fb99H
	DW	0f27dH
	DW	0ef30H
	DW	0f07fH
	DW	0f4adH
	DW	0f9e7H
	DW	0feb0H
	DW	0216H
	DW	03caH
	DW	03ffH
	DW	0337H
	DW	0204H
	DW	0dcH
	DW	00H
	DW	0ff7dH
	DW	0ff3eH
	DW	0ff29H
	DW	00H
CONST	ENDS
PUBLIC	_Interpol_3or6
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\inter_36.c
;	COMDAT _Interpol_3or6
_TEXT	SEGMENT
_s$ = -80						; size = 4
_c2$ = -68						; size = 4
_c1$ = -56						; size = 4
_x2$ = -44						; size = 4
_x1$ = -32						; size = 4
_k$ = -20						; size = 2
_i$ = -8						; size = 2
_x$ = 8							; size = 4
_frac$ = 12						; size = 2
_flag3$ = 16						; size = 2
_Interpol_3or6 PROC					; COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00012	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 62   :     Word16 i, k;
; 63   :     Word16 *x1, *x2;
; 64   :     const Word16 *c1, *c2;
; 65   :     Word32 s;
; 66   : 
; 67   :     test();

  0001e	e8 00 00 00 00	 call	 _test

; 68   :     if (flag3 != 0)

  00023	0f bf 45 10	 movsx	 eax, WORD PTR _flag3$[ebp]
  00027	85 c0		 test	 eax, eax
  00029	74 13		 je	 SHORT $LN5@Interpol_3

; 69   :     {
; 70   :       frac = shl (frac, 1);   /* inter_3[k] = inter_6[2*k] -> k' = 2*k */

  0002b	6a 01		 push	 1
  0002d	0f b7 45 0c	 movzx	 eax, WORD PTR _frac$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _shl
  00037	83 c4 08	 add	 esp, 8
  0003a	66 89 45 0c	 mov	 WORD PTR _frac$[ebp], ax
$LN5@Interpol_3:

; 71   :     }
; 72   :     
; 73   :     test (); 

  0003e	e8 00 00 00 00	 call	 _test

; 74   :     if (frac < 0)

  00043	0f bf 45 0c	 movsx	 eax, WORD PTR _frac$[ebp]
  00047	85 c0		 test	 eax, eax
  00049	7d 1c		 jge	 SHORT $LN4@Interpol_3

; 75   :     {
; 76   :         frac = add (frac, UP_SAMP_MAX);

  0004b	6a 06		 push	 6
  0004d	0f b7 45 0c	 movzx	 eax, WORD PTR _frac$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _add
  00057	83 c4 08	 add	 esp, 8
  0005a	66 89 45 0c	 mov	 WORD PTR _frac$[ebp], ax

; 77   :         x--;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00061	83 e8 02	 sub	 eax, 2
  00064	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
$LN4@Interpol_3:

; 78   :     }
; 79   :     
; 80   :     x1 = &x[0];                         move16 (); 

  00067	b8 02 00 00 00	 mov	 eax, 2
  0006c	6b c8 00	 imul	 ecx, eax, 0
  0006f	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  00072	89 4d e0	 mov	 DWORD PTR _x1$[ebp], ecx
  00075	e8 00 00 00 00	 call	 _move16

; 81   :     x2 = &x[1];                         move16 (); 

  0007a	b8 02 00 00 00	 mov	 eax, 2
  0007f	c1 e0 00	 shl	 eax, 0
  00082	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00085	89 45 d4	 mov	 DWORD PTR _x2$[ebp], eax
  00088	e8 00 00 00 00	 call	 _move16

; 82   :     c1 = &inter_6[frac];                move16 (); 

  0008d	0f bf 45 0c	 movsx	 eax, WORD PTR _frac$[ebp]
  00091	8d 0c 45 00 00
	00 00		 lea	 ecx, DWORD PTR _inter_6[eax*2]
  00098	89 4d c8	 mov	 DWORD PTR _c1$[ebp], ecx
  0009b	e8 00 00 00 00	 call	 _move16

; 83   :     c2 = &inter_6[sub (UP_SAMP_MAX, frac)]; move16 (); 

  000a0	0f b7 45 0c	 movzx	 eax, WORD PTR _frac$[ebp]
  000a4	50		 push	 eax
  000a5	6a 06		 push	 6
  000a7	e8 00 00 00 00	 call	 _sub
  000ac	83 c4 08	 add	 esp, 8
  000af	0f bf c8	 movsx	 ecx, ax
  000b2	8d 14 4d 00 00
	00 00		 lea	 edx, DWORD PTR _inter_6[ecx*2]
  000b9	89 55 bc	 mov	 DWORD PTR _c2$[ebp], edx
  000bc	e8 00 00 00 00	 call	 _move16

; 84   : 
; 85   :     s = 0;                              move32 (); 

  000c1	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], 0
  000c8	e8 00 00 00 00	 call	 _move32

; 86   :     for (i = 0, k = 0; i < L_INTER_SRCH; i++, k += UP_SAMP_MAX)

  000cd	33 c0		 xor	 eax, eax
  000cf	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  000d3	33 c9		 xor	 ecx, ecx
  000d5	66 89 4d ec	 mov	 WORD PTR _k$[ebp], cx
  000d9	eb 17		 jmp	 SHORT $LN3@Interpol_3
$LN2@Interpol_3:
  000db	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  000df	66 83 c0 01	 add	 ax, 1
  000e3	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  000e7	0f bf 4d ec	 movsx	 ecx, WORD PTR _k$[ebp]
  000eb	83 c1 06	 add	 ecx, 6
  000ee	66 89 4d ec	 mov	 WORD PTR _k$[ebp], cx
$LN3@Interpol_3:
  000f2	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000f6	83 f8 04	 cmp	 eax, 4
  000f9	7d 52		 jge	 SHORT $LN1@Interpol_3

; 87   :     {
; 88   :         s = L_mac (s, x1[-i], c1[k]);

  000fb	0f bf 45 ec	 movsx	 eax, WORD PTR _k$[ebp]
  000ff	8b 4d c8	 mov	 ecx, DWORD PTR _c1$[ebp]
  00102	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00106	52		 push	 edx
  00107	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0010b	f7 d8		 neg	 eax
  0010d	8b 4d e0	 mov	 ecx, DWORD PTR _x1$[ebp]
  00110	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00114	52		 push	 edx
  00115	8b 45 b0	 mov	 eax, DWORD PTR _s$[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 _L_mac
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	89 45 b0	 mov	 DWORD PTR _s$[ebp], eax

; 89   :         s = L_mac (s, x2[i], c2[k]);

  00124	0f bf 45 ec	 movsx	 eax, WORD PTR _k$[ebp]
  00128	8b 4d bc	 mov	 ecx, DWORD PTR _c2$[ebp]
  0012b	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0012f	52		 push	 edx
  00130	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00134	8b 4d d4	 mov	 ecx, DWORD PTR _x2$[ebp]
  00137	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0013b	52		 push	 edx
  0013c	8b 45 b0	 mov	 eax, DWORD PTR _s$[ebp]
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 _L_mac
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH
  00148	89 45 b0	 mov	 DWORD PTR _s$[ebp], eax

; 90   :     }

  0014b	eb 8e		 jmp	 SHORT $LN2@Interpol_3
$LN1@Interpol_3:

; 91   : 
; 92   :     return round (s);

  0014d	8b 45 b0	 mov	 eax, DWORD PTR _s$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _round
  00156	83 c4 04	 add	 esp, 4

; 93   : }

  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  00162	3b ec		 cmp	 ebp, esp
  00164	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c3		 ret	 0
_Interpol_3or6 ENDP
_TEXT	ENDS
END
