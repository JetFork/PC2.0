; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\pre_big.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_pre_big_id
CONST	SEGMENT
_pre_big_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_pre_big
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_Syn_filt:PROC
EXTRN	_Weight_Ai:PROC
EXTRN	_Residu:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pre_big.c
;	COMDAT _pre_big
_TEXT	SEGMENT
_i$ = -100						; size = 2
_aOffset$ = -88						; size = 2
_g1$ = -76						; size = 4
_Ap2$ = -64						; size = 22
_Ap1$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_gamma1$ = 12						; size = 4
_gamma1_12k2$ = 16					; size = 4
_gamma2$ = 20						; size = 4
_A_t$ = 24						; size = 4
_frameOffset$ = 28					; size = 2
_speech$ = 32						; size = 4
_mem_w$ = 36						; size = 4
_wsp$ = 40						; size = 4
_pre_big PROC						; COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00012	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 58   :    Word16 Ap1[MP1];            /* A(z) with spectral expansion         */
; 59   :    Word16 Ap2[MP1];            /* A(z) with spectral expansion         */
; 60   :    const Word16 *g1;           /* Pointer to correct gammma1 vector    */
; 61   :    Word16 aOffset;
; 62   :    Word16 i;
; 63   :    
; 64   :    test ();

  00028	e8 00 00 00 00	 call	 _test

; 65   :    if (sub (mode, MR795) <= 0 )

  0002d	6a 05		 push	 5
  0002f	0f b7 45 08	 movzx	 eax, WORD PTR _mode$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _sub
  00039	83 c4 08	 add	 esp, 8
  0003c	0f bf c8	 movsx	 ecx, ax
  0003f	85 c9		 test	 ecx, ecx
  00041	7f 0d		 jg	 SHORT $LN7@pre_big

; 66   :    {
; 67   :        g1 = gamma1;                          move16 ();

  00043	8b 45 0c	 mov	 eax, DWORD PTR _gamma1$[ebp]
  00046	89 45 b4	 mov	 DWORD PTR _g1$[ebp], eax
  00049	e8 00 00 00 00	 call	 _move16

; 68   :    }
; 69   :    else

  0004e	eb 0b		 jmp	 SHORT $LN6@pre_big
$LN7@pre_big:

; 70   :    {
; 71   :        g1 = gamma1_12k2;                     move16 ();

  00050	8b 45 10	 mov	 eax, DWORD PTR _gamma1_12k2$[ebp]
  00053	89 45 b4	 mov	 DWORD PTR _g1$[ebp], eax
  00056	e8 00 00 00 00	 call	 _move16
$LN6@pre_big:

; 72   :    }
; 73   : 
; 74   :    test ();

  0005b	e8 00 00 00 00	 call	 _test

; 75   :    if (frameOffset > 0) {

  00060	0f bf 45 1c	 movsx	 eax, WORD PTR _frameOffset$[ebp]
  00064	85 c0		 test	 eax, eax
  00066	7e 10		 jle	 SHORT $LN5@pre_big

; 76   :       aOffset = 2*MP1;                       move16 ();

  00068	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0006d	66 89 45 a8	 mov	 WORD PTR _aOffset$[ebp], ax
  00071	e8 00 00 00 00	 call	 _move16

; 77   :    }
; 78   :    else {

  00076	eb 0b		 jmp	 SHORT $LN4@pre_big
$LN5@pre_big:

; 79   :       aOffset = 0;                           move16 ();

  00078	33 c0		 xor	 eax, eax
  0007a	66 89 45 a8	 mov	 WORD PTR _aOffset$[ebp], ax
  0007e	e8 00 00 00 00	 call	 _move16
$LN4@pre_big:

; 80   :    }
; 81   : 
; 82   :    /* process two subframes (which form the "big" subframe) */
; 83   :    for (i = 0; i < 2; i++)

  00083	33 c0		 xor	 eax, eax
  00085	66 89 45 9c	 mov	 WORD PTR _i$[ebp], ax
  00089	eb 0c		 jmp	 SHORT $LN3@pre_big
$LN2@pre_big:
  0008b	66 8b 45 9c	 mov	 ax, WORD PTR _i$[ebp]
  0008f	66 83 c0 01	 add	 ax, 1
  00093	66 89 45 9c	 mov	 WORD PTR _i$[ebp], ax
$LN3@pre_big:
  00097	0f bf 45 9c	 movsx	 eax, WORD PTR _i$[ebp]
  0009b	83 f8 02	 cmp	 eax, 2
  0009e	0f 8d af 00 00
	00		 jge	 $LN1@pre_big

; 84   :    {
; 85   :        Weight_Ai(&A_t[aOffset], g1, Ap1);

  000a4	8d 45 e0	 lea	 eax, DWORD PTR _Ap1$[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d b4	 mov	 ecx, DWORD PTR _g1$[ebp]
  000ab	51		 push	 ecx
  000ac	0f bf 55 a8	 movsx	 edx, WORD PTR _aOffset$[ebp]
  000b0	8b 45 18	 mov	 eax, DWORD PTR _A_t$[ebp]
  000b3	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 _Weight_Ai
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 86   :        Weight_Ai(&A_t[aOffset], gamma2, Ap2);

  000bf	8d 45 c0	 lea	 eax, DWORD PTR _Ap2$[ebp]
  000c2	50		 push	 eax
  000c3	8b 4d 14	 mov	 ecx, DWORD PTR _gamma2$[ebp]
  000c6	51		 push	 ecx
  000c7	0f bf 55 a8	 movsx	 edx, WORD PTR _aOffset$[ebp]
  000cb	8b 45 18	 mov	 eax, DWORD PTR _A_t$[ebp]
  000ce	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 _Weight_Ai
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 87   :        Residu(Ap1, &speech[frameOffset], &wsp[frameOffset], L_SUBFR);

  000da	6a 28		 push	 40			; 00000028H
  000dc	0f bf 45 1c	 movsx	 eax, WORD PTR _frameOffset$[ebp]
  000e0	8b 4d 28	 mov	 ecx, DWORD PTR _wsp$[ebp]
  000e3	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000e6	52		 push	 edx
  000e7	0f bf 45 1c	 movsx	 eax, WORD PTR _frameOffset$[ebp]
  000eb	8b 4d 20	 mov	 ecx, DWORD PTR _speech$[ebp]
  000ee	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000f1	52		 push	 edx
  000f2	8d 45 e0	 lea	 eax, DWORD PTR _Ap1$[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _Residu
  000fb	83 c4 10	 add	 esp, 16			; 00000010H

; 88   :        
; 89   :        Syn_filt(Ap2, &wsp[frameOffset], &wsp[frameOffset], L_SUBFR, mem_w, 1);

  000fe	6a 01		 push	 1
  00100	8b 45 24	 mov	 eax, DWORD PTR _mem_w$[ebp]
  00103	50		 push	 eax
  00104	6a 28		 push	 40			; 00000028H
  00106	0f bf 4d 1c	 movsx	 ecx, WORD PTR _frameOffset$[ebp]
  0010a	8b 55 28	 mov	 edx, DWORD PTR _wsp$[ebp]
  0010d	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00110	50		 push	 eax
  00111	0f bf 4d 1c	 movsx	 ecx, WORD PTR _frameOffset$[ebp]
  00115	8b 55 28	 mov	 edx, DWORD PTR _wsp$[ebp]
  00118	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0011b	50		 push	 eax
  0011c	8d 4d c0	 lea	 ecx, DWORD PTR _Ap2$[ebp]
  0011f	51		 push	 ecx
  00120	e8 00 00 00 00	 call	 _Syn_filt
  00125	83 c4 18	 add	 esp, 24			; 00000018H

; 90   :        aOffset = add (aOffset, MP1);

  00128	6a 0b		 push	 11			; 0000000bH
  0012a	0f b7 45 a8	 movzx	 eax, WORD PTR _aOffset$[ebp]
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 _add
  00134	83 c4 08	 add	 esp, 8
  00137	66 89 45 a8	 mov	 WORD PTR _aOffset$[ebp], ax

; 91   :        frameOffset = add (frameOffset, L_SUBFR);

  0013b	6a 28		 push	 40			; 00000028H
  0013d	0f b7 45 1c	 movzx	 eax, WORD PTR _frameOffset$[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _add
  00147	83 c4 08	 add	 esp, 8
  0014a	66 89 45 1c	 mov	 WORD PTR _frameOffset$[ebp], ax

; 92   :    }   

  0014e	e9 38 ff ff ff	 jmp	 $LN2@pre_big
$LN1@pre_big:

; 93   : 
; 94   :    return 0;

  00153	33 c0		 xor	 eax, eax

; 95   : }

  00155	52		 push	 edx
  00156	8b cd		 mov	 ecx, ebp
  00158	50		 push	 eax
  00159	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@pre_big
  0015f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00164	58		 pop	 eax
  00165	5a		 pop	 edx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016c	33 cd		 xor	 ecx, ebp
  0016e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00173	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  00179	3b ec		 cmp	 ebp, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
$LN13@pre_big:
  00184	02 00 00 00	 DD	 2
  00188	00 00 00 00	 DD	 $LN12@pre_big
$LN12@pre_big:
  0018c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00190	16 00 00 00	 DD	 22			; 00000016H
  00194	00 00 00 00	 DD	 $LN10@pre_big
  00198	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0019c	16 00 00 00	 DD	 22			; 00000016H
  001a0	00 00 00 00	 DD	 $LN11@pre_big
$LN11@pre_big:
  001a4	41		 DB	 65			; 00000041H
  001a5	70		 DB	 112			; 00000070H
  001a6	32		 DB	 50			; 00000032H
  001a7	00		 DB	 0
$LN10@pre_big:
  001a8	41		 DB	 65			; 00000041H
  001a9	70		 DB	 112			; 00000070H
  001aa	31		 DB	 49			; 00000031H
  001ab	00		 DB	 0
_pre_big ENDP
_TEXT	ENDS
END
