; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\q_plsf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_q_plsf_id
CONST	SEGMENT
_q_plsf_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Q_plsf_init
PUBLIC	_Q_plsf_reset
PUBLIC	_Q_plsf_exit
PUBLIC	??_C@_0CA@PHCGEEMG@Q_plsf_init?3?5invalid?5parameter?6?$AA@ ; `string'
PUBLIC	??_C@_0CN@NCADNPAP@Q_plsf_init?3?5can?5not?5malloc?5stat@ ; `string'
PUBLIC	??_C@_0CB@OMFOHAKK@Q_plsf_reset?3?5invalid?5parameter?6@ ; `string'
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CB@OMFOHAKK@Q_plsf_reset?3?5invalid?5parameter?6@
CONST	SEGMENT
??_C@_0CB@OMFOHAKK@Q_plsf_reset?3?5invalid?5parameter?6@ DB 'Q_plsf_reset'
	DB	': invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NCADNPAP@Q_plsf_init?3?5can?5not?5malloc?5stat@
CONST	SEGMENT
??_C@_0CN@NCADNPAP@Q_plsf_init?3?5can?5not?5malloc?5stat@ DB 'Q_plsf_init'
	DB	': can not malloc state structure', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PHCGEEMG@Q_plsf_init?3?5invalid?5parameter?6?$AA@
CONST	SEGMENT
??_C@_0CA@PHCGEEMG@Q_plsf_init?3?5invalid?5parameter?6?$AA@ DB 'Q_plsf_in'
	DB	'it: invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\q_plsf.c
;	COMDAT _Q_plsf_exit
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Q_plsf_exit PROC					; COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 105  :   if (state == NULL || *state == NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	74 08		 je	 SHORT $LN1@Q_plsf_exi
  00024	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 02		 jne	 SHORT $LN2@Q_plsf_exi
$LN1@Q_plsf_exi:

; 106  :       return;

  0002c	eb 21		 jmp	 SHORT $LN3@Q_plsf_exi
$LN2@Q_plsf_exi:

; 107  : 
; 108  :   /* deallocate memory */
; 109  :   free(*state);

  0002e	8b f4		 mov	 esi, esp
  00030	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0003c	83 c4 04	 add	 esp, 4
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 110  :   *state = NULL;

  00046	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@Q_plsf_exi:

; 111  :   
; 112  :   return;
; 113  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_Q_plsf_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\q_plsf.c
;	COMDAT _Q_plsf_reset
_TEXT	SEGMENT
_i$ = -8						; size = 2
_state$ = 8						; size = 4
_Q_plsf_reset PROC					; COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 82   :   Word16 i;
; 83   :   
; 84   :   if (state == (Q_plsfState *) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 35		 jne	 SHORT $LN4@Q_plsf_res

; 85   :       fprintf(stderr, "Q_plsf_reset: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OMFOHAKK@Q_plsf_reset?3?5invalid?5parameter?6@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 86   :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 2e		 jmp	 SHORT $LN5@Q_plsf_res
$LN4@Q_plsf_res:

; 87   :   }
; 88   : 
; 89   :   for ( i = 0; i < M; i++)

  00059	33 c0		 xor	 eax, eax
  0005b	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0005f	eb 0c		 jmp	 SHORT $LN3@Q_plsf_res
$LN2@Q_plsf_res:
  00061	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00065	66 83 c0 01	 add	 ax, 1
  00069	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@Q_plsf_res:
  0006d	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00071	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00074	7d 0f		 jge	 SHORT $LN1@Q_plsf_res

; 90   :       state->past_rq[i] = 0;

  00076	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0007a	33 c9		 xor	 ecx, ecx
  0007c	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  0007f	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00083	eb dc		 jmp	 SHORT $LN2@Q_plsf_res
$LN1@Q_plsf_res:

; 91   :   
; 92   :   return 0;

  00085	33 c0		 xor	 eax, eax
$LN5@Q_plsf_res:

; 93   : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_Q_plsf_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\q_plsf.c
;	COMDAT _Q_plsf_init
_TEXT	SEGMENT
_s$ = -8						; size = 4
_state$ = 8						; size = 4
_Q_plsf_init PROC					; COMDAT

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 52   :   Q_plsfState* s;
; 53   :  
; 54   :   if (state == (Q_plsfState **) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 35		 jne	 SHORT $LN2@Q_plsf_ini

; 55   :       fprintf(stderr, "Q_plsf_init: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PHCGEEMG@Q_plsf_init?3?5invalid?5parameter?6?$AA@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 56   :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 71		 jmp	 SHORT $LN3@Q_plsf_ini
$LN2@Q_plsf_ini:

; 57   :   }
; 58   :   *state = NULL;

  00059	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 59   :  
; 60   :   /* allocate memory */
; 61   :   if ((s= (Q_plsfState *) malloc(sizeof(Q_plsfState))) == NULL){

  00062	8b f4		 mov	 esi, esp
  00064	6a 14		 push	 20			; 00000014H
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006c	83 c4 04	 add	 esp, 4
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  00079	83 7d f8 00	 cmp	 DWORD PTR _s$[ebp], 0
  0007d	75 35		 jne	 SHORT $LN1@Q_plsf_ini

; 62   :       fprintf(stderr, "Q_plsf_init: can not malloc state structure\n");

  0007f	8b f4		 mov	 esi, esp
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@NCADNPAP@Q_plsf_init?3?5can?5not?5malloc?5stat@
  00086	8b fc		 mov	 edi, esp
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0008e	3b fc		 cmp	 edi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009a	d1 e1		 shl	 ecx, 1
  0009c	03 c1		 add	 eax, ecx
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  000a5	83 c4 08	 add	 esp, 8
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 63   :       return -1;

  000af	83 c8 ff	 or	 eax, -1
  000b2	eb 16		 jmp	 SHORT $LN3@Q_plsf_ini
$LN1@Q_plsf_ini:

; 64   :   }
; 65   : 
; 66   :   Q_plsf_reset(s);

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _Q_plsf_reset
  000bd	83 c4 04	 add	 esp, 4

; 67   :   *state = s;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000c6	89 08		 mov	 DWORD PTR [eax], ecx

; 68   :   
; 69   :   return 0;

  000c8	33 c0		 xor	 eax, eax
$LN3@Q_plsf_ini:

; 70   : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_Q_plsf_init ENDP
_TEXT	ENDS
END
