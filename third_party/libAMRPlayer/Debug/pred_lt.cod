; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\pred_lt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_pred_lt_id
CONST	SEGMENT
_pred_lt_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_inter_6 DW	07303H
	DW	06ebaH
	DW	06277H
	DW	04fe1H
	DW	0396dH
	DW	021f5H
	DW	0c47H
	DW	0fab8H
	DW	0eeceH
	DW	0e917H
	DW	0e926H
	DW	0edbfH
	DW	0f521H
	DW	0fd60H
	DW	04bbH
	DW	09e8H
	DW	0c3aH
	DW	0bafH
	DW	08d3H
	DW	0492H
	DW	00H
	DW	0fc17H
	DW	0f98cH
	DW	0f8b4H
	DW	0f97eH
	DW	0fb85H
	DW	0fe30H
	DW	0daH
	DW	02f4H
	DW	0424H
	DW	044bH
	DW	0388H
	DW	0226H
	DW	087H
	DW	0ff0bH
	DW	0fdfeH
	DW	0fd86H
	DW	0fda6H
	DW	0fe3dH
	DW	0ff19H
	DW	00H
	DW	0bfH
	DW	0134H
	DW	0154H
	DW	0128H
	DW	0c6H
	DW	04eH
	DW	0ffdcH
	DW	0ff88H
	DW	0ff5dH
	DW	0ff5bH
	DW	0ff7cH
	DW	0ffb1H
	DW	0ffedH
	DW	022H
	DW	049H
	DW	05bH
	DW	059H
	DW	046H
	DW	026H
	DW	00H
CONST	ENDS
PUBLIC	_Pred_lt_3or6
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_negate:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c
;	COMDAT _Pred_lt_3or6
_TEXT	SEGMENT
_s$ = -104						; size = 4
_c2$ = -92						; size = 4
_c1$ = -80						; size = 4
_x2$ = -68						; size = 4
_x1$ = -56						; size = 4
_x0$ = -44						; size = 4
_k$ = -32						; size = 2
_j$ = -20						; size = 2
_i$ = -8						; size = 2
_exc$ = 8						; size = 4
_T0$ = 12						; size = 2
_frac$ = 16						; size = 2
_L_subfr$ = 20						; size = 2
_flag3$ = 24						; size = 2
_Pred_lt_3or6 PROC					; COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 94   :     Word16 i, j, k;
; 95   :     Word16 *x0, *x1, *x2;
; 96   :     const Word16 *c1, *c2;
; 97   :     Word32 s;
; 98   : 
; 99   :     x0 = &exc[-T0];             move16 (); 

  0001e	0f bf 45 0c	 movsx	 eax, WORD PTR _T0$[ebp]
  00022	f7 d8		 neg	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _exc$[ebp]
  00027	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0002a	89 55 d4	 mov	 DWORD PTR _x0$[ebp], edx
  0002d	e8 00 00 00 00	 call	 _move16

; 100  : 
; 101  :     frac = negate (frac);

  00032	0f b7 45 10	 movzx	 eax, WORD PTR _frac$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _negate
  0003c	83 c4 04	 add	 esp, 4
  0003f	66 89 45 10	 mov	 WORD PTR _frac$[ebp], ax

; 102  :     test();

  00043	e8 00 00 00 00	 call	 _test

; 103  :     if (flag3 != 0)

  00048	0f bf 45 18	 movsx	 eax, WORD PTR _flag3$[ebp]
  0004c	85 c0		 test	 eax, eax
  0004e	74 13		 je	 SHORT $LN8@Pred_lt_3o

; 104  :     {
; 105  :       frac = shl (frac, 1);   /* inter_3l[k] = inter_6[2*k] -> k' = 2*k */

  00050	6a 01		 push	 1
  00052	0f b7 45 10	 movzx	 eax, WORD PTR _frac$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _shl
  0005c	83 c4 08	 add	 esp, 8
  0005f	66 89 45 10	 mov	 WORD PTR _frac$[ebp], ax
$LN8@Pred_lt_3o:

; 106  :     }
; 107  :     
; 108  :     test (); 

  00063	e8 00 00 00 00	 call	 _test

; 109  :     if (frac < 0)

  00068	0f bf 45 10	 movsx	 eax, WORD PTR _frac$[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	7d 1c		 jge	 SHORT $LN7@Pred_lt_3o

; 110  :     {
; 111  :         frac = add (frac, UP_SAMP_MAX);

  00070	6a 06		 push	 6
  00072	0f b7 45 10	 movzx	 eax, WORD PTR _frac$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _add
  0007c	83 c4 08	 add	 esp, 8
  0007f	66 89 45 10	 mov	 WORD PTR _frac$[ebp], ax

; 112  :         x0--;

  00083	8b 45 d4	 mov	 eax, DWORD PTR _x0$[ebp]
  00086	83 e8 02	 sub	 eax, 2
  00089	89 45 d4	 mov	 DWORD PTR _x0$[ebp], eax
$LN7@Pred_lt_3o:

; 113  :     }
; 114  : 
; 115  :     for (j = 0; j < L_subfr; j++)

  0008c	33 c0		 xor	 eax, eax
  0008e	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
  00092	eb 0c		 jmp	 SHORT $LN6@Pred_lt_3o
$LN5@Pred_lt_3o:
  00094	66 8b 45 ec	 mov	 ax, WORD PTR _j$[ebp]
  00098	66 83 c0 01	 add	 ax, 1
  0009c	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
$LN6@Pred_lt_3o:
  000a0	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  000a4	0f bf 4d 14	 movsx	 ecx, WORD PTR _L_subfr$[ebp]
  000a8	3b c1		 cmp	 eax, ecx
  000aa	0f 8d f6 00 00
	00		 jge	 $LN9@Pred_lt_3o

; 116  :     {
; 117  :         x1 = x0++;              move16 (); 

  000b0	8b 45 d4	 mov	 eax, DWORD PTR _x0$[ebp]
  000b3	89 45 c8	 mov	 DWORD PTR _x1$[ebp], eax
  000b6	8b 4d d4	 mov	 ecx, DWORD PTR _x0$[ebp]
  000b9	83 c1 02	 add	 ecx, 2
  000bc	89 4d d4	 mov	 DWORD PTR _x0$[ebp], ecx
  000bf	e8 00 00 00 00	 call	 _move16

; 118  :         x2 = x0;                move16 (); 

  000c4	8b 45 d4	 mov	 eax, DWORD PTR _x0$[ebp]
  000c7	89 45 bc	 mov	 DWORD PTR _x2$[ebp], eax
  000ca	e8 00 00 00 00	 call	 _move16

; 119  :         c1 = &inter_6[frac];

  000cf	0f bf 45 10	 movsx	 eax, WORD PTR _frac$[ebp]
  000d3	8d 0c 45 00 00
	00 00		 lea	 ecx, DWORD PTR _inter_6[eax*2]
  000da	89 4d b0	 mov	 DWORD PTR _c1$[ebp], ecx

; 120  :         c2 = &inter_6[sub (UP_SAMP_MAX, frac)];

  000dd	0f b7 45 10	 movzx	 eax, WORD PTR _frac$[ebp]
  000e1	50		 push	 eax
  000e2	6a 06		 push	 6
  000e4	e8 00 00 00 00	 call	 _sub
  000e9	83 c4 08	 add	 esp, 8
  000ec	0f bf c8	 movsx	 ecx, ax
  000ef	8d 14 4d 00 00
	00 00		 lea	 edx, DWORD PTR _inter_6[ecx*2]
  000f6	89 55 a4	 mov	 DWORD PTR _c2$[ebp], edx

; 121  : 
; 122  :         s = 0;                  move32 (); 

  000f9	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], 0
  00100	e8 00 00 00 00	 call	 _move32

; 123  :         for (i = 0, k = 0; i < L_INTER10; i++, k += UP_SAMP_MAX)

  00105	33 c0		 xor	 eax, eax
  00107	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0010b	33 c9		 xor	 ecx, ecx
  0010d	66 89 4d e0	 mov	 WORD PTR _k$[ebp], cx
  00111	eb 17		 jmp	 SHORT $LN3@Pred_lt_3o
$LN2@Pred_lt_3o:
  00113	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  00117	66 83 c0 01	 add	 ax, 1
  0011b	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  0011f	0f bf 4d e0	 movsx	 ecx, WORD PTR _k$[ebp]
  00123	83 c1 06	 add	 ecx, 6
  00126	66 89 4d e0	 mov	 WORD PTR _k$[ebp], cx
$LN3@Pred_lt_3o:
  0012a	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0012e	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00131	7d 52		 jge	 SHORT $LN1@Pred_lt_3o

; 124  :         {
; 125  :             s = L_mac (s, x1[-i], c1[k]);

  00133	0f bf 45 e0	 movsx	 eax, WORD PTR _k$[ebp]
  00137	8b 4d b0	 mov	 ecx, DWORD PTR _c1$[ebp]
  0013a	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0013e	52		 push	 edx
  0013f	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00143	f7 d8		 neg	 eax
  00145	8b 4d c8	 mov	 ecx, DWORD PTR _x1$[ebp]
  00148	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0014c	52		 push	 edx
  0014d	8b 45 98	 mov	 eax, DWORD PTR _s$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _L_mac
  00156	83 c4 0c	 add	 esp, 12			; 0000000cH
  00159	89 45 98	 mov	 DWORD PTR _s$[ebp], eax

; 126  :             s = L_mac (s, x2[i], c2[k]);

  0015c	0f bf 45 e0	 movsx	 eax, WORD PTR _k$[ebp]
  00160	8b 4d a4	 mov	 ecx, DWORD PTR _c2$[ebp]
  00163	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00167	52		 push	 edx
  00168	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0016c	8b 4d bc	 mov	 ecx, DWORD PTR _x2$[ebp]
  0016f	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00173	52		 push	 edx
  00174	8b 45 98	 mov	 eax, DWORD PTR _s$[ebp]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 _L_mac
  0017d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00180	89 45 98	 mov	 DWORD PTR _s$[ebp], eax

; 127  :         }

  00183	eb 8e		 jmp	 SHORT $LN2@Pred_lt_3o
$LN1@Pred_lt_3o:

; 128  : 
; 129  :         exc[j] = round (s);     move16 (); 

  00185	8b 45 98	 mov	 eax, DWORD PTR _s$[ebp]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 _round
  0018e	83 c4 04	 add	 esp, 4
  00191	0f bf 4d ec	 movsx	 ecx, WORD PTR _j$[ebp]
  00195	8b 55 08	 mov	 edx, DWORD PTR _exc$[ebp]
  00198	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0019c	e8 00 00 00 00	 call	 _move16

; 130  :     }

  001a1	e9 ee fe ff ff	 jmp	 $LN5@Pred_lt_3o
$LN9@Pred_lt_3o:

; 131  : 
; 132  :     return;
; 133  : }

  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  001af	3b ec		 cmp	 ebp, esp
  001b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c3		 ret	 0
_Pred_lt_3or6 ENDP
_TEXT	ENDS
END
