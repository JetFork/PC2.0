; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\enc_lag6.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_enc_lag6_id
CONST	SEGMENT
_enc_lag6_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Enc_lag6
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\enc_lag6.c
;	COMDAT _Enc_lag6
_TEXT	SEGMENT
_i$ = -20						; size = 2
_index$ = -8						; size = 2
_T0$ = 8						; size = 2
_T0_frac$ = 12						; size = 2
_T0_min$ = 16						; size = 2
_delta_flag$ = 20					; size = 2
_Enc_lag6 PROC						; COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 87   :     Word16 index, i;
; 88   : 
; 89   :     test (); 

  0001e	e8 00 00 00 00	 call	 _test

; 90   :     if (delta_flag == 0)          /* if 1st or 3rd subframe */

  00023	0f bf 45 14	 movsx	 eax, WORD PTR _delta_flag$[ebp]
  00027	85 c0		 test	 eax, eax
  00029	0f 85 91 00 00
	00		 jne	 $LN4@Enc_lag6

; 91   :     {
; 92   :        /* encode pitch delay (with fraction) */
; 93   :        test (); 

  0002f	e8 00 00 00 00	 call	 _test

; 94   :        if (sub (T0, 94) <= 0)

  00034	6a 5e		 push	 94			; 0000005eH
  00036	0f b7 45 08	 movzx	 eax, WORD PTR _T0$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _sub
  00040	83 c4 08	 add	 esp, 8
  00043	0f bf c8	 movsx	 ecx, ax
  00046	85 c9		 test	 ecx, ecx
  00048	7f 5e		 jg	 SHORT $LN3@Enc_lag6

; 95   :        {
; 96   :           /* index = T0*6 - 105 + T0_frac */
; 97   :           i = add (add (T0, T0), T0);

  0004a	0f b7 45 08	 movzx	 eax, WORD PTR _T0$[ebp]
  0004e	50		 push	 eax
  0004f	0f b7 4d 08	 movzx	 ecx, WORD PTR _T0$[ebp]
  00053	51		 push	 ecx
  00054	0f b7 55 08	 movzx	 edx, WORD PTR _T0$[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 _add
  0005e	83 c4 08	 add	 esp, 8
  00061	0f b7 c0	 movzx	 eax, ax
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _add
  0006a	83 c4 08	 add	 esp, 8
  0006d	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 98   :           index = add (sub (add (i, i), 105), T0_frac);

  00071	0f b7 45 0c	 movzx	 eax, WORD PTR _T0_frac$[ebp]
  00075	50		 push	 eax
  00076	6a 69		 push	 105			; 00000069H
  00078	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$[ebp]
  0007c	51		 push	 ecx
  0007d	0f b7 55 ec	 movzx	 edx, WORD PTR _i$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 _add
  00087	83 c4 08	 add	 esp, 8
  0008a	0f b7 c0	 movzx	 eax, ax
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _sub
  00093	83 c4 08	 add	 esp, 8
  00096	0f b7 c8	 movzx	 ecx, ax
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 _add
  0009f	83 c4 08	 add	 esp, 8
  000a2	66 89 45 f8	 mov	 WORD PTR _index$[ebp], ax

; 99   :        }
; 100  :        else

  000a6	eb 16		 jmp	 SHORT $LN2@Enc_lag6
$LN3@Enc_lag6:

; 101  :        {
; 102  :           index = add (T0, 368);

  000a8	68 70 01 00 00	 push	 368			; 00000170H
  000ad	0f b7 45 08	 movzx	 eax, WORD PTR _T0$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _add
  000b7	83 c4 08	 add	 esp, 8
  000ba	66 89 45 f8	 mov	 WORD PTR _index$[ebp], ax
$LN2@Enc_lag6:

; 103  :        }
; 104  :        
; 105  :     }
; 106  :     else

  000be	eb 72		 jmp	 SHORT $LN1@Enc_lag6
$LN4@Enc_lag6:

; 107  :        /* if second or fourth subframe */
; 108  :     {
; 109  :        /* index = 6*(T0-T0_min) + 3 + T0_frac  */
; 110  :        i = sub (T0, T0_min);

  000c0	0f b7 45 10	 movzx	 eax, WORD PTR _T0_min$[ebp]
  000c4	50		 push	 eax
  000c5	0f b7 4d 08	 movzx	 ecx, WORD PTR _T0$[ebp]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _sub
  000cf	83 c4 08	 add	 esp, 8
  000d2	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 111  :        i = add (add (i, i), i);

  000d6	0f b7 45 ec	 movzx	 eax, WORD PTR _i$[ebp]
  000da	50		 push	 eax
  000db	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$[ebp]
  000df	51		 push	 ecx
  000e0	0f b7 55 ec	 movzx	 edx, WORD PTR _i$[ebp]
  000e4	52		 push	 edx
  000e5	e8 00 00 00 00	 call	 _add
  000ea	83 c4 08	 add	 esp, 8
  000ed	0f b7 c0	 movzx	 eax, ax
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 _add
  000f6	83 c4 08	 add	 esp, 8
  000f9	66 89 45 ec	 mov	 WORD PTR _i$[ebp], ax

; 112  :        index = add (add (add (i, i), 3), T0_frac);

  000fd	0f b7 45 0c	 movzx	 eax, WORD PTR _T0_frac$[ebp]
  00101	50		 push	 eax
  00102	6a 03		 push	 3
  00104	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$[ebp]
  00108	51		 push	 ecx
  00109	0f b7 55 ec	 movzx	 edx, WORD PTR _i$[ebp]
  0010d	52		 push	 edx
  0010e	e8 00 00 00 00	 call	 _add
  00113	83 c4 08	 add	 esp, 8
  00116	0f b7 c0	 movzx	 eax, ax
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 _add
  0011f	83 c4 08	 add	 esp, 8
  00122	0f b7 c8	 movzx	 ecx, ax
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 _add
  0012b	83 c4 08	 add	 esp, 8
  0012e	66 89 45 f8	 mov	 WORD PTR _index$[ebp], ax
$LN1@Enc_lag6:

; 113  :     }
; 114  :     
; 115  :     return index;

  00132	66 8b 45 f8	 mov	 ax, WORD PTR _index$[ebp]

; 116  : }

  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	5b		 pop	 ebx
  00139	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0013f	3b ec		 cmp	 ebp, esp
  00141	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
_Enc_lag6 ENDP
_TEXT	ENDS
END
