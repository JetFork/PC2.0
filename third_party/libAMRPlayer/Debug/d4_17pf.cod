; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\d4_17pf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_d4_17pf_c_id
CONST	SEGMENT
_d4_17pf_c_id DB '@(#)$Id $$Id $', 00H
	ORG $+1
_gray	DW	00H
	DW	01H
	DW	03H
	DW	02H
	DW	06H
	DW	04H
	DW	05H
	DW	07H
_dgray	DW	00H
	DW	01H
	DW	03H
	DW	02H
	DW	05H
	DW	06H
	DW	04H
	DW	07H
CONST	ENDS
PUBLIC	_decode_4i40_17bits
EXTRN	_add:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_move16:PROC
EXTRN	_logic16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d4_17pf.c
;	COMDAT _decode_4i40_17bits
_TEXT	SEGMENT
_pos$ = -40						; size = 8
_j$ = -24						; size = 2
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 2
_index$ = 12						; size = 2
_cod$ = 16						; size = 4
_decode_4i40_17bits PROC				; COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 62   :     Word16 i, j;
; 63   :     Word16 pos[NB_PULSE];
; 64   : 
; 65   :     /* Decode the positions */
; 66   : 
; 67   :     i = index & 7;                                       logic16 ();

  00028	0f bf 45 0c	 movsx	 eax, WORD PTR _index$[ebp]
  0002c	83 e0 07	 and	 eax, 7
  0002f	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00033	e8 00 00 00 00	 call	 _logic16

; 68   :     i = dgray[i];                                        move16 ();

  00038	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0003c	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _dgray[eax*2]
  00044	66 89 4d f4	 mov	 WORD PTR _i$[ebp], cx
  00048	e8 00 00 00 00	 call	 _move16

; 69   : 
; 70   :     pos[0] = add(i, shl(i, 2));   /* pos0 =i*5 */        move16 ();

  0004d	6a 02		 push	 2
  0004f	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _shl
  00059	83 c4 08	 add	 esp, 8
  0005c	0f b7 c8	 movzx	 ecx, ax
  0005f	51		 push	 ecx
  00060	0f b7 55 f4	 movzx	 edx, WORD PTR _i$[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 _add
  0006a	83 c4 08	 add	 esp, 8
  0006d	b9 02 00 00 00	 mov	 ecx, 2
  00072	6b d1 00	 imul	 edx, ecx, 0
  00075	66 89 44 15 d8	 mov	 WORD PTR _pos$[ebp+edx], ax
  0007a	e8 00 00 00 00	 call	 _move16

; 71   : 
; 72   :     index = shr(index, 3);

  0007f	6a 03		 push	 3
  00081	0f b7 45 0c	 movzx	 eax, WORD PTR _index$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _shr
  0008b	83 c4 08	 add	 esp, 8
  0008e	66 89 45 0c	 mov	 WORD PTR _index$[ebp], ax

; 73   :     i = index & 7;                                       logic16 ();

  00092	0f bf 45 0c	 movsx	 eax, WORD PTR _index$[ebp]
  00096	83 e0 07	 and	 eax, 7
  00099	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0009d	e8 00 00 00 00	 call	 _logic16

; 74   :     i = dgray[i];                                        move16 ();

  000a2	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000a6	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _dgray[eax*2]
  000ae	66 89 4d f4	 mov	 WORD PTR _i$[ebp], cx
  000b2	e8 00 00 00 00	 call	 _move16

; 75   : 
; 76   :     i = add(i, shl(i, 2));        /* pos1 =i*5+1 */

  000b7	6a 02		 push	 2
  000b9	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _shl
  000c3	83 c4 08	 add	 esp, 8
  000c6	0f b7 c8	 movzx	 ecx, ax
  000c9	51		 push	 ecx
  000ca	0f b7 55 f4	 movzx	 edx, WORD PTR _i$[ebp]
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 _add
  000d4	83 c4 08	 add	 esp, 8
  000d7	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax

; 77   :     pos[1] = add(i, 1);                                  move16 ();

  000db	6a 01		 push	 1
  000dd	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 _add
  000e7	83 c4 08	 add	 esp, 8
  000ea	b9 02 00 00 00	 mov	 ecx, 2
  000ef	c1 e1 00	 shl	 ecx, 0
  000f2	66 89 44 0d d8	 mov	 WORD PTR _pos$[ebp+ecx], ax
  000f7	e8 00 00 00 00	 call	 _move16

; 78   : 
; 79   :     index = shr(index, 3);

  000fc	6a 03		 push	 3
  000fe	0f b7 45 0c	 movzx	 eax, WORD PTR _index$[ebp]
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 _shr
  00108	83 c4 08	 add	 esp, 8
  0010b	66 89 45 0c	 mov	 WORD PTR _index$[ebp], ax

; 80   :     i = index & 7;                                       logic16 ();

  0010f	0f bf 45 0c	 movsx	 eax, WORD PTR _index$[ebp]
  00113	83 e0 07	 and	 eax, 7
  00116	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0011a	e8 00 00 00 00	 call	 _logic16

; 81   :     i = dgray[i];                                        move16 ();

  0011f	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00123	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _dgray[eax*2]
  0012b	66 89 4d f4	 mov	 WORD PTR _i$[ebp], cx
  0012f	e8 00 00 00 00	 call	 _move16

; 82   : 
; 83   :     i = add(i, shl(i, 2));        /* pos2 =i*5+1 */

  00134	6a 02		 push	 2
  00136	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 _shl
  00140	83 c4 08	 add	 esp, 8
  00143	0f b7 c8	 movzx	 ecx, ax
  00146	51		 push	 ecx
  00147	0f b7 55 f4	 movzx	 edx, WORD PTR _i$[ebp]
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 _add
  00151	83 c4 08	 add	 esp, 8
  00154	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax

; 84   :     pos[2] = add(i, 2);                                  move16 ();

  00158	6a 02		 push	 2
  0015a	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _add
  00164	83 c4 08	 add	 esp, 8
  00167	b9 02 00 00 00	 mov	 ecx, 2
  0016c	d1 e1		 shl	 ecx, 1
  0016e	66 89 44 0d d8	 mov	 WORD PTR _pos$[ebp+ecx], ax
  00173	e8 00 00 00 00	 call	 _move16

; 85   : 
; 86   :     index = shr(index, 3);

  00178	6a 03		 push	 3
  0017a	0f b7 45 0c	 movzx	 eax, WORD PTR _index$[ebp]
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 _shr
  00184	83 c4 08	 add	 esp, 8
  00187	66 89 45 0c	 mov	 WORD PTR _index$[ebp], ax

; 87   :     j = index & 1;                                       logic16 ();

  0018b	0f bf 45 0c	 movsx	 eax, WORD PTR _index$[ebp]
  0018f	83 e0 01	 and	 eax, 1
  00192	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax
  00196	e8 00 00 00 00	 call	 _logic16

; 88   :     index = shr(index, 1);

  0019b	6a 01		 push	 1
  0019d	0f b7 45 0c	 movzx	 eax, WORD PTR _index$[ebp]
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 _shr
  001a7	83 c4 08	 add	 esp, 8
  001aa	66 89 45 0c	 mov	 WORD PTR _index$[ebp], ax

; 89   :     i = index & 7;                                       logic16 ();

  001ae	0f bf 45 0c	 movsx	 eax, WORD PTR _index$[ebp]
  001b2	83 e0 07	 and	 eax, 7
  001b5	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  001b9	e8 00 00 00 00	 call	 _logic16

; 90   :     i = dgray[i];                                        move16 ();

  001be	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  001c2	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _dgray[eax*2]
  001ca	66 89 4d f4	 mov	 WORD PTR _i$[ebp], cx
  001ce	e8 00 00 00 00	 call	 _move16

; 91   : 
; 92   :     i = add(i, shl(i, 2));        /* pos3 =i*5+3+j */

  001d3	6a 02		 push	 2
  001d5	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 _shl
  001df	83 c4 08	 add	 esp, 8
  001e2	0f b7 c8	 movzx	 ecx, ax
  001e5	51		 push	 ecx
  001e6	0f b7 55 f4	 movzx	 edx, WORD PTR _i$[ebp]
  001ea	52		 push	 edx
  001eb	e8 00 00 00 00	 call	 _add
  001f0	83 c4 08	 add	 esp, 8
  001f3	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax

; 93   :     i = add(i, 3);

  001f7	6a 03		 push	 3
  001f9	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 _add
  00203	83 c4 08	 add	 esp, 8
  00206	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax

; 94   :     pos[3] = add(i, j);                                  move16 ();

  0020a	0f b7 45 e8	 movzx	 eax, WORD PTR _j$[ebp]
  0020e	50		 push	 eax
  0020f	0f b7 4d f4	 movzx	 ecx, WORD PTR _i$[ebp]
  00213	51		 push	 ecx
  00214	e8 00 00 00 00	 call	 _add
  00219	83 c4 08	 add	 esp, 8
  0021c	ba 02 00 00 00	 mov	 edx, 2
  00221	6b ca 03	 imul	 ecx, edx, 3
  00224	66 89 44 0d d8	 mov	 WORD PTR _pos$[ebp+ecx], ax
  00229	e8 00 00 00 00	 call	 _move16

; 95   : 
; 96   :     /* decode the signs  and build the codeword */
; 97   : 
; 98   :     for (i = 0; i < L_SUBFR; i++) {

  0022e	33 c0		 xor	 eax, eax
  00230	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00234	eb 0c		 jmp	 SHORT $LN8@decode_4i4
$LN7@decode_4i4:
  00236	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0023a	66 83 c0 01	 add	 ax, 1
  0023e	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN8@decode_4i4:
  00242	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00246	83 f8 28	 cmp	 eax, 40			; 00000028H
  00249	7d 14		 jge	 SHORT $LN6@decode_4i4

; 99   :         cod[i] = 0;                                      move16 ();

  0024b	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0024f	33 c9		 xor	 ecx, ecx
  00251	8b 55 10	 mov	 edx, DWORD PTR _cod$[ebp]
  00254	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00258	e8 00 00 00 00	 call	 _move16

; 100  :     }

  0025d	eb d7		 jmp	 SHORT $LN7@decode_4i4
$LN6@decode_4i4:

; 101  : 
; 102  :     for (j = 0; j < NB_PULSE; j++) {

  0025f	33 c0		 xor	 eax, eax
  00261	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax
  00265	eb 0c		 jmp	 SHORT $LN5@decode_4i4
$LN4@decode_4i4:
  00267	66 8b 45 e8	 mov	 ax, WORD PTR _j$[ebp]
  0026b	66 83 c0 01	 add	 ax, 1
  0026f	66 89 45 e8	 mov	 WORD PTR _j$[ebp], ax
$LN5@decode_4i4:
  00273	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  00277	83 f8 04	 cmp	 eax, 4
  0027a	7d 68		 jge	 SHORT $LN9@decode_4i4

; 103  :         i = sign & 1;                                    logic16 ();

  0027c	0f bf 45 08	 movsx	 eax, WORD PTR _sign$[ebp]
  00280	83 e0 01	 and	 eax, 1
  00283	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00287	e8 00 00 00 00	 call	 _logic16

; 104  :         sign = shr(sign, 1);

  0028c	6a 01		 push	 1
  0028e	0f b7 45 08	 movzx	 eax, WORD PTR _sign$[ebp]
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 _shr
  00298	83 c4 08	 add	 esp, 8
  0029b	66 89 45 08	 mov	 WORD PTR _sign$[ebp], ax

; 105  : 
; 106  :         test ();

  0029f	e8 00 00 00 00	 call	 _test

; 107  :         if (i != 0) {

  002a4	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  002a8	85 c0		 test	 eax, eax
  002aa	74 1c		 je	 SHORT $LN2@decode_4i4

; 108  :             cod[pos[j]] = 8191;                          move16 ();

  002ac	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  002b0	0f bf 4c 45 d8	 movsx	 ecx, WORD PTR _pos$[ebp+eax*2]
  002b5	ba ff 1f 00 00	 mov	 edx, 8191		; 00001fffH
  002ba	8b 45 10	 mov	 eax, DWORD PTR _cod$[ebp]
  002bd	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  002c1	e8 00 00 00 00	 call	 _move16

; 109  :         } else {

  002c6	eb 1a		 jmp	 SHORT $LN1@decode_4i4
$LN2@decode_4i4:

; 110  :             cod[pos[j]] = -8192;                         move16 ();

  002c8	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  002cc	0f bf 4c 45 d8	 movsx	 ecx, WORD PTR _pos$[ebp+eax*2]
  002d1	ba 00 e0 ff ff	 mov	 edx, -8192		; ffffe000H
  002d6	8b 45 10	 mov	 eax, DWORD PTR _cod$[ebp]
  002d9	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  002dd	e8 00 00 00 00	 call	 _move16
$LN1@decode_4i4:

; 111  :         }
; 112  :     }

  002e2	eb 83		 jmp	 SHORT $LN4@decode_4i4
$LN9@decode_4i4:

; 113  : 
; 114  :     return;
; 115  : }

  002e4	52		 push	 edx
  002e5	8b cd		 mov	 ecx, ebp
  002e7	50		 push	 eax
  002e8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@decode_4i4
  002ee	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002f3	58		 pop	 eax
  002f4	5a		 pop	 edx
  002f5	5f		 pop	 edi
  002f6	5e		 pop	 esi
  002f7	5b		 pop	 ebx
  002f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fb	33 cd		 xor	 ecx, ebp
  002fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00302	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00308	3b ec		 cmp	 ebp, esp
  0030a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0030f	8b e5		 mov	 esp, ebp
  00311	5d		 pop	 ebp
  00312	c3		 ret	 0
  00313	90		 npad	 1
$LN13@decode_4i4:
  00314	01 00 00 00	 DD	 1
  00318	00 00 00 00	 DD	 $LN12@decode_4i4
$LN12@decode_4i4:
  0031c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00320	08 00 00 00	 DD	 8
  00324	00 00 00 00	 DD	 $LN11@decode_4i4
$LN11@decode_4i4:
  00328	70		 DB	 112			; 00000070H
  00329	6f		 DB	 111			; 0000006fH
  0032a	73		 DB	 115			; 00000073H
  0032b	00		 DB	 0
_decode_4i40_17bits ENDP
_TEXT	ENDS
END
