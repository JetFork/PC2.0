; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\c1035pf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_c1035pf_id
CONST	SEGMENT
_c1035pf_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_gray	DW	00H
	DW	01H
	DW	03H
	DW	02H
	DW	06H
	DW	04H
	DW	05H
	DW	07H
_dgray	DW	00H
	DW	01H
	DW	03H
	DW	02H
	DW	05H
	DW	06H
	DW	04H
	DW	07H
CONST	ENDS
PUBLIC	_code_10i40_35bits
PUBLIC	_q_p
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_mult:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_l:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_shr:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_logic16:PROC
EXTRN	_test:PROC
EXTRN	_set_sign12k2:PROC
EXTRN	_cor_h_x:PROC
EXTRN	_cor_h:PROC
EXTRN	_search_10and8i40:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\c1035pf.c
;	COMDAT _build_code
_TEXT	SEGMENT
tv356 = -418						; size = 2
tv348 = -418						; size = 2
tv340 = -418						; size = 2
tv332 = -418						; size = 2
tv324 = -418						; size = 2
tv316 = -418						; size = 2
tv308 = -418						; size = 2
tv300 = -418						; size = 2
tv292 = -418						; size = 2
tv284 = -418						; size = 2
_s$ = -220						; size = 4
_p9$ = -208						; size = 4
_p8$ = -196						; size = 4
_p7$ = -184						; size = 4
_p6$ = -172						; size = 4
_p5$ = -160						; size = 4
_p4$ = -148						; size = 4
_p3$ = -136						; size = 4
_p2$ = -124						; size = 4
_p1$ = -112						; size = 4
_p0$ = -100						; size = 4
__sign$ = -88						; size = 20
_index$ = -60						; size = 2
_track$ = -48						; size = 2
_k$ = -36						; size = 2
_j$ = -24						; size = 2
_i$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_codvec$ = 8						; size = 4
_sign$ = 12						; size = 4
_cod$ = 16						; size = 4
_h$ = 20						; size = 4
_y$ = 24						; size = 4
_indx$ = 28						; size = 4
_build_code PROC					; COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 01 00
	00		 sub	 esp, 420		; 000001a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 5c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-420]
  00012	b9 69 00 00 00	 mov	 ecx, 105		; 00000069H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 91   :     Word16 i, j, k, track, index, _sign[NB_PULSE];
; 92   :     Word16 *p0, *p1, *p2, *p3, *p4, *p5, *p6, *p7, *p8, *p9;
; 93   :     Word32 s;
; 94   : 
; 95   :     for (i = 0; i < L_CODE; i++)

  00028	33 c0		 xor	 eax, eax
  0002a	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0002e	eb 0c		 jmp	 SHORT $LN22@build_code
$LN21@build_code:
  00030	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00034	66 83 c0 01	 add	 ax, 1
  00038	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN22@build_code:
  0003c	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00040	83 f8 28	 cmp	 eax, 40			; 00000028H
  00043	7d 14		 jge	 SHORT $LN20@build_code

; 96   :     {
; 97   :         cod[i] = 0;                              move16 (); 

  00045	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00049	33 c9		 xor	 ecx, ecx
  0004b	8b 55 10	 mov	 edx, DWORD PTR _cod$[ebp]
  0004e	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00052	e8 00 00 00 00	 call	 _move16

; 98   :     }

  00057	eb d7		 jmp	 SHORT $LN21@build_code
$LN20@build_code:

; 99   :     for (i = 0; i < NB_TRACK; i++)

  00059	33 c0		 xor	 eax, eax
  0005b	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  0005f	eb 0c		 jmp	 SHORT $LN19@build_code
$LN18@build_code:
  00061	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00065	66 83 c0 01	 add	 ax, 1
  00069	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN19@build_code:
  0006d	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00071	83 f8 05	 cmp	 eax, 5
  00074	7d 15		 jge	 SHORT $LN17@build_code

; 100  :     {
; 101  :         indx[i] = -1;                            move16 (); 

  00076	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0007a	83 c9 ff	 or	 ecx, -1
  0007d	8b 55 1c	 mov	 edx, DWORD PTR _indx$[ebp]
  00080	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00084	e8 00 00 00 00	 call	 _move16

; 102  :     }

  00089	eb d6		 jmp	 SHORT $LN18@build_code
$LN17@build_code:

; 103  :     
; 104  :     for (k = 0; k < NB_PULSE; k++)

  0008b	33 c0		 xor	 eax, eax
  0008d	66 89 45 dc	 mov	 WORD PTR _k$[ebp], ax
  00091	eb 0c		 jmp	 SHORT $LN16@build_code
$LN15@build_code:
  00093	66 8b 45 dc	 mov	 ax, WORD PTR _k$[ebp]
  00097	66 83 c0 01	 add	 ax, 1
  0009b	66 89 45 dc	 mov	 WORD PTR _k$[ebp], ax
$LN16@build_code:
  0009f	0f bf 45 dc	 movsx	 eax, WORD PTR _k$[ebp]
  000a3	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000a6	0f 8d 56 02 00
	00		 jge	 $LN14@build_code

; 105  :     {
; 106  :         /* read pulse position */            
; 107  :         i = codvec[k];                           move16 ();

  000ac	0f bf 45 dc	 movsx	 eax, WORD PTR _k$[ebp]
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _codvec$[ebp]
  000b3	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  000b7	66 89 55 f4	 mov	 WORD PTR _i$[ebp], dx
  000bb	e8 00 00 00 00	 call	 _move16

; 108  :         /* read sign           */        
; 109  :         j = sign[i];                             move16 (); 

  000c0	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR _sign$[ebp]
  000c7	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  000cb	66 89 55 e8	 mov	 WORD PTR _j$[ebp], dx
  000cf	e8 00 00 00 00	 call	 _move16

; 110  :         
; 111  :         index = mult (i, 6554);                  /* index = pos/5       */

  000d4	68 9a 19 00 00	 push	 6554			; 0000199aH
  000d9	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _mult
  000e3	83 c4 08	 add	 esp, 8
  000e6	66 89 45 c4	 mov	 WORD PTR _index$[ebp], ax

; 112  :         /* track = pos%5 */
; 113  :         track = sub (i, extract_l (L_shr (L_mult (index, 5), 1)));

  000ea	6a 01		 push	 1
  000ec	6a 05		 push	 5
  000ee	0f b7 45 c4	 movzx	 eax, WORD PTR _index$[ebp]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _L_mult
  000f8	83 c4 08	 add	 esp, 8
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _L_shr
  00101	83 c4 08	 add	 esp, 8
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _extract_l
  0010a	83 c4 04	 add	 esp, 4
  0010d	0f b7 c8	 movzx	 ecx, ax
  00110	51		 push	 ecx
  00111	0f b7 55 f4	 movzx	 edx, WORD PTR _i$[ebp]
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 _sub
  0011b	83 c4 08	 add	 esp, 8
  0011e	66 89 45 d0	 mov	 WORD PTR _track$[ebp], ax

; 114  :         test (); 

  00122	e8 00 00 00 00	 call	 _test

; 115  :         if (j > 0)

  00127	0f bf 45 e8	 movsx	 eax, WORD PTR _j$[ebp]
  0012b	85 c0		 test	 eax, eax
  0012d	7e 3e		 jle	 SHORT $LN13@build_code

; 116  :         {
; 117  :             cod[i] = add (cod[i], 4096);         move16 ();

  0012f	68 00 10 00 00	 push	 4096			; 00001000H
  00134	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00138	8b 4d 10	 mov	 ecx, DWORD PTR _cod$[ebp]
  0013b	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 _add
  00145	83 c4 08	 add	 esp, 8
  00148	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  0014c	8b 55 10	 mov	 edx, DWORD PTR _cod$[ebp]
  0014f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00153	e8 00 00 00 00	 call	 _move16

; 118  :             _sign[k] = 8192;                     move16 (); 

  00158	0f bf 45 dc	 movsx	 eax, WORD PTR _k$[ebp]
  0015c	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  00161	66 89 4c 45 a8	 mov	 WORD PTR __sign$[ebp+eax*2], cx
  00166	e8 00 00 00 00	 call	 _move16

; 119  :             
; 120  :         }
; 121  :         else

  0016b	eb 4f		 jmp	 SHORT $LN12@build_code
$LN13@build_code:

; 122  :         {
; 123  :             cod[i] = sub (cod[i], 4096);         move16 ();

  0016d	68 00 10 00 00	 push	 4096			; 00001000H
  00172	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  00176	8b 4d 10	 mov	 ecx, DWORD PTR _cod$[ebp]
  00179	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0017d	52		 push	 edx
  0017e	e8 00 00 00 00	 call	 _sub
  00183	83 c4 08	 add	 esp, 8
  00186	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  0018a	8b 55 10	 mov	 edx, DWORD PTR _cod$[ebp]
  0018d	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00191	e8 00 00 00 00	 call	 _move16

; 124  :             _sign[k] = -8192;                    move16 (); 

  00196	0f bf 45 dc	 movsx	 eax, WORD PTR _k$[ebp]
  0019a	b9 00 e0 ff ff	 mov	 ecx, -8192		; ffffe000H
  0019f	66 89 4c 45 a8	 mov	 WORD PTR __sign$[ebp+eax*2], cx
  001a4	e8 00 00 00 00	 call	 _move16

; 125  :             index = add (index, 8);

  001a9	6a 08		 push	 8
  001ab	0f b7 45 c4	 movzx	 eax, WORD PTR _index$[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 _add
  001b5	83 c4 08	 add	 esp, 8
  001b8	66 89 45 c4	 mov	 WORD PTR _index$[ebp], ax
$LN12@build_code:

; 126  :         }
; 127  :         
; 128  :         test (); move16 ();

  001bc	e8 00 00 00 00	 call	 _test
  001c1	e8 00 00 00 00	 call	 _move16

; 129  :         if (indx[track] < 0)

  001c6	0f bf 45 d0	 movsx	 eax, WORD PTR _track$[ebp]
  001ca	8b 4d 1c	 mov	 ecx, DWORD PTR _indx$[ebp]
  001cd	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  001d1	85 d2		 test	 edx, edx
  001d3	7d 19		 jge	 SHORT $LN11@build_code

; 130  :         {
; 131  :             indx[track] = index;                 move16 (); 

  001d5	0f bf 45 d0	 movsx	 eax, WORD PTR _track$[ebp]
  001d9	8b 4d 1c	 mov	 ecx, DWORD PTR _indx$[ebp]
  001dc	66 8b 55 c4	 mov	 dx, WORD PTR _index$[ebp]
  001e0	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  001e4	e8 00 00 00 00	 call	 _move16

; 132  :         }
; 133  :         else

  001e9	e9 0f 01 00 00	 jmp	 $LN10@build_code
$LN11@build_code:

; 134  :         {
; 135  :             test (); logic16 (); logic16 (); 

  001ee	e8 00 00 00 00	 call	 _test
  001f3	e8 00 00 00 00	 call	 _logic16
  001f8	e8 00 00 00 00	 call	 _logic16

; 136  :             if (((index ^ indx[track]) & 8) == 0)

  001fd	0f bf 45 c4	 movsx	 eax, WORD PTR _index$[ebp]
  00201	0f bf 4d d0	 movsx	 ecx, WORD PTR _track$[ebp]
  00205	8b 55 1c	 mov	 edx, DWORD PTR _indx$[ebp]
  00208	0f bf 0c 4a	 movsx	 ecx, WORD PTR [edx+ecx*2]
  0020c	33 c1		 xor	 eax, ecx
  0020e	83 e0 08	 and	 eax, 8
  00211	75 6e		 jne	 SHORT $LN9@build_code

; 137  :             {
; 138  :                 /* sign of 1st pulse == sign of 2nd pulse */
; 139  :                 
; 140  :                 test (); 

  00213	e8 00 00 00 00	 call	 _test

; 141  :                 if (sub (indx[track], index) <= 0)

  00218	0f b7 45 c4	 movzx	 eax, WORD PTR _index$[ebp]
  0021c	50		 push	 eax
  0021d	0f bf 4d d0	 movsx	 ecx, WORD PTR _track$[ebp]
  00221	8b 55 1c	 mov	 edx, DWORD PTR _indx$[ebp]
  00224	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 _sub
  0022e	83 c4 08	 add	 esp, 8
  00231	0f bf c8	 movsx	 ecx, ax
  00234	85 c9		 test	 ecx, ecx
  00236	7f 17		 jg	 SHORT $LN8@build_code

; 142  :                 {
; 143  :                     indx[track + 5] = index;     move16 (); 

  00238	0f bf 45 d0	 movsx	 eax, WORD PTR _track$[ebp]
  0023c	8b 4d 1c	 mov	 ecx, DWORD PTR _indx$[ebp]
  0023f	66 8b 55 c4	 mov	 dx, WORD PTR _index$[ebp]
  00243	66 89 54 41 0a	 mov	 WORD PTR [ecx+eax*2+10], dx
  00248	e8 00 00 00 00	 call	 _move16

; 144  :                 }
; 145  :                 else

  0024d	eb 30		 jmp	 SHORT $LN7@build_code
$LN8@build_code:

; 146  :                 {
; 147  :                     indx[track + 5] = indx[track];

  0024f	0f bf 45 d0	 movsx	 eax, WORD PTR _track$[ebp]
  00253	0f bf 4d d0	 movsx	 ecx, WORD PTR _track$[ebp]
  00257	8b 55 1c	 mov	 edx, DWORD PTR _indx$[ebp]
  0025a	8b 75 1c	 mov	 esi, DWORD PTR _indx$[ebp]
  0025d	66 8b 04 46	 mov	 ax, WORD PTR [esi+eax*2]
  00261	66 89 44 4a 0a	 mov	 WORD PTR [edx+ecx*2+10], ax

; 148  :                                                  move16 (); 

  00266	e8 00 00 00 00	 call	 _move16

; 149  :                     indx[track] = index;         move16 (); 

  0026b	0f bf 45 d0	 movsx	 eax, WORD PTR _track$[ebp]
  0026f	8b 4d 1c	 mov	 ecx, DWORD PTR _indx$[ebp]
  00272	66 8b 55 c4	 mov	 dx, WORD PTR _index$[ebp]
  00276	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0027a	e8 00 00 00 00	 call	 _move16
$LN7@build_code:

; 150  :                 }
; 151  :             }
; 152  :             else

  0027f	eb 7c		 jmp	 SHORT $LN10@build_code
$LN9@build_code:

; 153  :             {
; 154  :                 /* sign of 1st pulse != sign of 2nd pulse */
; 155  :                 
; 156  :                 test (); logic16 (); logic16 (); 

  00281	e8 00 00 00 00	 call	 _test
  00286	e8 00 00 00 00	 call	 _logic16
  0028b	e8 00 00 00 00	 call	 _logic16

; 157  :                 if (sub ((indx[track] & 7), (index & 7)) <= 0)

  00290	0f bf 45 c4	 movsx	 eax, WORD PTR _index$[ebp]
  00294	83 e0 07	 and	 eax, 7
  00297	50		 push	 eax
  00298	0f bf 4d d0	 movsx	 ecx, WORD PTR _track$[ebp]
  0029c	8b 55 1c	 mov	 edx, DWORD PTR _indx$[ebp]
  0029f	0f bf 04 4a	 movsx	 eax, WORD PTR [edx+ecx*2]
  002a3	83 e0 07	 and	 eax, 7
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 _sub
  002ac	83 c4 08	 add	 esp, 8
  002af	0f bf c8	 movsx	 ecx, ax
  002b2	85 c9		 test	 ecx, ecx
  002b4	7f 32		 jg	 SHORT $LN5@build_code

; 158  :                 {
; 159  :                     indx[track + 5] = indx[track];

  002b6	0f bf 45 d0	 movsx	 eax, WORD PTR _track$[ebp]
  002ba	0f bf 4d d0	 movsx	 ecx, WORD PTR _track$[ebp]
  002be	8b 55 1c	 mov	 edx, DWORD PTR _indx$[ebp]
  002c1	8b 75 1c	 mov	 esi, DWORD PTR _indx$[ebp]
  002c4	66 8b 04 46	 mov	 ax, WORD PTR [esi+eax*2]
  002c8	66 89 44 4a 0a	 mov	 WORD PTR [edx+ecx*2+10], ax

; 160  :                                                  move16 (); 

  002cd	e8 00 00 00 00	 call	 _move16

; 161  :                     indx[track] = index;         move16 (); 

  002d2	0f bf 45 d0	 movsx	 eax, WORD PTR _track$[ebp]
  002d6	8b 4d 1c	 mov	 ecx, DWORD PTR _indx$[ebp]
  002d9	66 8b 55 c4	 mov	 dx, WORD PTR _index$[ebp]
  002dd	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  002e1	e8 00 00 00 00	 call	 _move16

; 162  :                 }
; 163  :                 else

  002e6	eb 15		 jmp	 SHORT $LN10@build_code
$LN5@build_code:

; 164  :                 {
; 165  :                     indx[track + 5] = index;     move16 (); 

  002e8	0f bf 45 d0	 movsx	 eax, WORD PTR _track$[ebp]
  002ec	8b 4d 1c	 mov	 ecx, DWORD PTR _indx$[ebp]
  002ef	66 8b 55 c4	 mov	 dx, WORD PTR _index$[ebp]
  002f3	66 89 54 41 0a	 mov	 WORD PTR [ecx+eax*2+10], dx
  002f8	e8 00 00 00 00	 call	 _move16
$LN10@build_code:

; 166  :                 }
; 167  :             }
; 168  :         }
; 169  :     }

  002fd	e9 91 fd ff ff	 jmp	 $LN15@build_code
$LN14@build_code:

; 170  :     
; 171  :     p0 = h - codvec[0];                          move16 (); 

  00302	b8 02 00 00 00	 mov	 eax, 2
  00307	6b c8 00	 imul	 ecx, eax, 0
  0030a	8b 55 08	 mov	 edx, DWORD PTR _codvec$[ebp]
  0030d	0f bf 04 0a	 movsx	 eax, WORD PTR [edx+ecx]
  00311	d1 e0		 shl	 eax, 1
  00313	8b 4d 14	 mov	 ecx, DWORD PTR _h$[ebp]
  00316	2b c8		 sub	 ecx, eax
  00318	89 4d 9c	 mov	 DWORD PTR _p0$[ebp], ecx
  0031b	e8 00 00 00 00	 call	 _move16

; 172  :     p1 = h - codvec[1];                          move16 (); 

  00320	b8 02 00 00 00	 mov	 eax, 2
  00325	c1 e0 00	 shl	 eax, 0
  00328	8b 4d 08	 mov	 ecx, DWORD PTR _codvec$[ebp]
  0032b	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  0032f	d1 e2		 shl	 edx, 1
  00331	8b 45 14	 mov	 eax, DWORD PTR _h$[ebp]
  00334	2b c2		 sub	 eax, edx
  00336	89 45 90	 mov	 DWORD PTR _p1$[ebp], eax
  00339	e8 00 00 00 00	 call	 _move16

; 173  :     p2 = h - codvec[2];                          move16 (); 

  0033e	b8 02 00 00 00	 mov	 eax, 2
  00343	d1 e0		 shl	 eax, 1
  00345	8b 4d 08	 mov	 ecx, DWORD PTR _codvec$[ebp]
  00348	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  0034c	d1 e2		 shl	 edx, 1
  0034e	8b 45 14	 mov	 eax, DWORD PTR _h$[ebp]
  00351	2b c2		 sub	 eax, edx
  00353	89 45 84	 mov	 DWORD PTR _p2$[ebp], eax
  00356	e8 00 00 00 00	 call	 _move16

; 174  :     p3 = h - codvec[3];                          move16 (); 

  0035b	b8 02 00 00 00	 mov	 eax, 2
  00360	6b c8 03	 imul	 ecx, eax, 3
  00363	8b 55 08	 mov	 edx, DWORD PTR _codvec$[ebp]
  00366	0f bf 04 0a	 movsx	 eax, WORD PTR [edx+ecx]
  0036a	d1 e0		 shl	 eax, 1
  0036c	8b 4d 14	 mov	 ecx, DWORD PTR _h$[ebp]
  0036f	2b c8		 sub	 ecx, eax
  00371	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _p3$[ebp], ecx
  00377	e8 00 00 00 00	 call	 _move16

; 175  :     p4 = h - codvec[4];                          move16 (); 

  0037c	b8 02 00 00 00	 mov	 eax, 2
  00381	c1 e0 02	 shl	 eax, 2
  00384	8b 4d 08	 mov	 ecx, DWORD PTR _codvec$[ebp]
  00387	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  0038b	d1 e2		 shl	 edx, 1
  0038d	8b 45 14	 mov	 eax, DWORD PTR _h$[ebp]
  00390	2b c2		 sub	 eax, edx
  00392	89 85 6c ff ff
	ff		 mov	 DWORD PTR _p4$[ebp], eax
  00398	e8 00 00 00 00	 call	 _move16

; 176  :     p5 = h - codvec[5];                          move16 (); 

  0039d	b8 02 00 00 00	 mov	 eax, 2
  003a2	6b c8 05	 imul	 ecx, eax, 5
  003a5	8b 55 08	 mov	 edx, DWORD PTR _codvec$[ebp]
  003a8	0f bf 04 0a	 movsx	 eax, WORD PTR [edx+ecx]
  003ac	d1 e0		 shl	 eax, 1
  003ae	8b 4d 14	 mov	 ecx, DWORD PTR _h$[ebp]
  003b1	2b c8		 sub	 ecx, eax
  003b3	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _p5$[ebp], ecx
  003b9	e8 00 00 00 00	 call	 _move16

; 177  :     p6 = h - codvec[6];                          move16 (); 

  003be	b8 02 00 00 00	 mov	 eax, 2
  003c3	6b c8 06	 imul	 ecx, eax, 6
  003c6	8b 55 08	 mov	 edx, DWORD PTR _codvec$[ebp]
  003c9	0f bf 04 0a	 movsx	 eax, WORD PTR [edx+ecx]
  003cd	d1 e0		 shl	 eax, 1
  003cf	8b 4d 14	 mov	 ecx, DWORD PTR _h$[ebp]
  003d2	2b c8		 sub	 ecx, eax
  003d4	89 8d 54 ff ff
	ff		 mov	 DWORD PTR _p6$[ebp], ecx
  003da	e8 00 00 00 00	 call	 _move16

; 178  :     p7 = h - codvec[7];                          move16 (); 

  003df	b8 02 00 00 00	 mov	 eax, 2
  003e4	6b c8 07	 imul	 ecx, eax, 7
  003e7	8b 55 08	 mov	 edx, DWORD PTR _codvec$[ebp]
  003ea	0f bf 04 0a	 movsx	 eax, WORD PTR [edx+ecx]
  003ee	d1 e0		 shl	 eax, 1
  003f0	8b 4d 14	 mov	 ecx, DWORD PTR _h$[ebp]
  003f3	2b c8		 sub	 ecx, eax
  003f5	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _p7$[ebp], ecx
  003fb	e8 00 00 00 00	 call	 _move16

; 179  :     p8 = h - codvec[8];                          move16 (); 

  00400	b8 02 00 00 00	 mov	 eax, 2
  00405	c1 e0 03	 shl	 eax, 3
  00408	8b 4d 08	 mov	 ecx, DWORD PTR _codvec$[ebp]
  0040b	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  0040f	d1 e2		 shl	 edx, 1
  00411	8b 45 14	 mov	 eax, DWORD PTR _h$[ebp]
  00414	2b c2		 sub	 eax, edx
  00416	89 85 3c ff ff
	ff		 mov	 DWORD PTR _p8$[ebp], eax
  0041c	e8 00 00 00 00	 call	 _move16

; 180  :     p9 = h - codvec[9];                          move16 (); 

  00421	b8 02 00 00 00	 mov	 eax, 2
  00426	6b c8 09	 imul	 ecx, eax, 9
  00429	8b 55 08	 mov	 edx, DWORD PTR _codvec$[ebp]
  0042c	0f bf 04 0a	 movsx	 eax, WORD PTR [edx+ecx]
  00430	d1 e0		 shl	 eax, 1
  00432	8b 4d 14	 mov	 ecx, DWORD PTR _h$[ebp]
  00435	2b c8		 sub	 ecx, eax
  00437	89 8d 30 ff ff
	ff		 mov	 DWORD PTR _p9$[ebp], ecx
  0043d	e8 00 00 00 00	 call	 _move16

; 181  :      
; 182  :     for (i = 0; i < L_CODE; i++)

  00442	33 c0		 xor	 eax, eax
  00444	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
  00448	eb 0c		 jmp	 SHORT $LN3@build_code
$LN2@build_code:
  0044a	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  0044e	66 83 c0 01	 add	 ax, 1
  00452	66 89 45 f4	 mov	 WORD PTR _i$[ebp], ax
$LN3@build_code:
  00456	0f bf 45 f4	 movsx	 eax, WORD PTR _i$[ebp]
  0045a	83 f8 28	 cmp	 eax, 40			; 00000028H
  0045d	0f 8d fb 02 00
	00		 jge	 $LN23@build_code

; 183  :     {
; 184  :         s = 0;                                   move32 (); 

  00463	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$[ebp], 0
  0046d	e8 00 00 00 00	 call	 _move32

; 185  :         s = L_mac (s, *p0++, _sign[0]);

  00472	8b 45 9c	 mov	 eax, DWORD PTR _p0$[ebp]
  00475	66 8b 08	 mov	 cx, WORD PTR [eax]
  00478	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv284[ebp], cx
  0047f	8b 55 9c	 mov	 edx, DWORD PTR _p0$[ebp]
  00482	83 c2 02	 add	 edx, 2
  00485	89 55 9c	 mov	 DWORD PTR _p0$[ebp], edx
  00488	b8 02 00 00 00	 mov	 eax, 2
  0048d	6b c8 00	 imul	 ecx, eax, 0
  00490	0f b7 54 0d a8	 movzx	 edx, WORD PTR __sign$[ebp+ecx]
  00495	52		 push	 edx
  00496	0f b7 85 5e fe
	ff ff		 movzx	 eax, WORD PTR tv284[ebp]
  0049d	50		 push	 eax
  0049e	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  004a4	51		 push	 ecx
  004a5	e8 00 00 00 00	 call	 _L_mac
  004aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  004ad	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 186  :         s = L_mac (s, *p1++, _sign[1]);

  004b3	8b 45 90	 mov	 eax, DWORD PTR _p1$[ebp]
  004b6	66 8b 08	 mov	 cx, WORD PTR [eax]
  004b9	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv292[ebp], cx
  004c0	8b 55 90	 mov	 edx, DWORD PTR _p1$[ebp]
  004c3	83 c2 02	 add	 edx, 2
  004c6	89 55 90	 mov	 DWORD PTR _p1$[ebp], edx
  004c9	b8 02 00 00 00	 mov	 eax, 2
  004ce	c1 e0 00	 shl	 eax, 0
  004d1	0f b7 4c 05 a8	 movzx	 ecx, WORD PTR __sign$[ebp+eax]
  004d6	51		 push	 ecx
  004d7	0f b7 95 5e fe
	ff ff		 movzx	 edx, WORD PTR tv292[ebp]
  004de	52		 push	 edx
  004df	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  004e5	50		 push	 eax
  004e6	e8 00 00 00 00	 call	 _L_mac
  004eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  004ee	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 187  :         s = L_mac (s, *p2++, _sign[2]);

  004f4	8b 45 84	 mov	 eax, DWORD PTR _p2$[ebp]
  004f7	66 8b 08	 mov	 cx, WORD PTR [eax]
  004fa	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv300[ebp], cx
  00501	8b 55 84	 mov	 edx, DWORD PTR _p2$[ebp]
  00504	83 c2 02	 add	 edx, 2
  00507	89 55 84	 mov	 DWORD PTR _p2$[ebp], edx
  0050a	b8 02 00 00 00	 mov	 eax, 2
  0050f	d1 e0		 shl	 eax, 1
  00511	0f b7 4c 05 a8	 movzx	 ecx, WORD PTR __sign$[ebp+eax]
  00516	51		 push	 ecx
  00517	0f b7 95 5e fe
	ff ff		 movzx	 edx, WORD PTR tv300[ebp]
  0051e	52		 push	 edx
  0051f	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  00525	50		 push	 eax
  00526	e8 00 00 00 00	 call	 _L_mac
  0052b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0052e	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 188  :         s = L_mac (s, *p3++, _sign[3]);

  00534	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _p3$[ebp]
  0053a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0053d	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv308[ebp], cx
  00544	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _p3$[ebp]
  0054a	83 c2 02	 add	 edx, 2
  0054d	89 95 78 ff ff
	ff		 mov	 DWORD PTR _p3$[ebp], edx
  00553	b8 02 00 00 00	 mov	 eax, 2
  00558	6b c8 03	 imul	 ecx, eax, 3
  0055b	0f b7 54 0d a8	 movzx	 edx, WORD PTR __sign$[ebp+ecx]
  00560	52		 push	 edx
  00561	0f b7 85 5e fe
	ff ff		 movzx	 eax, WORD PTR tv308[ebp]
  00568	50		 push	 eax
  00569	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  0056f	51		 push	 ecx
  00570	e8 00 00 00 00	 call	 _L_mac
  00575	83 c4 0c	 add	 esp, 12			; 0000000cH
  00578	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 189  :         s = L_mac (s, *p4++, _sign[4]);

  0057e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _p4$[ebp]
  00584	66 8b 08	 mov	 cx, WORD PTR [eax]
  00587	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv316[ebp], cx
  0058e	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _p4$[ebp]
  00594	83 c2 02	 add	 edx, 2
  00597	89 95 6c ff ff
	ff		 mov	 DWORD PTR _p4$[ebp], edx
  0059d	b8 02 00 00 00	 mov	 eax, 2
  005a2	c1 e0 02	 shl	 eax, 2
  005a5	0f b7 4c 05 a8	 movzx	 ecx, WORD PTR __sign$[ebp+eax]
  005aa	51		 push	 ecx
  005ab	0f b7 95 5e fe
	ff ff		 movzx	 edx, WORD PTR tv316[ebp]
  005b2	52		 push	 edx
  005b3	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  005b9	50		 push	 eax
  005ba	e8 00 00 00 00	 call	 _L_mac
  005bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  005c2	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 190  :         s = L_mac (s, *p5++, _sign[5]);

  005c8	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _p5$[ebp]
  005ce	66 8b 08	 mov	 cx, WORD PTR [eax]
  005d1	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv324[ebp], cx
  005d8	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _p5$[ebp]
  005de	83 c2 02	 add	 edx, 2
  005e1	89 95 60 ff ff
	ff		 mov	 DWORD PTR _p5$[ebp], edx
  005e7	b8 02 00 00 00	 mov	 eax, 2
  005ec	6b c8 05	 imul	 ecx, eax, 5
  005ef	0f b7 54 0d a8	 movzx	 edx, WORD PTR __sign$[ebp+ecx]
  005f4	52		 push	 edx
  005f5	0f b7 85 5e fe
	ff ff		 movzx	 eax, WORD PTR tv324[ebp]
  005fc	50		 push	 eax
  005fd	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00603	51		 push	 ecx
  00604	e8 00 00 00 00	 call	 _L_mac
  00609	83 c4 0c	 add	 esp, 12			; 0000000cH
  0060c	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 191  :         s = L_mac (s, *p6++, _sign[6]);

  00612	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _p6$[ebp]
  00618	66 8b 08	 mov	 cx, WORD PTR [eax]
  0061b	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv332[ebp], cx
  00622	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _p6$[ebp]
  00628	83 c2 02	 add	 edx, 2
  0062b	89 95 54 ff ff
	ff		 mov	 DWORD PTR _p6$[ebp], edx
  00631	b8 02 00 00 00	 mov	 eax, 2
  00636	6b c8 06	 imul	 ecx, eax, 6
  00639	0f b7 54 0d a8	 movzx	 edx, WORD PTR __sign$[ebp+ecx]
  0063e	52		 push	 edx
  0063f	0f b7 85 5e fe
	ff ff		 movzx	 eax, WORD PTR tv332[ebp]
  00646	50		 push	 eax
  00647	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  0064d	51		 push	 ecx
  0064e	e8 00 00 00 00	 call	 _L_mac
  00653	83 c4 0c	 add	 esp, 12			; 0000000cH
  00656	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 192  :         s = L_mac (s, *p7++, _sign[7]);

  0065c	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _p7$[ebp]
  00662	66 8b 08	 mov	 cx, WORD PTR [eax]
  00665	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv340[ebp], cx
  0066c	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _p7$[ebp]
  00672	83 c2 02	 add	 edx, 2
  00675	89 95 48 ff ff
	ff		 mov	 DWORD PTR _p7$[ebp], edx
  0067b	b8 02 00 00 00	 mov	 eax, 2
  00680	6b c8 07	 imul	 ecx, eax, 7
  00683	0f b7 54 0d a8	 movzx	 edx, WORD PTR __sign$[ebp+ecx]
  00688	52		 push	 edx
  00689	0f b7 85 5e fe
	ff ff		 movzx	 eax, WORD PTR tv340[ebp]
  00690	50		 push	 eax
  00691	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  00697	51		 push	 ecx
  00698	e8 00 00 00 00	 call	 _L_mac
  0069d	83 c4 0c	 add	 esp, 12			; 0000000cH
  006a0	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 193  :         s = L_mac (s, *p8++, _sign[8]);

  006a6	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _p8$[ebp]
  006ac	66 8b 08	 mov	 cx, WORD PTR [eax]
  006af	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv348[ebp], cx
  006b6	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _p8$[ebp]
  006bc	83 c2 02	 add	 edx, 2
  006bf	89 95 3c ff ff
	ff		 mov	 DWORD PTR _p8$[ebp], edx
  006c5	b8 02 00 00 00	 mov	 eax, 2
  006ca	c1 e0 03	 shl	 eax, 3
  006cd	0f b7 4c 05 a8	 movzx	 ecx, WORD PTR __sign$[ebp+eax]
  006d2	51		 push	 ecx
  006d3	0f b7 95 5e fe
	ff ff		 movzx	 edx, WORD PTR tv348[ebp]
  006da	52		 push	 edx
  006db	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  006e1	50		 push	 eax
  006e2	e8 00 00 00 00	 call	 _L_mac
  006e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  006ea	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 194  :         s = L_mac (s, *p9++, _sign[9]);

  006f0	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _p9$[ebp]
  006f6	66 8b 08	 mov	 cx, WORD PTR [eax]
  006f9	66 89 8d 5e fe
	ff ff		 mov	 WORD PTR tv356[ebp], cx
  00700	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _p9$[ebp]
  00706	83 c2 02	 add	 edx, 2
  00709	89 95 30 ff ff
	ff		 mov	 DWORD PTR _p9$[ebp], edx
  0070f	b8 02 00 00 00	 mov	 eax, 2
  00714	6b c8 09	 imul	 ecx, eax, 9
  00717	0f b7 54 0d a8	 movzx	 edx, WORD PTR __sign$[ebp+ecx]
  0071c	52		 push	 edx
  0071d	0f b7 85 5e fe
	ff ff		 movzx	 eax, WORD PTR tv356[ebp]
  00724	50		 push	 eax
  00725	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _s$[ebp]
  0072b	51		 push	 ecx
  0072c	e8 00 00 00 00	 call	 _L_mac
  00731	83 c4 0c	 add	 esp, 12			; 0000000cH
  00734	89 85 24 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 195  :         y[i] = round (s);                        move16 (); 

  0073a	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  00740	50		 push	 eax
  00741	e8 00 00 00 00	 call	 _round
  00746	83 c4 04	 add	 esp, 4
  00749	0f bf 4d f4	 movsx	 ecx, WORD PTR _i$[ebp]
  0074d	8b 55 18	 mov	 edx, DWORD PTR _y$[ebp]
  00750	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00754	e8 00 00 00 00	 call	 _move16

; 196  :     }

  00759	e9 ec fc ff ff	 jmp	 $LN2@build_code
$LN23@build_code:

; 197  : }

  0075e	52		 push	 edx
  0075f	8b cd		 mov	 ecx, ebp
  00761	50		 push	 eax
  00762	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN27@build_code
  00768	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0076d	58		 pop	 eax
  0076e	5a		 pop	 edx
  0076f	5f		 pop	 edi
  00770	5e		 pop	 esi
  00771	5b		 pop	 ebx
  00772	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00775	33 cd		 xor	 ecx, ebp
  00777	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0077c	81 c4 a4 01 00
	00		 add	 esp, 420		; 000001a4H
  00782	3b ec		 cmp	 ebp, esp
  00784	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00789	8b e5		 mov	 esp, ebp
  0078b	5d		 pop	 ebp
  0078c	c3		 ret	 0
  0078d	8d 49 00	 npad	 3
$LN27@build_code:
  00790	01 00 00 00	 DD	 1
  00794	00 00 00 00	 DD	 $LN26@build_code
$LN26@build_code:
  00798	a8 ff ff ff	 DD	 -88			; ffffffa8H
  0079c	14 00 00 00	 DD	 20			; 00000014H
  007a0	00 00 00 00	 DD	 $LN25@build_code
$LN25@build_code:
  007a4	5f		 DB	 95			; 0000005fH
  007a5	73		 DB	 115			; 00000073H
  007a6	69		 DB	 105			; 00000069H
  007a7	67		 DB	 103			; 00000067H
  007a8	6e		 DB	 110			; 0000006eH
  007a9	00		 DB	 0
_build_code ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\c1035pf.c
;	COMDAT _q_p
_TEXT	SEGMENT
_tmp$ = -8						; size = 2
_ind$ = 8						; size = 4
_n$ = 12						; size = 2
_q_p	PROC						; COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 56   :     Word16 tmp;
; 57   :     
; 58   :     tmp = *ind;                                  move16 (); 

  0001e	8b 45 08	 mov	 eax, DWORD PTR _ind$[ebp]
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	66 89 4d f8	 mov	 WORD PTR _tmp$[ebp], cx
  00028	e8 00 00 00 00	 call	 _move16

; 59   :     
; 60   :     test ();

  0002d	e8 00 00 00 00	 call	 _test

; 61   :     if (sub (n, 5) < 0)

  00032	6a 05		 push	 5
  00034	0f b7 45 0c	 movzx	 eax, WORD PTR _n$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _sub
  0003e	83 c4 08	 add	 esp, 8
  00041	0f bf c8	 movsx	 ecx, ax
  00044	85 c9		 test	 ecx, ecx
  00046	7d 34		 jge	 SHORT $LN2@q_p

; 62   :     {
; 63   :         *ind = (tmp & 0x8) | gray[tmp & 0x7];     logic16 (); logic16 ();

  00048	0f bf 45 f8	 movsx	 eax, WORD PTR _tmp$[ebp]
  0004c	83 e0 08	 and	 eax, 8
  0004f	0f bf 4d f8	 movsx	 ecx, WORD PTR _tmp$[ebp]
  00053	83 e1 07	 and	 ecx, 7
  00056	0f bf 14 4d 00
	00 00 00	 movsx	 edx, WORD PTR _gray[ecx*2]
  0005e	0b c2		 or	 eax, edx
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _ind$[ebp]
  00063	66 89 01	 mov	 WORD PTR [ecx], ax
  00066	e8 00 00 00 00	 call	 _logic16
  0006b	e8 00 00 00 00	 call	 _logic16

; 64   :                                                  logic16 (); move16 ();

  00070	e8 00 00 00 00	 call	 _logic16
  00075	e8 00 00 00 00	 call	 _move16

; 65   :     }
; 66   :     else

  0007a	eb 1f		 jmp	 SHORT $LN3@q_p
$LN2@q_p:

; 67   :     {
; 68   :         *ind = gray[tmp & 0x7];                   logic16 (); move16 (); 

  0007c	0f bf 45 f8	 movsx	 eax, WORD PTR _tmp$[ebp]
  00080	83 e0 07	 and	 eax, 7
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _ind$[ebp]
  00086	66 8b 14 45 00
	00 00 00	 mov	 dx, WORD PTR _gray[eax*2]
  0008e	66 89 11	 mov	 WORD PTR [ecx], dx
  00091	e8 00 00 00 00	 call	 _logic16
  00096	e8 00 00 00 00	 call	 _move16
$LN3@q_p:

; 69   :     }
; 70   : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_q_p	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\c1035pf.c
;	COMDAT _code_10i40_35bits
_TEXT	SEGMENT
_i$ = -3472						; size = 2
_rr$ = -3460						; size = 3200
_sign$ = -252						; size = 80
_dn$ = -164						; size = 80
_codvec$ = -76						; size = 20
_pos_max$ = -48						; size = 10
_ipos$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_cn$ = 12						; size = 4
_h$ = 16						; size = 4
_cod$ = 20						; size = 4
_y$ = 24						; size = 4
_indx$ = 28						; size = 4
_code_10i40_35bits PROC					; COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 0e 00
	00		 sub	 esp, 3668		; 00000e54H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ac f1 ff
	ff		 lea	 edi, DWORD PTR [ebp-3668]
  00012	b9 95 03 00 00	 mov	 ecx, 917		; 00000395H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 241  :     Word16 ipos[NB_PULSE], pos_max[NB_TRACK], codvec[NB_PULSE];
; 242  :     Word16 dn[L_CODE], sign[L_CODE];
; 243  :     Word16 rr[L_CODE][L_CODE], i;
; 244  : 
; 245  :     cor_h_x (h, x, dn, 2);

  00028	6a 02		 push	 2
  0002a	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _dn$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 10	 mov	 edx, DWORD PTR _h$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _cor_h_x
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 246  :     set_sign12k2 (dn, cn, sign, pos_max, NB_TRACK, ipos, STEP);

  00041	6a 05		 push	 5
  00043	8d 45 e4	 lea	 eax, DWORD PTR _ipos$[ebp]
  00046	50		 push	 eax
  00047	6a 05		 push	 5
  00049	8d 4d d0	 lea	 ecx, DWORD PTR _pos_max$[ebp]
  0004c	51		 push	 ecx
  0004d	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR _sign$[ebp]
  00053	52		 push	 edx
  00054	8b 45 0c	 mov	 eax, DWORD PTR _cn$[ebp]
  00057	50		 push	 eax
  00058	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _dn$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 _set_sign12k2
  00064	83 c4 1c	 add	 esp, 28			; 0000001cH

; 247  :     cor_h (h, sign, rr);

  00067	8d 85 7c f2 ff
	ff		 lea	 eax, DWORD PTR _rr$[ebp]
  0006d	50		 push	 eax
  0006e	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _sign$[ebp]
  00074	51		 push	 ecx
  00075	8b 55 10	 mov	 edx, DWORD PTR _h$[ebp]
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 _cor_h
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 248  : 
; 249  :     search_10and8i40 (NB_PULSE, STEP, NB_TRACK,
; 250  :                       dn, rr, ipos, pos_max, codvec);

  00081	8d 45 b4	 lea	 eax, DWORD PTR _codvec$[ebp]
  00084	50		 push	 eax
  00085	8d 4d d0	 lea	 ecx, DWORD PTR _pos_max$[ebp]
  00088	51		 push	 ecx
  00089	8d 55 e4	 lea	 edx, DWORD PTR _ipos$[ebp]
  0008c	52		 push	 edx
  0008d	8d 85 7c f2 ff
	ff		 lea	 eax, DWORD PTR _rr$[ebp]
  00093	50		 push	 eax
  00094	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _dn$[ebp]
  0009a	51		 push	 ecx
  0009b	6a 05		 push	 5
  0009d	6a 05		 push	 5
  0009f	6a 0a		 push	 10			; 0000000aH
  000a1	e8 00 00 00 00	 call	 _search_10and8i40
  000a6	83 c4 20	 add	 esp, 32			; 00000020H

; 251  :    
; 252  :     build_code (codvec, sign, cod, h, y, indx);

  000a9	8b 45 1c	 mov	 eax, DWORD PTR _indx$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d 18	 mov	 ecx, DWORD PTR _y$[ebp]
  000b0	51		 push	 ecx
  000b1	8b 55 10	 mov	 edx, DWORD PTR _h$[ebp]
  000b4	52		 push	 edx
  000b5	8b 45 14	 mov	 eax, DWORD PTR _cod$[ebp]
  000b8	50		 push	 eax
  000b9	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _sign$[ebp]
  000bf	51		 push	 ecx
  000c0	8d 55 b4	 lea	 edx, DWORD PTR _codvec$[ebp]
  000c3	52		 push	 edx
  000c4	e8 00 00 00 00	 call	 _build_code
  000c9	83 c4 18	 add	 esp, 24			; 00000018H

; 253  :     for (i = 0; i < 10; i++)

  000cc	33 c0		 xor	 eax, eax
  000ce	66 89 85 70 f2
	ff ff		 mov	 WORD PTR _i$[ebp], ax
  000d5	eb 12		 jmp	 SHORT $LN3@code_10i40
$LN2@code_10i40:
  000d7	66 8b 85 70 f2
	ff ff		 mov	 ax, WORD PTR _i$[ebp]
  000de	66 83 c0 01	 add	 ax, 1
  000e2	66 89 85 70 f2
	ff ff		 mov	 WORD PTR _i$[ebp], ax
$LN3@code_10i40:
  000e9	0f bf 85 70 f2
	ff ff		 movsx	 eax, WORD PTR _i$[ebp]
  000f0	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000f3	7d 20		 jge	 SHORT $LN4@code_10i40

; 254  :     {
; 255  :         q_p (&indx[i], i);

  000f5	0f b7 85 70 f2
	ff ff		 movzx	 eax, WORD PTR _i$[ebp]
  000fc	50		 push	 eax
  000fd	0f bf 8d 70 f2
	ff ff		 movsx	 ecx, WORD PTR _i$[ebp]
  00104	8b 55 1c	 mov	 edx, DWORD PTR _indx$[ebp]
  00107	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _q_p
  00110	83 c4 08	 add	 esp, 8

; 256  :     }

  00113	eb c2		 jmp	 SHORT $LN2@code_10i40
$LN4@code_10i40:

; 257  :     return;
; 258  : }

  00115	52		 push	 edx
  00116	8b cd		 mov	 ecx, ebp
  00118	50		 push	 eax
  00119	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@code_10i40
  0011f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00124	58		 pop	 eax
  00125	5a		 pop	 edx
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012c	33 cd		 xor	 ecx, ebp
  0012e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00133	81 c4 54 0e 00
	00		 add	 esp, 3668		; 00000e54H
  00139	3b ec		 cmp	 ebp, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
$LN13@code_10i40:
  00144	06 00 00 00	 DD	 6
  00148	00 00 00 00	 DD	 $LN12@code_10i40
$LN12@code_10i40:
  0014c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00150	14 00 00 00	 DD	 20			; 00000014H
  00154	00 00 00 00	 DD	 $LN6@code_10i40
  00158	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0015c	0a 00 00 00	 DD	 10			; 0000000aH
  00160	00 00 00 00	 DD	 $LN7@code_10i40
  00164	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00168	14 00 00 00	 DD	 20			; 00000014H
  0016c	00 00 00 00	 DD	 $LN8@code_10i40
  00170	5c ff ff ff	 DD	 -164			; ffffff5cH
  00174	50 00 00 00	 DD	 80			; 00000050H
  00178	00 00 00 00	 DD	 $LN9@code_10i40
  0017c	04 ff ff ff	 DD	 -252			; ffffff04H
  00180	50 00 00 00	 DD	 80			; 00000050H
  00184	00 00 00 00	 DD	 $LN10@code_10i40
  00188	7c f2 ff ff	 DD	 -3460			; fffff27cH
  0018c	80 0c 00 00	 DD	 3200			; 00000c80H
  00190	00 00 00 00	 DD	 $LN11@code_10i40
$LN11@code_10i40:
  00194	72		 DB	 114			; 00000072H
  00195	72		 DB	 114			; 00000072H
  00196	00		 DB	 0
$LN10@code_10i40:
  00197	73		 DB	 115			; 00000073H
  00198	69		 DB	 105			; 00000069H
  00199	67		 DB	 103			; 00000067H
  0019a	6e		 DB	 110			; 0000006eH
  0019b	00		 DB	 0
$LN9@code_10i40:
  0019c	64		 DB	 100			; 00000064H
  0019d	6e		 DB	 110			; 0000006eH
  0019e	00		 DB	 0
$LN8@code_10i40:
  0019f	63		 DB	 99			; 00000063H
  001a0	6f		 DB	 111			; 0000006fH
  001a1	64		 DB	 100			; 00000064H
  001a2	76		 DB	 118			; 00000076H
  001a3	65		 DB	 101			; 00000065H
  001a4	63		 DB	 99			; 00000063H
  001a5	00		 DB	 0
$LN7@code_10i40:
  001a6	70		 DB	 112			; 00000070H
  001a7	6f		 DB	 111			; 0000006fH
  001a8	73		 DB	 115			; 00000073H
  001a9	5f		 DB	 95			; 0000005fH
  001aa	6d		 DB	 109			; 0000006dH
  001ab	61		 DB	 97			; 00000061H
  001ac	78		 DB	 120			; 00000078H
  001ad	00		 DB	 0
$LN6@code_10i40:
  001ae	69		 DB	 105			; 00000069H
  001af	70		 DB	 112			; 00000070H
  001b0	6f		 DB	 111			; 0000006fH
  001b1	73		 DB	 115			; 00000073H
  001b2	00		 DB	 0
_code_10i40_35bits ENDP
_TEXT	ENDS
END
