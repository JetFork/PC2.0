; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\log2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_log2_id
CONST	SEGMENT
_log2_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_table	DW	00H
	DW	05afH
	DW	0b32H
	DW	0108cH
	DW	015c0H
	DW	01acfH
	DW	01fbcH
	DW	02488H
	DW	02935H
	DW	02dc4H
	DW	03237H
	DW	0368fH
	DW	03aceH
	DW	03ef5H
	DW	04304H
	DW	046fcH
	DW	04adfH
	DW	04eaeH
	DW	05269H
	DW	05611H
	DW	059a7H
	DW	05d2cH
	DW	0609fH
	DW	06403H
	DW	06757H
	DW	06a9bH
	DW	06dd1H
	DW	070faH
	DW	07414H
	DW	07721H
	DW	07a22H
	DW	07d17H
	DW	07fffH
CONST	ENDS
PUBLIC	_Log2
PUBLIC	_Log2_norm
EXTRN	_sub:PROC
EXTRN	_extract_h:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_msu:PROC
EXTRN	_L_shl:PROC
EXTRN	_L_shr:PROC
EXTRN	_L_deposit_h:PROC
EXTRN	_norm_l:PROC
EXTRN	_move16:PROC
EXTRN	_logic16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\log2.c
;	COMDAT _Log2_norm
_TEXT	SEGMENT
_L_y$ = -44						; size = 4
_tmp$ = -32						; size = 2
_a$ = -20						; size = 2
_i$ = -8						; size = 2
_L_x$ = 8						; size = 4
_exp$ = 12						; size = 2
_exponent$ = 16						; size = 4
_fraction$ = 20						; size = 4
_Log2_norm PROC						; COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 71   :     Word16 i, a, tmp;
; 72   :     Word32 L_y;
; 73   : 
; 74   :     test (); 

  0001e	e8 00 00 00 00	 call	 _test

; 75   :     if (L_x <= (Word32) 0)

  00023	83 7d 08 00	 cmp	 DWORD PTR _L_x$[ebp], 0
  00027	7f 1f		 jg	 SHORT $LN1@Log2_norm

; 76   :     {
; 77   :         *exponent = 0;          move16 (); 

  00029	33 c0		 xor	 eax, eax
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _exponent$[ebp]
  0002e	66 89 01	 mov	 WORD PTR [ecx], ax
  00031	e8 00 00 00 00	 call	 _move16

; 78   :         *fraction = 0;          move16 (); 

  00036	33 c0		 xor	 eax, eax
  00038	8b 4d 14	 mov	 ecx, DWORD PTR _fraction$[ebp]
  0003b	66 89 01	 mov	 WORD PTR [ecx], ax
  0003e	e8 00 00 00 00	 call	 _move16

; 79   :         return;

  00043	e9 ef 00 00 00	 jmp	 $LN2@Log2_norm
$LN1@Log2_norm:

; 80   :     }
; 81   : 
; 82   :     *exponent = sub (30, exp);  move16 (); 

  00048	0f b7 45 0c	 movzx	 eax, WORD PTR _exp$[ebp]
  0004c	50		 push	 eax
  0004d	6a 1e		 push	 30			; 0000001eH
  0004f	e8 00 00 00 00	 call	 _sub
  00054	83 c4 08	 add	 esp, 8
  00057	8b 4d 10	 mov	 ecx, DWORD PTR _exponent$[ebp]
  0005a	66 89 01	 mov	 WORD PTR [ecx], ax
  0005d	e8 00 00 00 00	 call	 _move16

; 83   : 
; 84   :     L_x = L_shr (L_x, 9);

  00062	6a 09		 push	 9
  00064	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _L_shr
  0006d	83 c4 08	 add	 esp, 8
  00070	89 45 08	 mov	 DWORD PTR _L_x$[ebp], eax

; 85   :     i = extract_h (L_x);                /* Extract b25-b31 */

  00073	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _extract_h
  0007c	83 c4 04	 add	 esp, 4
  0007f	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 86   :     L_x = L_shr (L_x, 1);

  00083	6a 01		 push	 1
  00085	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _L_shr
  0008e	83 c4 08	 add	 esp, 8
  00091	89 45 08	 mov	 DWORD PTR _L_x$[ebp], eax

; 87   :     a = extract_l (L_x);                /* Extract b10-b24 of fraction */

  00094	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _extract_l
  0009d	83 c4 04	 add	 esp, 4
  000a0	66 89 45 ec	 mov	 WORD PTR _a$[ebp], ax

; 88   :     a = a & (Word16) 0x7fff;    logic16 (); 

  000a4	0f bf 45 ec	 movsx	 eax, WORD PTR _a$[ebp]
  000a8	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  000ad	66 89 45 ec	 mov	 WORD PTR _a$[ebp], ax
  000b1	e8 00 00 00 00	 call	 _logic16

; 89   : 
; 90   :     i = sub (i, 32);

  000b6	6a 20		 push	 32			; 00000020H
  000b8	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 _sub
  000c2	83 c4 08	 add	 esp, 8
  000c5	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 91   : 
; 92   :     L_y = L_deposit_h (table[i]);       /* table[i] << 16        */

  000c9	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000cd	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _table[eax*2]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _L_deposit_h
  000db	83 c4 04	 add	 esp, 4
  000de	89 45 d4	 mov	 DWORD PTR _L_y$[ebp], eax

; 93   :     tmp = sub (table[i], table[i + 1]); /* table[i] - table[i+1] */

  000e1	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000e5	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _table[eax*2+2]
  000ed	51		 push	 ecx
  000ee	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  000f2	0f b7 04 55 00
	00 00 00	 movzx	 eax, WORD PTR _table[edx*2]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _sub
  00100	83 c4 08	 add	 esp, 8
  00103	66 89 45 e0	 mov	 WORD PTR _tmp$[ebp], ax

; 94   :     L_y = L_msu (L_y, tmp, a);          /* L_y -= tmp*a*2        */

  00107	0f b7 45 ec	 movzx	 eax, WORD PTR _a$[ebp]
  0010b	50		 push	 eax
  0010c	0f b7 4d e0	 movzx	 ecx, WORD PTR _tmp$[ebp]
  00110	51		 push	 ecx
  00111	8b 55 d4	 mov	 edx, DWORD PTR _L_y$[ebp]
  00114	52		 push	 edx
  00115	e8 00 00 00 00	 call	 _L_msu
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011d	89 45 d4	 mov	 DWORD PTR _L_y$[ebp], eax

; 95   : 
; 96   :     *fraction = extract_h (L_y);move16 (); 

  00120	8b 45 d4	 mov	 eax, DWORD PTR _L_y$[ebp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 _extract_h
  00129	83 c4 04	 add	 esp, 4
  0012c	8b 4d 14	 mov	 ecx, DWORD PTR _fraction$[ebp]
  0012f	66 89 01	 mov	 WORD PTR [ecx], ax
  00132	e8 00 00 00 00	 call	 _move16
$LN2@Log2_norm:

; 97   : 
; 98   :     return;
; 99   : }

  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx
  0013a	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00140	3b ec		 cmp	 ebp, esp
  00142	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c3		 ret	 0
_Log2_norm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\log2.c
;	COMDAT _Log2
_TEXT	SEGMENT
_exp$ = -8						; size = 2
_L_x$ = 8						; size = 4
_exponent$ = 12						; size = 4
_fraction$ = 16						; size = 4
_Log2	PROC						; COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 118  :     Word16 exp;
; 119  : 
; 120  :     exp = norm_l (L_x);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _L_x$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _norm_l
  00027	83 c4 04	 add	 esp, 4
  0002a	66 89 45 f8	 mov	 WORD PTR _exp$[ebp], ax

; 121  :     Log2_norm (L_shl (L_x, exp), exp, exponent, fraction);

  0002e	8b 45 10	 mov	 eax, DWORD PTR _fraction$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _exponent$[ebp]
  00035	51		 push	 ecx
  00036	0f b7 55 f8	 movzx	 edx, WORD PTR _exp$[ebp]
  0003a	52		 push	 edx
  0003b	0f b7 45 f8	 movzx	 eax, WORD PTR _exp$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _L_x$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _L_shl
  00049	83 c4 08	 add	 esp, 8
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _Log2_norm
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_Log2	ENDP
_TEXT	ENDS
END
