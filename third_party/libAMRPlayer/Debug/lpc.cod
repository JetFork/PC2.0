; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\lpc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_lpc_id
_DATA	SEGMENT
_window_200_40 DW 0a3dH
	DW	0a3fH
	DW	0a45H
	DW	0a4eH
	DW	0a5bH
	DW	0a6cH
	DW	0a81H
	DW	0a99H
	DW	0ab5H
	DW	0ad4H
	DW	0af8H
	DW	0b1fH
	DW	0b4aH
	DW	0b78H
	DW	0baaH
	DW	0be0H
	DW	0c19H
	DW	0c56H
	DW	0c97H
	DW	0cdbH
	DW	0d23H
	DW	0d6eH
	DW	0dbdH
	DW	0e0fH
	DW	0e65H
	DW	0ebeH
	DW	0f1bH
	DW	0f7bH
	DW	0fdfH
	DW	01046H
	DW	010b0H
	DW	0111eH
	DW	0118fH
	DW	01203H
	DW	0127bH
	DW	012f5H
	DW	01373H
	DW	013f4H
	DW	01478H
	DW	01500H
	DW	0158aH
	DW	01617H
	DW	016a8H
	DW	0173bH
	DW	017d1H
	DW	0186aH
	DW	01906H
	DW	019a5H
	DW	01a46H
	DW	01aeaH
	DW	01b91H
	DW	01c3bH
	DW	01ce7H
	DW	01d95H
	DW	01e46H
	DW	01efaH
	DW	01fb0H
	DW	02068H
	DW	02123H
	DW	021e0H
	DW	0229fH
	DW	02361H
	DW	02424H
	DW	024eaH
	DW	025b2H
	DW	0267cH
	DW	02747H
	DW	02815H
	DW	028e4H
	DW	029b5H
	DW	02a88H
	DW	02b5dH
	DW	02c33H
	DW	02d0bH
	DW	02de4H
	DW	02ebfH
	DW	02f9bH
	DW	03079H
	DW	03158H
	DW	03238H
	DW	0331aH
	DW	033fcH
	DW	034e0H
	DW	035c4H
	DW	036aaH
	DW	03791H
	DW	03878H
	DW	03960H
	DW	03a49H
	DW	03b33H
	DW	03c1dH
	DW	03d08H
	DW	03df3H
	DW	03edfH
	DW	03fcbH
	DW	040b8H
	DW	041a5H
	DW	04292H
	DW	0437fH
	DW	0446cH
	DW	0455aH
	DW	04647H
	DW	04734H
	DW	04821H
	DW	0490eH
	DW	049fbH
	DW	04ae7H
	DW	04bd3H
	DW	04cbfH
	DW	04daaH
	DW	04e95H
	DW	04f7eH
	DW	05068H
	DW	05150H
	DW	05238H
	DW	0531fH
	DW	05405H
	DW	054eaH
	DW	055cfH
	DW	056b2H
	DW	05794H
	DW	05874H
	DW	05954H
	DW	05a32H
	DW	05b0fH
	DW	05bebH
	DW	05cc5H
	DW	05d9dH
	DW	05e75H
	DW	05f4aH
	DW	0601eH
	DW	060f0H
	DW	061c0H
	DW	0628fH
	DW	0635bH
	DW	06426H
	DW	064efH
	DW	065b5H
	DW	0667aH
	DW	0673cH
	DW	067fdH
	DW	068bbH
	DW	06977H
	DW	06a30H
	DW	06ae8H
	DW	06b9cH
	DW	06c4fH
	DW	06cffH
	DW	06dacH
	DW	06e57H
	DW	06effH
	DW	06fa5H
	DW	07047H
	DW	070e7H
	DW	07185H
	DW	0721fH
	DW	072b7H
	DW	0734bH
	DW	073ddH
	DW	0746cH
	DW	074f8H
	DW	07581H
	DW	07606H
	DW	07689H
	DW	07708H
	DW	07785H
	DW	077feH
	DW	07874H
	DW	078e6H
	DW	07956H
	DW	079c2H
	DW	07a2aH
	DW	07a90H
	DW	07af2H
	DW	07b50H
	DW	07babH
	DW	07c03H
	DW	07c57H
	DW	07ca7H
	DW	07cf4H
	DW	07d3eH
	DW	07d84H
	DW	07dc6H
	DW	07e05H
	DW	07e40H
	DW	07e78H
	DW	07eacH
	DW	07edcH
	DW	07f09H
	DW	07f31H
	DW	07f57H
	DW	07f78H
	DW	07f96H
	DW	07fb0H
	DW	07fc7H
	DW	07fd9H
	DW	07fe8H
	DW	07ff3H
	DW	07ffbH
	DW	07fffH
	DW	07fffH
	DW	07fe5H
	DW	07f99H
	DW	07f19H
	DW	07e67H
	DW	07d81H
	DW	07c6aH
	DW	07b21H
	DW	079a7H
	DW	077fcH
	DW	07622H
	DW	07418H
	DW	071dfH
	DW	06f7aH
	DW	06ce7H
	DW	06a29H
	DW	06741H
	DW	0642fH
	DW	060f5H
	DW	05d95H
	DW	05a0fH
	DW	05665H
	DW	05299H
	DW	04eabH
	DW	04a9eH
	DW	04674H
	DW	0422dH
	DW	03dccH
	DW	03952H
	DW	034c1H
	DW	0301bH
	DW	02b62H
	DW	02697H
	DW	021bdH
	DW	01cd5H
	DW	017e2H
	DW	012e6H
	DW	0de2H
	DW	08d8H
	DW	03cbH
_DATA	ENDS
CONST	SEGMENT
_lpc_id	DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_window_160_80 DW 0a3dH
	DW	0a40H
	DW	0a49H
	DW	0a58H
	DW	0a6cH
	DW	0a87H
	DW	0aa7H
	DW	0acdH
	DW	0af9H
	DW	0b2bH
	DW	0b63H
	DW	0ba0H
	DW	0be3H
	DW	0c2cH
	DW	0c7aH
	DW	0ccfH
	DW	0d28H
	DW	0d88H
	DW	0dedH
	DW	0e57H
	DW	0ec7H
	DW	0f3cH
	DW	0fb7H
	DW	01037H
	DW	010bdH
	DW	01147H
	DW	011d7H
	DW	0126cH
	DW	01306H
	DW	013a5H
	DW	01449H
	DW	014f2H
	DW	0159fH
	DW	01652H
	DW	01709H
	DW	017c4H
	DW	01885H
	DW	01949H
	DW	01a12H
	DW	01ae0H
	DW	01bb1H
	DW	01c87H
	DW	01d61H
	DW	01e3eH
	DW	01f20H
	DW	02005H
	DW	020eeH
	DW	021dbH
	DW	022cbH
	DW	023bfH
	DW	024b6H
	DW	025b0H
	DW	026aeH
	DW	027aeH
	DW	028b1H
	DW	029b8H
	DW	02ac1H
	DW	02bccH
	DW	02cdaH
	DW	02debH
	DW	02efeH
	DW	03013H
	DW	0312aH
	DW	03243H
	DW	0335eH
	DW	0347bH
	DW	0359aH
	DW	036baH
	DW	037dbH
	DW	038feH
	DW	03a22H
	DW	03b47H
	DW	03c6dH
	DW	03d94H
	DW	03ebcH
	DW	03fe4H
	DW	0410dH
	DW	04236H
	DW	04360H
	DW	0448aH
	DW	045b4H
	DW	046ddH
	DW	04807H
	DW	04930H
	DW	04a59H
	DW	04b82H
	DW	04ca9H
	DW	04dd0H
	DW	04ef6H
	DW	0501bH
	DW	0513fH
	DW	05262H
	DW	05384H
	DW	054a4H
	DW	055c2H
	DW	056dfH
	DW	057faH
	DW	05913H
	DW	05a2bH
	DW	05b40H
	DW	05c53H
	DW	05d63H
	DW	05e71H
	DW	05f7dH
	DW	06086H
	DW	0618cH
	DW	0628fH
	DW	06390H
	DW	0648dH
	DW	06587H
	DW	0667eH
	DW	06772H
	DW	06862H
	DW	0694fH
	DW	06a38H
	DW	06b1eH
	DW	06bffH
	DW	06cddH
	DW	06db7H
	DW	06e8cH
	DW	06f5eH
	DW	0702bH
	DW	070f4H
	DW	071b9H
	DW	07279H
	DW	07335H
	DW	073ecH
	DW	0749eH
	DW	0754cH
	DW	075f5H
	DW	07699H
	DW	07737H
	DW	077d1H
	DW	07866H
	DW	078f6H
	DW	07981H
	DW	07a06H
	DW	07a86H
	DW	07b01H
	DW	07b76H
	DW	07be6H
	DW	07c51H
	DW	07cb6H
	DW	07d15H
	DW	07d6fH
	DW	07dc3H
	DW	07e11H
	DW	07e5aH
	DW	07e9dH
	DW	07edbH
	DW	07f12H
	DW	07f44H
	DW	07f70H
	DW	07f96H
	DW	07fb7H
	DW	07fd1H
	DW	07fe6H
	DW	07ff4H
	DW	07ffdH
	DW	07fffH
	DW	07fffH
	DW	07ff4H
	DW	07fd0H
	DW	07f95H
	DW	07f42H
	DW	07ed7H
	DW	07e55H
	DW	07dbcH
	DW	07d0cH
	DW	07c45H
	DW	07b68H
	DW	07a75H
	DW	0796cH
	DW	0784eH
	DW	0771cH
	DW	075d5H
	DW	0747aH
	DW	0730dH
	DW	0718cH
	DW	06ffaH
	DW	06e57H
	DW	06ca2H
	DW	06adeH
	DW	0690bH
	DW	06728H
	DW	06539H
	DW	0633cH
	DW	06133H
	DW	05f1eH
	DW	05cffH
	DW	05ad7H
	DW	058a5H
	DW	0566cH
	DW	0542cH
	DW	051e5H
	DW	04f9aH
	DW	04d4aH
	DW	04af7H
	DW	048a1H
	DW	0464aH
	DW	043f3H
	DW	0419cH
	DW	03f47H
	DW	03cf4H
	DW	03aa4H
	DW	03858H
	DW	03612H
	DW	033d1H
	DW	03198H
	DW	02f67H
	DW	02d3eH
	DW	02b1fH
	DW	0290bH
	DW	02702H
	DW	02505H
	DW	02315H
	DW	02133H
	DW	01f5fH
	DW	01d9bH
	DW	01be7H
	DW	01a43H
	DW	018b1H
	DW	01731H
	DW	015c3H
	DW	01469H
	DW	01322H
	DW	011efH
	DW	010d1H
	DW	0fc9H
	DW	0ed6H
	DW	0df9H
	DW	0d32H
	DW	0c82H
	DW	0be8H
	DW	0b66H
	DW	0afcH
	DW	0aa9H
	DW	0a6dH
	DW	0a49H
	DW	0a3dH
_window_232_8 DW 0a3dH
	DW	0a3fH
	DW	0a43H
	DW	0a4aH
	DW	0a54H
	DW	0a60H
	DW	0a6fH
	DW	0a81H
	DW	0a96H
	DW	0aaeH
	DW	0ac8H
	DW	0ae5H
	DW	0b05H
	DW	0b27H
	DW	0b4dH
	DW	0b75H
	DW	0b9fH
	DW	0bcdH
	DW	0bfdH
	DW	0c30H
	DW	0c65H
	DW	0c9dH
	DW	0cd8H
	DW	0d16H
	DW	0d56H
	DW	0d99H
	DW	0ddeH
	DW	0e26H
	DW	0e71H
	DW	0ebeH
	DW	0f0dH
	DW	0f60H
	DW	0fb5H
	DW	0100cH
	DW	01066H
	DW	010c2H
	DW	01121H
	DW	01182H
	DW	011e6H
	DW	0124cH
	DW	012b4H
	DW	0131fH
	DW	0138cH
	DW	013fcH
	DW	0146eH
	DW	014e2H
	DW	01558H
	DW	015d1H
	DW	0164cH
	DW	016c9H
	DW	01748H
	DW	017caH
	DW	0184dH
	DW	018d3H
	DW	0195bH
	DW	019e5H
	DW	01a71H
	DW	01afeH
	DW	01b8eH
	DW	01c20H
	DW	01cb4H
	DW	01d4aH
	DW	01de1H
	DW	01e7bH
	DW	01f16H
	DW	01fb3H
	DW	02052H
	DW	020f2H
	DW	02195H
	DW	02239H
	DW	022deH
	DW	02385H
	DW	0242eH
	DW	024d8H
	DW	02584H
	DW	02632H
	DW	026e0H
	DW	02791H
	DW	02842H
	DW	028f5H
	DW	029a9H
	DW	02a5fH
	DW	02b16H
	DW	02bceH
	DW	02c87H
	DW	02d42H
	DW	02dfdH
	DW	02ebaH
	DW	02f78H
	DW	03036H
	DW	030f6H
	DW	031b7H
	DW	03278H
	DW	0333bH
	DW	033feH
	DW	034c2H
	DW	03587H
	DW	0364dH
	DW	03713H
	DW	037daH
	DW	038a1H
	DW	0396aH
	DW	03a32H
	DW	03afcH
	DW	03bc5H
	DW	03c90H
	DW	03d5aH
	DW	03e25H
	DW	03ef0H
	DW	03fbcH
	DW	04088H
	DW	04154H
	DW	04220H
	DW	042ecH
	DW	043b9H
	DW	04485H
	DW	04552H
	DW	0461eH
	DW	046ebH
	DW	047b7H
	DW	04884H
	DW	04950H
	DW	04a1cH
	DW	04ae7H
	DW	04bb3H
	DW	04c7eH
	DW	04d49H
	DW	04e13H
	DW	04eddH
	DW	04fa6H
	DW	0506fH
	DW	05138H
	DW	05200H
	DW	052c7H
	DW	0538eH
	DW	05454H
	DW	05519H
	DW	055ddH
	DW	056a1H
	DW	05764H
	DW	05826H
	DW	058e7H
	DW	059a7H
	DW	05a67H
	DW	05b25H
	DW	05be2H
	DW	05c9eH
	DW	05d59H
	DW	05e13H
	DW	05eccH
	DW	05f83H
	DW	06039H
	DW	060eeH
	DW	061a2H
	DW	06254H
	DW	06305H
	DW	063b5H
	DW	06463H
	DW	0650fH
	DW	065baH
	DW	06664H
	DW	0670cH
	DW	067b2H
	DW	06857H
	DW	068faH
	DW	0699bH
	DW	06a3bH
	DW	06ad9H
	DW	06b75H
	DW	06c10H
	DW	06ca8H
	DW	06d3fH
	DW	06dd3H
	DW	06e66H
	DW	06ef7H
	DW	06f86H
	DW	07013H
	DW	0709eH
	DW	07127H
	DW	071aeH
	DW	07232H
	DW	072b5H
	DW	07335H
	DW	073b3H
	DW	0742fH
	DW	074a9H
	DW	07521H
	DW	07596H
	DW	07609H
	DW	0767aH
	DW	076e8H
	DW	07754H
	DW	077beH
	DW	07825H
	DW	0788aH
	DW	078ecH
	DW	0794cH
	DW	079aaH
	DW	07a05H
	DW	07a5eH
	DW	07ab4H
	DW	07b07H
	DW	07b58H
	DW	07ba7H
	DW	07bf2H
	DW	07c3cH
	DW	07c82H
	DW	07cc6H
	DW	07d08H
	DW	07d47H
	DW	07d83H
	DW	07dbcH
	DW	07df3H
	DW	07e27H
	DW	07e59H
	DW	07e88H
	DW	07eb4H
	DW	07eddH
	DW	07f04H
	DW	07f28H
	DW	07f49H
	DW	07f67H
	DW	07f83H
	DW	07f9cH
	DW	07fb2H
	DW	07fc5H
	DW	07fd6H
	DW	07fe4H
	DW	07fefH
	DW	07ff7H
	DW	07ffdH
	DW	07fffH
	DW	07fffH
	DW	07d61H
	DW	075a0H
	DW	0690fH
	DW	05830H
	DW	043b5H
	DW	02c74H
	DW	01362H
CONST	ENDS
PUBLIC	_lpc_init
PUBLIC	_lpc_reset
PUBLIC	_lpc_exit
PUBLIC	_lpc
PUBLIC	??_C@_0BN@EGJGKIKL@lpc_init?3?5invalid?5parameter?6?$AA@ ; `string'
PUBLIC	??_C@_0CK@OIPMLFMC@lpc_init?3?5can?5not?5malloc?5state?5s@ ; `string'
PUBLIC	??_C@_0BO@NPOMNNKD@lpc_reset?3?5invalid?5parameter?6?$AA@ ; `string'
EXTRN	_Levinson_init:PROC
EXTRN	_Levinson_reset:PROC
EXTRN	_Levinson_exit:PROC
EXTRN	_Levinson:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_sub:PROC
EXTRN	_Autocorr:PROC
EXTRN	_Lag_window:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BO@NPOMNNKD@lpc_reset?3?5invalid?5parameter?6?$AA@
CONST	SEGMENT
??_C@_0BO@NPOMNNKD@lpc_reset?3?5invalid?5parameter?6?$AA@ DB 'lpc_reset: '
	DB	'invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OIPMLFMC@lpc_init?3?5can?5not?5malloc?5state?5s@
CONST	SEGMENT
??_C@_0CK@OIPMLFMC@lpc_init?3?5can?5not?5malloc?5state?5s@ DB 'lpc_init: '
	DB	'can not malloc state structure', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EGJGKIKL@lpc_init?3?5invalid?5parameter?6?$AA@
CONST	SEGMENT
??_C@_0BN@EGJGKIKL@lpc_init?3?5invalid?5parameter?6?$AA@ DB 'lpc_init: in'
	DB	'valid parameter', 0aH, 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lpc.c
;	COMDAT _lpc
_TEXT	SEGMENT
_rHigh$ = -80						; size = 22
_rLow$ = -48						; size = 22
_rc$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_st$ = 8						; size = 4
_mode$ = 12						; size = 4
_x$ = 16						; size = 4
_x_12k2$ = 20						; size = 4
_a$ = 24						; size = 4
_lpc	PROC						; COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00012	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 136  :    Word16 rc[4];                  /* First 4 reflection coefficients Q15 */
; 137  :    Word16 rLow[MP1], rHigh[MP1];  /* Autocorrelations low and hi      */
; 138  :                                   /* No fixed Q value but normalized  */
; 139  :                                   /* so that overflow is avoided      */
; 140  :    
; 141  :    test ();

  00028	e8 00 00 00 00	 call	 _test

; 142  :    if ( sub (mode, MR122) == 0)

  0002d	6a 07		 push	 7
  0002f	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _sub
  00039	83 c4 08	 add	 esp, 8
  0003c	0f bf c8	 movsx	 ecx, ax
  0003f	85 c9		 test	 ecx, ecx
  00041	0f 85 a8 00 00
	00		 jne	 $LN2@lpc

; 143  :    {
; 144  :        /* Autocorrelations */
; 145  :        Autocorr(x_12k2, M, rHigh, rLow, window_160_80);              

  00047	68 00 00 00 00	 push	 OFFSET _window_160_80
  0004c	8d 45 d0	 lea	 eax, DWORD PTR _rLow$[ebp]
  0004f	50		 push	 eax
  00050	8d 4d b0	 lea	 ecx, DWORD PTR _rHigh$[ebp]
  00053	51		 push	 ecx
  00054	6a 0a		 push	 10			; 0000000aH
  00056	8b 55 14	 mov	 edx, DWORD PTR _x_12k2$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 _Autocorr
  0005f	83 c4 14	 add	 esp, 20			; 00000014H

; 146  :        /* Lag windowing    */
; 147  :        Lag_window(M, rHigh, rLow);                                   

  00062	8d 45 d0	 lea	 eax, DWORD PTR _rLow$[ebp]
  00065	50		 push	 eax
  00066	8d 4d b0	 lea	 ecx, DWORD PTR _rHigh$[ebp]
  00069	51		 push	 ecx
  0006a	6a 0a		 push	 10			; 0000000aH
  0006c	e8 00 00 00 00	 call	 _Lag_window
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 148  :        /* Levinson Durbin  */
; 149  :        Levinson(st->levinsonSt, rHigh, rLow, &a[MP1], rc);     

  00074	8d 45 f0	 lea	 eax, DWORD PTR _rc$[ebp]
  00077	50		 push	 eax
  00078	b9 02 00 00 00	 mov	 ecx, 2
  0007d	6b d1 0b	 imul	 edx, ecx, 11
  00080	03 55 18	 add	 edx, DWORD PTR _a$[ebp]
  00083	52		 push	 edx
  00084	8d 45 d0	 lea	 eax, DWORD PTR _rLow$[ebp]
  00087	50		 push	 eax
  00088	8d 4d b0	 lea	 ecx, DWORD PTR _rHigh$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  0008f	8b 02		 mov	 eax, DWORD PTR [edx]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _Levinson
  00097	83 c4 14	 add	 esp, 20			; 00000014H

; 150  : 
; 151  :        /* Autocorrelations */
; 152  :        Autocorr(x_12k2, M, rHigh, rLow, window_232_8);                  

  0009a	68 00 00 00 00	 push	 OFFSET _window_232_8
  0009f	8d 45 d0	 lea	 eax, DWORD PTR _rLow$[ebp]
  000a2	50		 push	 eax
  000a3	8d 4d b0	 lea	 ecx, DWORD PTR _rHigh$[ebp]
  000a6	51		 push	 ecx
  000a7	6a 0a		 push	 10			; 0000000aH
  000a9	8b 55 14	 mov	 edx, DWORD PTR _x_12k2$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 _Autocorr
  000b2	83 c4 14	 add	 esp, 20			; 00000014H

; 153  :        /* Lag windowing    */
; 154  :        Lag_window(M, rHigh, rLow);                                  

  000b5	8d 45 d0	 lea	 eax, DWORD PTR _rLow$[ebp]
  000b8	50		 push	 eax
  000b9	8d 4d b0	 lea	 ecx, DWORD PTR _rHigh$[ebp]
  000bc	51		 push	 ecx
  000bd	6a 0a		 push	 10			; 0000000aH
  000bf	e8 00 00 00 00	 call	 _Lag_window
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 155  :        /* Levinson Durbin  */
; 156  :        Levinson(st->levinsonSt, rHigh, rLow, &a[MP1 * 3], rc); 

  000c7	8d 45 f0	 lea	 eax, DWORD PTR _rc$[ebp]
  000ca	50		 push	 eax
  000cb	b9 02 00 00 00	 mov	 ecx, 2
  000d0	6b d1 21	 imul	 edx, ecx, 33
  000d3	03 55 18	 add	 edx, DWORD PTR _a$[ebp]
  000d6	52		 push	 edx
  000d7	8d 45 d0	 lea	 eax, DWORD PTR _rLow$[ebp]
  000da	50		 push	 eax
  000db	8d 4d b0	 lea	 ecx, DWORD PTR _rHigh$[ebp]
  000de	51		 push	 ecx
  000df	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  000e2	8b 02		 mov	 eax, DWORD PTR [edx]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _Levinson
  000ea	83 c4 14	 add	 esp, 20			; 00000014H

; 157  :    }
; 158  :    else

  000ed	eb 53		 jmp	 SHORT $LN1@lpc
$LN2@lpc:

; 159  :    {
; 160  :        /* Autocorrelations */
; 161  :        Autocorr(x, M, rHigh, rLow, window_200_40);                 

  000ef	68 00 00 00 00	 push	 OFFSET _window_200_40
  000f4	8d 45 d0	 lea	 eax, DWORD PTR _rLow$[ebp]
  000f7	50		 push	 eax
  000f8	8d 4d b0	 lea	 ecx, DWORD PTR _rHigh$[ebp]
  000fb	51		 push	 ecx
  000fc	6a 0a		 push	 10			; 0000000aH
  000fe	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00101	52		 push	 edx
  00102	e8 00 00 00 00	 call	 _Autocorr
  00107	83 c4 14	 add	 esp, 20			; 00000014H

; 162  :        /* Lag windowing    */
; 163  :        Lag_window(M, rHigh, rLow);                                   

  0010a	8d 45 d0	 lea	 eax, DWORD PTR _rLow$[ebp]
  0010d	50		 push	 eax
  0010e	8d 4d b0	 lea	 ecx, DWORD PTR _rHigh$[ebp]
  00111	51		 push	 ecx
  00112	6a 0a		 push	 10			; 0000000aH
  00114	e8 00 00 00 00	 call	 _Lag_window
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH

; 164  :        /* Levinson Durbin  */
; 165  :        Levinson(st->levinsonSt, rHigh, rLow, &a[MP1 * 3], rc); 

  0011c	8d 45 f0	 lea	 eax, DWORD PTR _rc$[ebp]
  0011f	50		 push	 eax
  00120	b9 02 00 00 00	 mov	 ecx, 2
  00125	6b d1 21	 imul	 edx, ecx, 33
  00128	03 55 18	 add	 edx, DWORD PTR _a$[ebp]
  0012b	52		 push	 edx
  0012c	8d 45 d0	 lea	 eax, DWORD PTR _rLow$[ebp]
  0012f	50		 push	 eax
  00130	8d 4d b0	 lea	 ecx, DWORD PTR _rHigh$[ebp]
  00133	51		 push	 ecx
  00134	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  00137	8b 02		 mov	 eax, DWORD PTR [edx]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _Levinson
  0013f	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@lpc:

; 166  :    }
; 167  :    
; 168  :    return 0;

  00142	33 c0		 xor	 eax, eax

; 169  : }

  00144	52		 push	 edx
  00145	8b cd		 mov	 ecx, ebp
  00147	50		 push	 eax
  00148	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@lpc
  0014e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00153	58		 pop	 eax
  00154	5a		 pop	 edx
  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015b	33 cd		 xor	 ecx, ebp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  00168	3b ec		 cmp	 ebp, esp
  0016a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c3		 ret	 0
  00173	90		 npad	 1
$LN9@lpc:
  00174	03 00 00 00	 DD	 3
  00178	00 00 00 00	 DD	 $LN8@lpc
$LN8@lpc:
  0017c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00180	08 00 00 00	 DD	 8
  00184	00 00 00 00	 DD	 $LN5@lpc
  00188	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0018c	16 00 00 00	 DD	 22			; 00000016H
  00190	00 00 00 00	 DD	 $LN6@lpc
  00194	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00198	16 00 00 00	 DD	 22			; 00000016H
  0019c	00 00 00 00	 DD	 $LN7@lpc
$LN7@lpc:
  001a0	72		 DB	 114			; 00000072H
  001a1	48		 DB	 72			; 00000048H
  001a2	69		 DB	 105			; 00000069H
  001a3	67		 DB	 103			; 00000067H
  001a4	68		 DB	 104			; 00000068H
  001a5	00		 DB	 0
$LN6@lpc:
  001a6	72		 DB	 114			; 00000072H
  001a7	4c		 DB	 76			; 0000004cH
  001a8	6f		 DB	 111			; 0000006fH
  001a9	77		 DB	 119			; 00000077H
  001aa	00		 DB	 0
$LN5@lpc:
  001ab	72		 DB	 114			; 00000072H
  001ac	63		 DB	 99			; 00000063H
  001ad	00		 DB	 0
_lpc	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lpc.c
;	COMDAT _lpc_exit
_TEXT	SEGMENT
_state$ = 8						; size = 4
_lpc_exit PROC						; COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 116  :   if (state == NULL || *state == NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	74 08		 je	 SHORT $LN1@lpc_exit
  00024	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 02		 jne	 SHORT $LN2@lpc_exit
$LN1@lpc_exit:

; 117  :       return;

  0002c	eb 2f		 jmp	 SHORT $LN3@lpc_exit
$LN2@lpc_exit:

; 118  : 
; 119  :   Levinson_exit(&(*state)->levinsonSt);

  0002e	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _Levinson_exit
  00039	83 c4 04	 add	 esp, 4

; 120  : 
; 121  :   /* deallocate memory */
; 122  :   free(*state);

  0003c	8b f4		 mov	 esi, esp
  0003e	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	51		 push	 ecx
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0004a	83 c4 04	 add	 esp, 4
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 123  :   *state = NULL;

  00054	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00057	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@lpc_exit:

; 124  :   
; 125  :   return;
; 126  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_lpc_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lpc.c
;	COMDAT _lpc_reset
_TEXT	SEGMENT
_state$ = 8						; size = 4
_lpc_reset PROC						; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 97   :   
; 98   :   if (state == (lpcState *) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 35		 jne	 SHORT $LN1@lpc_reset

; 99   :       fprintf(stderr, "lpc_reset: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NPOMNNKD@lpc_reset?3?5invalid?5parameter?6?$AA@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 100  :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 10		 jmp	 SHORT $LN2@lpc_reset
$LN1@lpc_reset:

; 101  :   }
; 102  :   
; 103  :   Levinson_reset(state->levinsonSt);

  00059	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 _Levinson_reset
  00064	83 c4 04	 add	 esp, 4

; 104  : 
; 105  :   return 0;

  00067	33 c0		 xor	 eax, eax
$LN2@lpc_reset:

; 106  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_lpc_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lpc.c
;	COMDAT _lpc_init
_TEXT	SEGMENT
_s$ = -8						; size = 4
_state$ = 8						; size = 4
_lpc_init PROC						; COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 60   :   lpcState* s;
; 61   :  
; 62   :   if (state == (lpcState **) NULL){

  0001e	83 7d 08 00	 cmp	 DWORD PTR _state$[ebp], 0
  00022	75 38		 jne	 SHORT $LN3@lpc_init

; 63   :       fprintf(stderr, "lpc_init: invalid parameter\n");

  00024	8b f4		 mov	 esi, esp
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EGJGKIKL@lpc_init?3?5invalid?5parameter?6?$AA@
  0002b	8b fc		 mov	 edi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00033	3b fc		 cmp	 edi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003f	d1 e1		 shl	 ecx, 1
  00041	03 c1		 add	 eax, ecx
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 64   :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	e9 9b 00 00 00	 jmp	 $LN4@lpc_init
$LN3@lpc_init:

; 65   :   }
; 66   :   *state = NULL;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 67   :  
; 68   :   /* allocate memory */
; 69   :   if ((s= (lpcState *) malloc(sizeof(lpcState))) == NULL){

  00065	8b f4		 mov	 esi, esp
  00067	6a 04		 push	 4
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006f	83 c4 04	 add	 esp, 4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  0007c	83 7d f8 00	 cmp	 DWORD PTR _s$[ebp], 0
  00080	75 35		 jne	 SHORT $LN2@lpc_init

; 70   :       fprintf(stderr, "lpc_init: can not malloc state structure\n");

  00082	8b f4		 mov	 esi, esp
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@OIPMLFMC@lpc_init?3?5can?5not?5malloc?5state?5s@
  00089	8b fc		 mov	 edi, esp
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00091	3b fc		 cmp	 edi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009d	d1 e1		 shl	 ecx, 1
  0009f	03 c1		 add	 eax, ecx
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  000a8	83 c4 08	 add	 esp, 8
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 71   :       return -1;

  000b2	83 c8 ff	 or	 eax, -1
  000b5	eb 40		 jmp	 SHORT $LN4@lpc_init
$LN2@lpc_init:

; 72   :   }
; 73   :   
; 74   :   s->levinsonSt = NULL;

  000b7	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000ba	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 75   :   
; 76   :   /* Init sub states */
; 77   :   if (Levinson_init(&s->levinsonSt)) {

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _Levinson_init
  000c9	83 c4 04	 add	 esp, 4
  000cc	85 c0		 test	 eax, eax
  000ce	74 11		 je	 SHORT $LN1@lpc_init

; 78   :      lpc_exit(&s);

  000d0	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _lpc_exit
  000d9	83 c4 04	 add	 esp, 4

; 79   :      return -1;

  000dc	83 c8 ff	 or	 eax, -1
  000df	eb 16		 jmp	 SHORT $LN4@lpc_init
$LN1@lpc_init:

; 80   :   }
; 81   : 
; 82   : 
; 83   :   lpc_reset(s);

  000e1	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _lpc_reset
  000ea	83 c4 04	 add	 esp, 4

; 84   :   *state = s;

  000ed	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  000f0	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000f3	89 08		 mov	 DWORD PTR [eax], ecx

; 85   :   
; 86   :   return 0;

  000f5	33 c0		 xor	 eax, eax
$LN4@lpc_init:

; 87   : }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lpc_init
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00111	3b ec		 cmp	 ebp, esp
  00113	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
$LN8@lpc_init:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN7@lpc_init
$LN7@lpc_init:
  00124	f8 ff ff ff	 DD	 -8			; fffffff8H
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN6@lpc_init
$LN6@lpc_init:
  00130	73		 DB	 115			; 00000073H
  00131	00		 DB	 0
_lpc_init ENDP
_TEXT	ENDS
END
