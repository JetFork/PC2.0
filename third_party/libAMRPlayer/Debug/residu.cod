; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\residu.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_residu_id
CONST	SEGMENT
_residu_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Residu
EXTRN	_L_mult:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_shl:PROC
EXTRN	_move16:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\residu.c
;	COMDAT _Residu
_TEXT	SEGMENT
_s$ = -32						; size = 4
_j$ = -20						; size = 2
_i$ = -8						; size = 2
_a$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_lg$ = 20						; size = 2
_Residu	PROC						; COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 60   :     Word16 i, j;
; 61   :     Word32 s;
; 62   : 
; 63   :     for (i = 0; i < lg; i++)

  0001e	33 c0		 xor	 eax, eax
  00020	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00024	eb 0c		 jmp	 SHORT $LN6@Residu
$LN5@Residu:
  00026	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0002a	66 83 c0 01	 add	 ax, 1
  0002e	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN6@Residu:
  00032	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00036	0f bf 4d 14	 movsx	 ecx, WORD PTR _lg$[ebp]
  0003a	3b c1		 cmp	 eax, ecx
  0003c	0f 8d a8 00 00
	00		 jge	 $LN7@Residu

; 64   :     {
; 65   :         s = L_mult (x[i], a[0]);

  00042	b8 02 00 00 00	 mov	 eax, 2
  00047	6b c8 00	 imul	 ecx, eax, 0
  0004a	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0004d	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00051	50		 push	 eax
  00052	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00056	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00059	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _L_mult
  00063	83 c4 08	 add	 esp, 8
  00066	89 45 e0	 mov	 DWORD PTR _s$[ebp], eax

; 66   :         for (j = 1; j <= M; j++)

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
  00072	eb 0c		 jmp	 SHORT $LN3@Residu
$LN2@Residu:
  00074	66 8b 45 ec	 mov	 ax, WORD PTR _j$[ebp]
  00078	66 83 c0 01	 add	 ax, 1
  0007c	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
$LN3@Residu:
  00080	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  00084	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00087	7f 2f		 jg	 SHORT $LN1@Residu

; 67   :         {
; 68   :             s = L_mac (s, a[j], x[i - j]);

  00089	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0008d	0f bf 4d ec	 movsx	 ecx, WORD PTR _j$[ebp]
  00091	2b c1		 sub	 eax, ecx
  00093	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00096	0f b7 04 42	 movzx	 eax, WORD PTR [edx+eax*2]
  0009a	50		 push	 eax
  0009b	0f bf 4d ec	 movsx	 ecx, WORD PTR _j$[ebp]
  0009f	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000a2	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  000a6	50		 push	 eax
  000a7	8b 4d e0	 mov	 ecx, DWORD PTR _s$[ebp]
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 _L_mac
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b3	89 45 e0	 mov	 DWORD PTR _s$[ebp], eax

; 69   :         }

  000b6	eb bc		 jmp	 SHORT $LN2@Residu
$LN1@Residu:

; 70   :         s = L_shl (s, 3);

  000b8	6a 03		 push	 3
  000ba	8b 45 e0	 mov	 eax, DWORD PTR _s$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _L_shl
  000c3	83 c4 08	 add	 esp, 8
  000c6	89 45 e0	 mov	 DWORD PTR _s$[ebp], eax

; 71   :         y[i] = round (s);       move16 (); 

  000c9	8b 45 e0	 mov	 eax, DWORD PTR _s$[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _round
  000d2	83 c4 04	 add	 esp, 4
  000d5	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000d9	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  000dc	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000e0	e8 00 00 00 00	 call	 _move16

; 72   :     }

  000e5	e9 3c ff ff ff	 jmp	 $LN5@Residu
$LN7@Residu:

; 73   :     return;
; 74   : }

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000f3	3b ec		 cmp	 ebp, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
_Residu	ENDP
_TEXT	ENDS
END
