; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\ol_ltp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ol_ltp_id
CONST	SEGMENT
_ol_ltp_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_ol_ltp
EXTRN	_Pitch_ol_wgh:PROC
EXTRN	_Pitch_ol:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	_sub:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\ol_ltp.c
;	COMDAT _ol_ltp
_TEXT	SEGMENT
_st$ = 8						; size = 4
_vadSt$ = 12						; size = 4
_mode$ = 16						; size = 4
_wsp$ = 20						; size = 4
_T_op$ = 24						; size = 4
_old_lags$ = 28						; size = 4
_ol_gain_flg$ = 32					; size = 4
_idx$ = 36						; size = 2
_dtx$ = 40						; size = 4
_ol_ltp	PROC						; COMDAT

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 61   :    test ();   

  0001e	e8 00 00 00 00	 call	 _test

; 62   :    if (sub (mode, MR102) != 0 )

  00023	6a 06		 push	 6
  00025	0f b7 45 10	 movzx	 eax, WORD PTR _mode$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _sub
  0002f	83 c4 08	 add	 esp, 8
  00032	0f bf c8	 movsx	 ecx, ax
  00035	85 c9		 test	 ecx, ecx
  00037	74 2c		 je	 SHORT $LN8@ol_ltp

; 63   :    {
; 64   :       ol_gain_flg[0] = 0;                                       move16 ();

  00039	b8 02 00 00 00	 mov	 eax, 2
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	33 d2		 xor	 edx, edx
  00043	8b 45 20	 mov	 eax, DWORD PTR _ol_gain_flg$[ebp]
  00046	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx
  0004a	e8 00 00 00 00	 call	 _move16

; 65   :       ol_gain_flg[1] = 0;                                       move16 ();

  0004f	b8 02 00 00 00	 mov	 eax, 2
  00054	c1 e0 00	 shl	 eax, 0
  00057	33 c9		 xor	 ecx, ecx
  00059	8b 55 20	 mov	 edx, DWORD PTR _ol_gain_flg$[ebp]
  0005c	66 89 0c 02	 mov	 WORD PTR [edx+eax], cx
  00060	e8 00 00 00 00	 call	 _move16
$LN8@ol_ltp:

; 66   :    }
; 67   :    
; 68   :    test (); test ();

  00065	e8 00 00 00 00	 call	 _test
  0006a	e8 00 00 00 00	 call	 _test

; 69   :    if (sub (mode, MR475) == 0 || sub (mode, MR515) == 0 )

  0006f	6a 00		 push	 0
  00071	0f b7 45 10	 movzx	 eax, WORD PTR _mode$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _sub
  0007b	83 c4 08	 add	 esp, 8
  0007e	0f bf c8	 movsx	 ecx, ax
  00081	85 c9		 test	 ecx, ecx
  00083	74 16		 je	 SHORT $LN6@ol_ltp
  00085	6a 01		 push	 1
  00087	0f b7 45 10	 movzx	 eax, WORD PTR _mode$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _sub
  00091	83 c4 08	 add	 esp, 8
  00094	0f bf c8	 movsx	 ecx, ax
  00097	85 c9		 test	 ecx, ecx
  00099	75 39		 jne	 SHORT $LN7@ol_ltp
$LN6@ol_ltp:

; 70   :    {
; 71   :       *T_op = Pitch_ol(vadSt, mode, wsp, PIT_MIN, PIT_MAX, L_FRAME, idx, dtx);

  0009b	8b 45 28	 mov	 eax, DWORD PTR _dtx$[ebp]
  0009e	50		 push	 eax
  0009f	0f b7 4d 24	 movzx	 ecx, WORD PTR _idx$[ebp]
  000a3	51		 push	 ecx
  000a4	68 a0 00 00 00	 push	 160			; 000000a0H
  000a9	68 8f 00 00 00	 push	 143			; 0000008fH
  000ae	6a 14		 push	 20			; 00000014H
  000b0	8b 55 14	 mov	 edx, DWORD PTR _wsp$[ebp]
  000b3	52		 push	 edx
  000b4	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR _vadSt$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _Pitch_ol
  000c1	83 c4 20	 add	 esp, 32			; 00000020H
  000c4	8b 55 18	 mov	 edx, DWORD PTR _T_op$[ebp]
  000c7	66 89 02	 mov	 WORD PTR [edx], ax

; 72   :                                                                 move16 ();

  000ca	e8 00 00 00 00	 call	 _move16

; 73   :    }
; 74   :    else

  000cf	e9 e7 00 00 00	 jmp	 $LN5@ol_ltp
$LN7@ol_ltp:

; 75   :    {
; 76   :       if ( sub (mode, MR795) <= 0 )

  000d4	6a 05		 push	 5
  000d6	0f b7 45 10	 movzx	 eax, WORD PTR _mode$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _sub
  000e0	83 c4 08	 add	 esp, 8
  000e3	0f bf c8	 movsx	 ecx, ax
  000e6	85 c9		 test	 ecx, ecx
  000e8	7f 3b		 jg	 SHORT $LN4@ol_ltp

; 77   :       {
; 78   :          test();

  000ea	e8 00 00 00 00	 call	 _test

; 79   :          *T_op = Pitch_ol(vadSt, mode, wsp, PIT_MIN, PIT_MAX, L_FRAME_BY2,
; 80   :                           idx, dtx);

  000ef	8b 45 28	 mov	 eax, DWORD PTR _dtx$[ebp]
  000f2	50		 push	 eax
  000f3	0f b7 4d 24	 movzx	 ecx, WORD PTR _idx$[ebp]
  000f7	51		 push	 ecx
  000f8	6a 50		 push	 80			; 00000050H
  000fa	68 8f 00 00 00	 push	 143			; 0000008fH
  000ff	6a 14		 push	 20			; 00000014H
  00101	8b 55 14	 mov	 edx, DWORD PTR _wsp$[ebp]
  00104	52		 push	 edx
  00105	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00108	50		 push	 eax
  00109	8b 4d 0c	 mov	 ecx, DWORD PTR _vadSt$[ebp]
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _Pitch_ol
  00112	83 c4 20	 add	 esp, 32			; 00000020H
  00115	8b 55 18	 mov	 edx, DWORD PTR _T_op$[ebp]
  00118	66 89 02	 mov	 WORD PTR [edx], ax

; 81   :                                                                 move16 ();

  0011b	e8 00 00 00 00	 call	 _move16
  00120	e9 96 00 00 00	 jmp	 $LN5@ol_ltp
$LN4@ol_ltp:

; 82   :       }
; 83   :       else if ( sub (mode, MR102) == 0 )

  00125	6a 06		 push	 6
  00127	0f b7 45 10	 movzx	 eax, WORD PTR _mode$[ebp]
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 _sub
  00131	83 c4 08	 add	 esp, 8
  00134	0f bf c8	 movsx	 ecx, ax
  00137	85 c9		 test	 ecx, ecx
  00139	75 45		 jne	 SHORT $LN2@ol_ltp

; 84   :       {
; 85   :          test(); test();

  0013b	e8 00 00 00 00	 call	 _test
  00140	e8 00 00 00 00	 call	 _test

; 86   :          *T_op = Pitch_ol_wgh(st, vadSt, wsp, PIT_MIN, PIT_MAX, L_FRAME_BY2,
; 87   :                               old_lags, ol_gain_flg, idx, dtx);

  00145	8b 45 28	 mov	 eax, DWORD PTR _dtx$[ebp]
  00148	50		 push	 eax
  00149	0f b7 4d 24	 movzx	 ecx, WORD PTR _idx$[ebp]
  0014d	51		 push	 ecx
  0014e	8b 55 20	 mov	 edx, DWORD PTR _ol_gain_flg$[ebp]
  00151	52		 push	 edx
  00152	8b 45 1c	 mov	 eax, DWORD PTR _old_lags$[ebp]
  00155	50		 push	 eax
  00156	6a 50		 push	 80			; 00000050H
  00158	68 8f 00 00 00	 push	 143			; 0000008fH
  0015d	6a 14		 push	 20			; 00000014H
  0015f	8b 4d 14	 mov	 ecx, DWORD PTR _wsp$[ebp]
  00162	51		 push	 ecx
  00163	8b 55 0c	 mov	 edx, DWORD PTR _vadSt$[ebp]
  00166	52		 push	 edx
  00167	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 _Pitch_ol_wgh
  00170	83 c4 28	 add	 esp, 40			; 00000028H
  00173	8b 4d 18	 mov	 ecx, DWORD PTR _T_op$[ebp]
  00176	66 89 01	 mov	 WORD PTR [ecx], ax

; 88   :                                                                 move16 ();

  00179	e8 00 00 00 00	 call	 _move16

; 89   :       }
; 90   :       else

  0017e	eb 3b		 jmp	 SHORT $LN5@ol_ltp
$LN2@ol_ltp:

; 91   :       {
; 92   :          test(); test();          

  00180	e8 00 00 00 00	 call	 _test
  00185	e8 00 00 00 00	 call	 _test

; 93   :          *T_op = Pitch_ol(vadSt, mode, wsp, PIT_MIN_MR122, PIT_MAX,
; 94   :                           L_FRAME_BY2, idx, dtx);

  0018a	8b 45 28	 mov	 eax, DWORD PTR _dtx$[ebp]
  0018d	50		 push	 eax
  0018e	0f b7 4d 24	 movzx	 ecx, WORD PTR _idx$[ebp]
  00192	51		 push	 ecx
  00193	6a 50		 push	 80			; 00000050H
  00195	68 8f 00 00 00	 push	 143			; 0000008fH
  0019a	6a 12		 push	 18			; 00000012H
  0019c	8b 55 14	 mov	 edx, DWORD PTR _wsp$[ebp]
  0019f	52		 push	 edx
  001a0	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  001a3	50		 push	 eax
  001a4	8b 4d 0c	 mov	 ecx, DWORD PTR _vadSt$[ebp]
  001a7	51		 push	 ecx
  001a8	e8 00 00 00 00	 call	 _Pitch_ol
  001ad	83 c4 20	 add	 esp, 32			; 00000020H
  001b0	8b 55 18	 mov	 edx, DWORD PTR _T_op$[ebp]
  001b3	66 89 02	 mov	 WORD PTR [edx], ax

; 95   :                                                                 move16 ();

  001b6	e8 00 00 00 00	 call	 _move16
$LN5@ol_ltp:

; 96   :       }
; 97   :    }
; 98   :    return 0;

  001bb	33 c0		 xor	 eax, eax

; 99   : }

  001bd	5f		 pop	 edi
  001be	5e		 pop	 esi
  001bf	5b		 pop	 ebx
  001c0	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  001c6	3b ec		 cmp	 ebp, esp
  001c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cd	8b e5		 mov	 esp, ebp
  001cf	5d		 pop	 ebp
  001d0	c3		 ret	 0
_ol_ltp	ENDP
_TEXT	ENDS
END
