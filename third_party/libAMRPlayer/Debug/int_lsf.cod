; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\int_lsf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_int_lsf_id
CONST	SEGMENT
_int_lsf_id DB	'@(#)$Id $$Id $', 00H
CONST	ENDS
PUBLIC	_Int_lsf
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shr:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\int_lsf.c
;	COMDAT _Int_lsf
_TEXT	SEGMENT
_i$ = -8						; size = 2
_lsf_old$ = 8						; size = 4
_lsf_new$ = 12						; size = 4
_i_subfr$ = 16						; size = 2
_lsf_out$ = 20						; size = 4
_Int_lsf PROC						; COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 77   :     Word16 i;
; 78   : 
; 79   :     if ( i_subfr == 0 )

  0001e	0f bf 45 10	 movsx	 eax, WORD PTR _i_subfr$[ebp]
  00022	85 c0		 test	 eax, eax
  00024	0f 85 8d 00 00
	00		 jne	 $LN19@Int_lsf

; 80   :     {
; 81   :        test ();          

  0002a	e8 00 00 00 00	 call	 _test

; 82   :        for (i = 0; i < M; i++) {

  0002f	33 c0		 xor	 eax, eax
  00031	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00035	eb 0c		 jmp	 SHORT $LN18@Int_lsf
$LN17@Int_lsf:
  00037	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0003b	66 83 c0 01	 add	 ax, 1
  0003f	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN18@Int_lsf:
  00043	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00047	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0004a	7d 66		 jge	 SHORT $LN16@Int_lsf

; 83   :           lsf_out[i] = add(sub(lsf_old[i], shr(lsf_old[i], 2)), shr(lsf_new[i], 2));

  0004c	6a 02		 push	 2
  0004e	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _lsf_new$[ebp]
  00055	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 _shr
  0005f	83 c4 08	 add	 esp, 8
  00062	0f b7 c0	 movzx	 eax, ax
  00065	50		 push	 eax
  00066	6a 02		 push	 2
  00068	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _lsf_old$[ebp]
  0006f	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _shr
  00079	83 c4 08	 add	 esp, 8
  0007c	0f b7 c8	 movzx	 ecx, ax
  0007f	51		 push	 ecx
  00080	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  00084	8b 45 08	 mov	 eax, DWORD PTR _lsf_old$[ebp]
  00087	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 _sub
  00091	83 c4 08	 add	 esp, 8
  00094	0f b7 d0	 movzx	 edx, ax
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 _add
  0009d	83 c4 08	 add	 esp, 8
  000a0	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000a4	8b 55 14	 mov	 edx, DWORD PTR _lsf_out$[ebp]
  000a7	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 84   :           move16 ();

  000ab	e8 00 00 00 00	 call	 _move16

; 85   :        }

  000b0	eb 85		 jmp	 SHORT $LN17@Int_lsf
$LN16@Int_lsf:

; 86   :     }
; 87   :     else if ( sub(i_subfr, 40) == 0 )

  000b2	e9 a2 01 00 00	 jmp	 $LN20@Int_lsf
$LN19@Int_lsf:
  000b7	6a 28		 push	 40			; 00000028H
  000b9	0f b7 45 10	 movzx	 eax, WORD PTR _i_subfr$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _sub
  000c3	83 c4 08	 add	 esp, 8
  000c6	0f bf c8	 movsx	 ecx, ax
  000c9	85 c9		 test	 ecx, ecx
  000cb	75 7a		 jne	 SHORT $LN14@Int_lsf

; 88   :     {
; 89   :        test (); test ();

  000cd	e8 00 00 00 00	 call	 _test
  000d2	e8 00 00 00 00	 call	 _test

; 90   :        for (i = 0; i < M; i++) {

  000d7	33 c0		 xor	 eax, eax
  000d9	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  000dd	eb 0c		 jmp	 SHORT $LN13@Int_lsf
$LN12@Int_lsf:
  000df	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  000e3	66 83 c0 01	 add	 ax, 1
  000e7	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN13@Int_lsf:
  000eb	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000ef	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000f2	7d 4e		 jge	 SHORT $LN11@Int_lsf

; 91   :           lsf_out[i] = add(shr(lsf_old[i],1), shr(lsf_new[i], 1) );

  000f4	6a 01		 push	 1
  000f6	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _lsf_new$[ebp]
  000fd	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00101	52		 push	 edx
  00102	e8 00 00 00 00	 call	 _shr
  00107	83 c4 08	 add	 esp, 8
  0010a	0f b7 c0	 movzx	 eax, ax
  0010d	50		 push	 eax
  0010e	6a 01		 push	 1
  00110	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00114	8b 55 08	 mov	 edx, DWORD PTR _lsf_old$[ebp]
  00117	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _shr
  00121	83 c4 08	 add	 esp, 8
  00124	0f b7 c8	 movzx	 ecx, ax
  00127	51		 push	 ecx
  00128	e8 00 00 00 00	 call	 _add
  0012d	83 c4 08	 add	 esp, 8
  00130	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  00134	8b 4d 14	 mov	 ecx, DWORD PTR _lsf_out$[ebp]
  00137	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 92   :           move16 ();

  0013b	e8 00 00 00 00	 call	 _move16

; 93   :        }

  00140	eb 9d		 jmp	 SHORT $LN12@Int_lsf
$LN11@Int_lsf:

; 94   :     }
; 95   :     else if ( sub(i_subfr, 80) == 0 )

  00142	e9 12 01 00 00	 jmp	 $LN20@Int_lsf
$LN14@Int_lsf:
  00147	6a 50		 push	 80			; 00000050H
  00149	0f b7 45 10	 movzx	 eax, WORD PTR _i_subfr$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _sub
  00153	83 c4 08	 add	 esp, 8
  00156	0f bf c8	 movsx	 ecx, ax
  00159	85 c9		 test	 ecx, ecx
  0015b	0f 85 94 00 00
	00		 jne	 $LN9@Int_lsf

; 96   :     {
; 97   :        test (); test (); test ();

  00161	e8 00 00 00 00	 call	 _test
  00166	e8 00 00 00 00	 call	 _test
  0016b	e8 00 00 00 00	 call	 _test

; 98   :        for (i = 0; i < M; i++) {

  00170	33 c0		 xor	 eax, eax
  00172	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00176	eb 0c		 jmp	 SHORT $LN8@Int_lsf
$LN7@Int_lsf:
  00178	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0017c	66 83 c0 01	 add	 ax, 1
  00180	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN8@Int_lsf:
  00184	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00188	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0018b	7d 66		 jge	 SHORT $LN6@Int_lsf

; 99   :           lsf_out[i] = add(shr(lsf_old[i], 2), sub(lsf_new[i], shr(lsf_new[i], 2)));

  0018d	6a 02		 push	 2
  0018f	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00193	8b 4d 0c	 mov	 ecx, DWORD PTR _lsf_new$[ebp]
  00196	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0019a	52		 push	 edx
  0019b	e8 00 00 00 00	 call	 _shr
  001a0	83 c4 08	 add	 esp, 8
  001a3	0f b7 c0	 movzx	 eax, ax
  001a6	50		 push	 eax
  001a7	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  001ab	8b 55 0c	 mov	 edx, DWORD PTR _lsf_new$[ebp]
  001ae	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 _sub
  001b8	83 c4 08	 add	 esp, 8
  001bb	0f b7 c8	 movzx	 ecx, ax
  001be	51		 push	 ecx
  001bf	6a 02		 push	 2
  001c1	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  001c5	8b 45 08	 mov	 eax, DWORD PTR _lsf_old$[ebp]
  001c8	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  001cc	51		 push	 ecx
  001cd	e8 00 00 00 00	 call	 _shr
  001d2	83 c4 08	 add	 esp, 8
  001d5	0f b7 d0	 movzx	 edx, ax
  001d8	52		 push	 edx
  001d9	e8 00 00 00 00	 call	 _add
  001de	83 c4 08	 add	 esp, 8
  001e1	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  001e5	8b 55 14	 mov	 edx, DWORD PTR _lsf_out$[ebp]
  001e8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 100  :           move16 ();

  001ec	e8 00 00 00 00	 call	 _move16

; 101  :        }

  001f1	eb 85		 jmp	 SHORT $LN7@Int_lsf
$LN6@Int_lsf:

; 102  :     }
; 103  :     else if ( sub(i_subfr, 120) == 0 )

  001f3	eb 64		 jmp	 SHORT $LN20@Int_lsf
$LN9@Int_lsf:
  001f5	6a 78		 push	 120			; 00000078H
  001f7	0f b7 45 10	 movzx	 eax, WORD PTR _i_subfr$[ebp]
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 _sub
  00201	83 c4 08	 add	 esp, 8
  00204	0f bf c8	 movsx	 ecx, ax
  00207	85 c9		 test	 ecx, ecx
  00209	75 4e		 jne	 SHORT $LN20@Int_lsf

; 104  :     {
; 105  :        test (); test (); test (); test ();                    

  0020b	e8 00 00 00 00	 call	 _test
  00210	e8 00 00 00 00	 call	 _test
  00215	e8 00 00 00 00	 call	 _test
  0021a	e8 00 00 00 00	 call	 _test

; 106  :        for (i = 0; i < M; i++) {

  0021f	33 c0		 xor	 eax, eax
  00221	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00225	eb 0c		 jmp	 SHORT $LN3@Int_lsf
$LN2@Int_lsf:
  00227	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0022b	66 83 c0 01	 add	 ax, 1
  0022f	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@Int_lsf:
  00233	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00237	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0023a	7d 1d		 jge	 SHORT $LN20@Int_lsf

; 107  :           lsf_out[i] = lsf_new[i];                        move16 ();

  0023c	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00240	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00244	8b 55 14	 mov	 edx, DWORD PTR _lsf_out$[ebp]
  00247	8b 75 0c	 mov	 esi, DWORD PTR _lsf_new$[ebp]
  0024a	66 8b 04 46	 mov	 ax, WORD PTR [esi+eax*2]
  0024e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00252	e8 00 00 00 00	 call	 _move16

; 108  :        }

  00257	eb ce		 jmp	 SHORT $LN2@Int_lsf
$LN20@Int_lsf:

; 109  :     }
; 110  : 
; 111  :     return;
; 112  : }

  00259	5f		 pop	 edi
  0025a	5e		 pop	 esi
  0025b	5b		 pop	 ebx
  0025c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00262	3b ec		 cmp	 ebp, esp
  00264	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c3		 ret	 0
_Int_lsf ENDP
_TEXT	ENDS
END
