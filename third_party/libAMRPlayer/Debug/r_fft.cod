; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\r_fft.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_r_fft_id
_DATA	SEGMENT
_phs_tbl DW	07fffH
	DW	00H
	DW	07fd9H
	DW	0f9b8H
	DW	07f62H
	DW	0f374H
	DW	07e9dH
	DW	0ed38H
	DW	07d8aH
	DW	0e707H
	DW	07c2aH
	DW	0e0e6H
	DW	07a7dH
	DW	0dad8H
	DW	07885H
	DW	0d4e1H
	DW	07642H
	DW	0cf04H
	DW	073b6H
	DW	0c946H
	DW	070e3H
	DW	0c3a9H
	DW	06dcaH
	DW	0be32H
	DW	06a6eH
	DW	0b8e3H
	DW	066d0H
	DW	0b3c0H
	DW	062f2H
	DW	0aeccH
	DW	05ed7H
	DW	0aa0aH
	DW	05a82H
	DW	0a57eH
	DW	055f6H
	DW	0a129H
	DW	05134H
	DW	09d0eH
	DW	04c40H
	DW	09930H
	DW	0471dH
	DW	09592H
	DW	041ceH
	DW	09236H
	DW	03c57H
	DW	08f1dH
	DW	036baH
	DW	08c4aH
	DW	030fcH
	DW	089beH
	DW	02b1fH
	DW	0877bH
	DW	02528H
	DW	08583H
	DW	01f1aH
	DW	083d6H
	DW	018f9H
	DW	08276H
	DW	012c8H
	DW	08163H
	DW	0c8cH
	DW	0809eH
	DW	0648H
	DW	08027H
	DW	00H
	DW	08000H
	DW	0f9b8H
	DW	08027H
	DW	0f374H
	DW	0809eH
	DW	0ed38H
	DW	08163H
	DW	0e707H
	DW	08276H
	DW	0e0e6H
	DW	083d6H
	DW	0dad8H
	DW	08583H
	DW	0d4e1H
	DW	0877bH
	DW	0cf04H
	DW	089beH
	DW	0c946H
	DW	08c4aH
	DW	0c3a9H
	DW	08f1dH
	DW	0be32H
	DW	09236H
	DW	0b8e3H
	DW	09592H
	DW	0b3c0H
	DW	09930H
	DW	0aeccH
	DW	09d0eH
	DW	0aa0aH
	DW	0a129H
	DW	0a57eH
	DW	0a57eH
	DW	0a129H
	DW	0aa0aH
	DW	09d0eH
	DW	0aeccH
	DW	09930H
	DW	0b3c0H
	DW	09592H
	DW	0b8e3H
	DW	09236H
	DW	0be32H
	DW	08f1dH
	DW	0c3a9H
	DW	08c4aH
	DW	0c946H
	DW	089beH
	DW	0cf04H
	DW	0877bH
	DW	0d4e1H
	DW	08583H
	DW	0dad8H
	DW	083d6H
	DW	0e0e6H
	DW	08276H
	DW	0e707H
	DW	08163H
	DW	0ed38H
	DW	0809eH
	DW	0f374H
	DW	08027H
	DW	0f9b8H
_ii_table DW	040H
	DW	020H
	DW	010H
	DW	08H
	DW	04H
	DW	02H
_DATA	ENDS
CONST	SEGMENT
_r_fft_id DB	'@(#)$Id $', 00H
CONST	ENDS
PUBLIC	_r_fft
PUBLIC	_c_fft
EXTRN	_add:PROC
EXTRN	_sub:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_L_mult:PROC
EXTRN	_round:PROC
EXTRN	_L_mac:PROC
EXTRN	_L_msu:PROC
EXTRN	_L_negate:PROC
EXTRN	_L_shr:PROC
EXTRN	_L_deposit_h:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\r_fft.c
;	COMDAT _c_fft
_TEXT	SEGMENT
_tmp2$ = -176						; size = 2
_tmp1$ = -164						; size = 2
_tmp$ = -152						; size = 2
_ftmp_imag$ = -140					; size = 4
_ftmp_real$ = -128					; size = 4
_ftmp$ = -116						; size = 4
_ii2$ = -104						; size = 2
_kj$ = -92						; size = 2
_ji$ = -80						; size = 2
_kk$ = -68						; size = 2
_jj$ = -56						; size = 2
_ii$ = -44						; size = 2
_k$ = -32						; size = 2
_j$ = -20						; size = 2
_i$ = -8						; size = 2
_farray_ptr$ = 8					; size = 4
_c_fft	PROC						; COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 8c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-372]
  00012	b9 5d 00 00 00	 mov	 ecx, 93			; 0000005dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 114  : 
; 115  : 	Word16 i, j, k, ii, jj, kk, ji, kj, ii2;
; 116  : 	Word32 ftmp, ftmp_real, ftmp_imag;
; 117  : 	Word16 tmp, tmp1, tmp2;
; 118  : 
; 119  : 	/* Rearrange the input array in bit reversed order */
; 120  : 	for (i = 0, j = 0; i < SIZE - 2; i = i + 2)

  0001e	33 c0		 xor	 eax, eax
  00020	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00024	33 c9		 xor	 ecx, ecx
  00026	66 89 4d ec	 mov	 WORD PTR _j$[ebp], cx
  0002a	eb 0b		 jmp	 SHORT $LN15@c_fft
$LN14@c_fft:
  0002c	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00030	83 c0 02	 add	 eax, 2
  00033	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN15@c_fft:
  00037	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0003b	83 f8 7e	 cmp	 eax, 126		; 0000007eH
  0003e	0f 8d 1c 01 00
	00		 jge	 $LN13@c_fft

; 121  : 	{										test();

  00044	e8 00 00 00 00	 call	 _test

; 122  : 		if (sub(j, i) > 0)

  00049	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  0004d	50		 push	 eax
  0004e	0f b7 4d ec	 movzx	 ecx, WORD PTR _j$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _sub
  00058	83 c4 08	 add	 esp, 8
  0005b	0f bf d0	 movsx	 edx, ax
  0005e	85 d2		 test	 edx, edx
  00060	0f 8e 88 00 00
	00		 jle	 $LN12@c_fft

; 123  : 		{
; 124  : 			ftmp = *(farray_ptr + i);					move16();

  00066	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  0006d	0f bf 14 41	 movsx	 edx, WORD PTR [ecx+eax*2]
  00071	89 55 8c	 mov	 DWORD PTR _ftmp$[ebp], edx
  00074	e8 00 00 00 00	 call	 _move16

; 125  : 			*(farray_ptr + i) = *(farray_ptr + j);				move16();

  00079	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  0007d	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  00081	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  00084	8b 75 08	 mov	 esi, DWORD PTR _farray_ptr$[ebp]
  00087	66 8b 04 46	 mov	 ax, WORD PTR [esi+eax*2]
  0008b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0008f	e8 00 00 00 00	 call	 _move16

; 126  : 			*(farray_ptr + j) = ftmp;					move16();

  00094	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  00098	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  0009b	66 8b 55 8c	 mov	 dx, WORD PTR _ftmp$[ebp]
  0009f	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  000a3	e8 00 00 00 00	 call	 _move16

; 127  : 
; 128  : 			ftmp = *(farray_ptr + i + 1);					move16();

  000a8	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  000af	0f bf 54 41 02	 movsx	 edx, WORD PTR [ecx+eax*2+2]
  000b4	89 55 8c	 mov	 DWORD PTR _ftmp$[ebp], edx
  000b7	e8 00 00 00 00	 call	 _move16

; 129  : 			*(farray_ptr + i + 1) = *(farray_ptr + j + 1);			move16();

  000bc	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  000c0	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000c4	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  000c7	8b 75 08	 mov	 esi, DWORD PTR _farray_ptr$[ebp]
  000ca	66 8b 44 46 02	 mov	 ax, WORD PTR [esi+eax*2+2]
  000cf	66 89 44 4a 02	 mov	 WORD PTR [edx+ecx*2+2], ax
  000d4	e8 00 00 00 00	 call	 _move16

; 130  : 			*(farray_ptr + j + 1) = ftmp;					move16();

  000d9	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  000dd	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  000e0	66 8b 55 8c	 mov	 dx, WORD PTR _ftmp$[ebp]
  000e4	66 89 54 41 02	 mov	 WORD PTR [ecx+eax*2+2], dx
  000e9	e8 00 00 00 00	 call	 _move16
$LN12@c_fft:

; 131  : 		}
; 132  : 
; 133  : 		k = SIZE_BY_TWO;							move16();

  000ee	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f3	66 89 45 e0	 mov	 WORD PTR _k$[ebp], ax
  000f7	e8 00 00 00 00	 call	 _move16

; 134  : 											test();

  000fc	e8 00 00 00 00	 call	 _test
$LN11@c_fft:

; 135  : 		while (sub(j, k) >= 0)

  00101	0f b7 45 e0	 movzx	 eax, WORD PTR _k$[ebp]
  00105	50		 push	 eax
  00106	0f b7 4d ec	 movzx	 ecx, WORD PTR _j$[ebp]
  0010a	51		 push	 ecx
  0010b	e8 00 00 00 00	 call	 _sub
  00110	83 c4 08	 add	 esp, 8
  00113	0f bf d0	 movsx	 edx, ax
  00116	85 d2		 test	 edx, edx
  00118	7c 2b		 jl	 SHORT $LN10@c_fft

; 136  : 		{
; 137  : 			j = sub(j, k);

  0011a	0f b7 45 e0	 movzx	 eax, WORD PTR _k$[ebp]
  0011e	50		 push	 eax
  0011f	0f b7 4d ec	 movzx	 ecx, WORD PTR _j$[ebp]
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 _sub
  00129	83 c4 08	 add	 esp, 8
  0012c	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax

; 138  : 			k = shr(k, 1);

  00130	6a 01		 push	 1
  00132	0f b7 45 e0	 movzx	 eax, WORD PTR _k$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 _shr
  0013c	83 c4 08	 add	 esp, 8
  0013f	66 89 45 e0	 mov	 WORD PTR _k$[ebp], ax

; 139  : 		}

  00143	eb bc		 jmp	 SHORT $LN11@c_fft
$LN10@c_fft:

; 140  : 		j = add(j, k);

  00145	0f b7 45 e0	 movzx	 eax, WORD PTR _k$[ebp]
  00149	50		 push	 eax
  0014a	0f b7 4d ec	 movzx	 ecx, WORD PTR _j$[ebp]
  0014e	51		 push	 ecx
  0014f	e8 00 00 00 00	 call	 _add
  00154	83 c4 08	 add	 esp, 8
  00157	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax

; 141  : 	}

  0015b	e9 cc fe ff ff	 jmp	 $LN14@c_fft
$LN13@c_fft:

; 142  : 
; 143  : 	/* The FFT part */
; 144  : 	for (i = 0; i < NUM_STAGE; i++)

  00160	33 c0		 xor	 eax, eax
  00162	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00166	eb 0c		 jmp	 SHORT $LN9@c_fft
$LN8@c_fft:
  00168	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0016c	66 83 c0 01	 add	 ax, 1
  00170	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN9@c_fft:
  00174	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00178	83 f8 06	 cmp	 eax, 6
  0017b	0f 8d c2 02 00
	00		 jge	 $LN16@c_fft

; 145  : 	{				/* i is stage counter */
; 146  : 		jj = shl(2, i);		/* FFT size */

  00181	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  00185	50		 push	 eax
  00186	6a 02		 push	 2
  00188	e8 00 00 00 00	 call	 _shl
  0018d	83 c4 08	 add	 esp, 8
  00190	66 89 45 c8	 mov	 WORD PTR _jj$[ebp], ax

; 147  : 		kk = shl(jj, 1);	/* 2 * FFT size */

  00194	6a 01		 push	 1
  00196	0f b7 45 c8	 movzx	 eax, WORD PTR _jj$[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _shl
  001a0	83 c4 08	 add	 esp, 8
  001a3	66 89 45 bc	 mov	 WORD PTR _kk$[ebp], ax

; 148  : 		ii = ii_table[i];	/* 2 * number of FFT's */			move16();

  001a7	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  001ab	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _ii_table[eax*2]
  001b3	66 89 4d d4	 mov	 WORD PTR _ii$[ebp], cx
  001b7	e8 00 00 00 00	 call	 _move16

; 149  : 		ii2 = shl(ii, 1);

  001bc	6a 01		 push	 1
  001be	0f b7 45 d4	 movzx	 eax, WORD PTR _ii$[ebp]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 _shl
  001c8	83 c4 08	 add	 esp, 8
  001cb	66 89 45 98	 mov	 WORD PTR _ii2$[ebp], ax

; 150  : 		ji = 0;			/* ji is phase table index */			move16();

  001cf	33 c0		 xor	 eax, eax
  001d1	66 89 45 b0	 mov	 WORD PTR _ji$[ebp], ax
  001d5	e8 00 00 00 00	 call	 _move16

; 151  : 
; 152  : 		for (j = 0; j < jj; j = j + 2)

  001da	33 c0		 xor	 eax, eax
  001dc	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
  001e0	eb 0b		 jmp	 SHORT $LN6@c_fft
$LN5@c_fft:
  001e2	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  001e6	83 c0 02	 add	 eax, 2
  001e9	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax
$LN6@c_fft:
  001ed	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  001f1	0f bf 4d c8	 movsx	 ecx, WORD PTR _jj$[ebp]
  001f5	3b c1		 cmp	 eax, ecx
  001f7	0f 8d 41 02 00
	00		 jge	 $LN4@c_fft

; 153  : 		{					/* j is sample counter */
; 154  : 
; 155  : 			for (k = j; k < SIZE; k = k + kk)

  001fd	66 8b 45 ec	 mov	 ax, WORD PTR _j$[ebp]
  00201	66 89 45 e0	 mov	 WORD PTR _k$[ebp], ax
  00205	eb 0e		 jmp	 SHORT $LN3@c_fft
$LN2@c_fft:
  00207	0f bf 45 e0	 movsx	 eax, WORD PTR _k$[ebp]
  0020b	0f bf 4d bc	 movsx	 ecx, WORD PTR _kk$[ebp]
  0020f	03 c1		 add	 eax, ecx
  00211	66 89 45 e0	 mov	 WORD PTR _k$[ebp], ax
$LN3@c_fft:
  00215	0f bf 45 e0	 movsx	 eax, WORD PTR _k$[ebp]
  00219	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0021e	0f 8d ff 01 00
	00		 jge	 $LN1@c_fft

; 156  : 			{				/* k is butterfly top */
; 157  : 				kj = add(k, jj);	/* kj is butterfly bottom */

  00224	0f b7 45 c8	 movzx	 eax, WORD PTR _jj$[ebp]
  00228	50		 push	 eax
  00229	0f b7 4d e0	 movzx	 ecx, WORD PTR _k$[ebp]
  0022d	51		 push	 ecx
  0022e	e8 00 00 00 00	 call	 _add
  00233	83 c4 08	 add	 esp, 8
  00236	66 89 45 a4	 mov	 WORD PTR _kj$[ebp], ax

; 158  : 
; 159  : 				/* Butterfly computations */
; 160  : 				ftmp_real = L_mult(*(farray_ptr + kj), phs_tbl[ji]);

  0023a	0f bf 45 b0	 movsx	 eax, WORD PTR _ji$[ebp]
  0023e	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2]
  00246	51		 push	 ecx
  00247	0f bf 55 a4	 movsx	 edx, WORD PTR _kj$[ebp]
  0024b	8b 45 08	 mov	 eax, DWORD PTR _farray_ptr$[ebp]
  0024e	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00252	51		 push	 ecx
  00253	e8 00 00 00 00	 call	 _L_mult
  00258	83 c4 08	 add	 esp, 8
  0025b	89 45 80	 mov	 DWORD PTR _ftmp_real$[ebp], eax

; 161  : 				ftmp_real = L_msu(ftmp_real, *(farray_ptr + kj + 1), phs_tbl[ji + 1]);

  0025e	0f bf 45 b0	 movsx	 eax, WORD PTR _ji$[ebp]
  00262	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2+2]
  0026a	51		 push	 ecx
  0026b	0f bf 55 a4	 movsx	 edx, WORD PTR _kj$[ebp]
  0026f	8b 45 08	 mov	 eax, DWORD PTR _farray_ptr$[ebp]
  00272	0f b7 4c 50 02	 movzx	 ecx, WORD PTR [eax+edx*2+2]
  00277	51		 push	 ecx
  00278	8b 55 80	 mov	 edx, DWORD PTR _ftmp_real$[ebp]
  0027b	52		 push	 edx
  0027c	e8 00 00 00 00	 call	 _L_msu
  00281	83 c4 0c	 add	 esp, 12			; 0000000cH
  00284	89 45 80	 mov	 DWORD PTR _ftmp_real$[ebp], eax

; 162  : 
; 163  : 				ftmp_imag = L_mult(*(farray_ptr + kj + 1), phs_tbl[ji]);

  00287	0f bf 45 b0	 movsx	 eax, WORD PTR _ji$[ebp]
  0028b	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2]
  00293	51		 push	 ecx
  00294	0f bf 55 a4	 movsx	 edx, WORD PTR _kj$[ebp]
  00298	8b 45 08	 mov	 eax, DWORD PTR _farray_ptr$[ebp]
  0029b	0f b7 4c 50 02	 movzx	 ecx, WORD PTR [eax+edx*2+2]
  002a0	51		 push	 ecx
  002a1	e8 00 00 00 00	 call	 _L_mult
  002a6	83 c4 08	 add	 esp, 8
  002a9	89 85 74 ff ff
	ff		 mov	 DWORD PTR _ftmp_imag$[ebp], eax

; 164  : 				ftmp_imag = L_mac(ftmp_imag, *(farray_ptr + kj), phs_tbl[ji + 1]);

  002af	0f bf 45 b0	 movsx	 eax, WORD PTR _ji$[ebp]
  002b3	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2+2]
  002bb	51		 push	 ecx
  002bc	0f bf 55 a4	 movsx	 edx, WORD PTR _kj$[ebp]
  002c0	8b 45 08	 mov	 eax, DWORD PTR _farray_ptr$[ebp]
  002c3	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  002c7	51		 push	 ecx
  002c8	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _ftmp_imag$[ebp]
  002ce	52		 push	 edx
  002cf	e8 00 00 00 00	 call	 _L_mac
  002d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d7	89 85 74 ff ff
	ff		 mov	 DWORD PTR _ftmp_imag$[ebp], eax

; 165  : 
; 166  : 				tmp1 = round(ftmp_real);

  002dd	8b 45 80	 mov	 eax, DWORD PTR _ftmp_real$[ebp]
  002e0	50		 push	 eax
  002e1	e8 00 00 00 00	 call	 _round
  002e6	83 c4 04	 add	 esp, 4
  002e9	66 89 85 5c ff
	ff ff		 mov	 WORD PTR _tmp1$[ebp], ax

; 167  : 				tmp2 = round(ftmp_imag);

  002f0	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _ftmp_imag$[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 _round
  002fc	83 c4 04	 add	 esp, 4
  002ff	66 89 85 50 ff
	ff ff		 mov	 WORD PTR _tmp2$[ebp], ax

; 168  : 
; 169  : 				tmp = sub(*(farray_ptr + k), tmp1);

  00306	0f b7 85 5c ff
	ff ff		 movzx	 eax, WORD PTR _tmp1$[ebp]
  0030d	50		 push	 eax
  0030e	0f bf 4d e0	 movsx	 ecx, WORD PTR _k$[ebp]
  00312	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  00315	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00319	50		 push	 eax
  0031a	e8 00 00 00 00	 call	 _sub
  0031f	83 c4 08	 add	 esp, 8
  00322	66 89 85 68 ff
	ff ff		 mov	 WORD PTR _tmp$[ebp], ax

; 170  : 				*(farray_ptr + kj) = shr(tmp, 1);			move16();

  00329	6a 01		 push	 1
  0032b	0f b7 85 68 ff
	ff ff		 movzx	 eax, WORD PTR _tmp$[ebp]
  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 _shr
  00338	83 c4 08	 add	 esp, 8
  0033b	0f bf 4d a4	 movsx	 ecx, WORD PTR _kj$[ebp]
  0033f	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  00342	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00346	e8 00 00 00 00	 call	 _move16

; 171  : 
; 172  : 				tmp = sub(*(farray_ptr + k + 1), tmp2);

  0034b	0f b7 85 50 ff
	ff ff		 movzx	 eax, WORD PTR _tmp2$[ebp]
  00352	50		 push	 eax
  00353	0f bf 4d e0	 movsx	 ecx, WORD PTR _k$[ebp]
  00357	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  0035a	0f b7 44 4a 02	 movzx	 eax, WORD PTR [edx+ecx*2+2]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 _sub
  00365	83 c4 08	 add	 esp, 8
  00368	66 89 85 68 ff
	ff ff		 mov	 WORD PTR _tmp$[ebp], ax

; 173  : 				*(farray_ptr + kj + 1) = shr(tmp, 1);			move16();

  0036f	6a 01		 push	 1
  00371	0f b7 85 68 ff
	ff ff		 movzx	 eax, WORD PTR _tmp$[ebp]
  00378	50		 push	 eax
  00379	e8 00 00 00 00	 call	 _shr
  0037e	83 c4 08	 add	 esp, 8
  00381	0f bf 4d a4	 movsx	 ecx, WORD PTR _kj$[ebp]
  00385	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  00388	66 89 44 4a 02	 mov	 WORD PTR [edx+ecx*2+2], ax
  0038d	e8 00 00 00 00	 call	 _move16

; 174  : 
; 175  : 				tmp = add(*(farray_ptr + k), tmp1);

  00392	0f b7 85 5c ff
	ff ff		 movzx	 eax, WORD PTR _tmp1$[ebp]
  00399	50		 push	 eax
  0039a	0f bf 4d e0	 movsx	 ecx, WORD PTR _k$[ebp]
  0039e	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  003a1	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  003a5	50		 push	 eax
  003a6	e8 00 00 00 00	 call	 _add
  003ab	83 c4 08	 add	 esp, 8
  003ae	66 89 85 68 ff
	ff ff		 mov	 WORD PTR _tmp$[ebp], ax

; 176  : 				*(farray_ptr + k) = shr(tmp, 1);			move16();

  003b5	6a 01		 push	 1
  003b7	0f b7 85 68 ff
	ff ff		 movzx	 eax, WORD PTR _tmp$[ebp]
  003be	50		 push	 eax
  003bf	e8 00 00 00 00	 call	 _shr
  003c4	83 c4 08	 add	 esp, 8
  003c7	0f bf 4d e0	 movsx	 ecx, WORD PTR _k$[ebp]
  003cb	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  003ce	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  003d2	e8 00 00 00 00	 call	 _move16

; 177  : 
; 178  : 				tmp = add(*(farray_ptr + k + 1), tmp2);

  003d7	0f b7 85 50 ff
	ff ff		 movzx	 eax, WORD PTR _tmp2$[ebp]
  003de	50		 push	 eax
  003df	0f bf 4d e0	 movsx	 ecx, WORD PTR _k$[ebp]
  003e3	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  003e6	0f b7 44 4a 02	 movzx	 eax, WORD PTR [edx+ecx*2+2]
  003eb	50		 push	 eax
  003ec	e8 00 00 00 00	 call	 _add
  003f1	83 c4 08	 add	 esp, 8
  003f4	66 89 85 68 ff
	ff ff		 mov	 WORD PTR _tmp$[ebp], ax

; 179  : 				*(farray_ptr + k + 1) = shr(tmp, 1);			move16();

  003fb	6a 01		 push	 1
  003fd	0f b7 85 68 ff
	ff ff		 movzx	 eax, WORD PTR _tmp$[ebp]
  00404	50		 push	 eax
  00405	e8 00 00 00 00	 call	 _shr
  0040a	83 c4 08	 add	 esp, 8
  0040d	0f bf 4d e0	 movsx	 ecx, WORD PTR _k$[ebp]
  00411	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  00414	66 89 44 4a 02	 mov	 WORD PTR [edx+ecx*2+2], ax
  00419	e8 00 00 00 00	 call	 _move16

; 180  : 			}

  0041e	e9 e4 fd ff ff	 jmp	 $LN2@c_fft
$LN1@c_fft:

; 181  : 
; 182  : 			ji =  add(ji, ii2);

  00423	0f b7 45 98	 movzx	 eax, WORD PTR _ii2$[ebp]
  00427	50		 push	 eax
  00428	0f b7 4d b0	 movzx	 ecx, WORD PTR _ji$[ebp]
  0042c	51		 push	 ecx
  0042d	e8 00 00 00 00	 call	 _add
  00432	83 c4 08	 add	 esp, 8
  00435	66 89 45 b0	 mov	 WORD PTR _ji$[ebp], ax

; 183  : 		}

  00439	e9 a4 fd ff ff	 jmp	 $LN5@c_fft
$LN4@c_fft:

; 184  : 	}

  0043e	e9 25 fd ff ff	 jmp	 $LN8@c_fft
$LN16@c_fft:

; 185  : }								/* end of c_fft () */

  00443	5f		 pop	 edi
  00444	5e		 pop	 esi
  00445	5b		 pop	 ebx
  00446	81 c4 74 01 00
	00		 add	 esp, 372		; 00000174H
  0044c	3b ec		 cmp	 ebp, esp
  0044e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00453	8b e5		 mov	 esp, ebp
  00455	5d		 pop	 ebp
  00456	c3		 ret	 0
_c_fft	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\r_fft.c
;	COMDAT _r_fft
_TEXT	SEGMENT
_Ltmp1$ = -104						; size = 4
_j$ = -92						; size = 2
_i$ = -80						; size = 2
_Lftmp1_imag$ = -68					; size = 4
_Lftmp1_real$ = -56					; size = 4
_ftmp2_imag$ = -44					; size = 2
_ftmp2_real$ = -32					; size = 2
_ftmp1_imag$ = -20					; size = 2
_ftmp1_real$ = -8					; size = 2
_farray_ptr$ = 8					; size = 4
_r_fft	PROC						; COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 191  : 
; 192  : 	Word16 ftmp1_real, ftmp1_imag, ftmp2_real, ftmp2_imag;
; 193  : 	Word32 Lftmp1_real, Lftmp1_imag;
; 194  : 	Word16 i, j;
; 195  : 	Word32 Ltmp1;
; 196  : 
; 197  : 	/* Perform the complex FFT */
; 198  : 	c_fft(farray_ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _farray_ptr$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _c_fft
  00027	83 c4 04	 add	 esp, 4

; 199  : 
; 200  : 	/* First, handle the DC and foldover frequencies */
; 201  : 	ftmp1_real = *farray_ptr;							move16();

  0002a	8b 45 08	 mov	 eax, DWORD PTR _farray_ptr$[ebp]
  0002d	66 8b 08	 mov	 cx, WORD PTR [eax]
  00030	66 89 4d f8	 mov	 WORD PTR _ftmp1_real$[ebp], cx
  00034	e8 00 00 00 00	 call	 _move16

; 202  : 	ftmp2_real = *(farray_ptr + 1);							move16();

  00039	8b 45 08	 mov	 eax, DWORD PTR _farray_ptr$[ebp]
  0003c	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  00040	66 89 4d e0	 mov	 WORD PTR _ftmp2_real$[ebp], cx
  00044	e8 00 00 00 00	 call	 _move16

; 203  : 	*farray_ptr = add(ftmp1_real, ftmp2_real);					move16();

  00049	0f b7 45 e0	 movzx	 eax, WORD PTR _ftmp2_real$[ebp]
  0004d	50		 push	 eax
  0004e	0f b7 4d f8	 movzx	 ecx, WORD PTR _ftmp1_real$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _add
  00058	83 c4 08	 add	 esp, 8
  0005b	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  0005e	66 89 02	 mov	 WORD PTR [edx], ax
  00061	e8 00 00 00 00	 call	 _move16

; 204  : 	*(farray_ptr + 1) = sub(ftmp1_real, ftmp2_real);				move16();

  00066	0f b7 45 e0	 movzx	 eax, WORD PTR _ftmp2_real$[ebp]
  0006a	50		 push	 eax
  0006b	0f b7 4d f8	 movzx	 ecx, WORD PTR _ftmp1_real$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _sub
  00075	83 c4 08	 add	 esp, 8
  00078	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  0007b	66 89 42 02	 mov	 WORD PTR [edx+2], ax
  0007f	e8 00 00 00 00	 call	 _move16

; 205  : 
; 206  : 	/* Now, handle the remaining positive frequencies */
; 207  : 	for (i = 2, j = SIZE - i; i <= SIZE_BY_TWO; i = i + 2, j = SIZE - i)

  00084	b8 02 00 00 00	 mov	 eax, 2
  00089	66 89 45 b0	 mov	 WORD PTR _i$[ebp], ax
  0008d	0f bf 4d b0	 movsx	 ecx, WORD PTR _i$[ebp]
  00091	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00096	2b d1		 sub	 edx, ecx
  00098	66 89 55 a4	 mov	 WORD PTR _j$[ebp], dx
  0009c	eb 1a		 jmp	 SHORT $LN3@r_fft
$LN2@r_fft:
  0009e	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  000a2	83 c0 02	 add	 eax, 2
  000a5	66 89 45 b0	 mov	 WORD PTR _i$[ebp], ax
  000a9	0f bf 4d b0	 movsx	 ecx, WORD PTR _i$[ebp]
  000ad	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  000b2	2b d1		 sub	 edx, ecx
  000b4	66 89 55 a4	 mov	 WORD PTR _j$[ebp], dx
$LN3@r_fft:
  000b8	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  000bc	83 f8 40	 cmp	 eax, 64			; 00000040H
  000bf	0f 8f 6e 02 00
	00		 jg	 $LN4@r_fft

; 208  : 	{
; 209  : 		ftmp1_real = add(*(farray_ptr + i), *(farray_ptr + j));

  000c5	0f bf 45 a4	 movsx	 eax, WORD PTR _j$[ebp]
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  000cc	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000d0	52		 push	 edx
  000d1	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  000d8	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 _add
  000e2	83 c4 08	 add	 esp, 8
  000e5	66 89 45 f8	 mov	 WORD PTR _ftmp1_real$[ebp], ax

; 210  : 		ftmp1_imag = sub(*(farray_ptr + i + 1), *(farray_ptr + j + 1));

  000e9	0f bf 45 a4	 movsx	 eax, WORD PTR _j$[ebp]
  000ed	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  000f0	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  000f5	52		 push	 edx
  000f6	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  000fd	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 _sub
  00108	83 c4 08	 add	 esp, 8
  0010b	66 89 45 ec	 mov	 WORD PTR _ftmp1_imag$[ebp], ax

; 211  : 		ftmp2_real = add(*(farray_ptr + i + 1), *(farray_ptr + j + 1));

  0010f	0f bf 45 a4	 movsx	 eax, WORD PTR _j$[ebp]
  00113	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  00116	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  0011b	52		 push	 edx
  0011c	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  00120	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  00123	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00128	52		 push	 edx
  00129	e8 00 00 00 00	 call	 _add
  0012e	83 c4 08	 add	 esp, 8
  00131	66 89 45 e0	 mov	 WORD PTR _ftmp2_real$[ebp], ax

; 212  : 		ftmp2_imag = sub(*(farray_ptr + j), *(farray_ptr + i));

  00135	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  00139	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  0013c	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00140	52		 push	 edx
  00141	0f bf 45 a4	 movsx	 eax, WORD PTR _j$[ebp]
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _farray_ptr$[ebp]
  00148	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 _sub
  00152	83 c4 08	 add	 esp, 8
  00155	66 89 45 d4	 mov	 WORD PTR _ftmp2_imag$[ebp], ax

; 213  : 
; 214  : 		Lftmp1_real = L_deposit_h(ftmp1_real);

  00159	0f b7 45 f8	 movzx	 eax, WORD PTR _ftmp1_real$[ebp]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 _L_deposit_h
  00163	83 c4 04	 add	 esp, 4
  00166	89 45 c8	 mov	 DWORD PTR _Lftmp1_real$[ebp], eax

; 215  : 		Lftmp1_imag = L_deposit_h(ftmp1_imag);

  00169	0f b7 45 ec	 movzx	 eax, WORD PTR _ftmp1_imag$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 _L_deposit_h
  00173	83 c4 04	 add	 esp, 4
  00176	89 45 bc	 mov	 DWORD PTR _Lftmp1_imag$[ebp], eax

; 216  : 
; 217  : 		Ltmp1 = L_mac(Lftmp1_real, ftmp2_real, phs_tbl[i]);

  00179	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  0017d	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2]
  00185	51		 push	 ecx
  00186	0f b7 55 e0	 movzx	 edx, WORD PTR _ftmp2_real$[ebp]
  0018a	52		 push	 edx
  0018b	8b 45 c8	 mov	 eax, DWORD PTR _Lftmp1_real$[ebp]
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 _L_mac
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH
  00197	89 45 98	 mov	 DWORD PTR _Ltmp1$[ebp], eax

; 218  : 		Ltmp1 = L_msu(Ltmp1, ftmp2_imag, phs_tbl[i + 1]);

  0019a	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  0019e	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2+2]
  001a6	51		 push	 ecx
  001a7	0f b7 55 d4	 movzx	 edx, WORD PTR _ftmp2_imag$[ebp]
  001ab	52		 push	 edx
  001ac	8b 45 98	 mov	 eax, DWORD PTR _Ltmp1$[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 _L_msu
  001b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b8	89 45 98	 mov	 DWORD PTR _Ltmp1$[ebp], eax

; 219  : 		*(farray_ptr + i) = round(L_shr(Ltmp1, 1));				move16();

  001bb	6a 01		 push	 1
  001bd	8b 45 98	 mov	 eax, DWORD PTR _Ltmp1$[ebp]
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 _L_shr
  001c6	83 c4 08	 add	 esp, 8
  001c9	50		 push	 eax
  001ca	e8 00 00 00 00	 call	 _round
  001cf	83 c4 04	 add	 esp, 4
  001d2	0f bf 4d b0	 movsx	 ecx, WORD PTR _i$[ebp]
  001d6	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  001d9	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001dd	e8 00 00 00 00	 call	 _move16

; 220  : 
; 221  : 		Ltmp1 = L_mac(Lftmp1_imag, ftmp2_imag, phs_tbl[i]);

  001e2	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  001e6	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2]
  001ee	51		 push	 ecx
  001ef	0f b7 55 d4	 movzx	 edx, WORD PTR _ftmp2_imag$[ebp]
  001f3	52		 push	 edx
  001f4	8b 45 bc	 mov	 eax, DWORD PTR _Lftmp1_imag$[ebp]
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 _L_mac
  001fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00200	89 45 98	 mov	 DWORD PTR _Ltmp1$[ebp], eax

; 222  : 		Ltmp1 = L_mac(Ltmp1, ftmp2_real, phs_tbl[i + 1]);

  00203	0f bf 45 b0	 movsx	 eax, WORD PTR _i$[ebp]
  00207	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2+2]
  0020f	51		 push	 ecx
  00210	0f b7 55 e0	 movzx	 edx, WORD PTR _ftmp2_real$[ebp]
  00214	52		 push	 edx
  00215	8b 45 98	 mov	 eax, DWORD PTR _Ltmp1$[ebp]
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 _L_mac
  0021e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00221	89 45 98	 mov	 DWORD PTR _Ltmp1$[ebp], eax

; 223  : 		*(farray_ptr + i + 1) = round(L_shr(Ltmp1, 1));				move16();

  00224	6a 01		 push	 1
  00226	8b 45 98	 mov	 eax, DWORD PTR _Ltmp1$[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 _L_shr
  0022f	83 c4 08	 add	 esp, 8
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 _round
  00238	83 c4 04	 add	 esp, 4
  0023b	0f bf 4d b0	 movsx	 ecx, WORD PTR _i$[ebp]
  0023f	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  00242	66 89 44 4a 02	 mov	 WORD PTR [edx+ecx*2+2], ax
  00247	e8 00 00 00 00	 call	 _move16

; 224  : 
; 225  : 		Ltmp1 = L_mac(Lftmp1_real, ftmp2_real, phs_tbl[j]);

  0024c	0f bf 45 a4	 movsx	 eax, WORD PTR _j$[ebp]
  00250	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2]
  00258	51		 push	 ecx
  00259	0f b7 55 e0	 movzx	 edx, WORD PTR _ftmp2_real$[ebp]
  0025d	52		 push	 edx
  0025e	8b 45 c8	 mov	 eax, DWORD PTR _Lftmp1_real$[ebp]
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 _L_mac
  00267	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026a	89 45 98	 mov	 DWORD PTR _Ltmp1$[ebp], eax

; 226  : 		Ltmp1 = L_mac(Ltmp1, ftmp2_imag, phs_tbl[j + 1]);

  0026d	0f bf 45 a4	 movsx	 eax, WORD PTR _j$[ebp]
  00271	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2+2]
  00279	51		 push	 ecx
  0027a	0f b7 55 d4	 movzx	 edx, WORD PTR _ftmp2_imag$[ebp]
  0027e	52		 push	 edx
  0027f	8b 45 98	 mov	 eax, DWORD PTR _Ltmp1$[ebp]
  00282	50		 push	 eax
  00283	e8 00 00 00 00	 call	 _L_mac
  00288	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028b	89 45 98	 mov	 DWORD PTR _Ltmp1$[ebp], eax

; 227  : 		*(farray_ptr + j) = round(L_shr(Ltmp1, 1));				move16();

  0028e	6a 01		 push	 1
  00290	8b 45 98	 mov	 eax, DWORD PTR _Ltmp1$[ebp]
  00293	50		 push	 eax
  00294	e8 00 00 00 00	 call	 _L_shr
  00299	83 c4 08	 add	 esp, 8
  0029c	50		 push	 eax
  0029d	e8 00 00 00 00	 call	 _round
  002a2	83 c4 04	 add	 esp, 4
  002a5	0f bf 4d a4	 movsx	 ecx, WORD PTR _j$[ebp]
  002a9	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  002ac	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002b0	e8 00 00 00 00	 call	 _move16

; 228  : 
; 229  : 		Ltmp1 = L_negate(Lftmp1_imag);

  002b5	8b 45 bc	 mov	 eax, DWORD PTR _Lftmp1_imag$[ebp]
  002b8	50		 push	 eax
  002b9	e8 00 00 00 00	 call	 _L_negate
  002be	83 c4 04	 add	 esp, 4
  002c1	89 45 98	 mov	 DWORD PTR _Ltmp1$[ebp], eax

; 230  : 		Ltmp1 = L_msu(Ltmp1, ftmp2_imag, phs_tbl[j]);

  002c4	0f bf 45 a4	 movsx	 eax, WORD PTR _j$[ebp]
  002c8	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2]
  002d0	51		 push	 ecx
  002d1	0f b7 55 d4	 movzx	 edx, WORD PTR _ftmp2_imag$[ebp]
  002d5	52		 push	 edx
  002d6	8b 45 98	 mov	 eax, DWORD PTR _Ltmp1$[ebp]
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 _L_msu
  002df	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e2	89 45 98	 mov	 DWORD PTR _Ltmp1$[ebp], eax

; 231  : 		Ltmp1 = L_mac(Ltmp1, ftmp2_real, phs_tbl[j + 1]);

  002e5	0f bf 45 a4	 movsx	 eax, WORD PTR _j$[ebp]
  002e9	0f b7 0c 45 02
	00 00 00	 movzx	 ecx, WORD PTR _phs_tbl[eax*2+2]
  002f1	51		 push	 ecx
  002f2	0f b7 55 e0	 movzx	 edx, WORD PTR _ftmp2_real$[ebp]
  002f6	52		 push	 edx
  002f7	8b 45 98	 mov	 eax, DWORD PTR _Ltmp1$[ebp]
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 _L_mac
  00300	83 c4 0c	 add	 esp, 12			; 0000000cH
  00303	89 45 98	 mov	 DWORD PTR _Ltmp1$[ebp], eax

; 232  : 		*(farray_ptr + j + 1) = round(L_shr(Ltmp1, 1));				move16();

  00306	6a 01		 push	 1
  00308	8b 45 98	 mov	 eax, DWORD PTR _Ltmp1$[ebp]
  0030b	50		 push	 eax
  0030c	e8 00 00 00 00	 call	 _L_shr
  00311	83 c4 08	 add	 esp, 8
  00314	50		 push	 eax
  00315	e8 00 00 00 00	 call	 _round
  0031a	83 c4 04	 add	 esp, 4
  0031d	0f bf 4d a4	 movsx	 ecx, WORD PTR _j$[ebp]
  00321	8b 55 08	 mov	 edx, DWORD PTR _farray_ptr$[ebp]
  00324	66 89 44 4a 02	 mov	 WORD PTR [edx+ecx*2+2], ax
  00329	e8 00 00 00 00	 call	 _move16

; 233  : 
; 234  : 	}

  0032e	e9 6b fd ff ff	 jmp	 $LN2@r_fft
$LN4@r_fft:

; 235  : }								/* end r_fft () */

  00333	5f		 pop	 edi
  00334	5e		 pop	 esi
  00335	5b		 pop	 ebx
  00336	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  0033c	3b ec		 cmp	 ebp, esp
  0033e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00343	8b e5		 mov	 esp, ebp
  00345	5d		 pop	 ebp
  00346	c3		 ret	 0
_r_fft	ENDP
_TEXT	ENDS
END
