; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\strfunc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_strfunc_id
PUBLIC	??_C@_05EDHEIFBA@MR475?$AA@			; `string'
PUBLIC	??_C@_05PPEFJOMH@MR515?$AA@			; `string'
PUBLIC	??_C@_04NEJOPJPC@MR59?$AA@			; `string'
PUBLIC	??_C@_04EIFLGKCF@MR67?$AA@			; `string'
PUBLIC	??_C@_04GCLEFDNB@MR74?$AA@			; `string'
PUBLIC	??_C@_05FLFPAHPE@MR795?$AA@			; `string'
PUBLIC	??_C@_05DOKEPFGA@MR102?$AA@			; `string'
PUBLIC	??_C@_05DNCACBAO@MR122?$AA@			; `string'
PUBLIC	??_C@_05LCIJEFBP@MRDTX?$AA@			; `string'
PUBLIC	??_C@_0P@PIJNM@RX_SPEECH_GOOD?$AA@		; `string'
PUBLIC	??_C@_0BD@NIHCMOLE@RX_SPEECH_DEGRADED?$AA@	; `string'
PUBLIC	??_C@_0O@KAIMFNHK@RX_SPEECH_BAD?$AA@		; `string'
PUBLIC	??_C@_0N@ENPPPPNA@RX_SID_FIRST?$AA@		; `string'
PUBLIC	??_C@_0O@GMMPLOFN@RX_SID_UPDATE?$AA@		; `string'
PUBLIC	??_C@_0L@EDGCELEC@RX_SID_BAD?$AA@		; `string'
PUBLIC	??_C@_08HOPPNKCK@RX_ONSET?$AA@			; `string'
PUBLIC	??_C@_0L@MMACDEHJ@RX_NO_DATA?$AA@		; `string'
PUBLIC	??_C@_0P@CCPFFNCO@TX_SPEECH_GOOD?$AA@		; `string'
PUBLIC	??_C@_0BD@EFKOMFKH@TX_SPEECH_DEGRADED?$AA@	; `string'
PUBLIC	??_C@_0O@FIEOBGMM@TX_SPEECH_BAD?$AA@		; `string'
PUBLIC	??_C@_0N@ONBKCAAN@TX_SID_FIRST?$AA@		; `string'
PUBLIC	??_C@_0O@JEANPFOL@TX_SID_UPDATE?$AA@		; `string'
PUBLIC	??_C@_0L@KLNHIBAB@TX_SID_BAD?$AA@		; `string'
PUBLIC	??_C@_08NOFKDKA@TX_ONSET?$AA@			; `string'
PUBLIC	??_C@_0L@CELHPODK@TX_NO_DATA?$AA@		; `string'
;	COMDAT ??_C@_0L@CELHPODK@TX_NO_DATA?$AA@
CONST	SEGMENT
??_C@_0L@CELHPODK@TX_NO_DATA?$AA@ DB 'TX_NO_DATA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NOFKDKA@TX_ONSET?$AA@
CONST	SEGMENT
??_C@_08NOFKDKA@TX_ONSET?$AA@ DB 'TX_ONSET', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KLNHIBAB@TX_SID_BAD?$AA@
CONST	SEGMENT
??_C@_0L@KLNHIBAB@TX_SID_BAD?$AA@ DB 'TX_SID_BAD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JEANPFOL@TX_SID_UPDATE?$AA@
CONST	SEGMENT
??_C@_0O@JEANPFOL@TX_SID_UPDATE?$AA@ DB 'TX_SID_UPDATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ONBKCAAN@TX_SID_FIRST?$AA@
CONST	SEGMENT
??_C@_0N@ONBKCAAN@TX_SID_FIRST?$AA@ DB 'TX_SID_FIRST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FIEOBGMM@TX_SPEECH_BAD?$AA@
CONST	SEGMENT
??_C@_0O@FIEOBGMM@TX_SPEECH_BAD?$AA@ DB 'TX_SPEECH_BAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFKOMFKH@TX_SPEECH_DEGRADED?$AA@
CONST	SEGMENT
??_C@_0BD@EFKOMFKH@TX_SPEECH_DEGRADED?$AA@ DB 'TX_SPEECH_DEGRADED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CCPFFNCO@TX_SPEECH_GOOD?$AA@
CONST	SEGMENT
??_C@_0P@CCPFFNCO@TX_SPEECH_GOOD?$AA@ DB 'TX_SPEECH_GOOD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MMACDEHJ@RX_NO_DATA?$AA@
CONST	SEGMENT
??_C@_0L@MMACDEHJ@RX_NO_DATA?$AA@ DB 'RX_NO_DATA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HOPPNKCK@RX_ONSET?$AA@
CONST	SEGMENT
??_C@_08HOPPNKCK@RX_ONSET?$AA@ DB 'RX_ONSET', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EDGCELEC@RX_SID_BAD?$AA@
CONST	SEGMENT
??_C@_0L@EDGCELEC@RX_SID_BAD?$AA@ DB 'RX_SID_BAD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GMMPLOFN@RX_SID_UPDATE?$AA@
CONST	SEGMENT
??_C@_0O@GMMPLOFN@RX_SID_UPDATE?$AA@ DB 'RX_SID_UPDATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ENPPPPNA@RX_SID_FIRST?$AA@
CONST	SEGMENT
??_C@_0N@ENPPPPNA@RX_SID_FIRST?$AA@ DB 'RX_SID_FIRST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KAIMFNHK@RX_SPEECH_BAD?$AA@
CONST	SEGMENT
??_C@_0O@KAIMFNHK@RX_SPEECH_BAD?$AA@ DB 'RX_SPEECH_BAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NIHCMOLE@RX_SPEECH_DEGRADED?$AA@
CONST	SEGMENT
??_C@_0BD@NIHCMOLE@RX_SPEECH_DEGRADED?$AA@ DB 'RX_SPEECH_DEGRADED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PIJNM@RX_SPEECH_GOOD?$AA@
CONST	SEGMENT
??_C@_0P@PIJNM@RX_SPEECH_GOOD?$AA@ DB 'RX_SPEECH_GOOD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCIJEFBP@MRDTX?$AA@
CONST	SEGMENT
??_C@_05LCIJEFBP@MRDTX?$AA@ DB 'MRDTX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNCACBAO@MR122?$AA@
CONST	SEGMENT
??_C@_05DNCACBAO@MR122?$AA@ DB 'MR122', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DOKEPFGA@MR102?$AA@
CONST	SEGMENT
??_C@_05DOKEPFGA@MR102?$AA@ DB 'MR102', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FLFPAHPE@MR795?$AA@
CONST	SEGMENT
??_C@_05FLFPAHPE@MR795?$AA@ DB 'MR795', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GCLEFDNB@MR74?$AA@
CONST	SEGMENT
??_C@_04GCLEFDNB@MR74?$AA@ DB 'MR74', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIFLGKCF@MR67?$AA@
CONST	SEGMENT
??_C@_04EIFLGKCF@MR67?$AA@ DB 'MR67', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NEJOPJPC@MR59?$AA@
CONST	SEGMENT
??_C@_04NEJOPJPC@MR59?$AA@ DB 'MR59', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPEFJOMH@MR515?$AA@
CONST	SEGMENT
??_C@_05PPEFJOMH@MR515?$AA@ DB 'MR515', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EDHEIFBA@MR475?$AA@
CONST	SEGMENT
??_C@_05EDHEIFBA@MR475?$AA@ DB 'MR475', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_strfunc_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_modetable DD	FLAT:??_C@_05EDHEIFBA@MR475?$AA@
	DD	00H
	DD	FLAT:??_C@_05PPEFJOMH@MR515?$AA@
	DD	01H
	DD	FLAT:??_C@_04NEJOPJPC@MR59?$AA@
	DD	02H
	DD	FLAT:??_C@_04EIFLGKCF@MR67?$AA@
	DD	03H
	DD	FLAT:??_C@_04GCLEFDNB@MR74?$AA@
	DD	04H
	DD	FLAT:??_C@_05FLFPAHPE@MR795?$AA@
	DD	05H
	DD	FLAT:??_C@_05DOKEPFGA@MR102?$AA@
	DD	06H
	DD	FLAT:??_C@_05DNCACBAO@MR122?$AA@
	DD	07H
	DD	FLAT:??_C@_05LCIJEFBP@MRDTX?$AA@
	DD	08H
	DD	00H
	DD	0ffffffffH
_rxframetable DD FLAT:??_C@_0P@PIJNM@RX_SPEECH_GOOD?$AA@
	DD	00H
	DD	FLAT:??_C@_0BD@NIHCMOLE@RX_SPEECH_DEGRADED?$AA@
	DD	01H
	DD	FLAT:??_C@_0O@KAIMFNHK@RX_SPEECH_BAD?$AA@
	DD	03H
	DD	FLAT:??_C@_0N@ENPPPPNA@RX_SID_FIRST?$AA@
	DD	04H
	DD	FLAT:??_C@_0O@GMMPLOFN@RX_SID_UPDATE?$AA@
	DD	05H
	DD	FLAT:??_C@_0L@EDGCELEC@RX_SID_BAD?$AA@
	DD	06H
	DD	FLAT:??_C@_08HOPPNKCK@RX_ONSET?$AA@
	DD	02H
	DD	FLAT:??_C@_0L@MMACDEHJ@RX_NO_DATA?$AA@
	DD	07H
	DD	00H
	DD	0ffffffffH
_txframetable DD FLAT:??_C@_0P@CCPFFNCO@TX_SPEECH_GOOD?$AA@
	DD	00H
	DD	FLAT:??_C@_0BD@EFKOMFKH@TX_SPEECH_DEGRADED?$AA@
	DD	04H
	DD	FLAT:??_C@_0O@FIEOBGMM@TX_SPEECH_BAD?$AA@
	DD	05H
	DD	FLAT:??_C@_0N@ONBKCAAN@TX_SID_FIRST?$AA@
	DD	01H
	DD	FLAT:??_C@_0O@JEANPFOL@TX_SID_UPDATE?$AA@
	DD	02H
	DD	FLAT:??_C@_0L@KLNHIBAB@TX_SID_BAD?$AA@
	DD	06H
	DD	FLAT:??_C@_08NOFKDKA@TX_ONSET?$AA@
	DD	07H
	DD	FLAT:??_C@_0L@CELHPODK@TX_NO_DATA?$AA@
	DD	03H
	DD	00H
	DD	0ffffffffH
CONST	ENDS
PUBLIC	_str2mode
PUBLIC	_mode2str
PUBLIC	_rxframe2str
PUBLIC	_txframe2str
EXTRN	_strcmp:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\strfunc.c
;	COMDAT _search_id
_TEXT	SEGMENT
_p$ = 8							; size = 4
_id$ = 12						; size = 4
_search_id PROC						; COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 133  :     if (id == -1)

  0001e	83 7d 0c ff	 cmp	 DWORD PTR _id$[ebp], -1
  00022	75 04		 jne	 SHORT $LN4@search_id

; 134  :         return NULL;

  00024	33 c0		 xor	 eax, eax
  00026	eb 25		 jmp	 SHORT $LN6@search_id
$LN4@search_id:

; 135  :     
; 136  :     do
; 137  :     {
; 138  :         if (p->id == id)

  00028	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0002b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002e	3b 4d 0c	 cmp	 ecx, DWORD PTR _id$[ebp]
  00031	75 07		 jne	 SHORT $LN1@search_id

; 139  :             return p->name;

  00033	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	eb 13		 jmp	 SHORT $LN6@search_id
$LN1@search_id:

; 140  :         p++;

  0003a	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003d	83 c0 08	 add	 eax, 8
  00040	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 141  :     } while (p->name != NULL);

  00043	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00046	83 38 00	 cmp	 DWORD PTR [eax], 0
  00049	75 dd		 jne	 SHORT $LN4@search_id

; 142  : 
; 143  :     return NULL;

  0004b	33 c0		 xor	 eax, eax
$LN6@search_id:

; 144  : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_search_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\strfunc.c
;	COMDAT _search_string
_TEXT	SEGMENT
_p$ = 8							; size = 4
_str$ = 12						; size = 4
_search_string PROC					; COMDAT

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 111  :     if (str == NULL)

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _str$[ebp], 0
  00022	75 05		 jne	 SHORT $LN4@search_str

; 112  :         return -1;

  00024	83 c8 ff	 or	 eax, -1
  00027	eb 32		 jmp	 SHORT $LN6@search_str
$LN4@search_str:

; 113  :     
; 114  :     do
; 115  :     {
; 116  :         if (strcmp(p->name, str) == 0)

  00029	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 _strcmp
  00038	83 c4 08	 add	 esp, 8
  0003b	85 c0		 test	 eax, eax
  0003d	75 08		 jne	 SHORT $LN1@search_str

; 117  :             return p->id;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00042	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00045	eb 14		 jmp	 SHORT $LN6@search_str
$LN1@search_str:

; 118  :         p++;

  00047	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0004a	83 c0 08	 add	 eax, 8
  0004d	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 119  :     } while (p->name != NULL);

  00050	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00053	83 38 00	 cmp	 DWORD PTR [eax], 0
  00056	75 d1		 jne	 SHORT $LN4@search_str

; 120  : 
; 121  :     return -1;

  00058	83 c8 ff	 or	 eax, -1
$LN6@search_str:

; 122  : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_search_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\strfunc.c
;	COMDAT _txframe2str
_TEXT	SEGMENT
tv68 = -196						; size = 4
_ft$ = 8						; size = 4
_str$ = 12						; size = 4
_txframe2str PROC					; COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 202  :     return ((*str = search_id(txframetable, (int) ft)) != NULL);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _ft$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET _txframetable
  00027	e8 00 00 00 00	 call	 _search_id
  0002c	83 c4 08	 add	 esp, 8
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00032	89 01		 mov	 DWORD PTR [ecx], eax
  00034	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00037	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0003a	74 0c		 je	 SHORT $LN3@txframe2st
  0003c	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv68[ebp], 1
  00046	eb 0a		 jmp	 SHORT $LN4@txframe2st
$LN3@txframe2st:
  00048	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
$LN4@txframe2st:
  00052	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]

; 203  : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_txframe2str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\strfunc.c
;	COMDAT _rxframe2str
_TEXT	SEGMENT
tv68 = -196						; size = 4
_ft$ = 8						; size = 4
_str$ = 12						; size = 4
_rxframe2str PROC					; COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 191  :     return ((*str = search_id(rxframetable, (int) ft)) != NULL);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _ft$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET _rxframetable
  00027	e8 00 00 00 00	 call	 _search_id
  0002c	83 c4 08	 add	 esp, 8
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00032	89 01		 mov	 DWORD PTR [ecx], eax
  00034	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00037	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0003a	74 0c		 je	 SHORT $LN3@rxframe2st
  0003c	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv68[ebp], 1
  00046	eb 0a		 jmp	 SHORT $LN4@rxframe2st
$LN3@rxframe2st:
  00048	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
$LN4@rxframe2st:
  00052	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]

; 192  : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_rxframe2str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\strfunc.c
;	COMDAT _mode2str
_TEXT	SEGMENT
tv68 = -196						; size = 4
_mode$ = 8						; size = 4
_str$ = 12						; size = 4
_mode2str PROC						; COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 180  :     return ((*str = search_id(modetable, (int) mode)) != NULL);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET _modetable
  00027	e8 00 00 00 00	 call	 _search_id
  0002c	83 c4 08	 add	 esp, 8
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00032	89 01		 mov	 DWORD PTR [ecx], eax
  00034	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00037	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0003a	74 0c		 je	 SHORT $LN3@mode2str
  0003c	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv68[ebp], 1
  00046	eb 0a		 jmp	 SHORT $LN4@mode2str
$LN3@mode2str:
  00048	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
$LN4@mode2str:
  00052	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]

; 181  : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_mode2str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\strfunc.c
;	COMDAT _str2mode
_TEXT	SEGMENT
_m$ = -8						; size = 4
_str$ = 8						; size = 4
_mode$ = 12						; size = 4
_str2mode PROC						; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 161  :     int m;
; 162  : 
; 163  :     if ((m = search_string(modetable, str)) == -1)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET _modetable
  00027	e8 00 00 00 00	 call	 _search_string
  0002c	83 c4 08	 add	 esp, 8
  0002f	89 45 f8	 mov	 DWORD PTR _m$[ebp], eax
  00032	83 7d f8 ff	 cmp	 DWORD PTR _m$[ebp], -1
  00036	75 07		 jne	 SHORT $LN1@str2mode

; 164  :         return 1;

  00038	b8 01 00 00 00	 mov	 eax, 1
  0003d	eb 0a		 jmp	 SHORT $LN2@str2mode
$LN1@str2mode:

; 165  : 
; 166  :     *mode = (enum Mode) m;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00042	8b 4d f8	 mov	 ecx, DWORD PTR _m$[ebp]
  00045	89 08		 mov	 DWORD PTR [eax], ecx

; 167  :     return 0;

  00047	33 c0		 xor	 eax, eax
$LN2@str2mode:

; 168  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_str2mode ENDP
_TEXT	ENDS
END
