; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\b_cn_cod.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_b_cn_cod_id
_DATA	SEGMENT
_window_200_40 DW 0a3dH
	DW	0a3fH
	DW	0a45H
	DW	0a4eH
	DW	0a5bH
	DW	0a6cH
	DW	0a81H
	DW	0a99H
	DW	0ab5H
	DW	0ad4H
	DW	0af8H
	DW	0b1fH
	DW	0b4aH
	DW	0b78H
	DW	0baaH
	DW	0be0H
	DW	0c19H
	DW	0c56H
	DW	0c97H
	DW	0cdbH
	DW	0d23H
	DW	0d6eH
	DW	0dbdH
	DW	0e0fH
	DW	0e65H
	DW	0ebeH
	DW	0f1bH
	DW	0f7bH
	DW	0fdfH
	DW	01046H
	DW	010b0H
	DW	0111eH
	DW	0118fH
	DW	01203H
	DW	0127bH
	DW	012f5H
	DW	01373H
	DW	013f4H
	DW	01478H
	DW	01500H
	DW	0158aH
	DW	01617H
	DW	016a8H
	DW	0173bH
	DW	017d1H
	DW	0186aH
	DW	01906H
	DW	019a5H
	DW	01a46H
	DW	01aeaH
	DW	01b91H
	DW	01c3bH
	DW	01ce7H
	DW	01d95H
	DW	01e46H
	DW	01efaH
	DW	01fb0H
	DW	02068H
	DW	02123H
	DW	021e0H
	DW	0229fH
	DW	02361H
	DW	02424H
	DW	024eaH
	DW	025b2H
	DW	0267cH
	DW	02747H
	DW	02815H
	DW	028e4H
	DW	029b5H
	DW	02a88H
	DW	02b5dH
	DW	02c33H
	DW	02d0bH
	DW	02de4H
	DW	02ebfH
	DW	02f9bH
	DW	03079H
	DW	03158H
	DW	03238H
	DW	0331aH
	DW	033fcH
	DW	034e0H
	DW	035c4H
	DW	036aaH
	DW	03791H
	DW	03878H
	DW	03960H
	DW	03a49H
	DW	03b33H
	DW	03c1dH
	DW	03d08H
	DW	03df3H
	DW	03edfH
	DW	03fcbH
	DW	040b8H
	DW	041a5H
	DW	04292H
	DW	0437fH
	DW	0446cH
	DW	0455aH
	DW	04647H
	DW	04734H
	DW	04821H
	DW	0490eH
	DW	049fbH
	DW	04ae7H
	DW	04bd3H
	DW	04cbfH
	DW	04daaH
	DW	04e95H
	DW	04f7eH
	DW	05068H
	DW	05150H
	DW	05238H
	DW	0531fH
	DW	05405H
	DW	054eaH
	DW	055cfH
	DW	056b2H
	DW	05794H
	DW	05874H
	DW	05954H
	DW	05a32H
	DW	05b0fH
	DW	05bebH
	DW	05cc5H
	DW	05d9dH
	DW	05e75H
	DW	05f4aH
	DW	0601eH
	DW	060f0H
	DW	061c0H
	DW	0628fH
	DW	0635bH
	DW	06426H
	DW	064efH
	DW	065b5H
	DW	0667aH
	DW	0673cH
	DW	067fdH
	DW	068bbH
	DW	06977H
	DW	06a30H
	DW	06ae8H
	DW	06b9cH
	DW	06c4fH
	DW	06cffH
	DW	06dacH
	DW	06e57H
	DW	06effH
	DW	06fa5H
	DW	07047H
	DW	070e7H
	DW	07185H
	DW	0721fH
	DW	072b7H
	DW	0734bH
	DW	073ddH
	DW	0746cH
	DW	074f8H
	DW	07581H
	DW	07606H
	DW	07689H
	DW	07708H
	DW	07785H
	DW	077feH
	DW	07874H
	DW	078e6H
	DW	07956H
	DW	079c2H
	DW	07a2aH
	DW	07a90H
	DW	07af2H
	DW	07b50H
	DW	07babH
	DW	07c03H
	DW	07c57H
	DW	07ca7H
	DW	07cf4H
	DW	07d3eH
	DW	07d84H
	DW	07dc6H
	DW	07e05H
	DW	07e40H
	DW	07e78H
	DW	07eacH
	DW	07edcH
	DW	07f09H
	DW	07f31H
	DW	07f57H
	DW	07f78H
	DW	07f96H
	DW	07fb0H
	DW	07fc7H
	DW	07fd9H
	DW	07fe8H
	DW	07ff3H
	DW	07ffbH
	DW	07fffH
	DW	07fffH
	DW	07fe5H
	DW	07f99H
	DW	07f19H
	DW	07e67H
	DW	07d81H
	DW	07c6aH
	DW	07b21H
	DW	079a7H
	DW	077fcH
	DW	07622H
	DW	07418H
	DW	071dfH
	DW	06f7aH
	DW	06ce7H
	DW	06a29H
	DW	06741H
	DW	0642fH
	DW	060f5H
	DW	05d95H
	DW	05a0fH
	DW	05665H
	DW	05299H
	DW	04eabH
	DW	04a9eH
	DW	04674H
	DW	0422dH
	DW	03dccH
	DW	03952H
	DW	034c1H
	DW	0301bH
	DW	02b62H
	DW	02697H
	DW	021bdH
	DW	01cd5H
	DW	017e2H
	DW	012e6H
	DW	0de2H
	DW	08d8H
	DW	03cbH
_DATA	ENDS
CONST	SEGMENT
_b_cn_cod_id DB	'@(#)$Id $$Id $', 00H
	ORG $+1
_window_160_80 DW 0a3dH
	DW	0a40H
	DW	0a49H
	DW	0a58H
	DW	0a6cH
	DW	0a87H
	DW	0aa7H
	DW	0acdH
	DW	0af9H
	DW	0b2bH
	DW	0b63H
	DW	0ba0H
	DW	0be3H
	DW	0c2cH
	DW	0c7aH
	DW	0ccfH
	DW	0d28H
	DW	0d88H
	DW	0dedH
	DW	0e57H
	DW	0ec7H
	DW	0f3cH
	DW	0fb7H
	DW	01037H
	DW	010bdH
	DW	01147H
	DW	011d7H
	DW	0126cH
	DW	01306H
	DW	013a5H
	DW	01449H
	DW	014f2H
	DW	0159fH
	DW	01652H
	DW	01709H
	DW	017c4H
	DW	01885H
	DW	01949H
	DW	01a12H
	DW	01ae0H
	DW	01bb1H
	DW	01c87H
	DW	01d61H
	DW	01e3eH
	DW	01f20H
	DW	02005H
	DW	020eeH
	DW	021dbH
	DW	022cbH
	DW	023bfH
	DW	024b6H
	DW	025b0H
	DW	026aeH
	DW	027aeH
	DW	028b1H
	DW	029b8H
	DW	02ac1H
	DW	02bccH
	DW	02cdaH
	DW	02debH
	DW	02efeH
	DW	03013H
	DW	0312aH
	DW	03243H
	DW	0335eH
	DW	0347bH
	DW	0359aH
	DW	036baH
	DW	037dbH
	DW	038feH
	DW	03a22H
	DW	03b47H
	DW	03c6dH
	DW	03d94H
	DW	03ebcH
	DW	03fe4H
	DW	0410dH
	DW	04236H
	DW	04360H
	DW	0448aH
	DW	045b4H
	DW	046ddH
	DW	04807H
	DW	04930H
	DW	04a59H
	DW	04b82H
	DW	04ca9H
	DW	04dd0H
	DW	04ef6H
	DW	0501bH
	DW	0513fH
	DW	05262H
	DW	05384H
	DW	054a4H
	DW	055c2H
	DW	056dfH
	DW	057faH
	DW	05913H
	DW	05a2bH
	DW	05b40H
	DW	05c53H
	DW	05d63H
	DW	05e71H
	DW	05f7dH
	DW	06086H
	DW	0618cH
	DW	0628fH
	DW	06390H
	DW	0648dH
	DW	06587H
	DW	0667eH
	DW	06772H
	DW	06862H
	DW	0694fH
	DW	06a38H
	DW	06b1eH
	DW	06bffH
	DW	06cddH
	DW	06db7H
	DW	06e8cH
	DW	06f5eH
	DW	0702bH
	DW	070f4H
	DW	071b9H
	DW	07279H
	DW	07335H
	DW	073ecH
	DW	0749eH
	DW	0754cH
	DW	075f5H
	DW	07699H
	DW	07737H
	DW	077d1H
	DW	07866H
	DW	078f6H
	DW	07981H
	DW	07a06H
	DW	07a86H
	DW	07b01H
	DW	07b76H
	DW	07be6H
	DW	07c51H
	DW	07cb6H
	DW	07d15H
	DW	07d6fH
	DW	07dc3H
	DW	07e11H
	DW	07e5aH
	DW	07e9dH
	DW	07edbH
	DW	07f12H
	DW	07f44H
	DW	07f70H
	DW	07f96H
	DW	07fb7H
	DW	07fd1H
	DW	07fe6H
	DW	07ff4H
	DW	07ffdH
	DW	07fffH
	DW	07fffH
	DW	07ff4H
	DW	07fd0H
	DW	07f95H
	DW	07f42H
	DW	07ed7H
	DW	07e55H
	DW	07dbcH
	DW	07d0cH
	DW	07c45H
	DW	07b68H
	DW	07a75H
	DW	0796cH
	DW	0784eH
	DW	0771cH
	DW	075d5H
	DW	0747aH
	DW	0730dH
	DW	0718cH
	DW	06ffaH
	DW	06e57H
	DW	06ca2H
	DW	06adeH
	DW	0690bH
	DW	06728H
	DW	06539H
	DW	0633cH
	DW	06133H
	DW	05f1eH
	DW	05cffH
	DW	05ad7H
	DW	058a5H
	DW	0566cH
	DW	0542cH
	DW	051e5H
	DW	04f9aH
	DW	04d4aH
	DW	04af7H
	DW	048a1H
	DW	0464aH
	DW	043f3H
	DW	0419cH
	DW	03f47H
	DW	03cf4H
	DW	03aa4H
	DW	03858H
	DW	03612H
	DW	033d1H
	DW	03198H
	DW	02f67H
	DW	02d3eH
	DW	02b1fH
	DW	0290bH
	DW	02702H
	DW	02505H
	DW	02315H
	DW	02133H
	DW	01f5fH
	DW	01d9bH
	DW	01be7H
	DW	01a43H
	DW	018b1H
	DW	01731H
	DW	015c3H
	DW	01469H
	DW	01322H
	DW	011efH
	DW	010d1H
	DW	0fc9H
	DW	0ed6H
	DW	0df9H
	DW	0d32H
	DW	0c82H
	DW	0be8H
	DW	0b66H
	DW	0afcH
	DW	0aa9H
	DW	0a6dH
	DW	0a49H
	DW	0a3dH
_window_232_8 DW 0a3dH
	DW	0a3fH
	DW	0a43H
	DW	0a4aH
	DW	0a54H
	DW	0a60H
	DW	0a6fH
	DW	0a81H
	DW	0a96H
	DW	0aaeH
	DW	0ac8H
	DW	0ae5H
	DW	0b05H
	DW	0b27H
	DW	0b4dH
	DW	0b75H
	DW	0b9fH
	DW	0bcdH
	DW	0bfdH
	DW	0c30H
	DW	0c65H
	DW	0c9dH
	DW	0cd8H
	DW	0d16H
	DW	0d56H
	DW	0d99H
	DW	0ddeH
	DW	0e26H
	DW	0e71H
	DW	0ebeH
	DW	0f0dH
	DW	0f60H
	DW	0fb5H
	DW	0100cH
	DW	01066H
	DW	010c2H
	DW	01121H
	DW	01182H
	DW	011e6H
	DW	0124cH
	DW	012b4H
	DW	0131fH
	DW	0138cH
	DW	013fcH
	DW	0146eH
	DW	014e2H
	DW	01558H
	DW	015d1H
	DW	0164cH
	DW	016c9H
	DW	01748H
	DW	017caH
	DW	0184dH
	DW	018d3H
	DW	0195bH
	DW	019e5H
	DW	01a71H
	DW	01afeH
	DW	01b8eH
	DW	01c20H
	DW	01cb4H
	DW	01d4aH
	DW	01de1H
	DW	01e7bH
	DW	01f16H
	DW	01fb3H
	DW	02052H
	DW	020f2H
	DW	02195H
	DW	02239H
	DW	022deH
	DW	02385H
	DW	0242eH
	DW	024d8H
	DW	02584H
	DW	02632H
	DW	026e0H
	DW	02791H
	DW	02842H
	DW	028f5H
	DW	029a9H
	DW	02a5fH
	DW	02b16H
	DW	02bceH
	DW	02c87H
	DW	02d42H
	DW	02dfdH
	DW	02ebaH
	DW	02f78H
	DW	03036H
	DW	030f6H
	DW	031b7H
	DW	03278H
	DW	0333bH
	DW	033feH
	DW	034c2H
	DW	03587H
	DW	0364dH
	DW	03713H
	DW	037daH
	DW	038a1H
	DW	0396aH
	DW	03a32H
	DW	03afcH
	DW	03bc5H
	DW	03c90H
	DW	03d5aH
	DW	03e25H
	DW	03ef0H
	DW	03fbcH
	DW	04088H
	DW	04154H
	DW	04220H
	DW	042ecH
	DW	043b9H
	DW	04485H
	DW	04552H
	DW	0461eH
	DW	046ebH
	DW	047b7H
	DW	04884H
	DW	04950H
	DW	04a1cH
	DW	04ae7H
	DW	04bb3H
	DW	04c7eH
	DW	04d49H
	DW	04e13H
	DW	04eddH
	DW	04fa6H
	DW	0506fH
	DW	05138H
	DW	05200H
	DW	052c7H
	DW	0538eH
	DW	05454H
	DW	05519H
	DW	055ddH
	DW	056a1H
	DW	05764H
	DW	05826H
	DW	058e7H
	DW	059a7H
	DW	05a67H
	DW	05b25H
	DW	05be2H
	DW	05c9eH
	DW	05d59H
	DW	05e13H
	DW	05eccH
	DW	05f83H
	DW	06039H
	DW	060eeH
	DW	061a2H
	DW	06254H
	DW	06305H
	DW	063b5H
	DW	06463H
	DW	0650fH
	DW	065baH
	DW	06664H
	DW	0670cH
	DW	067b2H
	DW	06857H
	DW	068faH
	DW	0699bH
	DW	06a3bH
	DW	06ad9H
	DW	06b75H
	DW	06c10H
	DW	06ca8H
	DW	06d3fH
	DW	06dd3H
	DW	06e66H
	DW	06ef7H
	DW	06f86H
	DW	07013H
	DW	0709eH
	DW	07127H
	DW	071aeH
	DW	07232H
	DW	072b5H
	DW	07335H
	DW	073b3H
	DW	0742fH
	DW	074a9H
	DW	07521H
	DW	07596H
	DW	07609H
	DW	0767aH
	DW	076e8H
	DW	07754H
	DW	077beH
	DW	07825H
	DW	0788aH
	DW	078ecH
	DW	0794cH
	DW	079aaH
	DW	07a05H
	DW	07a5eH
	DW	07ab4H
	DW	07b07H
	DW	07b58H
	DW	07ba7H
	DW	07bf2H
	DW	07c3cH
	DW	07c82H
	DW	07cc6H
	DW	07d08H
	DW	07d47H
	DW	07d83H
	DW	07dbcH
	DW	07df3H
	DW	07e27H
	DW	07e59H
	DW	07e88H
	DW	07eb4H
	DW	07eddH
	DW	07f04H
	DW	07f28H
	DW	07f49H
	DW	07f67H
	DW	07f83H
	DW	07f9cH
	DW	07fb2H
	DW	07fc5H
	DW	07fd6H
	DW	07fe4H
	DW	07fefH
	DW	07ff7H
	DW	07ffdH
	DW	07fffH
	DW	07fffH
	DW	07d61H
	DW	075a0H
	DW	0690fH
	DW	05830H
	DW	043b5H
	DW	02c74H
	DW	01362H
CONST	ENDS
PUBLIC	_pseudonoise
PUBLIC	_build_CN_code
PUBLIC	_build_CN_param
EXTRN	_add:PROC
EXTRN	_shl:PROC
EXTRN	_shr:PROC
EXTRN	_L_mult:PROC
EXTRN	_extract_l:PROC
EXTRN	_L_add:PROC
EXTRN	_L_shr:PROC
EXTRN	_move16:PROC
EXTRN	_move32:PROC
EXTRN	_logic16:PROC
EXTRN	_logic32:PROC
EXTRN	_test:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\b_cn_cod.c
;	COMDAT _build_CN_param
_TEXT	SEGMENT
_p$ = -20						; size = 4
_i$ = -8						; size = 2
_seed$ = 8						; size = 4
_n_param$ = 12						; size = 2
_param_size_table$ = 16					; size = 4
_parm$ = 20						; size = 4
_build_CN_param PROC					; COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 152  :    Word16 i;
; 153  :    const Word16 *p;
; 154  : 
; 155  :    *seed = extract_l(L_add(L_shr(L_mult(*seed, 31821), 1), 13849L));

  0001e	68 19 36 00 00	 push	 13849			; 00003619H
  00023	6a 01		 push	 1
  00025	68 4d 7c 00 00	 push	 31821			; 00007c4dH
  0002a	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]
  0002d	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _L_mult
  00036	83 c4 08	 add	 esp, 8
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _L_shr
  0003f	83 c4 08	 add	 esp, 8
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _L_add
  00048	83 c4 08	 add	 esp, 8
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _extract_l
  00051	83 c4 04	 add	 esp, 4
  00054	8b 55 08	 mov	 edx, DWORD PTR _seed$[ebp]
  00057	66 89 02	 mov	 WORD PTR [edx], ax

; 156  : 
; 157  :    p = &window_200_40[*seed & 0x7F]; logic16();

  0005a	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]
  0005d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00060	83 e1 7f	 and	 ecx, 127		; 0000007fH
  00063	8d 14 4d 00 00
	00 00		 lea	 edx, DWORD PTR _window_200_40[ecx*2]
  0006a	89 55 ec	 mov	 DWORD PTR _p$[ebp], edx
  0006d	e8 00 00 00 00	 call	 _logic16

; 158  :    for(i=0; i< n_param;i++){

  00072	33 c0		 xor	 eax, eax
  00074	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00078	eb 0c		 jmp	 SHORT $LN3@build_CN_p
$LN2@build_CN_p:
  0007a	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0007e	66 83 c0 01	 add	 ax, 1
  00082	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN3@build_CN_p:
  00086	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0008a	0f bf 4d 0c	 movsx	 ecx, WORD PTR _n_param$[ebp]
  0008e	3b c1		 cmp	 eax, ecx
  00090	7d 46		 jge	 SHORT $LN4@build_CN_p

; 159  :      move16 (); logic16(); logic16(); logic16();

  00092	e8 00 00 00 00	 call	 _move16
  00097	e8 00 00 00 00	 call	 _logic16
  0009c	e8 00 00 00 00	 call	 _logic16
  000a1	e8 00 00 00 00	 call	 _logic16

; 160  :      parm[i] = *p++ & ~(0xFFFF<<param_size_table[i]);  

  000a6	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  000a9	0f bf 10	 movsx	 edx, WORD PTR [eax]
  000ac	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000b0	8b 4d 10	 mov	 ecx, DWORD PTR _param_size_table$[ebp]
  000b3	0f bf 0c 41	 movsx	 ecx, WORD PTR [ecx+eax*2]
  000b7	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000bc	d3 e0		 shl	 eax, cl
  000be	f7 d0		 not	 eax
  000c0	23 d0		 and	 edx, eax
  000c2	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000c6	8b 45 14	 mov	 eax, DWORD PTR _parm$[ebp]
  000c9	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  000cd	8b 4d ec	 mov	 ecx, DWORD PTR _p$[ebp]
  000d0	83 c1 02	 add	 ecx, 2
  000d3	89 4d ec	 mov	 DWORD PTR _p$[ebp], ecx

; 161  :    }

  000d6	eb a2		 jmp	 SHORT $LN2@build_CN_p
$LN4@build_CN_p:

; 162  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000e1	3b ec		 cmp	 ebp, esp
  000e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
_build_CN_param ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\b_cn_cod.c
;	COMDAT _build_CN_code
_TEXT	SEGMENT
_k$ = -32						; size = 2
_j$ = -20						; size = 2
_i$ = -8						; size = 2
_seed$ = 8						; size = 4
_cod$ = 12						; size = 4
_build_CN_code PROC					; COMDAT

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 111  :    Word16 i, j, k;
; 112  :    
; 113  :    for (i = 0; i < L_SUBFR; i++)

  0001e	33 c0		 xor	 eax, eax
  00020	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
  00024	eb 0c		 jmp	 SHORT $LN8@build_CN_c
$LN7@build_CN_c:
  00026	66 8b 45 f8	 mov	 ax, WORD PTR _i$[ebp]
  0002a	66 83 c0 01	 add	 ax, 1
  0002e	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax
$LN8@build_CN_c:
  00032	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  00036	83 f8 28	 cmp	 eax, 40			; 00000028H
  00039	7d 14		 jge	 SHORT $LN6@build_CN_c

; 114  :    {
; 115  :       cod[i] = 0;                    move16 ();     

  0003b	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0003f	33 c9		 xor	 ecx, ecx
  00041	8b 55 0c	 mov	 edx, DWORD PTR _cod$[ebp]
  00044	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00048	e8 00 00 00 00	 call	 _move16

; 116  :    }

  0004d	eb d7		 jmp	 SHORT $LN7@build_CN_c
$LN6@build_CN_c:

; 117  :    
; 118  :    for (k = 0; k < NB_PULSE; k++)

  0004f	33 c0		 xor	 eax, eax
  00051	66 89 45 e0	 mov	 WORD PTR _k$[ebp], ax
  00055	eb 0c		 jmp	 SHORT $LN5@build_CN_c
$LN4@build_CN_c:
  00057	66 8b 45 e0	 mov	 ax, WORD PTR _k$[ebp]
  0005b	66 83 c0 01	 add	 ax, 1
  0005f	66 89 45 e0	 mov	 WORD PTR _k$[ebp], ax
$LN5@build_CN_c:
  00063	0f bf 45 e0	 movsx	 eax, WORD PTR _k$[ebp]
  00067	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0006a	0f 8d a2 00 00
	00		 jge	 $LN9@build_CN_c

; 119  :    {
; 120  :       i = pseudonoise (seed, 2);      /* generate pulse position */

  00070	6a 02		 push	 2
  00072	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _pseudonoise
  0007b	83 c4 08	 add	 esp, 8
  0007e	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 121  :       i = shr (extract_l (L_mult (i, 10)), 1);

  00082	6a 01		 push	 1
  00084	6a 0a		 push	 10			; 0000000aH
  00086	0f b7 45 f8	 movzx	 eax, WORD PTR _i$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _L_mult
  00090	83 c4 08	 add	 esp, 8
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _extract_l
  00099	83 c4 04	 add	 esp, 4
  0009c	0f b7 c8	 movzx	 ecx, ax
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 _shr
  000a5	83 c4 08	 add	 esp, 8
  000a8	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 122  :       i = add (i, k);

  000ac	0f b7 45 e0	 movzx	 eax, WORD PTR _k$[ebp]
  000b0	50		 push	 eax
  000b1	0f b7 4d f8	 movzx	 ecx, WORD PTR _i$[ebp]
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 _add
  000bb	83 c4 08	 add	 esp, 8
  000be	66 89 45 f8	 mov	 WORD PTR _i$[ebp], ax

; 123  :       
; 124  :       j = pseudonoise (seed, 1);      /* generate sign           */

  000c2	6a 01		 push	 1
  000c4	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _pseudonoise
  000cd	83 c4 08	 add	 esp, 8
  000d0	66 89 45 ec	 mov	 WORD PTR _j$[ebp], ax

; 125  : 
; 126  :       test ();   

  000d4	e8 00 00 00 00	 call	 _test

; 127  :       if (j > 0)

  000d9	0f bf 45 ec	 movsx	 eax, WORD PTR _j$[ebp]
  000dd	85 c0		 test	 eax, eax
  000df	7e 17		 jle	 SHORT $LN2@build_CN_c

; 128  :       {
; 129  :          cod[i] = 4096;              move16 ();                   

  000e1	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000e5	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  000ea	8b 55 0c	 mov	 edx, DWORD PTR _cod$[ebp]
  000ed	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  000f1	e8 00 00 00 00	 call	 _move16

; 130  :       }
; 131  :       else

  000f6	eb 15		 jmp	 SHORT $LN1@build_CN_c
$LN2@build_CN_c:

; 132  :       {
; 133  :          cod[i] = -4096;             move16 ();                         

  000f8	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  000fc	b9 00 f0 ff ff	 mov	 ecx, -4096		; fffff000H
  00101	8b 55 0c	 mov	 edx, DWORD PTR _cod$[ebp]
  00104	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00108	e8 00 00 00 00	 call	 _move16
$LN1@build_CN_c:

; 134  :       }
; 135  :    }

  0010d	e9 45 ff ff ff	 jmp	 $LN4@build_CN_c
$LN9@build_CN_c:

; 136  :    
; 137  :    return;
; 138  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
_build_CN_code ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\b_cn_cod.c
;	COMDAT _pseudonoise
_TEXT	SEGMENT
_i$ = -32						; size = 2
_Sn$ = -20						; size = 2
_noise_bits$ = -8					; size = 2
_shift_reg$ = 8						; size = 4
_no_bits$ = 12						; size = 2
_pseudonoise PROC					; COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 60   :    Word16 noise_bits, Sn, i;
; 61   :    
; 62   :    noise_bits = 0;                              move16 ();

  0001e	33 c0		 xor	 eax, eax
  00020	66 89 45 f8	 mov	 WORD PTR _noise_bits$[ebp], ax
  00024	e8 00 00 00 00	 call	 _move16

; 63   :    for (i = 0; i < no_bits; i++)

  00029	33 c0		 xor	 eax, eax
  0002b	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
  0002f	eb 0c		 jmp	 SHORT $LN8@pseudonois
$LN7@pseudonois:
  00031	66 8b 45 e0	 mov	 ax, WORD PTR _i$[ebp]
  00035	66 83 c0 01	 add	 ax, 1
  00039	66 89 45 e0	 mov	 WORD PTR _i$[ebp], ax
$LN8@pseudonois:
  0003d	0f bf 45 e0	 movsx	 eax, WORD PTR _i$[ebp]
  00041	0f bf 4d 0c	 movsx	 ecx, WORD PTR _no_bits$[ebp]
  00045	3b c1		 cmp	 eax, ecx
  00047	0f 8d f1 00 00
	00		 jge	 $LN6@pseudonois

; 64   :    {
; 65   :       /* State n == 31 */
; 66   :       test (); logic32 ();

  0004d	e8 00 00 00 00	 call	 _test
  00052	e8 00 00 00 00	 call	 _logic32

; 67   :       if ((*shift_reg & 0x00000001L) != 0)

  00057	8b 45 08	 mov	 eax, DWORD PTR _shift_reg$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	83 e1 01	 and	 ecx, 1
  0005f	74 10		 je	 SHORT $LN5@pseudonois

; 68   :       {
; 69   :          Sn = 1;                                move16 ();                         

  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	66 89 45 ec	 mov	 WORD PTR _Sn$[ebp], ax
  0006a	e8 00 00 00 00	 call	 _move16

; 70   :       }
; 71   :       else

  0006f	eb 0b		 jmp	 SHORT $LN4@pseudonois
$LN5@pseudonois:

; 72   :       {
; 73   :          Sn = 0;                                move16 ();                        

  00071	33 c0		 xor	 eax, eax
  00073	66 89 45 ec	 mov	 WORD PTR _Sn$[ebp], ax
  00077	e8 00 00 00 00	 call	 _move16
$LN4@pseudonois:

; 74   :       }
; 75   :       
; 76   :       /* State n == 3 */
; 77   :       test (); logic32 ();

  0007c	e8 00 00 00 00	 call	 _test
  00081	e8 00 00 00 00	 call	 _logic32

; 78   :       if ((*shift_reg & 0x10000000L) != 0)

  00086	8b 45 08	 mov	 eax, DWORD PTR _shift_reg$[ebp]
  00089	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008b	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  00091	74 17		 je	 SHORT $LN3@pseudonois

; 79   :       {
; 80   :          Sn = Sn ^ 1;                           move16 (); logic16 ();

  00093	0f bf 45 ec	 movsx	 eax, WORD PTR _Sn$[ebp]
  00097	83 f0 01	 xor	 eax, 1
  0009a	66 89 45 ec	 mov	 WORD PTR _Sn$[ebp], ax
  0009e	e8 00 00 00 00	 call	 _move16
  000a3	e8 00 00 00 00	 call	 _logic16

; 81   :       }
; 82   :       else

  000a8	eb 12		 jmp	 SHORT $LN2@pseudonois
$LN3@pseudonois:

; 83   :       {
; 84   :          Sn = Sn ^ 0;                           move16 (); logic16 ();  

  000aa	66 8b 45 ec	 mov	 ax, WORD PTR _Sn$[ebp]
  000ae	66 89 45 ec	 mov	 WORD PTR _Sn$[ebp], ax
  000b2	e8 00 00 00 00	 call	 _move16
  000b7	e8 00 00 00 00	 call	 _logic16
$LN2@pseudonois:

; 85   :       }
; 86   :       
; 87   :       noise_bits = shl (noise_bits, 1);

  000bc	6a 01		 push	 1
  000be	0f b7 45 f8	 movzx	 eax, WORD PTR _noise_bits$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _shl
  000c8	83 c4 08	 add	 esp, 8
  000cb	66 89 45 f8	 mov	 WORD PTR _noise_bits$[ebp], ax

; 88   :       noise_bits = noise_bits | (extract_l (*shift_reg) & 1);

  000cf	0f bf 75 f8	 movsx	 esi, WORD PTR _noise_bits$[ebp]
  000d3	8b 45 08	 mov	 eax, DWORD PTR _shift_reg$[ebp]
  000d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 _extract_l
  000de	83 c4 04	 add	 esp, 4
  000e1	0f bf d0	 movsx	 edx, ax
  000e4	83 e2 01	 and	 edx, 1
  000e7	0b f2		 or	 esi, edx
  000e9	66 89 75 f8	 mov	 WORD PTR _noise_bits$[ebp], si

; 89   :       logic16 (); logic16 (); move16 ();

  000ed	e8 00 00 00 00	 call	 _logic16
  000f2	e8 00 00 00 00	 call	 _logic16
  000f7	e8 00 00 00 00	 call	 _move16

; 90   :       
; 91   :       *shift_reg = L_shr (*shift_reg, 1);         

  000fc	6a 01		 push	 1
  000fe	8b 45 08	 mov	 eax, DWORD PTR _shift_reg$[ebp]
  00101	8b 08		 mov	 ecx, DWORD PTR [eax]
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 _L_shr
  00109	83 c4 08	 add	 esp, 8
  0010c	8b 55 08	 mov	 edx, DWORD PTR _shift_reg$[ebp]
  0010f	89 02		 mov	 DWORD PTR [edx], eax

; 92   :       test ();

  00111	e8 00 00 00 00	 call	 _test

; 93   :       if (Sn & 1)

  00116	0f bf 45 ec	 movsx	 eax, WORD PTR _Sn$[ebp]
  0011a	83 e0 01	 and	 eax, 1
  0011d	74 1a		 je	 SHORT $LN1@pseudonois

; 94   :       {
; 95   :          *shift_reg = *shift_reg | 0x40000000L; move32 (); logic32 ();

  0011f	8b 45 08	 mov	 eax, DWORD PTR _shift_reg$[ebp]
  00122	8b 08		 mov	 ecx, DWORD PTR [eax]
  00124	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  0012a	8b 55 08	 mov	 edx, DWORD PTR _shift_reg$[ebp]
  0012d	89 0a		 mov	 DWORD PTR [edx], ecx
  0012f	e8 00 00 00 00	 call	 _move32
  00134	e8 00 00 00 00	 call	 _logic32
$LN1@pseudonois:

; 96   :       }
; 97   :    }

  00139	e9 f3 fe ff ff	 jmp	 $LN7@pseudonois
$LN6@pseudonois:

; 98   :    return noise_bits;

  0013e	66 8b 45 f8	 mov	 ax, WORD PTR _noise_bits$[ebp]

; 99   : }

  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	5b		 pop	 ebx
  00145	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0014b	3b ec		 cmp	 ebp, esp
  0014d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c3		 ret	 0
_pseudonoise ENDP
_TEXT	ENDS
END
