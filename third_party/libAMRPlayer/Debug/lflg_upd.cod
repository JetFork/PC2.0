; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\lflg_upd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_lflg_upd_id
CONST	SEGMENT
_lflg_upd_id DB	'@(#)$Id $', 00H
CONST	ENDS
PUBLIC	_LTP_flag_update
EXTRN	_sub:PROC
EXTRN	_L_sub:PROC
EXTRN	_L_Extract:PROC
EXTRN	_Mpy_32_16:PROC
EXTRN	_move16:PROC
EXTRN	_test:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\lflg_upd.c
;	COMDAT _LTP_flag_update
_TEXT	SEGMENT
_Ltmp$ = -44						; size = 4
_lo1$ = -32						; size = 2
_hi1$ = -20						; size = 2
_thresh$ = -8						; size = 2
_st$ = 8						; size = 4
_mode$ = 12						; size = 2
_LTP_flag_update PROC					; COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 57   : 	Word16 thresh;
; 58   : 	Word16 hi1;
; 59   : 	Word16 lo1;
; 60   : 	Word32 Ltmp;
; 61   : 
; 62   : 									test(); test();

  0001e	e8 00 00 00 00	 call	 _test
  00023	e8 00 00 00 00	 call	 _test

; 63   : 	if ((sub(mode, MR475) == 0) || (sub(mode, MR515) == 0))

  00028	6a 00		 push	 0
  0002a	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _sub
  00034	83 c4 08	 add	 esp, 8
  00037	0f bf c8	 movsx	 ecx, ax
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 16		 je	 SHORT $LN6@LTP_flag_u
  0003e	6a 01		 push	 1
  00040	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _sub
  0004a	83 c4 08	 add	 esp, 8
  0004d	0f bf c8	 movsx	 ecx, ax
  00050	85 c9		 test	 ecx, ecx
  00052	75 10		 jne	 SHORT $LN7@LTP_flag_u
$LN6@LTP_flag_u:

; 64   : 	{
; 65   : 		thresh = (Word16)(32768.0*0.55);			move16();

  00054	b8 66 46 00 00	 mov	 eax, 18022		; 00004666H
  00059	66 89 45 f8	 mov	 WORD PTR _thresh$[ebp], ax
  0005d	e8 00 00 00 00	 call	 _move16
  00062	eb 34		 jmp	 SHORT $LN5@LTP_flag_u
$LN7@LTP_flag_u:

; 66   : 	}
; 67   : 	else if (sub(mode, MR102) == 0)

  00064	6a 06		 push	 6
  00066	0f b7 45 0c	 movzx	 eax, WORD PTR _mode$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _sub
  00070	83 c4 08	 add	 esp, 8
  00073	0f bf c8	 movsx	 ecx, ax
  00076	85 c9		 test	 ecx, ecx
  00078	75 10		 jne	 SHORT $LN4@LTP_flag_u

; 68   : 	{
; 69   : 		thresh = (Word16)(32768.0*0.60);			move16();

  0007a	b8 cc 4c 00 00	 mov	 eax, 19660		; 00004cccH
  0007f	66 89 45 f8	 mov	 WORD PTR _thresh$[ebp], ax
  00083	e8 00 00 00 00	 call	 _move16

; 70   : 	}
; 71   : 	else

  00088	eb 0e		 jmp	 SHORT $LN5@LTP_flag_u
$LN4@LTP_flag_u:

; 72   : 	{
; 73   : 		thresh = (Word16)(32768.0*0.65);			move16();

  0008a	b8 33 53 00 00	 mov	 eax, 21299		; 00005333H
  0008f	66 89 45 f8	 mov	 WORD PTR _thresh$[ebp], ax
  00093	e8 00 00 00 00	 call	 _move16
$LN5@LTP_flag_u:

; 74   : 	}
; 75   : 
; 76   : 	L_Extract (st->L_R0, &hi1, &lo1);

  00098	8d 45 e0	 lea	 eax, DWORD PTR _lo1$[ebp]
  0009b	50		 push	 eax
  0009c	8d 4d ec	 lea	 ecx, DWORD PTR _hi1$[ebp]
  0009f	51		 push	 ecx
  000a0	8b 55 08	 mov	 edx, DWORD PTR _st$[ebp]
  000a3	8b 82 bc 00 00
	00		 mov	 eax, DWORD PTR [edx+188]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _L_Extract
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 77   : 	Ltmp = Mpy_32_16(hi1, lo1, thresh);				test();

  000b2	0f b7 45 f8	 movzx	 eax, WORD PTR _thresh$[ebp]
  000b6	50		 push	 eax
  000b7	0f b7 4d e0	 movzx	 ecx, WORD PTR _lo1$[ebp]
  000bb	51		 push	 ecx
  000bc	0f b7 55 ec	 movzx	 edx, WORD PTR _hi1$[ebp]
  000c0	52		 push	 edx
  000c1	e8 00 00 00 00	 call	 _Mpy_32_16
  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	89 45 d4	 mov	 DWORD PTR _Ltmp$[ebp], eax
  000cc	e8 00 00 00 00	 call	 _test

; 78   : 	if (L_sub(st->L_Rmax, Ltmp) > 0)

  000d1	8b 45 d4	 mov	 eax, DWORD PTR _Ltmp$[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _st$[ebp]
  000d8	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 _L_sub
  000e4	83 c4 08	 add	 esp, 8
  000e7	85 c0		 test	 eax, eax
  000e9	7e 14		 jle	 SHORT $LN2@LTP_flag_u

; 79   : 	{
; 80   : 		st->LTP_flag = TRUE;					move16();

  000eb	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  000ee	c7 80 c4 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+196], 1
  000f8	e8 00 00 00 00	 call	 _move16

; 81   : 	}
; 82   : 	else

  000fd	eb 12		 jmp	 SHORT $LN8@LTP_flag_u
$LN2@LTP_flag_u:

; 83   : 	{
; 84   : 		st->LTP_flag = FALSE;					move16();

  000ff	8b 45 08	 mov	 eax, DWORD PTR _st$[ebp]
  00102	c7 80 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+196], 0
  0010c	e8 00 00 00 00	 call	 _move16
$LN8@LTP_flag_u:

; 85   : 	}
; 86   : 
; 87   : 	return;
; 88   : }

  00111	52		 push	 edx
  00112	8b cd		 mov	 ecx, ebp
  00114	50		 push	 eax
  00115	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@LTP_flag_u
  0011b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00120	58		 pop	 eax
  00121	5a		 pop	 edx
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0012b	3b ec		 cmp	 ebp, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c3		 ret	 0
  00136	8b ff		 npad	 2
$LN13@LTP_flag_u:
  00138	02 00 00 00	 DD	 2
  0013c	00 00 00 00	 DD	 $LN12@LTP_flag_u
$LN12@LTP_flag_u:
  00140	ec ff ff ff	 DD	 -20			; ffffffecH
  00144	02 00 00 00	 DD	 2
  00148	00 00 00 00	 DD	 $LN10@LTP_flag_u
  0014c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00150	02 00 00 00	 DD	 2
  00154	00 00 00 00	 DD	 $LN11@LTP_flag_u
$LN11@LTP_flag_u:
  00158	6c		 DB	 108			; 0000006cH
  00159	6f		 DB	 111			; 0000006fH
  0015a	31		 DB	 49			; 00000031H
  0015b	00		 DB	 0
$LN10@LTP_flag_u:
  0015c	68		 DB	 104			; 00000068H
  0015d	69		 DB	 105			; 00000069H
  0015e	31		 DB	 49			; 00000031H
  0015f	00		 DB	 0
_LTP_flag_update ENDP
_TEXT	ENDS
END
