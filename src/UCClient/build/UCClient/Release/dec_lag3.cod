; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\dec_lag3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_Dec_lag3
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c
;	COMDAT _Dec_lag3
_TEXT	SEGMENT
_t0_max$ = 8						; size = 2
_i_subfr$ = 12						; size = 2
_T0_prev$ = 16						; size = 2
_T0$ = 20						; size = 4
_T0_frac$ = 24						; size = 4
_flag4$ = 28						; size = 2
_Dec_lag3 PROC						; COMDAT
; _index$ = ecx
; _t0_min$ = edx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     Word16 i;
; 73   :     Word16 tmp_lag;
; 74   :     
; 75   :     test (); 
; 76   :     if (i_subfr == 0) {    /* if 1st or 3rd subframe */

  00003	66 83 7d 0c 00	 cmp	 WORD PTR _i_subfr$[ebp], 0
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f2		 mov	 esi, edx
  0000c	8b f9		 mov	 edi, ecx
  0000e	0f 85 15 02 00
	00		 jne	 $LN12@Dec_lag3
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 186  :     L_diff = (Word32) var1 - var2;

  00014	0f bf f7	 movsx	 esi, di
  00017	8d 86 3b ff ff
	ff		 lea	 eax, DWORD PTR [esi-197]

; 79   :     if (L_var1 > 0X00007fffL)

  0001d	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00022	7e 3a		 jle	 SHORT $LN24@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  00024	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
$LN11@Dec_lag3:

; 186  :     L_diff = (Word32) var1 - var2;

  0002e	83 c6 90	 add	 esi, -112		; ffffff90H

; 79   :     if (L_var1 > 0X00007fffL)

  00031	81 fe ff 7f 00
	00		 cmp	 esi, 32767		; 00007fffH
  00037	0f 8e ae 01 00
	00		 jle	 $LN94@Dec_lag3
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 85   :           *T0 = sub(index, 112);

  0003d	8b 45 14	 mov	 eax, DWORD PTR _T0$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 82   :         var_out = MAX_16;

  00040	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  00045	5f		 pop	 edi

; 80   :     {
; 81   :         Overflow = 1;

  00046	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  00050	5e		 pop	 esi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 85   :           *T0 = sub(index, 112);

  00051	66 89 08	 mov	 WORD PTR [eax], cx

; 86   :           *T0_frac = 0;                                        move16 ();

  00054	33 c9		 xor	 ecx, ecx
  00056	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
  00059	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN24@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  0005e	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00063	7d 0c		 jge	 SHORT $LN22@Dec_lag3

; 86   :         Overflow = 1;

  00065	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 88   :     }
; 89   :     else

  0006f	eb 05		 jmp	 SHORT $LN237@Dec_lag3
$LN22@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 78   : 	   if (sub(index, 197) < 0) {

  00071	66 85 c0	 test	 ax, ax
  00074	79 b8		 jns	 SHORT $LN11@Dec_lag3
$LN237@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 139  :     L_sum = (Word32) var1 + var2;

  00076	8d 46 02	 lea	 eax, DWORD PTR [esi+2]

; 79   :     if (L_var1 > 0X00007fffL)

  00079	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  0007e	7e 11		 jle	 SHORT $LN34@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  00080	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  0008a	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  0008f	eb 1b		 jmp	 SHORT $LN31@Dec_lag3
$LN34@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00091	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00096	7d 11		 jge	 SHORT $LN32@Dec_lag3

; 86   :         Overflow = 1;

  00098	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  000a2	b9 00 80 ff ff	 mov	 ecx, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  000a7	eb 03		 jmp	 SHORT $LN31@Dec_lag3
$LN32@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  000a9	0f b7 c8	 movzx	 ecx, ax
$LN31@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 80   :           *T0 = add(mult(add(index, 2), 10923), 19);

  000ac	ba ab 2a 00 00	 mov	 edx, 10923		; 00002aabH
  000b1	e8 00 00 00 00	 call	 _mult
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 139  :     L_sum = (Word32) var1 + var2;

  000b6	98		 cwde
  000b7	83 c0 13	 add	 eax, 19			; 00000013H

; 79   :     if (L_var1 > 0X00007fffL)

  000ba	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  000bf	7e 11		 jle	 SHORT $LN44@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  000c1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  000cb	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  000d0	eb 1b		 jmp	 SHORT $LN41@Dec_lag3
$LN44@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  000d2	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  000d7	7d 11		 jge	 SHORT $LN42@Dec_lag3

; 86   :         Overflow = 1;

  000d9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  000e3	b9 00 80 ff ff	 mov	 ecx, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  000e8	eb 03		 jmp	 SHORT $LN41@Dec_lag3
$LN42@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  000ea	0f b7 c8	 movzx	 ecx, ax
$LN41@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 80   :           *T0 = add(mult(add(index, 2), 10923), 19);

  000ed	8b 45 14	 mov	 eax, DWORD PTR _T0$[ebp]
  000f0	66 89 08	 mov	 WORD PTR [eax], cx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 139  :     L_sum = (Word32) var1 + var2;

  000f3	0f bf c9	 movsx	 ecx, cx
  000f6	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]

; 79   :     if (L_var1 > 0X00007fffL)

  000f9	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  000fe	7e 11		 jle	 SHORT $LN54@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  00100	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  0010a	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0010f	eb 1b		 jmp	 SHORT $LN51@Dec_lag3
$LN54@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00111	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00116	7d 11		 jge	 SHORT $LN52@Dec_lag3

; 86   :         Overflow = 1;

  00118	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  00122	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  00127	eb 03		 jmp	 SHORT $LN51@Dec_lag3
$LN52@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  00129	0f b7 c0	 movzx	 eax, ax
$LN51@Dec_lag3:

; 139  :     L_sum = (Word32) var1 + var2;

  0012c	98		 cwde
  0012d	03 c1		 add	 eax, ecx

; 79   :     if (L_var1 > 0X00007fffL)

  0012f	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00134	7e 11		 jle	 SHORT $LN64@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  00136	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00140	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00145	eb 1b		 jmp	 SHORT $LN61@Dec_lag3
$LN64@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00147	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  0014c	7d 11		 jge	 SHORT $LN62@Dec_lag3

; 86   :         Overflow = 1;

  0014e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  00158	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  0015d	eb 03		 jmp	 SHORT $LN61@Dec_lag3
$LN62@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  0015f	0f b7 c0	 movzx	 eax, ax
$LN61@Dec_lag3:

; 186  :     L_diff = (Word32) var1 - var2;

  00162	98		 cwde
  00163	2b f0		 sub	 esi, eax

; 79   :     if (L_var1 > 0X00007fffL)

  00165	81 fe ff 7f 00
	00		 cmp	 esi, 32767		; 00007fffH
  0016b	7e 11		 jle	 SHORT $LN74@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  0016d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00177	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0017c	eb 1c		 jmp	 SHORT $LN71@Dec_lag3
$LN74@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  0017e	81 fe 00 80 ff
	ff		 cmp	 esi, -32768		; ffff8000H
  00184	7d 11		 jge	 SHORT $LN72@Dec_lag3

; 86   :         Overflow = 1;

  00186	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  00190	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  00195	eb 03		 jmp	 SHORT $LN71@Dec_lag3
$LN72@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  00197	0f b7 c6	 movzx	 eax, si
$LN71@Dec_lag3:

; 139  :     L_sum = (Word32) var1 + var2;

  0019a	98		 cwde
  0019b	83 c0 3a	 add	 eax, 58			; 0000003aH

; 79   :     if (L_var1 > 0X00007fffL)

  0019e	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  001a3	7e 19		 jle	 SHORT $LN84@Dec_lag3
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 83   :           *T0_frac = add(sub(index, i), 58);

  001a5	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 82   :         var_out = MAX_16;

  001a8	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  001ad	5f		 pop	 edi

; 80   :     {
; 81   :         Overflow = 1;

  001ae	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  001b8	5e		 pop	 esi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 83   :           *T0_frac = add(sub(index, i), 58);

  001b9	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  001bc	5d		 pop	 ebp
  001bd	c3		 ret	 0
$LN84@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  001be	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  001c3	7d 19		 jge	 SHORT $LN82@Dec_lag3
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 83   :           *T0_frac = add(sub(index, i), 58);

  001c5	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 87   :         var_out = MIN_16;

  001c8	b9 00 80 ff ff	 mov	 ecx, -32768		; ffff8000H
  001cd	5f		 pop	 edi

; 86   :         Overflow = 1;

  001ce	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  001d8	5e		 pop	 esi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 83   :           *T0_frac = add(sub(index, i), 58);

  001d9	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  001dc	5d		 pop	 ebp
  001dd	c3		 ret	 0
$LN82@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 91   :         var_out = extract_l (L_var1);

  001de	0f b7 c8	 movzx	 ecx, ax
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 83   :           *T0_frac = add(sub(index, i), 58);

  001e1	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
  001e4	5f		 pop	 edi
  001e5	5e		 pop	 esi
  001e6	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  001e9	5d		 pop	 ebp
  001ea	c3		 ret	 0
$LN94@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  001eb	81 fe 00 80 ff
	ff		 cmp	 esi, -32768		; ffff8000H
  001f1	7d 21		 jge	 SHORT $LN92@Dec_lag3
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 85   :           *T0 = sub(index, 112);

  001f3	8b 45 14	 mov	 eax, DWORD PTR _T0$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 87   :         var_out = MIN_16;

  001f6	b9 00 80 ff ff	 mov	 ecx, -32768		; ffff8000H
  001fb	5f		 pop	 edi

; 86   :         Overflow = 1;

  001fc	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  00206	5e		 pop	 esi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 85   :           *T0 = sub(index, 112);

  00207	66 89 08	 mov	 WORD PTR [eax], cx

; 86   :           *T0_frac = 0;                                        move16 ();

  0020a	33 c9		 xor	 ecx, ecx
  0020c	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
  0020f	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
$LN92@Dec_lag3:

; 85   :           *T0 = sub(index, 112);

  00214	8b 45 14	 mov	 eax, DWORD PTR _T0$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 91   :         var_out = extract_l (L_var1);

  00217	0f b7 ce	 movzx	 ecx, si
  0021a	5f		 pop	 edi
  0021b	5e		 pop	 esi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 85   :           *T0 = sub(index, 112);

  0021c	66 89 08	 mov	 WORD PTR [eax], cx

; 86   :           *T0_frac = 0;                                        move16 ();

  0021f	33 c9		 xor	 ecx, ecx
  00221	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
  00224	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  00227	5d		 pop	 ebp
  00228	c3		 ret	 0
$LN12@Dec_lag3:

; 87   :        }
; 88   :        
; 89   :     } else {    /* 2nd or 4th subframe */
; 90   : 
; 91   :        test ();
; 92   :        if (flag4 == 0) {

  00229	66 83 7d 1c 00	 cmp	 WORD PTR _flag4$[ebp], 0
  0022e	0f 85 b2 01 00
	00		 jne	 $LN8@Dec_lag3
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 139  :     L_sum = (Word32) var1 + var2;

  00234	0f bf ff	 movsx	 edi, di
  00237	8d 47 02	 lea	 eax, DWORD PTR [edi+2]

; 79   :     if (L_var1 > 0X00007fffL)

  0023a	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  0023f	7e 11		 jle	 SHORT $LN108@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  00241	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  0024b	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  00250	eb 1b		 jmp	 SHORT $LN105@Dec_lag3
$LN108@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00252	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00257	7d 11		 jge	 SHORT $LN106@Dec_lag3

; 86   :         Overflow = 1;

  00259	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  00263	b9 00 80 ff ff	 mov	 ecx, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  00268	eb 03		 jmp	 SHORT $LN105@Dec_lag3
$LN106@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  0026a	0f b7 c8	 movzx	 ecx, ax
$LN105@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 96   :           i = sub(mult(add(index, 2), 10923), 1);

  0026d	ba ab 2a 00 00	 mov	 edx, 10923		; 00002aabH
  00272	e8 00 00 00 00	 call	 _mult
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 186  :     L_diff = (Word32) var1 - var2;

  00277	98		 cwde
  00278	48		 dec	 eax

; 79   :     if (L_var1 > 0X00007fffL)

  00279	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  0027e	7e 11		 jle	 SHORT $LN118@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  00280	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  0028a	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0028f	eb 1b		 jmp	 SHORT $LN115@Dec_lag3
$LN118@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00291	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00296	7d 11		 jge	 SHORT $LN116@Dec_lag3

; 86   :         Overflow = 1;

  00298	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  002a2	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  002a7	eb 03		 jmp	 SHORT $LN115@Dec_lag3
$LN116@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  002a9	0f b7 c0	 movzx	 eax, ax
$LN115@Dec_lag3:

; 139  :     L_sum = (Word32) var1 + var2;

  002ac	0f bf d0	 movsx	 edx, ax
  002af	0f bf c6	 movsx	 eax, si
  002b2	03 c2		 add	 eax, edx

; 79   :     if (L_var1 > 0X00007fffL)

  002b4	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  002b9	7e 11		 jle	 SHORT $LN128@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  002bb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  002c5	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  002ca	eb 1b		 jmp	 SHORT $LN125@Dec_lag3
$LN128@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  002cc	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  002d1	7d 11		 jge	 SHORT $LN126@Dec_lag3

; 86   :         Overflow = 1;

  002d3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  002dd	b9 00 80 ff ff	 mov	 ecx, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  002e2	eb 03		 jmp	 SHORT $LN125@Dec_lag3
$LN126@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  002e4	0f b7 c8	 movzx	 ecx, ax
$LN125@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 97   :           *T0 = add(i, t0_min);

  002e7	8b 45 14	 mov	 eax, DWORD PTR _T0$[ebp]
  002ea	66 89 08	 mov	 WORD PTR [eax], cx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 139  :     L_sum = (Word32) var1 + var2;

  002ed	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]

; 79   :     if (L_var1 > 0X00007fffL)

  002f0	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  002f5	7e 11		 jle	 SHORT $LN138@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  002f7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00301	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00306	eb 1b		 jmp	 SHORT $LN135@Dec_lag3
$LN138@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00308	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  0030d	7d 11		 jge	 SHORT $LN136@Dec_lag3

; 86   :         Overflow = 1;

  0030f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  00319	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  0031e	eb 03		 jmp	 SHORT $LN135@Dec_lag3
$LN136@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  00320	0f b7 c0	 movzx	 eax, ax
$LN135@Dec_lag3:

; 139  :     L_sum = (Word32) var1 + var2;

  00323	98		 cwde
  00324	03 c2		 add	 eax, edx

; 79   :     if (L_var1 > 0X00007fffL)

  00326	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  0032b	7e 11		 jle	 SHORT $LN148@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  0032d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00337	ba ff 7f 00 00	 mov	 edx, 32767		; 00007fffH
  0033c	eb 1b		 jmp	 SHORT $LN145@Dec_lag3
$LN148@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  0033e	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00343	7d 11		 jge	 SHORT $LN146@Dec_lag3

; 86   :         Overflow = 1;

  00345	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  0034f	ba 00 80 ff ff	 mov	 edx, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  00354	eb 03		 jmp	 SHORT $LN145@Dec_lag3
$LN146@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  00356	0f b7 d0	 movzx	 edx, ax
$LN145@Dec_lag3:

; 186  :     L_diff = (Word32) var1 - var2;

  00359	8d 47 fe	 lea	 eax, DWORD PTR [edi-2]

; 79   :     if (L_var1 > 0X00007fffL)

  0035c	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00361	7e 11		 jle	 SHORT $LN158@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  00363	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  0036d	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00372	eb 1b		 jmp	 SHORT $LN155@Dec_lag3
$LN158@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00374	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00379	7d 11		 jge	 SHORT $LN156@Dec_lag3

; 86   :         Overflow = 1;

  0037b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  00385	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  0038a	eb 03		 jmp	 SHORT $LN155@Dec_lag3
$LN156@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  0038c	0f b7 c0	 movzx	 eax, ax
$LN155@Dec_lag3:

; 186  :     L_diff = (Word32) var1 - var2;

  0038f	0f bf c8	 movsx	 ecx, ax
  00392	0f bf c2	 movsx	 eax, dx
  00395	2b c8		 sub	 ecx, eax

; 79   :     if (L_var1 > 0X00007fffL)

  00397	81 f9 ff 7f 00
	00		 cmp	 ecx, 32767		; 00007fffH
  0039d	7e 19		 jle	 SHORT $LN168@Dec_lag3
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 100  :           *T0_frac = sub(sub(index, 2), i);

  0039f	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 82   :         var_out = MAX_16;

  003a2	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  003a7	5f		 pop	 edi

; 80   :     {
; 81   :         Overflow = 1;

  003a8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  003b2	5e		 pop	 esi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 100  :           *T0_frac = sub(sub(index, 2), i);

  003b3	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  003b6	5d		 pop	 ebp
  003b7	c3		 ret	 0
$LN168@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  003b8	81 f9 00 80 ff
	ff		 cmp	 ecx, -32768		; ffff8000H
  003be	7d 19		 jge	 SHORT $LN166@Dec_lag3
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 100  :           *T0_frac = sub(sub(index, 2), i);

  003c0	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 87   :         var_out = MIN_16;

  003c3	b9 00 80 ff ff	 mov	 ecx, -32768		; ffff8000H
  003c8	5f		 pop	 edi

; 86   :         Overflow = 1;

  003c9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  003d3	5e		 pop	 esi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 100  :           *T0_frac = sub(sub(index, 2), i);

  003d4	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  003d7	5d		 pop	 ebp
  003d8	c3		 ret	 0
$LN166@Dec_lag3:

; 100  :           *T0_frac = sub(sub(index, 2), i);

  003d9	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 91   :         var_out = extract_l (L_var1);

  003dc	0f b7 c9	 movzx	 ecx, cx
  003df	5f		 pop	 edi
  003e0	5e		 pop	 esi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 100  :           *T0_frac = sub(sub(index, 2), i);

  003e1	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  003e4	5d		 pop	 ebp
  003e5	c3		 ret	 0
$LN8@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 186  :     L_diff = (Word32) var1 - var2;

  003e6	0f bf 4d 10	 movsx	 ecx, WORD PTR _T0_prev$[ebp]
  003ea	0f bf c6	 movsx	 eax, si
  003ed	2b c8		 sub	 ecx, eax
  003ef	53		 push	 ebx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 106  :           tmp_lag = T0_prev;                                   move16 ();

  003f0	0f b7 5d 10	 movzx	 ebx, WORD PTR _T0_prev$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 79   :     if (L_var1 > 0X00007fffL)

  003f4	81 f9 ff 7f 00
	00		 cmp	 ecx, 32767		; 00007fffH
  003fa	7e 11		 jle	 SHORT $LN182@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  003fc	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00406	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0040b	eb 1c		 jmp	 SHORT $LN179@Dec_lag3
$LN182@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  0040d	81 f9 00 80 ff
	ff		 cmp	 ecx, -32768		; ffff8000H
  00413	7d 11		 jge	 SHORT $LN180@Dec_lag3

; 86   :         Overflow = 1;

  00415	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  0041f	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  00424	eb 03		 jmp	 SHORT $LN179@Dec_lag3
$LN180@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  00426	0f b7 c1	 movzx	 eax, cx
$LN179@Dec_lag3:

; 186  :     L_diff = (Word32) var1 - var2;

  00429	98		 cwde
  0042a	83 e8 05	 sub	 eax, 5

; 79   :     if (L_var1 > 0X00007fffL)

  0042d	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00432	7e 0c		 jle	 SHORT $LN192@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  00434	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  0043e	eb 18		 jmp	 SHORT $LN238@Dec_lag3
$LN192@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00440	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00445	7d 0c		 jge	 SHORT $LN190@Dec_lag3

; 86   :         Overflow = 1;

  00447	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 88   :     }
; 89   :     else

  00451	eb 14		 jmp	 SHORT $LN6@Dec_lag3
$LN190@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 109  :           if ( sub( sub(tmp_lag, t0_min), 5) > 0)

  00453	66 85 c0	 test	 ax, ax
  00456	7e 0f		 jle	 SHORT $LN6@Dec_lag3
$LN238@Dec_lag3:

; 110  :              tmp_lag = add (t0_min, 5);

  00458	ba 05 00 00 00	 mov	 edx, 5
  0045d	8b ce		 mov	 ecx, esi
  0045f	e8 00 00 00 00	 call	 _add
  00464	0f b7 d8	 movzx	 ebx, ax
$LN6@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 186  :     L_diff = (Word32) var1 - var2;

  00467	8b 75 08	 mov	 esi, DWORD PTR _t0_max$[ebp]
  0046a	0f bf c3	 movsx	 eax, bx
  0046d	0f bf ce	 movsx	 ecx, si
  00470	2b c8		 sub	 ecx, eax

; 79   :     if (L_var1 > 0X00007fffL)

  00472	81 f9 ff 7f 00
	00		 cmp	 ecx, 32767		; 00007fffH
  00478	7e 11		 jle	 SHORT $LN204@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  0047a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00484	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00489	eb 1c		 jmp	 SHORT $LN201@Dec_lag3
$LN204@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  0048b	81 f9 00 80 ff
	ff		 cmp	 ecx, -32768		; ffff8000H
  00491	7d 11		 jge	 SHORT $LN202@Dec_lag3

; 86   :         Overflow = 1;

  00493	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  0049d	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  004a2	eb 03		 jmp	 SHORT $LN201@Dec_lag3
$LN202@Dec_lag3:

; 91   :         var_out = extract_l (L_var1);

  004a4	0f b7 c1	 movzx	 eax, cx
$LN201@Dec_lag3:

; 186  :     L_diff = (Word32) var1 - var2;

  004a7	98		 cwde
  004a8	83 e8 04	 sub	 eax, 4

; 79   :     if (L_var1 > 0X00007fffL)

  004ab	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  004b0	7e 0c		 jle	 SHORT $LN214@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  004b2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  004bc	eb 18		 jmp	 SHORT $LN239@Dec_lag3
$LN214@Dec_lag3:

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  004be	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  004c3	7d 0c		 jge	 SHORT $LN212@Dec_lag3

; 86   :         Overflow = 1;

  004c5	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 88   :     }
; 89   :     else

  004cf	eb 14		 jmp	 SHORT $LN5@Dec_lag3
$LN212@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 112  :           if ( sub( sub(t0_max, tmp_lag), 4) > 0)

  004d1	66 85 c0	 test	 ax, ax
  004d4	7e 0f		 jle	 SHORT $LN5@Dec_lag3
$LN239@Dec_lag3:

; 113  :              tmp_lag = sub (t0_max, 4);

  004d6	ba 04 00 00 00	 mov	 edx, 4
  004db	8b ce		 mov	 ecx, esi
  004dd	e8 00 00 00 00	 call	 _sub
  004e2	0f b7 d8	 movzx	 ebx, ax
$LN5@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 186  :     L_diff = (Word32) var1 - var2;

  004e5	0f bf c7	 movsx	 eax, di
  004e8	83 e8 04	 sub	 eax, 4

; 79   :     if (L_var1 > 0X00007fffL)

  004eb	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  004f0	0f 8e 88 00 00
	00		 jle	 $LN226@Dec_lag3

; 80   :     {
; 81   :         Overflow = 1;

  004f6	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
$LN4@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 125  :              if (sub(index, 12) < 0)

  00500	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00505	8b cf		 mov	 ecx, edi
  00507	e8 00 00 00 00	 call	 _sub

; 126  :              {
; 127  :                 i = sub(mult(sub(index, 5), 10923), 1);

  0050c	8b cf		 mov	 ecx, edi
  0050e	66 85 c0	 test	 ax, ax
  00511	0f 89 a1 00 00
	00		 jns	 $LN2@Dec_lag3
  00517	ba 05 00 00 00	 mov	 edx, 5
  0051c	e8 00 00 00 00	 call	 _sub
  00521	ba ab 2a 00 00	 mov	 edx, 10923		; 00002aabH
  00526	8b c8		 mov	 ecx, eax
  00528	e8 00 00 00 00	 call	 _mult
  0052d	ba 01 00 00 00	 mov	 edx, 1
  00532	8b c8		 mov	 ecx, eax
  00534	e8 00 00 00 00	 call	 _sub
  00539	0f b7 f0	 movzx	 esi, ax

; 128  :                 *T0 = add(i, tmp_lag);

  0053c	8b d3		 mov	 edx, ebx
  0053e	8b ce		 mov	 ecx, esi
  00540	e8 00 00 00 00	 call	 _add
  00545	8b 4d 14	 mov	 ecx, DWORD PTR _T0$[ebp]

; 129  :                 
; 130  :                 i = add(add(i, i), i);

  00548	8b d6		 mov	 edx, esi
  0054a	66 89 01	 mov	 WORD PTR [ecx], ax
  0054d	8b ce		 mov	 ecx, esi
  0054f	e8 00 00 00 00	 call	 _add
  00554	8b c8		 mov	 ecx, eax
  00556	e8 00 00 00 00	 call	 _add

; 131  :                 *T0_frac = sub(sub(index, 9), i);

  0055b	ba 09 00 00 00	 mov	 edx, 9
  00560	0f b7 f0	 movzx	 esi, ax
  00563	8b cf		 mov	 ecx, edi
  00565	e8 00 00 00 00	 call	 _sub
  0056a	8b d6		 mov	 edx, esi
  0056c	8b c8		 mov	 ecx, eax
  0056e	e8 00 00 00 00	 call	 _sub
  00573	8b 4d 18	 mov	 ecx, DWORD PTR _T0_frac$[ebp]
  00576	5b		 pop	 ebx
  00577	5f		 pop	 edi
  00578	5e		 pop	 esi
  00579	66 89 01	 mov	 WORD PTR [ecx], ax

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  0057c	5d		 pop	 ebp
  0057d	c3		 ret	 0
$LN226@Dec_lag3:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  0057e	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00583	7d 1a		 jge	 SHORT $LN224@Dec_lag3
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 118  :              i = sub(tmp_lag, 5);

  00585	ba 05 00 00 00	 mov	 edx, 5
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 86   :         Overflow = 1;

  0058a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_lag3.c

; 118  :              i = sub(tmp_lag, 5);

  00594	8b cb		 mov	 ecx, ebx
  00596	e8 00 00 00 00	 call	 _sub

; 119  :              *T0 = add(i, index);

  0059b	8b d7		 mov	 edx, edi

; 120  :              *T0_frac = 0;                                     move16 ();
; 121  :           }
; 122  :           else

  0059d	eb 2c		 jmp	 SHORT $LN242@Dec_lag3
$LN224@Dec_lag3:

; 114  :           
; 115  :           test ();          
; 116  :           if (sub(index, 4) < 0)

  0059f	66 85 c0	 test	 ax, ax
  005a2	0f 89 58 ff ff
	ff		 jns	 $LN4@Dec_lag3

; 118  :              i = sub(tmp_lag, 5);

  005a8	ba 05 00 00 00	 mov	 edx, 5
  005ad	8b cb		 mov	 ecx, ebx
  005af	e8 00 00 00 00	 call	 _sub

; 119  :              *T0 = add(i, index);

  005b4	8b d7		 mov	 edx, edi

; 120  :              *T0_frac = 0;                                     move16 ();
; 121  :           }
; 122  :           else

  005b6	eb 13		 jmp	 SHORT $LN242@Dec_lag3
$LN2@Dec_lag3:

; 132  :              }
; 133  :              else
; 134  :              {
; 135  :                 i = add( sub (index, 12), tmp_lag);

  005b8	e8 00 00 00 00	 call	 _sub
  005bd	8b d3		 mov	 edx, ebx
  005bf	8b c8		 mov	 ecx, eax
  005c1	e8 00 00 00 00	 call	 _add

; 136  :                 *T0 = add (i, 1);                

  005c6	ba 01 00 00 00	 mov	 edx, 1
$LN242@Dec_lag3:
  005cb	0f b7 c8	 movzx	 ecx, ax
  005ce	e8 00 00 00 00	 call	 _add
  005d3	8b 4d 14	 mov	 ecx, DWORD PTR _T0$[ebp]
  005d6	5b		 pop	 ebx
  005d7	5f		 pop	 edi
  005d8	5e		 pop	 esi
  005d9	66 89 01	 mov	 WORD PTR [ecx], ax

; 137  :                 *T0_frac = 0;                                  move16 ();

  005dc	33 c9		 xor	 ecx, ecx
  005de	8b 45 18	 mov	 eax, DWORD PTR _T0_frac$[ebp]
  005e1	66 89 08	 mov	 WORD PTR [eax], cx

; 138  :              }
; 139  :           }
; 140  :           
; 141  :        } /* end if (decoding with 4 bit resolution) */
; 142  :     }
; 143  :     
; 144  :     return;
; 145  : }

  005e4	5d		 pop	 ebp
  005e5	c3		 ret	 0
_Dec_lag3 ENDP
_TEXT	ENDS
END
