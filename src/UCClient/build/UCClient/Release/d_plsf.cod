; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\d_plsf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CN@KLJCPPPO@D_plsf_init?3?5can?5not?5malloc?5stat@ ; `string'
PUBLIC	??_C@_0CB@NIKNKACH@D_plsf_reset?3?5invalid?5parameter?6@ ; `string'
PUBLIC	??_C@_0CA@GKCPDFKP@D_plsf_init?3?5invalid?5parameter?6?$AA@ ; `string'
;	COMDAT ??_C@_0CA@GKCPDFKP@D_plsf_init?3?5invalid?5parameter?6?$AA@
CONST	SEGMENT
??_C@_0CA@GKCPDFKP@D_plsf_init?3?5invalid?5parameter?6?$AA@ DB 'D_plsf_in'
	DB	'it: invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NIKNKACH@D_plsf_reset?3?5invalid?5parameter?6@
CONST	SEGMENT
??_C@_0CB@NIKNKACH@D_plsf_reset?3?5invalid?5parameter?6@ DB 'D_plsf_reset'
	DB	': invalid parameter', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KLJCPPPO@D_plsf_init?3?5can?5not?5malloc?5stat@
CONST	SEGMENT
??_C@_0CN@KLJCPPPO@D_plsf_init?3?5can?5not?5malloc?5stat@ DB 'D_plsf_init'
	DB	': can not malloc state structure', 0aH, 00H	; `string'
_mean_lsf DW	0568H
	DW	081dH
	DW	0d5cH
	DW	013f4H
	DW	01a56H
	DW	01fbaH
	DW	02687H
	DW	02b54H
	DW	031aaH
	DW	03585H
PUBLIC	_D_plsf_exit
PUBLIC	_D_plsf_reset
PUBLIC	_D_plsf_init
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_plsf.c
;	COMDAT _D_plsf_init
_TEXT	SEGMENT
_D_plsf_init PROC					; COMDAT
; _state$ = ecx

; 62   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 63   :   D_plsfState* s;
; 64   :  
; 65   :   if (state == (D_plsfState **) NULL){

  00003	85 f6		 test	 esi, esi
  00005	75 1d		 jne	 SHORT $LN2@D_plsf_ini

; 66   :       fprintf(stderr, "D_plsf_init: invalid parameter\n");

  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GKCPDFKP@D_plsf_init?3?5invalid?5parameter?6?$AA@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00012	83 c0 40	 add	 eax, 64			; 00000040H
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0001c	83 c4 08	 add	 esp, 8

; 67   :       return -1;

  0001f	83 c8 ff	 or	 eax, -1
  00022	5e		 pop	 esi

; 81   : }

  00023	c3		 ret	 0
$LN2@D_plsf_ini:
  00024	57		 push	 edi

; 68   :   }
; 69   :   *state = NULL;
; 70   :  
; 71   :   /* allocate memory */
; 72   :   if ((s= (D_plsfState *) malloc(sizeof(D_plsfState))) == NULL){

  00025	6a 28		 push	 40			; 00000028H
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00033	8b f8		 mov	 edi, eax
  00035	83 c4 04	 add	 esp, 4
  00038	85 ff		 test	 edi, edi
  0003a	75 1e		 jne	 SHORT $LN1@D_plsf_ini

; 73   :       fprintf(stderr, "D_plsf_init: can not malloc state structure\n");

  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@KLJCPPPO@D_plsf_init?3?5can?5not?5malloc?5stat@
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00047	83 c0 40	 add	 eax, 64			; 00000040H
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00051	83 c4 08	 add	 esp, 8

; 74   :       return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 81   : }

  00059	c3		 ret	 0
$LN1@D_plsf_ini:

; 75   :   }
; 76   :   
; 77   :   D_plsf_reset(s);

  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 _D_plsf_reset

; 78   :   *state = s;

  00061	89 3e		 mov	 DWORD PTR [esi], edi

; 79   :   
; 80   :   return 0;

  00063	33 c0		 xor	 eax, eax
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 81   : }

  00067	c3		 ret	 0
_D_plsf_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_plsf.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\copy.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_plsf.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\copy.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_plsf.c
;	COMDAT _D_plsf_reset
_TEXT	SEGMENT
_D_plsf_reset PROC					; COMDAT
; _state$ = ecx

; 92   : {

  00000	8b d1		 mov	 edx, ecx

; 93   :   Word16 i;
; 94   :   
; 95   :   if (state == (D_plsfState *) NULL){

  00002	85 d2		 test	 edx, edx
  00004	75 1c		 jne	 SHORT $LN4@D_plsf_res

; 96   :       fprintf(stderr, "D_plsf_reset: invalid parameter\n");

  00006	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@NIKNKACH@D_plsf_reset?3?5invalid?5parameter?6@
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00011	83 c0 40	 add	 eax, 64			; 00000040H
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0001b	83 c4 08	 add	 esp, 8

; 97   :       return -1;

  0001e	83 c8 ff	 or	 eax, -1

; 108  : }

  00021	c3		 ret	 0
$LN4@D_plsf_res:
  00022	0f 57 c0	 xorps	 xmm0, xmm0
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\copy.c

; 60   :     for (i = 0; i < L; i++)

  00025	b9 00 00 00 00	 mov	 ecx, OFFSET _mean_lsf
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_plsf.c

; 101  :       state->past_r_q[i] = 0;             /* Past quantized prediction error */

  0002a	f3 0f 7f 02	 movdqu	 XMMWORD PTR [edx], xmm0
  0002e	56		 push	 esi
  0002f	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\copy.c

; 60   :     for (i = 0; i < L; i++)

  00036	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  0003b	83 c2 14	 add	 edx, 20			; 00000014H
  0003e	8b ff		 npad	 2
$LL9@D_plsf_res:

; 61   :     {
; 62   :         y[i] = x[i];            move16 (); 

  00040	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00043	8d 49 02	 lea	 ecx, DWORD PTR [ecx+2]
  00046	66 89 02	 mov	 WORD PTR [edx], ax
  00049	8d 52 02	 lea	 edx, DWORD PTR [edx+2]
  0004c	4e		 dec	 esi
  0004d	75 f1		 jne	 SHORT $LL9@D_plsf_res
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_plsf.c

; 108  : }

  0004f	33 c0		 xor	 eax, eax
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
_D_plsf_reset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_plsf.c
;	COMDAT _D_plsf_exit
_TEXT	SEGMENT
_D_plsf_exit PROC					; COMDAT
; _state$ = ecx

; 119  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 120  :   if (state == NULL || *state == NULL)

  00003	85 f6		 test	 esi, esi
  00005	74 16		 je	 SHORT $LN1@D_plsf_exi
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 10		 je	 SHORT $LN1@D_plsf_exi

; 121  :       return;
; 122  :  
; 123  :   /* deallocate memory */
; 124  :   free(*state);

  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00014	83 c4 04	 add	 esp, 4

; 125  :   *state = NULL;

  00017	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN1@D_plsf_exi:
  0001d	5e		 pop	 esi

; 126  :   
; 127  :   return;
; 128  : }

  0001e	c3		 ret	 0
_D_plsf_exit ENDP
_TEXT	ENDS
END
