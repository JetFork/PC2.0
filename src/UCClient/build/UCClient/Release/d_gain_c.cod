; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\d_gain_c.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+6
_qua_gain_code DW 09fH
	DW	0f140H
	DW	0a735H
	DW	0ceH
	DW	0f2beH
	DW	0b034H
	DW	010cH
	DW	0f443H
	DW	0b958H
	DW	015dH
	DW	0f5c9H
	DW	0c285H
	DW	01a3H
	DW	0f6d7H
	DW	0c8dfH
	DW	01e2H
	DW	0f7a6H
	DW	0cdbdH
	DW	022aH
	DW	0f874H
	DW	0d293H
	DW	027dH
	DW	0f942H
	DW	0d76dH
	DW	02ddH
	DW	0fa12H
	DW	0dc4dH
	DW	034aH
	DW	0fadeH
	DW	0e11eH
	DW	03c9H
	DW	0fbaeH
	DW	0e600H
	DW	045aH
	DW	0fc7cH
	DW	0ead8H
	DW	0501H
	DW	0fd4aH
	DW	0efb3H
	DW	05c1H
	DW	0fe19H
	DW	0f48dH
	DW	069eH
	DW	0fee7H
	DW	0f968H
	DW	079cH
	DW	0ffb5H
	DW	0fe43H
	DW	08c1H
	DW	085H
	DW	0321H
	DW	0a11H
	DW	0153H
	DW	07fcH
	DW	0b93H
	DW	0221H
	DW	0cd5H
	DW	0d50H
	DW	02f0H
	DW	011b2H
	DW	0f4fH
	DW	03beH
	DW	0168cH
	DW	0119bH
	DW	048dH
	DW	01b68H
	DW	0143fH
	DW	055bH
	DW	02043H
	DW	01748H
	DW	0629H
	DW	0251dH
	DW	01ac7H
	DW	06f8H
	DW	029f9H
	DW	01ecbH
	DW	07c7H
	DW	02ed4H
	DW	02369H
	DW	0895H
	DW	033afH
	DW	028b9H
	DW	0964H
	DW	0388aH
	DW	030deH
	DW	0a71H
	DW	03ee0H
	DW	03f87H
	DW	0bf4H
	DW	047fdH
	DW	05296H
	DW	0d78H
	DW	0511bH
	DW	06b5dH
	DW	0efcH
	DW	05a39H
PUBLIC	_d_gain_code
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\gc_pred.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c
;	COMDAT _d_gain_code
_TEXT	SEGMENT
_exp$ = -16						; size = 2
_frac$ = -12						; size = 2
_exp_inn_en$ = -8					; size = 2
_frac_inn_en$ = -4					; size = 2
_index$ = 8						; size = 2
tv599 = 8						; size = 4
_code$ = 12						; size = 4
_gain_code$ = 16					; size = 4
_d_gain_code PROC					; COMDAT
; _pred_state$ = ecx
; _mode$ = edx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 88   :             &exp_inn_en, &frac_inn_en);

  00006	8d 45 fc	 lea	 eax, DWORD PTR _frac_inn_en$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	8d 45 f8	 lea	 eax, DWORD PTR _exp_inn_en$[ebp]
  00010	8b fa		 mov	 edi, edx
  00012	50		 push	 eax
  00013	8d 45 f4	 lea	 eax, DWORD PTR _frac$[ebp]
  00016	8b d9		 mov	 ebx, ecx
  00018	50		 push	 eax
  00019	8d 45 f0	 lea	 eax, DWORD PTR _exp$[ebp]
  0001c	50		 push	 eax
  0001d	ff 75 0c	 push	 DWORD PTR _code$[ebp]
  00020	e8 00 00 00 00	 call	 _gc_pred
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 139  :     L_sum = (Word32) var1 + var2;

  00025	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 88   :             &exp_inn_en, &frac_inn_en);

  00028	83 c4 14	 add	 esp, 20			; 00000014H
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 139  :     L_sum = (Word32) var1 + var2;

  0002b	0f bf c8	 movsx	 ecx, ax
  0002e	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]

; 79   :     if (L_var1 > 0X00007fffL)

  00031	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00036	7e 11		 jle	 SHORT $LN10@d_gain_cod

; 80   :     {
; 81   :         Overflow = 1;

  00038	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00042	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00047	eb 1b		 jmp	 SHORT $LN7@d_gain_cod
$LN10@d_gain_cod:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00049	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  0004e	7d 11		 jge	 SHORT $LN8@d_gain_cod

; 86   :         Overflow = 1;

  00050	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  0005a	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  0005f	eb 03		 jmp	 SHORT $LN7@d_gain_cod
$LN8@d_gain_cod:

; 90   :     {
; 91   :         var_out = extract_l (L_var1);

  00061	0f b7 c0	 movzx	 eax, ax
$LN7@d_gain_cod:

; 139  :     L_sum = (Word32) var1 + var2;

  00064	98		 cwde
  00065	03 c1		 add	 eax, ecx

; 79   :     if (L_var1 > 0X00007fffL)

  00067	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  0006c	7e 11		 jle	 SHORT $LN20@d_gain_cod

; 80   :     {
; 81   :         Overflow = 1;

  0006e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00078	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0007d	eb 1b		 jmp	 SHORT $LN17@d_gain_cod
$LN20@d_gain_cod:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  0007f	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00084	7d 11		 jge	 SHORT $LN18@d_gain_cod

; 86   :         Overflow = 1;

  00086	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  00090	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  00095	eb 03		 jmp	 SHORT $LN17@d_gain_cod
$LN18@d_gain_cod:

; 90   :     {
; 91   :         var_out = extract_l (L_var1);

  00097	0f b7 c0	 movzx	 eax, ax
$LN17@d_gain_cod:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 90   :     p = &qua_gain_code[add (add (index, index), index)];

  0009a	98		 cwde
  0009b	8d 34 45 00 00
	00 00		 lea	 esi, DWORD PTR _qua_gain_code[eax*2]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 186  :     L_diff = (Word32) var1 - var2;

  000a2	0f bf c7	 movsx	 eax, di
  000a5	83 e8 07	 sub	 eax, 7

; 79   :     if (L_var1 > 0X00007fffL)

  000a8	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  000ad	0f 8f a0 00 00
	00		 jg	 $LN114@d_gain_cod

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  000b3	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  000b8	0f 8c 95 00 00
	00		 jl	 $LN114@d_gain_cod
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 94   :     if (sub(mode, MR122) == 0)

  000be	66 85 c0	 test	 ax, ax
  000c1	0f 85 96 00 00
	00		 jne	 $LN2@d_gain_cod

; 95   :     {
; 96   :         gcode0 = extract_l (Pow2 (exp, frac));  /* predicted gain */

  000c7	8b 55 f4	 mov	 edx, DWORD PTR _frac$[ebp]
  000ca	8b 4d f0	 mov	 ecx, DWORD PTR _exp$[ebp]
  000cd	e8 00 00 00 00	 call	 _Pow2
  000d2	0f b7 d0	 movzx	 edx, ax
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 300  :         if ((var2 > 15 && var1 != 0) || (result != (Word32) ((Word16) result)))

  000d5	bf 00 80 ff ff	 mov	 edi, -32768		; ffff8000H
  000da	0f bf ca	 movsx	 ecx, dx
  000dd	c1 e1 04	 shl	 ecx, 4
  000e0	0f bf c1	 movsx	 eax, cx
  000e3	c7 45 08 ff 7f
	00 00		 mov	 DWORD PTR tv599[ebp], 32767 ; 00007fffH
  000ea	3b c8		 cmp	 ecx, eax
  000ec	74 18		 je	 SHORT $LN42@d_gain_cod

; 303  :             var_out = (var1 > 0) ? MAX_16 : MIN_16;

  000ee	66 85 d2	 test	 dx, dx
  000f1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  000fb	8b c7		 mov	 eax, edi
  000fd	0f 4f 45 08	 cmovg	 eax, DWORD PTR tv599[ebp]
  00101	0f b7 c8	 movzx	 ecx, ax

; 304  :         }
; 305  :         else

  00104	eb 03		 jmp	 SHORT $LN39@d_gain_cod
$LN42@d_gain_cod:

; 307  :             var_out = extract_l (result);

  00106	0f b7 c9	 movzx	 ecx, cx
$LN39@d_gain_cod:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 98   :         *gain_code = shl (mult (gcode0, *p++), 1);  move16 ();

  00109	66 8b 16	 mov	 dx, WORD PTR [esi]
  0010c	e8 00 00 00 00	 call	 _mult
  00111	0f b7 d0	 movzx	 edx, ax
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 298  :         result = (Word32) var1 *((Word32) 1 << var2);

  00114	0f bf ca	 movsx	 ecx, dx
  00117	03 c9		 add	 ecx, ecx

; 300  :         if ((var2 > 15 && var1 != 0) || (result != (Word32) ((Word16) result)))

  00119	0f bf c1	 movsx	 eax, cx
  0011c	3b c8		 cmp	 ecx, eax
  0011e	74 22		 je	 SHORT $LN53@d_gain_cod
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 98   :         *gain_code = shl (mult (gcode0, *p++), 1);  move16 ();

  00120	8b 45 10	 mov	 eax, DWORD PTR _gain_code$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 303  :             var_out = (var1 > 0) ? MAX_16 : MIN_16;

  00123	66 85 d2	 test	 dx, dx
  00126	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  00130	0f 4f 7d 08	 cmovg	 edi, DWORD PTR tv599[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 98   :         *gain_code = shl (mult (gcode0, *p++), 1);  move16 ();

  00134	83 c6 02	 add	 esi, 2
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 303  :             var_out = (var1 > 0) ? MAX_16 : MIN_16;

  00137	0f b7 cf	 movzx	 ecx, di
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 98   :         *gain_code = shl (mult (gcode0, *p++), 1);  move16 ();

  0013a	66 89 08	 mov	 WORD PTR [eax], cx

; 99   :     }
; 100  :     else

  0013d	e9 d4 00 00 00	 jmp	 $LN1@d_gain_cod
$LN53@d_gain_cod:

; 98   :         *gain_code = shl (mult (gcode0, *p++), 1);  move16 ();

  00142	8b 45 10	 mov	 eax, DWORD PTR _gain_code$[ebp]
  00145	83 c6 02	 add	 esi, 2
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 307  :             var_out = extract_l (result);

  00148	0f b7 c9	 movzx	 ecx, cx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 98   :         *gain_code = shl (mult (gcode0, *p++), 1);  move16 ();

  0014b	66 89 08	 mov	 WORD PTR [eax], cx

; 99   :     }
; 100  :     else

  0014e	e9 c3 00 00 00	 jmp	 $LN1@d_gain_cod
$LN114@d_gain_cod:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 86   :         Overflow = 1;

  00153	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
$LN2@d_gain_cod:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 102  :         gcode0 = extract_l (Pow2 (14, frac)); 

  0015d	8b 55 f4	 mov	 edx, DWORD PTR _frac$[ebp]
  00160	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00165	e8 00 00 00 00	 call	 _Pow2
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 485  :     L_var_out = (Word32) var1 *(Word32) var2;

  0016a	0f bf 3e	 movsx	 edi, WORD PTR [esi]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 102  :         gcode0 = extract_l (Pow2 (14, frac)); 

  0016d	0f b7 c0	 movzx	 eax, ax
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 485  :     L_var_out = (Word32) var1 *(Word32) var2;

  00170	98		 cwde
  00171	0f af f8	 imul	 edi, eax

; 486  : 
; 487  :     if (L_var_out != (Word32) 0x40000000L)

  00174	81 ff 00 00 00
	40		 cmp	 edi, 1073741824		; 40000000H
  0017a	74 04		 je	 SHORT $LN66@d_gain_cod

; 488  :     {
; 489  :         L_var_out *= 2;

  0017c	03 ff		 add	 edi, edi

; 490  :     }
; 491  :     else

  0017e	eb 0f		 jmp	 SHORT $LN65@d_gain_cod
$LN66@d_gain_cod:

; 492  :     {
; 493  :         Overflow = 1;

  00180	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 494  :         L_var_out = MAX_32;

  0018a	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
$LN65@d_gain_cod:

; 186  :     L_diff = (Word32) var1 - var2;

  0018f	0f bf 45 f0	 movsx	 eax, WORD PTR _exp$[ebp]
  00193	b9 09 00 00 00	 mov	 ecx, 9
  00198	2b c8		 sub	 ecx, eax
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 103  :         L_tmp = L_mult(*p++, gcode0);         

  0019a	83 c6 02	 add	 esi, 2
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 79   :     if (L_var1 > 0X00007fffL)

  0019d	81 f9 ff 7f 00
	00		 cmp	 ecx, 32767		; 00007fffH
  001a3	7e 14		 jle	 SHORT $LN74@d_gain_cod

; 1432 :         {
; 1433 :             L_var_out = (L_var1 < 0L) ? -1 : 0;

  001a5	33 d2		 xor	 edx, edx

; 80   :     {
; 81   :         Overflow = 1;

  001a7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 1432 :         {
; 1433 :             L_var_out = (L_var1 < 0L) ? -1 : 0;

  001b1	85 ff		 test	 edi, edi
  001b3	0f 99 c2	 setns	 dl
  001b6	4a		 dec	 edx

; 1434 :         }
; 1435 :         else

  001b7	eb 54		 jmp	 SHORT $LN79@d_gain_cod
$LN74@d_gain_cod:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  001b9	81 f9 00 80 ff
	ff		 cmp	 ecx, -32768		; ffff8000H
  001bf	7d 0c		 jge	 SHORT $LN72@d_gain_cod

; 86   :         Overflow = 1;

  001c1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 88   :     }
; 89   :     else

  001cb	eb 0e		 jmp	 SHORT $LN113@d_gain_cod
$LN72@d_gain_cod:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 104  :         L_tmp = L_shr(L_tmp, sub(9, exp));    

  001cd	0f b7 d1	 movzx	 edx, cx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 1420 :     if (var2 < 0)

  001d0	66 85 c9	 test	 cx, cx
  001d3	79 18		 jns	 SHORT $LN85@d_gain_cod

; 1421 :     {
; 1422 :         if (var2 < -32)

  001d5	66 83 f9 e0	 cmp	 cx, -32			; ffffffe0H
  001d9	7d 05		 jge	 SHORT $LN84@d_gain_cod
$LN113@d_gain_cod:

; 1423 :             var2 = -32;

  001db	ba e0 ff ff ff	 mov	 edx, -32		; ffffffe0H
$LN84@d_gain_cod:

; 1424 :         L_var_out = L_shl (L_var1, -var2);

  001e0	f7 da		 neg	 edx
  001e2	8b cf		 mov	 ecx, edi
  001e4	e8 00 00 00 00	 call	 _L_shl
  001e9	8b d0		 mov	 edx, eax

; 1425 : #if (WMOPS)
; 1426 :         multiCounter[currCounter].L_shl--;
; 1427 : #endif
; 1428 :     }
; 1429 :     else

  001eb	eb 20		 jmp	 SHORT $LN79@d_gain_cod
$LN85@d_gain_cod:

; 1430 :     {
; 1431 :         if (var2 >= 31)

  001ed	66 83 f9 1f	 cmp	 cx, 31			; 0000001fH
  001f1	7c 0a		 jl	 SHORT $LN82@d_gain_cod

; 1432 :         {
; 1433 :             L_var_out = (L_var1 < 0L) ? -1 : 0;

  001f3	33 d2		 xor	 edx, edx
  001f5	85 ff		 test	 edi, edi
  001f7	0f 99 c2	 setns	 dl
  001fa	4a		 dec	 edx

; 1434 :         }
; 1435 :         else

  001fb	eb 10		 jmp	 SHORT $LN79@d_gain_cod
$LN82@d_gain_cod:

; 1436 :         {
; 1437 :             if (L_var1 < 0)
; 1438 :             {
; 1439 :                 L_var_out = ~((~L_var1) >> var2);

  001fd	8b d7		 mov	 edx, edi
  001ff	85 ff		 test	 edi, edi
  00201	79 08		 jns	 SHORT $LN80@d_gain_cod
  00203	f7 d2		 not	 edx
  00205	d3 fa		 sar	 edx, cl
  00207	f7 d2		 not	 edx

; 1440 :             }
; 1441 :             else

  00209	eb 02		 jmp	 SHORT $LN79@d_gain_cod
$LN80@d_gain_cod:

; 1442 :             {
; 1443 :                 L_var_out = L_var1 >> var2;

  0020b	d3 fa		 sar	 edx, cl
$LN79@d_gain_cod:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 105  :         *gain_code = extract_h(L_tmp);          /* Q1 */

  0020d	8b 45 10	 mov	 eax, DWORD PTR _gain_code$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 575  :     var_out = (Word16) (L_var1 >> 16);

  00210	c1 fa 10	 sar	 edx, 16			; 00000010H
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 105  :         *gain_code = extract_h(L_tmp);          /* Q1 */

  00213	66 89 10	 mov	 WORD PTR [eax], dx
$LN1@d_gain_cod:

; 106  :     }
; 107  :     
; 108  :     /*-------------------------------------------------------------------*
; 109  :      *  update table of past quantized energies                          *
; 110  :      *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                          *
; 111  :      *-------------------------------------------------------------------*/
; 112  :     qua_ener_MR122 = *p++;                 move16();

  00216	0f b7 3e	 movzx	 edi, WORD PTR [esi]
  00219	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]

; 113  :     qua_ener = *p++;                       move16();

  0021c	0f b7 76 02	 movzx	 esi, WORD PTR [esi+2]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\gc_pred.c

; 364  :     for (i = 3; i > 0; i--)

  00220	ba 03 00 00 00	 mov	 edx, 3
$LL96@d_gain_cod:

; 365  :     {
; 366  :         st->past_qua_en[i] = st->past_qua_en[i - 1];             move16 ();

  00225	0f b7 41 f8	 movzx	 eax, WORD PTR [ecx-8]
  00229	8d 49 fe	 lea	 ecx, DWORD PTR [ecx-2]
  0022c	66 89 41 fc	 mov	 WORD PTR [ecx-4], ax
  00230	4a		 dec	 edx

; 367  :         st->past_qua_en_MR122[i] = st->past_qua_en_MR122[i - 1]; move16 ();

  00231	0f b7 41 02	 movzx	 eax, WORD PTR [ecx+2]
  00235	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  00239	66 85 d2	 test	 dx, dx
  0023c	7f e7		 jg	 SHORT $LL96@d_gain_cod

; 368  :     }
; 369  : 
; 370  :     st->past_qua_en_MR122[0] = qua_ener_MR122;  /*    log2 (qua_err), Q10 */

  0023e	66 89 7b 08	 mov	 WORD PTR [ebx+8], di
  00242	5f		 pop	 edi

; 371  : 	                                                             move16 ();
; 372  :     st->past_qua_en[0] = qua_ener;              /* 20*log10(qua_err), Q10 */

  00243	66 89 33	 mov	 WORD PTR [ebx], si
  00246	5e		 pop	 esi
  00247	5b		 pop	 ebx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\d_gain_c.c

; 117  : }

  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c3		 ret	 0
_d_gain_code ENDP
_TEXT	ENDS
END
