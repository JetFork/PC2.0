; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\pred_lt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+6
_inter_6 DW	07303H
	DW	06ebaH
	DW	06277H
	DW	04fe1H
	DW	0396dH
	DW	021f5H
	DW	0c47H
	DW	0fab8H
	DW	0eeceH
	DW	0e917H
	DW	0e926H
	DW	0edbfH
	DW	0f521H
	DW	0fd60H
	DW	04bbH
	DW	09e8H
	DW	0c3aH
	DW	0bafH
	DW	08d3H
	DW	0492H
	DW	00H
	DW	0fc17H
	DW	0f98cH
	DW	0f8b4H
	DW	0f97eH
	DW	0fb85H
	DW	0fe30H
	DW	0daH
	DW	02f4H
	DW	0424H
	DW	044bH
	DW	0388H
	DW	0226H
	DW	087H
	DW	0ff0bH
	DW	0fdfeH
	DW	0fd86H
	DW	0fda6H
	DW	0fe3dH
	DW	0ff19H
	DW	00H
	DW	0bfH
	DW	0134H
	DW	0154H
	DW	0128H
	DW	0c6H
	DW	04eH
	DW	0ffdcH
	DW	0ff88H
	DW	0ff5dH
	DW	0ff5bH
	DW	0ff7cH
	DW	0ffb1H
	DW	0ffedH
	DW	022H
	DW	049H
	DW	05bH
	DW	059H
	DW	046H
	DW	026H
	DW	00H
PUBLIC	_Pred_lt_3or6
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c
;	COMDAT _Pred_lt_3or6
_TEXT	SEGMENT
_L_diff$1$ = -24					; size = 4
_x0$1$ = -20						; size = 4
_c2$1$ = -16						; size = 4
_c1$1$ = -12						; size = 4
tv647 = -8						; size = 4
_exc$1$ = -4						; size = 4
tv646 = 8						; size = 4
_frac$ = 8						; size = 2
_L_subfr$dead$ = 12					; size = 2
_k$1$ = 16						; size = 4
_flag3$ = 16						; size = 2
_Pred_lt_3or6 PROC					; COMDAT
; _exc$ = ecx
; _T0$ = dx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx

; 94   :     Word16 i, j, k;
; 95   :     Word16 *x0, *x1, *x2;
; 96   :     const Word16 *c1, *c2;
; 97   :     Word32 s;
; 98   : 
; 99   :     x0 = &exc[-T0];             move16 (); 

  00007	0f bf c2	 movsx	 eax, dx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	03 c0		 add	 eax, eax
  0000e	89 4d fc	 mov	 DWORD PTR _exc$1$[ebp], ecx
  00011	56		 push	 esi
  00012	2b d8		 sub	 ebx, eax
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 536  :     var_out = (var1 == MIN_16) ? MAX_16 : -var1;

  00014	be 00 80 ff ff	 mov	 esi, -32768		; ffff8000H
  00019	8b 45 08	 mov	 eax, DWORD PTR _frac$[ebp]
  0001c	57		 push	 edi
  0001d	66 3b c6	 cmp	 ax, si
  00020	75 07		 jne	 SHORT $LN15@Pred_lt_3o
  00022	ba ff 7f 00 00	 mov	 edx, 32767		; 00007fffH
  00027	eb 05		 jmp	 SHORT $LN16@Pred_lt_3o
$LN15@Pred_lt_3o:
  00029	f7 d8		 neg	 eax
  0002b	0f b7 d0	 movzx	 edx, ax
$LN16@Pred_lt_3o:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c

; 103  :     if (flag3 != 0)

  0002e	66 83 7d 10 00	 cmp	 WORD PTR _flag3$[ebp], 0
  00033	0f b7 c2	 movzx	 eax, dx
  00036	74 2c		 je	 SHORT $LN8@Pred_lt_3o
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 298  :         result = (Word32) var1 *((Word32) 1 << var2);

  00038	0f bf ca	 movsx	 ecx, dx
  0003b	03 c9		 add	 ecx, ecx

; 299  : 
; 300  :         if ((var2 > 15 && var1 != 0) || (result != (Word32) ((Word16) result)))

  0003d	0f bf c1	 movsx	 eax, cx
  00040	3b c8		 cmp	 ecx, eax
  00042	74 1a		 je	 SHORT $LN22@Pred_lt_3o

; 301  :         {
; 302  :             Overflow = 1;
; 303  :             var_out = (var1 > 0) ? MAX_16 : MIN_16;

  00044	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00049	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  00053	66 85 d2	 test	 dx, dx
  00056	0f 4f f0	 cmovg	 esi, eax
  00059	0f b7 c6	 movzx	 eax, si

; 304  :         }
; 305  :         else

  0005c	eb 03		 jmp	 SHORT $LN19@Pred_lt_3o
$LN22@Pred_lt_3o:

; 306  :         {
; 307  :             var_out = extract_l (result);

  0005e	0f b7 c1	 movzx	 eax, cx
$LN19@Pred_lt_3o:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c

; 105  :       frac = shl (frac, 1);   /* inter_3l[k] = inter_6[2*k] -> k' = 2*k */

  00061	0f b7 c0	 movzx	 eax, ax
$LN8@Pred_lt_3o:

; 106  :     }
; 107  :     
; 108  :     test (); 
; 109  :     if (frac < 0)

  00064	66 85 c0	 test	 ax, ax
  00067	79 3d		 jns	 SHORT $LN7@Pred_lt_3o
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 139  :     L_sum = (Word32) var1 + var2;

  00069	98		 cwde
  0006a	83 c0 06	 add	 eax, 6

; 79   :     if (L_var1 > 0X00007fffL)

  0006d	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00072	7e 11		 jle	 SHORT $LN37@Pred_lt_3o

; 80   :     {
; 81   :         Overflow = 1;

  00074	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  0007e	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00083	eb 1b		 jmp	 SHORT $LN34@Pred_lt_3o
$LN37@Pred_lt_3o:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00085	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  0008a	7d 11		 jge	 SHORT $LN35@Pred_lt_3o

; 85   :     {
; 86   :         Overflow = 1;

  0008c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  00096	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  0009b	eb 03		 jmp	 SHORT $LN34@Pred_lt_3o
$LN35@Pred_lt_3o:

; 90   :     {
; 91   :         var_out = extract_l (L_var1);

  0009d	0f b7 c0	 movzx	 eax, ax
$LN34@Pred_lt_3o:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c

; 111  :         frac = add (frac, UP_SAMP_MAX);

  000a0	0f b7 c0	 movzx	 eax, ax

; 112  :         x0--;

  000a3	83 eb 02	 sub	 ebx, 2
$LN7@Pred_lt_3o:

; 113  :     }
; 114  : 
; 115  :     for (j = 0; j < L_subfr; j++)

  000a6	98		 cwde
  000a7	b9 06 00 00 00	 mov	 ecx, 6
  000ac	2b c8		 sub	 ecx, eax
  000ae	c7 45 f8 28 00
	00 00		 mov	 DWORD PTR tv647[ebp], 40 ; 00000028H
  000b5	89 4d e8	 mov	 DWORD PTR _L_diff$1$[ebp], ecx
  000b8	8d 14 45 00 00
	00 00		 lea	 edx, DWORD PTR _inter_6[eax*2]
  000bf	89 55 f4	 mov	 DWORD PTR _c1$1$[ebp], edx
$LL6@Pred_lt_3o:

; 116  :     {
; 117  :         x1 = x0++;              move16 (); 

  000c2	8b fb		 mov	 edi, ebx
  000c4	83 c3 02	 add	 ebx, 2
  000c7	89 5d ec	 mov	 DWORD PTR _x0$1$[ebp], ebx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 79   :     if (L_var1 > 0X00007fffL)

  000ca	81 f9 ff 7f 00
	00		 cmp	 ecx, 32767		; 00007fffH
  000d0	7e 11		 jle	 SHORT $LN51@Pred_lt_3o

; 80   :     {
; 81   :         Overflow = 1;

  000d2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  000dc	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  000e1	eb 1c		 jmp	 SHORT $LN48@Pred_lt_3o
$LN51@Pred_lt_3o:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  000e3	81 f9 00 80 ff
	ff		 cmp	 ecx, -32768		; ffff8000H
  000e9	7d 11		 jge	 SHORT $LN49@Pred_lt_3o

; 85   :     {
; 86   :         Overflow = 1;

  000eb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  000f5	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  000fa	eb 03		 jmp	 SHORT $LN48@Pred_lt_3o
$LN49@Pred_lt_3o:

; 90   :     {
; 91   :         var_out = extract_l (L_var1);

  000fc	0f b7 c1	 movzx	 eax, cx
$LN48@Pred_lt_3o:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c

; 120  :         c2 = &inter_6[sub (UP_SAMP_MAX, frac)];

  000ff	98		 cwde
  00100	c7 45 08 0a 00
	00 00		 mov	 DWORD PTR tv646[ebp], 10 ; 0000000aH
  00107	8d 04 45 00 00
	00 00		 lea	 eax, DWORD PTR _inter_6[eax*2]
  0010e	89 45 f0	 mov	 DWORD PTR _c2$1$[ebp], eax

; 121  : 
; 122  :         s = 0;                  move32 (); 

  00111	33 c0		 xor	 eax, eax

; 123  :         for (i = 0, k = 0; i < L_INTER10; i++, k += UP_SAMP_MAX)

  00113	33 c9		 xor	 ecx, ecx
  00115	89 4d 10	 mov	 DWORD PTR _k$1$[ebp], ecx
  00118	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@Pred_lt_3o:

; 124  :         {
; 125  :             s = L_mac (s, x1[-i], c1[k]);

  00120	0f bf f1	 movsx	 esi, cx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 485  :     L_var_out = (Word32) var1 *(Word32) var2;

  00123	0f bf 0f	 movsx	 ecx, WORD PTR [edi]
  00126	0f bf 14 72	 movsx	 edx, WORD PTR [edx+esi*2]
  0012a	0f af d1	 imul	 edx, ecx

; 486  : 
; 487  :     if (L_var_out != (Word32) 0x40000000L)

  0012d	81 fa 00 00 00
	40		 cmp	 edx, 1073741824		; 40000000H
  00133	74 05		 je	 SHORT $LN61@Pred_lt_3o

; 488  :     {
; 489  :         L_var_out *= 2;

  00135	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 490  :     }
; 491  :     else

  00138	eb 0f		 jmp	 SHORT $LN60@Pred_lt_3o
$LN61@Pred_lt_3o:

; 492  :     {
; 493  :         Overflow = 1;

  0013a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 494  :         L_var_out = MAX_32;

  00144	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
$LN60@Pred_lt_3o:

; 931  :     L_var_out = L_var1 + L_var2;

  00149	8d 14 01	 lea	 edx, DWORD PTR [ecx+eax]

; 932  : 
; 933  :     if (((L_var1 ^ L_var2) & MIN_32) == 0)

  0014c	33 c8		 xor	 ecx, eax
  0014e	78 1d		 js	 SHORT $LN64@Pred_lt_3o

; 934  :     {
; 935  :         if ((L_var_out ^ L_var1) & MIN_32)

  00150	8b ca		 mov	 ecx, edx
  00152	33 c8		 xor	 ecx, eax
  00154	79 17		 jns	 SHORT $LN64@Pred_lt_3o

; 936  :         {
; 937  :             L_var_out = (L_var1 < 0) ? MIN_32 : MAX_32;

  00156	33 d2		 xor	 edx, edx

; 938  :             Overflow = 1;

  00158	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  00162	85 c0		 test	 eax, eax
  00164	0f 98 c2	 sets	 dl
  00167	81 c2 ff ff ff
	7f		 add	 edx, 2147483647		; 7fffffffH
$LN64@Pred_lt_3o:

; 485  :     L_var_out = (Word32) var1 *(Word32) var2;

  0016d	8b 45 f0	 mov	 eax, DWORD PTR _c2$1$[ebp]
  00170	0f bf 0c 70	 movsx	 ecx, WORD PTR [eax+esi*2]
  00174	0f bf 03	 movsx	 eax, WORD PTR [ebx]
  00177	0f af c8	 imul	 ecx, eax

; 486  : 
; 487  :     if (L_var_out != (Word32) 0x40000000L)

  0017a	81 f9 00 00 00
	40		 cmp	 ecx, 1073741824		; 40000000H
  00180	74 04		 je	 SHORT $LN71@Pred_lt_3o

; 488  :     {
; 489  :         L_var_out *= 2;

  00182	03 c9		 add	 ecx, ecx

; 490  :     }
; 491  :     else

  00184	eb 0f		 jmp	 SHORT $LN70@Pred_lt_3o
$LN71@Pred_lt_3o:

; 492  :     {
; 493  :         Overflow = 1;

  00186	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 494  :         L_var_out = MAX_32;

  00190	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
$LN70@Pred_lt_3o:

; 931  :     L_var_out = L_var1 + L_var2;

  00195	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 932  : 
; 933  :     if (((L_var1 ^ L_var2) & MIN_32) == 0)

  00198	33 ca		 xor	 ecx, edx
  0019a	78 1c		 js	 SHORT $LN74@Pred_lt_3o

; 934  :     {
; 935  :         if ((L_var_out ^ L_var1) & MIN_32)

  0019c	8b c8		 mov	 ecx, eax
  0019e	33 ca		 xor	 ecx, edx
  001a0	79 16		 jns	 SHORT $LN74@Pred_lt_3o

; 936  :         {
; 937  :             L_var_out = (L_var1 < 0) ? MIN_32 : MAX_32;

  001a2	33 c0		 xor	 eax, eax

; 938  :             Overflow = 1;

  001a4	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  001ae	85 d2		 test	 edx, edx
  001b0	0f 98 c0	 sets	 al
  001b3	05 ff ff ff 7f	 add	 eax, 2147483647		; 7fffffffH
$LN74@Pred_lt_3o:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c

; 123  :         for (i = 0, k = 0; i < L_INTER10; i++, k += UP_SAMP_MAX)

  001b8	8b 4d 10	 mov	 ecx, DWORD PTR _k$1$[ebp]
  001bb	83 ef 02	 sub	 edi, 2
  001be	8b 55 f4	 mov	 edx, DWORD PTR _c1$1$[ebp]
  001c1	83 c1 06	 add	 ecx, 6
  001c4	83 c3 02	 add	 ebx, 2
  001c7	89 4d 10	 mov	 DWORD PTR _k$1$[ebp], ecx
  001ca	ff 4d 08	 dec	 DWORD PTR tv646[ebp]
  001cd	0f 85 4d ff ff
	ff		 jne	 $LL3@Pred_lt_3o
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 931  :     L_var_out = L_var1 + L_var2;

  001d3	8d 90 00 80 00
	00		 lea	 edx, DWORD PTR [eax+32768]

; 932  : 
; 933  :     if (((L_var1 ^ L_var2) & MIN_32) == 0)

  001d9	85 c0		 test	 eax, eax
  001db	78 1d		 js	 SHORT $LN80@Pred_lt_3o

; 934  :     {
; 935  :         if ((L_var_out ^ L_var1) & MIN_32)

  001dd	8b ca		 mov	 ecx, edx
  001df	33 c8		 xor	 ecx, eax
  001e1	79 17		 jns	 SHORT $LN80@Pred_lt_3o

; 936  :         {
; 937  :             L_var_out = (L_var1 < 0) ? MIN_32 : MAX_32;

  001e3	33 d2		 xor	 edx, edx

; 938  :             Overflow = 1;

  001e5	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  001ef	85 c0		 test	 eax, eax
  001f1	0f 98 c2	 sets	 dl
  001f4	81 c2 ff ff ff
	7f		 add	 edx, 2147483647		; 7fffffffH
$LN80@Pred_lt_3o:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c

; 129  :         exc[j] = round (s);     move16 (); 

  001fa	8b 45 fc	 mov	 eax, DWORD PTR _exc$1$[ebp]
  001fd	8b 5d ec	 mov	 ebx, DWORD PTR _x0$1$[ebp]
  00200	8b 4d e8	 mov	 ecx, DWORD PTR _L_diff$1$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 575  :     var_out = (Word16) (L_var1 >> 16);

  00203	c1 fa 10	 sar	 edx, 16			; 00000010H
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\pred_lt.c

; 129  :         exc[j] = round (s);     move16 (); 

  00206	66 89 10	 mov	 WORD PTR [eax], dx
  00209	83 c0 02	 add	 eax, 2
  0020c	ff 4d f8	 dec	 DWORD PTR tv647[ebp]
  0020f	8b 55 f4	 mov	 edx, DWORD PTR _c1$1$[ebp]
  00212	89 45 fc	 mov	 DWORD PTR _exc$1$[ebp], eax
  00215	0f 85 a7 fe ff
	ff		 jne	 $LL6@Pred_lt_3o
  0021b	5f		 pop	 edi
  0021c	5e		 pop	 esi
  0021d	5b		 pop	 ebx

; 130  :     }
; 131  : 
; 132  :     return;
; 133  : }

  0021e	8b e5		 mov	 esp, ebp
  00220	5d		 pop	 ebp
  00221	c3		 ret	 0
_Pred_lt_3or6 ENDP
_TEXT	ENDS
END
