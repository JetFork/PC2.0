; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\reorder.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_Reorder_lsf
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\reorder.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\reorder.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\reorder.c
;	COMDAT _Reorder_lsf
_TEXT	SEGMENT
_n$dead$ = 8						; size = 2
_Reorder_lsf PROC					; COMDAT
; _lsf$ = ecx
; _min_dist$dead$ = dx

; 60   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 61   :     Word16 i;
; 62   :     Word16 lsf_min;
; 63   : 
; 64   :     lsf_min = min_dist;         move16 (); 

  00002	be cd 00 00 00	 mov	 esi, 205		; 000000cdH
  00007	bf 0a 00 00 00	 mov	 edi, 10			; 0000000aH
  0000c	8d 64 24 00	 npad	 4
$LL4@Reorder_ls:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 186  :     L_diff = (Word32) var1 - var2;

  00010	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00013	0f bf c6	 movsx	 eax, si
  00016	2b d0		 sub	 edx, eax

; 79   :     if (L_var1 > 0X00007fffL)

  00018	81 fa ff 7f 00
	00		 cmp	 edx, 32767		; 00007fffH
  0001e	7e 0c		 jle	 SHORT $LN16@Reorder_ls

; 80   :     {
; 81   :         Overflow = 1;

  00020	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  0002a	eb 1c		 jmp	 SHORT $LN21@Reorder_ls
$LN16@Reorder_ls:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  0002c	81 fa 00 80 ff
	ff		 cmp	 edx, -32768		; ffff8000H
  00032	7d 0c		 jge	 SHORT $LN14@Reorder_ls

; 85   :     {
; 86   :         Overflow = 1;

  00034	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 88   :     }
; 89   :     else

  0003e	eb 05		 jmp	 SHORT $LN37@Reorder_ls
$LN14@Reorder_ls:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\reorder.c

; 68   :         if (sub (lsf[i], lsf_min) < 0)

  00040	66 85 d2	 test	 dx, dx
  00043	79 03		 jns	 SHORT $LN21@Reorder_ls
$LN37@Reorder_ls:

; 69   :         {
; 70   :             lsf[i] = lsf_min;   move16 (); 

  00045	66 89 31	 mov	 WORD PTR [ecx], si
$LN21@Reorder_ls:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 139  :     L_sum = (Word32) var1 + var2;

  00048	0f bf 01	 movsx	 eax, WORD PTR [ecx]
  0004b	05 cd 00 00 00	 add	 eax, 205		; 000000cdH

; 79   :     if (L_var1 > 0X00007fffL)

  00050	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00055	7e 11		 jle	 SHORT $LN28@Reorder_ls

; 80   :     {
; 81   :         Overflow = 1;

  00057	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00061	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00066	eb 1b		 jmp	 SHORT $LN25@Reorder_ls
$LN28@Reorder_ls:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00068	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  0006d	7d 11		 jge	 SHORT $LN26@Reorder_ls

; 85   :     {
; 86   :         Overflow = 1;

  0006f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;

  00079	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 88   :     }
; 89   :     else

  0007e	eb 03		 jmp	 SHORT $LN25@Reorder_ls
$LN26@Reorder_ls:

; 90   :     {
; 91   :         var_out = extract_l (L_var1);

  00080	0f b7 c0	 movzx	 eax, ax
$LN25@Reorder_ls:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\reorder.c

; 65   :     for (i = 0; i < n; i++)

  00083	83 c1 02	 add	 ecx, 2

; 71   :         }
; 72   :         lsf_min = add (lsf[i], min_dist);

  00086	0f b7 f0	 movzx	 esi, ax
  00089	4f		 dec	 edi
  0008a	75 84		 jne	 SHORT $LL4@Reorder_ls

; 73   :     }
; 74   : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	c3		 ret	 0
_Reorder_lsf ENDP
_TEXT	ENDS
END
