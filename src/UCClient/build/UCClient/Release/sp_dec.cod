; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\sp_dec.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0DK@EHFMLOPL@Speech_Decode_Frame_init?3?5can?5no@ ; `string'
PUBLIC	??_C@_0CO@MKENHBIB@Speech_Decode_Frame_reset?3?5inval@ ; `string'
PUBLIC	??_C@_0CN@DNBHMDPG@Speech_Decode_Frame_init?3?5invali@ ; `string'
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
;	COMDAT ??_C@_0CN@DNBHMDPG@Speech_Decode_Frame_init?3?5invali@
CONST	SEGMENT
??_C@_0CN@DNBHMDPG@Speech_Decode_Frame_init?3?5invali@ DB 'Speech_Decode_'
	DB	'Frame_init: invalid parameter', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@MKENHBIB@Speech_Decode_Frame_reset?3?5inval@
CONST	SEGMENT
??_C@_0CO@MKENHBIB@Speech_Decode_Frame_reset?3?5inval@ DB 'Speech_Decode_'
	DB	'Frame_reset: invalid parameter', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EHFMLOPL@Speech_Decode_Frame_init?3?5can?5no@
CONST	SEGMENT
??_C@_0DK@EHFMLOPL@Speech_Decode_Frame_init?3?5can?5no@ DB 'Speech_Decode'
	DB	'_Frame_init: can not malloc state structure', 0aH, 00H ; `string'
	ORG $+2
_sort_59 DW	00H
	DW	01H
	DW	04H
	DW	05H
	DW	03H
	DW	06H
	DW	07H
	DW	02H
	DW	0dH
	DW	0fH
	DW	08H
	DW	09H
	DW	0bH
	DW	0cH
	DW	0eH
	DW	0aH
	DW	010H
	DW	01cH
	DW	04aH
	DW	01dH
	DW	04bH
	DW	01bH
	DW	049H
	DW	01aH
	DW	048H
	DW	01eH
	DW	04cH
	DW	033H
	DW	061H
	DW	032H
	DW	047H
	DW	060H
	DW	075H
	DW	01fH
	DW	04dH
	DW	034H
	DW	062H
	DW	031H
	DW	046H
	DW	05fH
	DW	074H
	DW	035H
	DW	063H
	DW	020H
	DW	04eH
	DW	021H
	DW	04fH
	DW	030H
	DW	045H
	DW	05eH
	DW	073H
	DW	02fH
	DW	044H
	DW	05dH
	DW	072H
	DW	02eH
	DW	043H
	DW	05cH
	DW	071H
	DW	013H
	DW	015H
	DW	017H
	DW	016H
	DW	012H
	DW	011H
	DW	014H
	DW	018H
	DW	06fH
	DW	02bH
	DW	059H
	DW	06eH
	DW	040H
	DW	041H
	DW	02cH
	DW	05aH
	DW	019H
	DW	02dH
	DW	042H
	DW	05bH
	DW	070H
	DW	036H
	DW	064H
	DW	028H
	DW	03dH
	DW	056H
	DW	06bH
	DW	027H
	DW	03cH
	DW	055H
	DW	06aH
	DW	024H
	DW	039H
	DW	052H
	DW	067H
	DW	023H
	DW	038H
	DW	051H
	DW	066H
	DW	022H
	DW	037H
	DW	050H
	DW	065H
	DW	02aH
	DW	03fH
	DW	058H
	DW	06dH
	DW	029H
	DW	03eH
	DW	057H
	DW	06cH
	DW	026H
	DW	03bH
	DW	054H
	DW	069H
	DW	025H
	DW	03aH
	DW	053H
	DW	068H
	ORG $+4
_sort_102 DW	07H
	DW	06H
	DW	05H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	00H
	DW	010H
	DW	0fH
	DW	0eH
	DW	0dH
	DW	0cH
	DW	0bH
	DW	0aH
	DW	09H
	DW	08H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	048H
	DW	049H
	DW	0a1H
	DW	0a2H
	DW	041H
	DW	044H
	DW	045H
	DW	06cH
	DW	06fH
	DW	070H
	DW	09aH
	DW	09dH
	DW	09eH
	DW	0c5H
	DW	0c8H
	DW	0c9H
	DW	020H
	DW	021H
	DW	079H
	DW	07aH
	DW	04aH
	DW	04bH
	DW	0a3H
	DW	0a4H
	DW	042H
	DW	06dH
	DW	09bH
	DW	0c6H
	DW	013H
	DW	017H
	DW	015H
	DW	016H
	DW	012H
	DW	011H
	DW	014H
	DW	018H
	DW	019H
	DW	025H
	DW	024H
	DW	023H
	DW	022H
	DW	050H
	DW	04fH
	DW	04eH
	DW	04dH
	DW	07eH
	DW	07dH
	DW	07cH
	DW	07bH
	DW	0a9H
	DW	0a8H
	DW	0a7H
	DW	0a6H
	DW	046H
	DW	043H
	DW	047H
	DW	071H
	DW	06eH
	DW	072H
	DW	09fH
	DW	09cH
	DW	0a0H
	DW	0caH
	DW	0c7H
	DW	0cbH
	DW	04cH
	DW	0a5H
	DW	051H
	DW	052H
	DW	05cH
	DW	05bH
	DW	05dH
	DW	053H
	DW	05fH
	DW	055H
	DW	054H
	DW	05eH
	DW	065H
	DW	066H
	DW	060H
	DW	068H
	DW	056H
	DW	067H
	DW	057H
	DW	061H
	DW	07fH
	DW	080H
	DW	08aH
	DW	089H
	DW	08bH
	DW	081H
	DW	08dH
	DW	083H
	DW	082H
	DW	08cH
	DW	093H
	DW	094H
	DW	08eH
	DW	096H
	DW	084H
	DW	095H
	DW	085H
	DW	08fH
	DW	0aaH
	DW	0abH
	DW	0b5H
	DW	0b4H
	DW	0b6H
	DW	0acH
	DW	0b8H
	DW	0aeH
	DW	0adH
	DW	0b7H
	DW	0beH
	DW	0bfH
	DW	0b9H
	DW	0c1H
	DW	0afH
	DW	0c0H
	DW	0b0H
	DW	0baH
	DW	026H
	DW	027H
	DW	031H
	DW	030H
	DW	032H
	DW	028H
	DW	034H
	DW	02aH
	DW	029H
	DW	033H
	DW	03aH
	DW	03bH
	DW	035H
	DW	03dH
	DW	02bH
	DW	03cH
	DW	02cH
	DW	036H
	DW	0c2H
	DW	0b3H
	DW	0bdH
	DW	0c4H
	DW	0b1H
	DW	0c3H
	DW	0b2H
	DW	0bbH
	DW	0bcH
	DW	097H
	DW	088H
	DW	092H
	DW	099H
	DW	086H
	DW	098H
	DW	087H
	DW	090H
	DW	091H
	DW	069H
	DW	05aH
	DW	064H
	DW	06bH
	DW	058H
	DW	06aH
	DW	059H
	DW	062H
	DW	063H
	DW	03eH
	DW	02fH
	DW	039H
	DW	040H
	DW	02dH
	DW	03fH
	DW	02eH
	DW	037H
	DW	038H
_sort_795 DW	08H
	DW	07H
	DW	06H
	DW	05H
	DW	04H
	DW	03H
	DW	02H
	DW	0eH
	DW	010H
	DW	09H
	DW	0aH
	DW	0cH
	DW	0dH
	DW	0fH
	DW	0bH
	DW	011H
	DW	014H
	DW	016H
	DW	018H
	DW	017H
	DW	013H
	DW	012H
	DW	015H
	DW	038H
	DW	058H
	DW	07aH
	DW	09aH
	DW	039H
	DW	059H
	DW	07bH
	DW	09bH
	DW	03aH
	DW	05aH
	DW	07cH
	DW	09cH
	DW	034H
	DW	054H
	DW	076H
	DW	096H
	DW	035H
	DW	055H
	DW	077H
	DW	097H
	DW	01bH
	DW	05dH
	DW	01cH
	DW	05eH
	DW	01dH
	DW	05fH
	DW	01eH
	DW	060H
	DW	01fH
	DW	061H
	DW	03dH
	DW	07fH
	DW	03eH
	DW	080H
	DW	03fH
	DW	081H
	DW	03bH
	DW	05bH
	DW	07dH
	DW	09dH
	DW	020H
	DW	062H
	DW	040H
	DW	082H
	DW	01H
	DW	00H
	DW	019H
	DW	01aH
	DW	021H
	DW	063H
	DW	022H
	DW	064H
	DW	041H
	DW	083H
	DW	042H
	DW	084H
	DW	036H
	DW	056H
	DW	078H
	DW	098H
	DW	03cH
	DW	05cH
	DW	07eH
	DW	09eH
	DW	037H
	DW	057H
	DW	079H
	DW	099H
	DW	075H
	DW	074H
	DW	073H
	DW	02eH
	DW	04eH
	DW	070H
	DW	090H
	DW	02bH
	DW	04bH
	DW	06dH
	DW	08dH
	DW	028H
	DW	048H
	DW	06aH
	DW	08aH
	DW	024H
	DW	044H
	DW	066H
	DW	086H
	DW	072H
	DW	095H
	DW	094H
	DW	093H
	DW	092H
	DW	053H
	DW	052H
	DW	051H
	DW	050H
	DW	033H
	DW	032H
	DW	031H
	DW	030H
	DW	02fH
	DW	02dH
	DW	02cH
	DW	02aH
	DW	027H
	DW	023H
	DW	04fH
	DW	04dH
	DW	04cH
	DW	04aH
	DW	047H
	DW	043H
	DW	071H
	DW	06fH
	DW	06eH
	DW	06cH
	DW	069H
	DW	065H
	DW	091H
	DW	08fH
	DW	08eH
	DW	08cH
	DW	089H
	DW	085H
	DW	029H
	DW	049H
	DW	06bH
	DW	08bH
	DW	025H
	DW	045H
	DW	067H
	DW	087H
	DW	026H
	DW	046H
	DW	068H
	DW	088H
	ORG $+2
_sort_122 DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	017H
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	026H
	DW	08dH
	DW	027H
	DW	08eH
	DW	028H
	DW	08fH
	DW	029H
	DW	090H
	DW	02aH
	DW	091H
	DW	02bH
	DW	092H
	DW	02cH
	DW	093H
	DW	02dH
	DW	094H
	DW	02eH
	DW	095H
	DW	02fH
	DW	061H
	DW	096H
	DW	0c8H
	DW	030H
	DW	062H
	DW	097H
	DW	0c9H
	DW	031H
	DW	063H
	DW	098H
	DW	0caH
	DW	056H
	DW	088H
	DW	0bdH
	DW	0efH
	DW	057H
	DW	089H
	DW	0beH
	DW	0f0H
	DW	058H
	DW	08aH
	DW	0bfH
	DW	0f1H
	DW	05bH
	DW	0c2H
	DW	05cH
	DW	0c3H
	DW	05dH
	DW	0c4H
	DW	05eH
	DW	0c5H
	DW	05fH
	DW	0c6H
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	032H
	DW	064H
	DW	099H
	DW	0cbH
	DW	059H
	DW	08bH
	DW	0c0H
	DW	0f2H
	DW	033H
	DW	065H
	DW	09aH
	DW	0ccH
	DW	037H
	DW	069H
	DW	09eH
	DW	0d0H
	DW	05aH
	DW	08cH
	DW	0c1H
	DW	0f3H
	DW	03bH
	DW	06dH
	DW	0a2H
	DW	0d4H
	DW	03fH
	DW	071H
	DW	0a6H
	DW	0d8H
	DW	043H
	DW	075H
	DW	0aaH
	DW	0dcH
	DW	024H
	DW	025H
	DW	036H
	DW	035H
	DW	034H
	DW	03aH
	DW	039H
	DW	038H
	DW	03eH
	DW	03dH
	DW	03cH
	DW	042H
	DW	041H
	DW	040H
	DW	046H
	DW	045H
	DW	044H
	DW	068H
	DW	067H
	DW	066H
	DW	06cH
	DW	06bH
	DW	06aH
	DW	070H
	DW	06fH
	DW	06eH
	DW	074H
	DW	073H
	DW	072H
	DW	078H
	DW	077H
	DW	076H
	DW	09dH
	DW	09cH
	DW	09bH
	DW	0a1H
	DW	0a0H
	DW	09fH
	DW	0a5H
	DW	0a4H
	DW	0a3H
	DW	0a9H
	DW	0a8H
	DW	0a7H
	DW	0adH
	DW	0acH
	DW	0abH
	DW	0cfH
	DW	0ceH
	DW	0cdH
	DW	0d3H
	DW	0d2H
	DW	0d1H
	DW	0d7H
	DW	0d6H
	DW	0d5H
	DW	0dbH
	DW	0daH
	DW	0d9H
	DW	0dfH
	DW	0deH
	DW	0ddH
	DW	049H
	DW	048H
	DW	047H
	DW	04cH
	DW	04bH
	DW	04aH
	DW	04fH
	DW	04eH
	DW	04dH
	DW	052H
	DW	051H
	DW	050H
	DW	055H
	DW	054H
	DW	053H
	DW	07bH
	DW	07aH
	DW	079H
	DW	07eH
	DW	07dH
	DW	07cH
	DW	081H
	DW	080H
	DW	07fH
	DW	084H
	DW	083H
	DW	082H
	DW	087H
	DW	086H
	DW	085H
	DW	0b0H
	DW	0afH
	DW	0aeH
	DW	0b3H
	DW	0b2H
	DW	0b1H
	DW	0b6H
	DW	0b5H
	DW	0b4H
	DW	0b9H
	DW	0b8H
	DW	0b7H
	DW	0bcH
	DW	0bbH
	DW	0baH
	DW	0e2H
	DW	0e1H
	DW	0e0H
	DW	0e5H
	DW	0e4H
	DW	0e3H
	DW	0e8H
	DW	0e7H
	DW	0e6H
	DW	0ebH
	DW	0eaH
	DW	0e9H
	DW	0eeH
	DW	0edH
	DW	0ecH
	DW	060H
	DW	0c7H
_sort_475 DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	030H
	DW	031H
	DW	03dH
	DW	03eH
	DW	052H
	DW	053H
	DW	02fH
	DW	02eH
	DW	02dH
	DW	02cH
	DW	051H
	DW	050H
	DW	04fH
	DW	04eH
	DW	011H
	DW	012H
	DW	014H
	DW	016H
	DW	04dH
	DW	04cH
	DW	04bH
	DW	04aH
	DW	01dH
	DW	01eH
	DW	02bH
	DW	02aH
	DW	029H
	DW	028H
	DW	026H
	DW	027H
	DW	010H
	DW	013H
	DW	015H
	DW	032H
	DW	033H
	DW	03bH
	DW	03cH
	DW	03fH
	DW	040H
	DW	048H
	DW	049H
	DW	054H
	DW	055H
	DW	05dH
	DW	05eH
	DW	020H
	DW	021H
	DW	023H
	DW	024H
	DW	035H
	DW	036H
	DW	038H
	DW	039H
	DW	042H
	DW	043H
	DW	045H
	DW	046H
	DW	057H
	DW	058H
	DW	05aH
	DW	05bH
	DW	022H
	DW	037H
	DW	044H
	DW	059H
	DW	025H
	DW	03aH
	DW	047H
	DW	05cH
	DW	01fH
	DW	034H
	DW	041H
	DW	056H
	ORG $+2
_sort_67 DW	00H
	DW	01H
	DW	04H
	DW	03H
	DW	05H
	DW	06H
	DW	0dH
	DW	07H
	DW	02H
	DW	08H
	DW	09H
	DW	0bH
	DW	0fH
	DW	0cH
	DW	0eH
	DW	0aH
	DW	01cH
	DW	052H
	DW	01dH
	DW	053H
	DW	01bH
	DW	051H
	DW	01aH
	DW	050H
	DW	01eH
	DW	054H
	DW	010H
	DW	037H
	DW	06dH
	DW	038H
	DW	06eH
	DW	01fH
	DW	055H
	DW	039H
	DW	06fH
	DW	030H
	DW	049H
	DW	066H
	DW	07fH
	DW	020H
	DW	056H
	DW	033H
	DW	04cH
	DW	069H
	DW	082H
	DW	034H
	DW	04dH
	DW	06aH
	DW	083H
	DW	03aH
	DW	070H
	DW	021H
	DW	057H
	DW	013H
	DW	017H
	DW	035H
	DW	04eH
	DW	06bH
	DW	084H
	DW	015H
	DW	016H
	DW	012H
	DW	011H
	DW	014H
	DW	018H
	DW	019H
	DW	032H
	DW	04bH
	DW	068H
	DW	081H
	DW	02fH
	DW	048H
	DW	065H
	DW	07eH
	DW	036H
	DW	04fH
	DW	06cH
	DW	085H
	DW	02eH
	DW	047H
	DW	064H
	DW	07dH
	DW	080H
	DW	067H
	DW	04aH
	DW	031H
	DW	02dH
	DW	046H
	DW	063H
	DW	07cH
	DW	02aH
	DW	043H
	DW	060H
	DW	079H
	DW	027H
	DW	040H
	DW	05dH
	DW	076H
	DW	026H
	DW	03fH
	DW	05cH
	DW	075H
	DW	023H
	DW	03cH
	DW	059H
	DW	072H
	DW	022H
	DW	03bH
	DW	058H
	DW	071H
	DW	02cH
	DW	045H
	DW	062H
	DW	07bH
	DW	02bH
	DW	044H
	DW	061H
	DW	07aH
	DW	029H
	DW	042H
	DW	05fH
	DW	078H
	DW	028H
	DW	041H
	DW	05eH
	DW	077H
	DW	025H
	DW	03eH
	DW	05bH
	DW	074H
	DW	024H
	DW	03dH
	DW	05aH
	DW	073H
	ORG $+4
_sort_74 DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	01aH
	DW	057H
	DW	01bH
	DW	058H
	DW	01cH
	DW	059H
	DW	01dH
	DW	05aH
	DW	01eH
	DW	05bH
	DW	033H
	DW	050H
	DW	070H
	DW	08dH
	DW	034H
	DW	051H
	DW	071H
	DW	08eH
	DW	036H
	DW	053H
	DW	073H
	DW	090H
	DW	037H
	DW	054H
	DW	074H
	DW	091H
	DW	03aH
	DW	077H
	DW	03bH
	DW	078H
	DW	015H
	DW	016H
	DW	017H
	DW	011H
	DW	012H
	DW	013H
	DW	01fH
	DW	03cH
	DW	05cH
	DW	079H
	DW	038H
	DW	055H
	DW	075H
	DW	092H
	DW	014H
	DW	018H
	DW	019H
	DW	032H
	DW	04fH
	DW	06fH
	DW	08cH
	DW	039H
	DW	056H
	DW	076H
	DW	093H
	DW	031H
	DW	04eH
	DW	06eH
	DW	08bH
	DW	030H
	DW	04dH
	DW	035H
	DW	052H
	DW	072H
	DW	08fH
	DW	06dH
	DW	08aH
	DW	02fH
	DW	04cH
	DW	06cH
	DW	089H
	DW	020H
	DW	021H
	DW	03dH
	DW	03eH
	DW	05dH
	DW	05eH
	DW	07aH
	DW	07bH
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	083H
	DW	084H
	DW	085H
	DW	086H
	DW	087H
	DW	088H
	DW	022H
	DW	03fH
	DW	05fH
	DW	07cH
	DW	023H
	DW	040H
	DW	060H
	DW	07dH
	DW	024H
	DW	041H
	DW	061H
	DW	07eH
	DW	025H
	DW	042H
	DW	062H
	DW	07fH
	DW	026H
	DW	043H
	DW	063H
	DW	080H
	DW	027H
	DW	044H
	DW	064H
	DW	081H
	DW	028H
	DW	045H
	DW	065H
	DW	082H
_sort_SID DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	ORG $+2
_sort_515 DW	07H
	DW	06H
	DW	05H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	00H
	DW	0fH
	DW	0eH
	DW	0dH
	DW	0cH
	DW	0bH
	DW	0aH
	DW	09H
	DW	08H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	02eH
	DW	041H
	DW	054H
	DW	02dH
	DW	02cH
	DW	02bH
	DW	040H
	DW	03fH
	DW	03eH
	DW	053H
	DW	052H
	DW	051H
	DW	066H
	DW	065H
	DW	064H
	DW	02aH
	DW	03dH
	DW	050H
	DW	063H
	DW	01cH
	DW	02fH
	DW	042H
	DW	055H
	DW	012H
	DW	029H
	DW	03cH
	DW	04fH
	DW	062H
	DW	01dH
	DW	030H
	DW	043H
	DW	011H
	DW	014H
	DW	016H
	DW	028H
	DW	03bH
	DW	04eH
	DW	061H
	DW	015H
	DW	01eH
	DW	031H
	DW	044H
	DW	056H
	DW	013H
	DW	010H
	DW	057H
	DW	027H
	DW	026H
	DW	03aH
	DW	039H
	DW	04dH
	DW	023H
	DW	036H
	DW	049H
	DW	05cH
	DW	04cH
	DW	060H
	DW	05fH
	DW	024H
	DW	037H
	DW	04aH
	DW	05dH
	DW	020H
	DW	033H
	DW	021H
	DW	034H
	DW	046H
	DW	047H
	DW	059H
	DW	05aH
	DW	01fH
	DW	032H
	DW	045H
	DW	058H
	DW	025H
	DW	038H
	DW	04bH
	DW	05eH
	DW	022H
	DW	035H
	DW	048H
	DW	05bH
_bitno_MRDTX DW	03H
	DW	08H
	DW	09H
	DW	09H
	DW	06H
	ORG $+2
_bitno_MR795 DW	09H
	DW	09H
	DW	09H
	DW	08H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	DW	06H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	DW	08H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	DW	06H
	DW	0dH
	DW	04H
	DW	04H
	DW	05H
	ORG $+2
_bitno_MR122 DW	07H
	DW	08H
	DW	09H
	DW	08H
	DW	06H
	DW	09H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	06H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	09H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	06H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	ORG $+6
_sort_ptr DD	FLAT:_sort_475
	DD	FLAT:_sort_515
	DD	FLAT:_sort_59
	DD	FLAT:_sort_67
	DD	FLAT:_sort_74
	DD	FLAT:_sort_795
	DD	FLAT:_sort_102
	DD	FLAT:_sort_122
	DD	FLAT:_sort_SID
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_bitno_MR67 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	0bH
	DW	03H
	DW	07H
	DW	04H
	DW	0bH
	DW	03H
	DW	07H
	DW	08H
	DW	0bH
	DW	03H
	DW	07H
	DW	04H
	DW	0bH
	DW	03H
	DW	07H
	ORG $+2
_bitno_MR74 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	0dH
	DW	04H
	DW	07H
	DW	05H
	DW	0dH
	DW	04H
	DW	07H
	DW	08H
	DW	0dH
	DW	04H
	DW	07H
	DW	05H
	DW	0dH
	DW	04H
	DW	07H
	ORG $+2
_bitno_MR59 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	09H
	DW	02H
	DW	06H
	DW	04H
	DW	09H
	DW	02H
	DW	06H
	DW	08H
	DW	09H
	DW	02H
	DW	06H
	DW	04H
	DW	09H
	DW	02H
	DW	06H
	ORG $+2
_bitno_MR475 DW	08H
	DW	08H
	DW	07H
	DW	08H
	DW	07H
	DW	02H
	DW	08H
	DW	04H
	DW	07H
	DW	02H
	DW	04H
	DW	07H
	DW	02H
	DW	08H
	DW	04H
	DW	07H
	DW	02H
	ORG $+2
_bitno_MR102 DW	08H
	DW	09H
	DW	09H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	0aH
	DW	07H
	DW	07H
	ORG $+2
_bitno_MR515 DW	08H
	DW	08H
	DW	07H
	DW	08H
	DW	07H
	DW	02H
	DW	06H
	DW	04H
	DW	07H
	DW	02H
	DW	06H
	DW	04H
	DW	07H
	DW	02H
	DW	06H
	DW	04H
	DW	07H
	DW	02H
	DW	06H
	ORG $+2
_unpacked_size DW 05fH
	DW	067H
	DW	076H
	DW	086H
	DW	094H
	DW	09fH
	DW	0ccH
	DW	0f4H
	DW	023H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
PUBLIC	_Speech_Decode_Frame_reset
PUBLIC	_Speech_Decode_Frame
PUBLIC	_Speech_Decode_Frame_init
PUBLIC	_UnpackBits
PUBLIC	_Speech_Decode_Frame_exit
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\post_pro.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _Speech_Decode_Frame_exit
_TEXT	SEGMENT
_Speech_Decode_Frame_exit PROC				; COMDAT
; _state$ = ecx

; 148  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 149  :   if (state == NULL || *state == NULL)

  00003	85 f6		 test	 esi, esi
  00005	74 45		 je	 SHORT $LN1@Speech_Dec
  00007	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 3f		 je	 SHORT $LN1@Speech_Dec

; 150  :       return;
; 151  :  
; 152  :   Decoder_amr_exit(&(*state)->decoder_amrState);

  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 _Decoder_amr_exit

; 153  :   Post_Filter_exit(&(*state)->post_state);

  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00015	83 c1 04	 add	 ecx, 4
  00018	e8 00 00 00 00	 call	 _Post_Filter_exit

; 154  :   Post_Process_exit(&(*state)->postHP_state);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001f	83 c7 08	 add	 edi, 8
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\post_pro.c

; 117  :   if (state == NULL || *state == NULL)

  00022	74 16		 je	 SHORT $LN5@Speech_Dec
  00024	8b 07		 mov	 eax, DWORD PTR [edi]
  00026	85 c0		 test	 eax, eax
  00028	74 10		 je	 SHORT $LN5@Speech_Dec

; 118  :       return;
; 119  :  
; 120  :   /* deallocate memory */
; 121  :   free(*state);

  0002a	50		 push	 eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00031	83 c4 04	 add	 esp, 4

; 122  :   *state = NULL;

  00034	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN5@Speech_Dec:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c

; 161  :   free(*state);

  0003a	ff 36		 push	 DWORD PTR [esi]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00042	83 c4 04	 add	 esp, 4

; 162  :   *state = NULL;

  00045	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004b	5f		 pop	 edi
$LN1@Speech_Dec:
  0004c	5e		 pop	 esi

; 163  :   
; 164  :   return;
; 165  : }

  0004d	c3		 ret	 0
_Speech_Decode_Frame_exit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _UnpackBits
_TEXT	SEGMENT
_ft$1$ = -16						; size = 4
tv250 = -12						; size = 4
tv248 = -8						; size = 4
$T1 = -4						; size = 4
_pack_ptr$1$ = 8					; size = 4
_packed_bits$ = 8					; size = 4
_mode$ = 12						; size = 4
_bits$ = 16						; size = 4
_UnpackBits PROC					; COMDAT
; _q$ = cl
; _ft$ = edx

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b da		 mov	 ebx, edx
  00009	8a f1		 mov	 dh, cl
  0000b	89 5d f0	 mov	 DWORD PTR _ft$1$[ebp], ebx

; 239  : 	Word16 i, sid_type;
; 240  : 	UWord8 *pack_ptr, temp;
; 241  : 
; 242  : 	pack_ptr = (UWord8*)packed_bits;
; 243  : 
; 244  : 	/* real NO_DATA frame or unspecified frame type */
; 245  : 	if (ft == 15 || (ft > 8 && ft < 15))

  0000e	8d 43 f7	 lea	 eax, DWORD PTR [ebx-9]
  00011	66 83 f8 05	 cmp	 ax, 5
  00015	77 13		 ja	 SHORT $LN19@UnpackBits

; 246  : 	{
; 247  : 		*mode = (enum Mode)-1;

  00017	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0001a	5b		 pop	 ebx
  0001b	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 248  : 		return RX_NO_DATA;

  00021	b8 07 00 00 00	 mov	 eax, 7

; 294  : 		else	return RX_SPEECH_BAD;
; 295  : 	}
; 296  : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN19@UnpackBits:

; 249  : 	}
; 250  : 
; 251  : 	temp = *pack_ptr;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _packed_bits$[ebp]

; 252  : 	pack_ptr++;
; 253  : 
; 254  : 	for (i = 1; i < unpacked_size[ft] + 1; i++)

  0002d	0f bf cb	 movsx	 ecx, bx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	8a 10		 mov	 dl, BYTE PTR [eax]
  00034	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00037	0f bf 1c 4d 00
	00 00 00	 movsx	 ebx, WORD PTR _unpacked_size[ecx*2]
  0003f	bf 01 00 00 00	 mov	 edi, 1
  00044	43		 inc	 ebx
  00045	89 75 08	 mov	 DWORD PTR _pack_ptr$1$[ebp], esi
  00048	89 4d f4	 mov	 DWORD PTR tv250[ebp], ecx
  0004b	89 5d fc	 mov	 DWORD PTR $T1[ebp], ebx
  0004e	3b df		 cmp	 ebx, edi
  00050	7e 54		 jle	 SHORT $LN15@UnpackBits
  00052	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR _sort_ptr[ecx*4]
  00059	8b cf		 mov	 ecx, edi
  0005b	89 45 f8	 mov	 DWORD PTR tv248[ebp], eax
  0005e	8b ff		 npad	 2
$LL17@UnpackBits:

; 255  : 	{
; 256  : 		if (temp & 0x80)	bits[sort_ptr[ft][i-1]] = BIT_1;

  00060	0f bf 44 48 fe	 movsx	 eax, WORD PTR [eax+ecx*2-2]
  00065	8b 5d 10	 mov	 ebx, DWORD PTR _bits$[ebp]
  00068	84 d2		 test	 dl, dl
  0006a	79 07		 jns	 SHORT $LN14@UnpackBits
  0006c	be 01 00 00 00	 mov	 esi, 1
  00071	eb 02		 jmp	 SHORT $LN31@UnpackBits
$LN14@UnpackBits:

; 257  : 		else				bits[sort_ptr[ft][i-1]] = BIT_0;

  00073	33 f6		 xor	 esi, esi
$LN31@UnpackBits:
  00075	66 89 34 43	 mov	 WORD PTR [ebx+eax*2], si
  00079	8b 5d fc	 mov	 ebx, DWORD PTR $T1[ebp]
  0007c	8b 75 08	 mov	 esi, DWORD PTR _pack_ptr$1$[ebp]

; 258  : 
; 259  : 		if (i % 8)

  0007f	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  00085	79 05		 jns	 SHORT $LN30@UnpackBits
  00087	49		 dec	 ecx
  00088	83 c9 f8	 or	 ecx, -8			; fffffff8H
  0008b	41		 inc	 ecx
$LN30@UnpackBits:
  0008c	74 04		 je	 SHORT $LN12@UnpackBits

; 260  : 		{
; 261  : 			temp <<= 1;

  0008e	02 d2		 add	 dl, dl

; 262  : 		}
; 263  : 		else

  00090	eb 06		 jmp	 SHORT $LN16@UnpackBits
$LN12@UnpackBits:

; 264  : 		{
; 265  : 			temp = *pack_ptr;

  00092	8a 16		 mov	 dl, BYTE PTR [esi]

; 266  : 			pack_ptr++;

  00094	46		 inc	 esi
  00095	89 75 08	 mov	 DWORD PTR _pack_ptr$1$[ebp], esi
$LN16@UnpackBits:

; 252  : 	pack_ptr++;
; 253  : 
; 254  : 	for (i = 1; i < unpacked_size[ft] + 1; i++)

  00098	8b 45 f8	 mov	 eax, DWORD PTR tv248[ebp]
  0009b	47		 inc	 edi
  0009c	0f bf cf	 movsx	 ecx, di
  0009f	3b cb		 cmp	 ecx, ebx
  000a1	7c bd		 jl	 SHORT $LL17@UnpackBits
  000a3	8b 4d f4	 mov	 ecx, DWORD PTR tv250[ebp]
$LN15@UnpackBits:

; 267  : 		}
; 268  : 	}
; 269  : 
; 270  : 	/* SID frame */
; 271  : 	if (ft == MRDTX)

  000a6	66 83 7d f0 08	 cmp	 WORD PTR _ft$1$[ebp], 8

; 272  : 	{
; 273  : 		if (temp & 0x80)	sid_type = 1;
; 274  : 		else				sid_type = 0;
; 275  : 
; 276  : 		*mode = (enum Mode)((temp >> 4) & 0x07);

  000ab	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000ae	75 33		 jne	 SHORT $LN10@UnpackBits
  000b0	0f b6 ca	 movzx	 ecx, dl
  000b3	c1 e9 04	 shr	 ecx, 4
  000b6	0f b6 f2	 movzx	 esi, dl
  000b9	83 e1 07	 and	 ecx, 7
  000bc	c1 ee 07	 shr	 esi, 7
  000bf	89 08		 mov	 DWORD PTR [eax], ecx

; 277  : 
; 278  : 		if (q)

  000c1	84 f6		 test	 dh, dh
  000c3	74 12		 je	 SHORT $LN7@UnpackBits

; 279  : 		{
; 280  : 			if (sid_type)	return  RX_SID_UPDATE;

  000c5	33 c0		 xor	 eax, eax
  000c7	66 85 f6	 test	 si, si
  000ca	5f		 pop	 edi
  000cb	0f 95 c0	 setne	 al
  000ce	5e		 pop	 esi
  000cf	83 c0 04	 add	 eax, 4
  000d2	5b		 pop	 ebx

; 294  : 		else	return RX_SPEECH_BAD;
; 295  : 	}
; 296  : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN7@UnpackBits:
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi

; 281  : 			else			return	RX_SID_FIRST;
; 282  : 		}
; 283  : 		else
; 284  : 		{
; 285  : 			return	RX_SID_BAD;

  000d9	b8 06 00 00 00	 mov	 eax, 6
  000de	5b		 pop	 ebx

; 294  : 		else	return RX_SPEECH_BAD;
; 295  : 	}
; 296  : }

  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
$LN10@UnpackBits:

; 286  : 		}
; 287  : 	}
; 288  : 	/* speech frame */
; 289  : 	else
; 290  : 	{
; 291  : 		*mode = (enum Mode)ft;

  000e3	89 08		 mov	 DWORD PTR [eax], ecx

; 292  : 
; 293  : 		if (q)	return RX_SPEECH_GOOD;

  000e5	b8 03 00 00 00	 mov	 eax, 3
  000ea	33 c9		 xor	 ecx, ecx
  000ec	84 f6		 test	 dh, dh
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	0f 45 c1	 cmovne	 eax, ecx
  000f3	5b		 pop	 ebx

; 294  : 		else	return RX_SPEECH_BAD;
; 295  : 	}
; 296  : }

  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_UnpackBits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _Speech_Decode_Frame_init
_TEXT	SEGMENT
_s$ = -4						; size = 4
_Speech_Decode_Frame_init PROC				; COMDAT
; _state$ = ecx
; _id$dead$ = edx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 78   :   Speech_Decode_FrameState* s;
; 79   :  
; 80   :   if (state == (Speech_Decode_FrameState **) NULL){

  00007	85 ff		 test	 edi, edi
  00009	75 20		 jne	 SHORT $LN4@Speech_Dec

; 81   :       fprintf(stderr, "Speech_Decode_Frame_init: invalid parameter\n");

  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@DNBHMDPG@Speech_Decode_Frame_init?3?5invali@
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00016	83 c0 40	 add	 eax, 64			; 00000040H
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00020	83 c4 08	 add	 esp, 8

; 82   :       return -1;

  00023	83 c8 ff	 or	 eax, -1
  00026	5f		 pop	 edi

; 110  : }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN4@Speech_Dec:
  0002b	56		 push	 esi

; 83   :   }
; 84   :   *state = NULL;
; 85   :  
; 86   :   /* allocate memory */
; 87   :   if ((s= (Speech_Decode_FrameState *)
; 88   :           malloc(sizeof(Speech_Decode_FrameState))) == NULL) {

  0002c	6a 14		 push	 20			; 00000014H
  0002e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0003a	8b f0		 mov	 esi, eax
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 75 fc	 mov	 DWORD PTR _s$[ebp], esi
  00042	85 f6		 test	 esi, esi
  00044	75 21		 jne	 SHORT $LN3@Speech_Dec

; 89   :       fprintf(stderr, "Speech_Decode_Frame_init: can not malloc state "
; 90   :               "structure\n");

  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@EHFMLOPL@Speech_Decode_Frame_init?3?5can?5no@
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00051	83 c0 40	 add	 eax, 64			; 00000040H
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0005b	83 c4 08	 add	 esp, 8

; 91   :       return -1;

  0005e	83 c8 ff	 or	 eax, -1
  00061	5e		 pop	 esi
  00062	5f		 pop	 edi

; 110  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
$LN3@Speech_Dec:

; 92   :   }
; 93   :   s->decoder_amrState = NULL;

  00067	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 94   :   s->post_state = NULL;
; 95   :   s->postHP_state = NULL;
; 96   : 
; 97   :   if (Decoder_amr_init(&s->decoder_amrState) ||
; 98   :       Post_Filter_init(&s->post_state) ||
; 99   :       Post_Process_init(&s->postHP_state) ) {

  0006d	8b ce		 mov	 ecx, esi
  0006f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00076	53		 push	 ebx
  00077	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0007e	e8 00 00 00 00	 call	 _Decoder_amr_init
  00083	85 c0		 test	 eax, eax
  00085	75 2d		 jne	 SHORT $LN1@Speech_Dec
  00087	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0008a	e8 00 00 00 00	 call	 _Post_Filter_init
  0008f	85 c0		 test	 eax, eax
  00091	75 21		 jne	 SHORT $LN1@Speech_Dec
  00093	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00096	e8 00 00 00 00	 call	 _Post_Process_init
  0009b	85 c0		 test	 eax, eax
  0009d	75 15		 jne	 SHORT $LN1@Speech_Dec

; 102  :   }
; 103  : 
; 104  :   s->complexityCounter = getCounterId(id);
; 105  :   
; 106  :   Speech_Decode_Frame_reset(s);

  0009f	8b ce		 mov	 ecx, esi
  000a1	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000a4	e8 00 00 00 00	 call	 _Speech_Decode_Frame_reset
  000a9	5b		 pop	 ebx

; 107  :   *state = s;

  000aa	89 37		 mov	 DWORD PTR [edi], esi

; 108  :   
; 109  :   return 0;

  000ac	33 c0		 xor	 eax, eax
  000ae	5e		 pop	 esi
  000af	5f		 pop	 edi

; 110  : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
$LN1@Speech_Dec:

; 100  :       Speech_Decode_Frame_exit(&s);

  000b4	8d 4d fc	 lea	 ecx, DWORD PTR _s$[ebp]
  000b7	e8 00 00 00 00	 call	 _Speech_Decode_Frame_exit
  000bc	5b		 pop	 ebx
  000bd	5e		 pop	 esi

; 101  :       return -1;

  000be	83 c8 ff	 or	 eax, -1
  000c1	5f		 pop	 edi

; 110  : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
_Speech_Decode_Frame_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _Speech_Decode_Frame
_TEXT	SEGMENT
_st$GSCopy$1$ = -212					; size = 4
_Az_dec$ = -208						; size = 88
_parm$ = -120						; size = 116
__$ArrayPad$ = -4					; size = 4
_serial$ = 8						; size = 4
_frame_type$ = 12					; size = 4
_synth$ = 16						; size = 4
_Speech_Decode_Frame PROC				; COMDAT
; _st$ = ecx
; _mode$ = edx

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 10	 mov	 esi, DWORD PTR _synth$[ebp]
  00018	8b da		 mov	 ebx, edx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _serial$[ebp]
  0001d	57		 push	 edi

; 176  :   Word16 parm[MAX_PRM_SIZE + 1];  /* Synthesis parameters                */
; 177  :   Word16 Az_dec[AZ_SIZE];         /* Decoded Az for post-filter          */
; 178  :                                   /* in 4 subframes                      */
; 179  : 
; 180  : #if !defined(NO13BIT)
; 181  :   Word16 i;
; 182  : #endif
; 183  : 
; 184  :   setCounter(st->complexityCounter);
; 185  :   Reset_WMOPS_counter ();          /* reset WMOPS counter for the new frame */
; 186  : 
; 187  : 
; 188  :   /* Serial to parameters   */
; 189  :   test(); test(); sub(0,0); sub(0,0); logic16();
; 190  :   if ((frame_type == RX_SID_BAD) ||
; 191  :       (frame_type == RX_SID_UPDATE)) {

  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _frame_type$[ebp]
  00021	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _st$GSCopy$1$[ebp], ecx
  00027	83 ff 06	 cmp	 edi, 6
  0002a	74 07		 je	 SHORT $LN5@Speech_Dec

; 194  :   } else {
; 195  :     Bits2prm (mode, serial, parm);

  0002c	8b cb		 mov	 ecx, ebx
  0002e	83 ff 05	 cmp	 edi, 5
  00031	75 05		 jne	 SHORT $LN51@Speech_Dec
$LN5@Speech_Dec:

; 192  :     /* Override mode to MRDTX */
; 193  :     Bits2prm (MRDTX, serial, parm);

  00033	b9 08 00 00 00	 mov	 ecx, 8
$LN51@Speech_Dec:
  00038	8d 45 88	 lea	 eax, DWORD PTR _parm$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _Bits2prm
  00041	83 c4 04	 add	 esp, 4

; 196  :   }
; 197  : 
; 198  :   /* Synthesis */
; 199  :   Decoder_amr(st->decoder_amrState, mode, parm, frame_type,
; 200  :               synth, Az_dec);

  00044	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _Az_dec$[ebp]
  0004a	8b d3		 mov	 edx, ebx
  0004c	50		 push	 eax
  0004d	56		 push	 esi
  0004e	57		 push	 edi
  0004f	8b bd 2c ff ff
	ff		 mov	 edi, DWORD PTR _st$GSCopy$1$[ebp]
  00055	8d 45 88	 lea	 eax, DWORD PTR _parm$[ebp]
  00058	50		 push	 eax
  00059	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0005b	e8 00 00 00 00	 call	 _Decoder_amr

; 201  : 
; 202  :   Post_Filter(st->post_state, mode, synth, Az_dec);   /* Post-filter */

  00060	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00063	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _Az_dec$[ebp]
  00069	50		 push	 eax
  0006a	56		 push	 esi
  0006b	8b d3		 mov	 edx, ebx
  0006d	e8 00 00 00 00	 call	 _Post_Filter

; 203  : 
; 204  :   /* post HP filter, and 15->16 bits */
; 205  :   Post_Process(st->postHP_state, synth, L_FRAME);  

  00072	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	8b d6		 mov	 edx, esi
  0007a	e8 00 00 00 00	 call	 _Post_Process
  0007f	83 c4 04	 add	 esp, 4
  00082	b8 a0 00 00 00	 mov	 eax, 160		; 000000a0H
$LL3@Speech_Dec:

; 206  :   
; 207  : #if !defined(NO13BIT)
; 208  :   /* Truncate to 13 bits */
; 209  :   for (i = 0; i < L_FRAME; i++) 
; 210  :   {
; 211  :      synth[i] = synth[i] & 0xfff8;    logic16 (); move16 ();

  00087	66 83 26 f8	 and	 WORD PTR [esi], -8	; fffffff8H
  0008b	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  0008e	48		 dec	 eax
  0008f	75 f6		 jne	 SHORT $LL3@Speech_Dec

; 212  :   }
; 213  : #endif
; 214  :   
; 215  :   fwc();          /* function worst case */
; 216  :   setCounter(0); /* set counter to global counter */
; 217  :   return 0;
; 218  : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	33 cd		 xor	 ecx, ebp
  00098	5b		 pop	 ebx
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
_Speech_Decode_Frame ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\post_pro.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\post_pro.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c
;	COMDAT _Speech_Decode_Frame_reset
_TEXT	SEGMENT
_Speech_Decode_Frame_reset PROC				; COMDAT
; _state$ = ecx

; 120  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 121  :   if (state == (Speech_Decode_FrameState *) NULL){

  00003	85 f6		 test	 esi, esi
  00005	75 1d		 jne	 SHORT $LN1@Speech_Dec

; 122  :       fprintf(stderr, "Speech_Decode_Frame_reset: invalid parameter\n");

  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@MKENHBIB@Speech_Decode_Frame_reset?3?5inval@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00012	83 c0 40	 add	 eax, 64			; 00000040H
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0001c	83 c4 08	 add	 esp, 8

; 123  :       return -1;

  0001f	83 c8 ff	 or	 eax, -1
  00022	5e		 pop	 esi

; 137  : }

  00023	c3		 ret	 0
$LN1@Speech_Dec:

; 124  :   }
; 125  :   
; 126  :   Decoder_amr_reset(state->decoder_amrState, (enum Mode)0);

  00024	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00026	33 d2		 xor	 edx, edx
  00028	e8 00 00 00 00	 call	 _Decoder_amr_reset

; 127  :   Post_Filter_reset(state->post_state);

  0002d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00030	e8 00 00 00 00	 call	 _Post_Filter_reset

; 128  :   Post_Process_reset(state->postHP_state);

  00035	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\post_pro.c

; 93   :   if (state == (Post_ProcessState *) NULL){

  00038	85 c0		 test	 eax, eax
  0003a	75 23		 jne	 SHORT $LN4@Speech_Dec

; 94   :       fprintf(stderr, "Post_Process_reset: invalid parameter\n");

  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DNAPCMKC@Post_Process_reset?3?5invalid?5para@
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00047	83 c0 40	 add	 eax, 64			; 00000040H
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00051	83 c4 08	 add	 esp, 8
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c

; 130  :   state->prev_mode = (enum Mode)0;

  00054	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 136  :   return 0;

  0005b	33 c0		 xor	 eax, eax
  0005d	5e		 pop	 esi

; 137  : }

  0005e	c3		 ret	 0
$LN4@Speech_Dec:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\post_pro.c

; 98   :   state->y2_hi = 0;

  0005f	33 c9		 xor	 ecx, ecx
  00061	89 08		 mov	 DWORD PTR [eax], ecx

; 99   :   state->y2_lo = 0;
; 100  :   state->y1_hi = 0;

  00063	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 101  :   state->y1_lo = 0;
; 102  :   state->x0 = 0;

  00066	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\sp_dec.c

; 136  :   return 0;

  00069	33 c0		 xor	 eax, eax
  0006b	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0006e	5e		 pop	 esi

; 137  : }

  0006f	c3		 ret	 0
_Speech_Decode_Frame_reset ENDP
_TEXT	ENDS
END
