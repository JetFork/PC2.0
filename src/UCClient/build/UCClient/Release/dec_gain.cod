; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	E:\mywork\client\PC2.0TRUNK\PC2.0\third_party\libAMRPlayer\AMR\dec_gain.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+2
_table_gain_highrates DW 0241H
	DW	0296H
	DW	0f57cH
	DW	0c0aaH
	DW	0326H
	DW	072cH
	DW	0fb5fH
	DW	0e421H
	DW	0c25H
	DW	041cH
	DW	0f828H
	DW	0d0caH
	DW	01055H
	DW	056bH
	DW	0f9c0H
	DW	0da63H
	DW	0945H
	DW	0591H
	DW	0f9e8H
	DW	0db4eH
	DW	0cb0H
	DW	07c1H
	DW	0fbd2H
	DW	0e6d6H
	DW	0723H
	DW	0910H
	DW	0fcb8H
	DW	0ec40H
	DW	03adH
	DW	0cf2H
	DW	0fec7H
	DW	0f8a3H
	DW	092fH
	DW	0ba1H
	DW	0fe29H
	DW	0f4eaH
	DW	0e20H
	DW	0974H
	DW	0fcf7H
	DW	0edb7H
	DW	0d7bH
	DW	0c18H
	DW	0fe62H
	DW	0f646H
	DW	0b8bH
	DW	010cdH
	DW	048H
	DW	01b2H
	DW	0738H
	DW	01194H
	DW	08bH
	DW	0344H
	DW	0f2cH
	DW	01528H
	DW	019dH
	DW	09b4H
	DW	04a3H
	DW	01c2aH
	DW	0343H
	DW	013a6H
	DW	0c0bH
	DW	02328H
	DW	048bH
	DW	01b5aH
	DW	01cd8H
	DW	0373H
	DW	0f725H
	DW	0cab1H
	DW	0174aH
	DW	05e2H
	DW	0fa3aH
	DW	0dd3cH
	DW	01423H
	DW	0856H
	DW	0fc3dH
	DW	0e958H
	DW	01f08H
	DW	07d9H
	DW	0fbe4H
	DW	0e741H
	DW	0196bH
	DW	08caH
	DW	0fc8bH
	DW	0eb31H
	DW	01df6H
	DW	0ac0H
	DW	0fdb4H
	DW	0f22fH
	DW	01740H
	DW	0bc8H
	DW	0fe3cH
	DW	0f55cH
	DW	01322H
	DW	0eb4H
	DW	0ff83H
	DW	0fd11H
	DW	01b4dH
	DW	0e04H
	DW	0ff3cH
	DW	0fb67H
	DW	01feeH
	DW	0f8aH
	DW	0ffd5H
	DW	0fefcH
	DW	017b0H
	DW	01134H
	DW	06bH
	DW	0285H
	DW	01e1dH
	DW	013dfH
	DW	0140H
	DW	0788H
	DW	01593H
	DW	01785H
	DW	0239H
	DW	0d62H
	DW	01e59H
	DW	01bd6H
	DW	0332H
	DW	0133eH
	DW	017acH
	DW	01f02H
	DW	03d1H
	DW	016fdH
	DW	015daH
	DW	02cdfH
	DW	05f3H
	DW	023d4H
	DW	02955H
	DW	054cH
	DW	0f99fH
	DW	0d999H
	DW	02359H
	DW	063dH
	DW	0fa91H
	DW	0df44H
	DW	02642H
	DW	07f3H
	DW	0fbf7H
	DW	0e7b4H
	DW	022f2H
	DW	096fH
	DW	0fcf4H
	DW	0eda4H
	DW	02838H
	DW	0a18H
	DW	0fd57H
	DW	0effdH
	DW	024bfH
	DW	0aaeH
	DW	0fdabH
	DW	0f1f5H
	DW	021fcH
	DW	0c92H
	DW	0fe9cH
	DW	0f7a0H
	DW	0261dH
	DW	0d43H
	DW	0feebH
	DW	0f97bH
	DW	027c1H
	DW	0f34H
	DW	0ffb5H
	DW	0fe3aH
	DW	023d2H
	DW	011b0H
	DW	094H
	DW	037bH
	DW	027a8H
	DW	0138cH
	DW	0128H
	DW	06f5H
	DW	0239aH
	DW	01667H
	DW	01f1H
	DW	0bb1H
	DW	02904H
	DW	0187aH
	DW	0274H
	DW	0ec6H
	DW	0277eH
	DW	01dcfH
	DW	0397H
	DW	0159eH
	DW	0228cH
	DW	02217H
	DW	045dH
	DW	01a48H
	DW	022fcH
	DW	030d0H
	DW	0670H
	DW	026c1H
	DW	0327cH
	DW	03d0H
	DW	0f7b9H
	DW	0ce2fH
	DW	02cabH
	DW	06dbH
	DW	0fb1cH
	DW	0e28dH
	DW	02f6aH
	DW	0918H
	DW	0fcbdH
	DW	0ec60H
	DW	02c7cH
	DW	0940H
	DW	0fcd6H
	DW	0ecf8H
	DW	029ccH
	DW	0bf8H
	DW	0fe53H
	DW	0f5ecH
	DW	0302cH
	DW	0b2dH
	DW	0fdeeH
	DW	0f388H
	DW	02dcaH
	DW	0cffH
	DW	0fecdH
	DW	0f8c8H
	DW	02c06H
	DW	0e74H
	DW	0ff6aH
	DW	0fc78H
	DW	02a6dH
	DW	0113dH
	DW	06eH
	DW	0297H
	DW	02f32H
	DW	011b5H
	DW	096H
	DW	0386H
	DW	02c13H
	DW	01455H
	DW	0162H
	DW	0854H
	DW	02eb8H
	DW	018a1H
	DW	027dH
	DW	0efdH
	DW	02b9fH
	DW	01d6eH
	DW	0384H
	DW	0152cH
	DW	02f60H
	DW	02089H
	DW	0419H
	DW	018a8H
	DW	02ad9H
	DW	02a19H
	DW	0595H
	DW	0219cH
	DW	0283cH
	DW	043e0H
	DW	0857H
	DW	03235H
	DW	0364bH
	DW	0691H
	DW	0fadcH
	DW	0e10fH
	DW	03124H
	DW	07fdH
	DW	0fbfeH
	DW	0e7ddH
	DW	033d1H
	DW	0987H
	DW	0fd02H
	DW	0edfeH
	DW	036d1H
	DW	0badH
	DW	0fe2fH
	DW	0f50eH
	DW	0348cH
	DW	0c1aH
	DW	0fe63H
	DW	0f64eH
	DW	0306cH
	DW	0e4aH
	DW	0ff59H
	DW	0fc12H
	DW	034c6H
	DW	0ec4H
	DW	0ff89H
	DW	0fd37H
	DW	03250H
	DW	010b0H
	DW	03eH
	DW	0176H
	DW	034ddH
	DW	012fdH
	DW	0fdH
	DW	05f3H
	DW	0317bH
	DW	01551H
	DW	01a8H
	DW	09f8H
	DW	0361eH
	DW	017daH
	DW	024eH
	DW	0ddfH
	DW	032e7H
	DW	01953H
	DW	02a6H
	DW	0ff4H
	DW	034f5H
	DW	01e29H
	DW	03a9H
	DW	01607H
	DW	0329dH
	DW	0245fH
	DW	04bdH
	DW	01c88H
	DW	03592H
	DW	02d1fH
	DW	05fcH
	DW	02405H
	DW	0312fH
	DW	03b66H
	DW	0792H
	DW	02d93H
	DW	03b09H
	DW	0604H
	DW	0fa5bH
	DW	0de04H
	DW	03ae0H
	DW	091dH
	DW	0fcc0H
	DW	0ec71H
	DW	038bfH
	DW	09cfH
	DW	0fd2dH
	DW	0ef00H
	DW	03964H
	DW	0c7fH
	DW	0fe93H
	DW	0f76bH
	DW	03c16H
	DW	0de8H
	DW	0ff31H
	DW	0fb21H
	DW	03735H
	DW	0f78H
	DW	0ffceH
	DW	0fed4H
	DW	03afeH
	DW	0108cH
	DW	032H
	DW	012aH
	DW	037fcH
	DW	012d8H
	DW	0f2H
	DW	05aeH
	DW	039feH
	DW	0154bH
	DW	01a6H
	DW	09eeH
	DW	03bcaH
	DW	017c3H
	DW	0248H
	DW	0dbeH
	DW	037f9H
	DW	01ae8H
	DW	0300H
	DW	0120fH
	DW	03ad4H
	DW	01e09H
	DW	03a2H
	DW	015e2H
	DW	03846H
	DW	024d2H
	DW	04cfH
	DW	01cf5H
	DW	03c1bH
	DW	0260dH
	DW	0500H
	DW	01e1aH
	DW	039e8H
	DW	037bfH
	DW	0734H
	DW	02b5eH
	DW	03520H
	DW	0616bH
	DW	0a6dH
	DW	03ec3H
	DW	0400cH
	DW	07b1H
	DW	0fbc6H
	DW	0e68bH
	DW	041b1H
	DW	0b10H
	DW	0fddfH
	DW	0f32dH
	DW	03d61H
	DW	0b1bH
	DW	0fde5H
	DW	0f350H
	DW	03ee8H
	DW	0d08H
	DW	0fed1H
	DW	0f8dfH
	DW	04000H
	DW	0f7bH
	DW	0ffcfH
	DW	0fedaH
	DW	0422cH
	DW	011e3H
	DW	0a5H
	DW	03e0H
	DW	03d5fH
	DW	011f7H
	DW	0abH
	DW	0406H
	DW	03f5eH
	DW	01548H
	DW	01a5H
	DW	09e9H
	DW	041c0H
	DW	018eeH
	DW	028fH
	DW	0f69H
	DW	03d81H
	DW	01be5H
	DW	0335H
	DW	01350H
	DW	03fc6H
	DW	01d2dH
	DW	0378H
	DW	014dfH
	DW	040e3H
	DW	021b0H
	DW	044cH
	DW	019deH
	DW	04284H
	DW	028b2H
	DW	0563H
	DW	0206fH
	DW	03e21H
	DW	02e29H
	DW	061dH
	DW	024cfH
	DW	041eeH
	DW	03962H
	DW	075fH
	DW	02c60H
	DW	04083H
	DW	05186H
	DW	0966H
	DW	03893H
	DW	046deH
	DW	0823H
	DW	0fc19H
	DW	0e883H
	DW	04bc9H
	DW	0c6aH
	DW	0fe89H
	DW	0f72fH
	DW	04464H
	DW	0d62H
	DW	0fef8H
	DW	0f9cbH
	DW	04e56H
	DW	0fbbH
	DW	0ffe7H
	DW	0ff69H
	DW	04695H
	DW	01099H
	DW	036H
	DW	0146H
	DW	04a08H
	DW	013caH
	DW	013aH
	DW	0762H
	DW	0452fH
	DW	0151aH
	DW	0199H
	DW	099dH
	DW	04d7bH
	DW	01830H
	DW	0262H
	DW	0e5cH
	DW	0461eH
	DW	01b66H
	DW	031bH
	DW	012b0H
	DW	05346H
	DW	01ec5H
	DW	03c6H
	DW	016b8H
	DW	045f6H
	DW	02449H
	DW	04baH
	DW	01c73H
	DW	04ac8H
	DW	0244aH
	DW	04baH
	DW	01c74H
	DW	05025H
	DW	02c75H
	DW	05e6H
	DW	02381H
	DW	0469bH
	DW	03895H
	DW	074aH
	DW	02be2H
	DW	04e1fH
	DW	045daH
	DW	0881H
	DW	03334H
	DW	0499aH
	DW	07ffcH
	DW	0c00H
	DW	0483eH
_table_gain_MR475 DW 032cH
	DW	080H
	DW	021eH
	DW	08cH
	DW	0b39H
	DW	046fH
	DW	08daH
	DW	0d4aH
	DW	0813H
	DW	0233H
	DW	03185H
	DW	0287H
	DW	01024H
	DW	0706H
	DW	015e1H
	DW	014a5H
	DW	01e09H
	DW	0176H
	DW	0e97H
	DW	01b9H
	DW	02aa0H
	DW	0a4eH
	DW	02e1fH
	DW	09beH
	DW	0500aH
	DW	031dH
	DW	01462H
	DW	02a3H
	DW	01a44H
	DW	020a2H
	DW	014a2H
	DW	06a0H
	DW	05d0H
	DW	01acH
	DW	016faH
	DW	01c4H
	DW	014d4H
	DW	0fe8H
	DW	0dffH
	DW	04f4H
	DW	09a5H
	DW	0385H
	DW	03e16H
	DW	03edH
	DW	03a86H
	DW	0cc7H
	DW	0285bH
	DW	012faH
	DW	0e33H
	DW	07e5H
	DW	0a24H
	DW	0343H
	DW	03048H
	DW	0131cH
	DW	02faeH
	DW	06a8H
	DW	03478H
	DW	0644H
	DW	0239eH
	DW	0925H
	DW	0f80H
	DW	0602H
	DW	01567H
	DW	026d0H
	DW	0ed3H
	DW	01a1H
	DW	054fH
	DW	019eH
	DW	0e38H
	DW	0621H
	DW	01f3bH
	DW	0dd5H
	DW	02c8dH
	DW	0285H
	DW	02168H
	DW	027bH
	DW	0fd8H
	DW	0561H
	DW	040e0H
	DW	017ecH
	DW	02c9cH
	DW	02bcH
	DW	07d7H
	DW	025fH
	DW	0307fH
	DW	062aH
	DW	02b6fH
	DW	0122eH
	DW	03570H
	DW	06acH
	DW	02ed6H
	DW	04cdH
	DW	01f3cH
	DW	01c81H
	DW	033afH
	DW	01653H
	DW	097cH
	DW	0487H
	DW	0819H
	DW	0795H
	DW	0184aH
	DW	017e9H
	DW	0ddaH
	DW	070cH
	DW	022ddH
	DW	070aH
	DW	021e7H
	DW	062cH
	DW	0366fH
	DW	0df8H
	DW	03401H
	DW	0185dH
	DW	017feH
	DW	046aH
	DW	0176aH
	DW	06c6H
	DW	0373dH
	DW	01236H
	DW	02c07H
	DW	0cf9H
	DW	02fc2H
	DW	060fH
	DW	0366bH
	DW	0bc7H
	DW	013d9H
	DW	028e0H
	DW	024e4H
	DW	01a32H
	DW	0699H
	DW	02abH
	DW	059cH
	DW	051aH
	DW	01c2cH
	DW	0f5dH
	DW	0ff2H
	DW	0a99H
	DW	01e71H
	DW	02c0H
	DW	03adeH
	DW	0322H
	DW	0189bH
	DW	0145cH
	DW	010f1H
	DW	014edH
	DW	01a14H
	DW	021dH
	DW	017aeH
	DW	0272H
	DW	03553H
	DW	0e74H
	DW	02ceaH
	DW	0968H
	DW	03f1cH
	DW	02ccH
	DW	02f91H
	DW	02efH
	DW	01f81H
	DW	02ce1H
	DW	018aaH
	DW	08d0H
	DW	01172H
	DW	01f0H
	DW	01c7dH
	DW	020bH
	DW	027e5H
	DW	0ef9H
	DW	020caH
	DW	0bddH
	DW	020d3H
	DW	03c6H
	DW	03794H
	DW	0758H
	DW	021ffH
	DW	01521H
	DW	0400bH
	DW	012ffH
	DW	01cfcH
	DW	07bbH
	DW	017c9H
	DW	04ceH
	DW	0249bH
	DW	0112eH
	DW	038deH
	DW	0d23H
	DW	034f7H
	DW	0b39H
	DW	0336bH
	DW	05b9H
	DW	0159eH
	DW	068eH
	DW	03352H
	DW	039b3H
	DW	01caaH
	DW	0258H
	DW	0526H
	DW	0224H
	DW	0109cH
	DW	0dd3H
	DW	0273cH
	DW	093cH
	DW	0295bH
	DW	026eH
	DW	03320H
	DW	029dH
	DW	0372eH
	DW	0dc6H
	DW	013afH
	DW	02638H
	DW	03beaH
	DW	026bH
	DW	0c2bH
	DW	024eH
	DW	0403aH
	DW	0bc5H
	DW	03cb6H
	DW	01048H
	DW	03cb1H
	DW	064bH
	DW	03c2dH
	DW	04ccH
	DW	03e97H
	DW	02453H
	DW	01d6eH
	DW	01370H
	DW	07c6H
	DW	04bdH
	DW	02cb7H
	DW	0485H
	DW	030e0H
	DW	0158fH
	DW	02503H
	DW	0a54H
	DW	01e24H
	DW	07f2H
	DW	033e0H
	DW	08bfH
	DW	03e8bH
	DW	013e5H
	DW	01f82H
	DW	01a69H
	DW	02763H
	DW	0585H
	DW	0138aH
	DW	092bH
	DW	030ebH
	DW	01757H
	DW	03b16H
	DW	0b53H
	DW	04758H
	DW	08f1H
	DW	03dd3H
	DW	09dfH
	DW	03f89H
	DW	0280eH
	DW	0393bH
	DW	02c37H
	DW	0705H
	DW	0151H
	DW	0c2bH
	DW	018dH
	DW	0db6H
	DW	0b70H
	DW	011f0H
	DW	0a6eH
	DW	01d5fH
	DW	0274H
	DW	02c97H
	DW	0290H
	DW	0173aH
	DW	0983H
	DW	01990H
	DW	01cc7H
	DW	0202eH
	DW	033dH
	DW	0fa0H
	DW	035fH
	DW	02730H
	DW	09bcH
	DW	03eb9H
	DW	0ddfH
	DW	0471cH
	DW	041eH
	DW	017d7H
	DW	05aeH
	DW	016fcH
	DW	01edcH
	DW	04940H
	DW	0d8cH
	DW	0748H
	DW	0220H
	DW	023eeH
	DW	02abH
	DW	02d67H
	DW	01040H
	DW	011f2H
	DW	066cH
	DW	0c56H
	DW	0485H
	DW	03e51H
	DW	0a00H
	DW	0303dH
	DW	0e95H
	DW	0440cH
	DW	0148cH
	DW	017daH
	DW	07d4H
	DW	0b65H
	DW	06ceH
	DW	04053H
	DW	01489H
	DW	04193H
	DW	0690H
	DW	04335H
	DW	06dfH
	DW	012a5H
	DW	0c9fH
	DW	01cdaH
	DW	01793H
	DW	03806H
	DW	0271cH
	DW	0fc3H
	DW	01baH
	DW	01062H
	DW	01caH
	DW	023feH
	DW	08c2H
	DW	01d03H
	DW	01079H
	DW	0323cH
	DW	0321H
	DW	02bb2H
	DW	0339H
	DW	03168H
	DW	0824H
	DW	0329cH
	DW	0199aH
	DW	02521H
	DW	03e4H
	DW	019e5H
	DW	03d9H
	DW	02929H
	DW	09c6H
	DW	03bb9H
	DW	0138eH
	DW	0313aH
	DW	0807H
	DW	03c7cH
	DW	0675H
	DW	03f42H
	DW	01b09H
	DW	03797H
	DW	0169eH
	DW	0a42H
	DW	033cH
	DW	015efH
	DW	0696H
	DW	0355fH
	DW	01692H
	DW	0e54H
	DW	0612H
	DW	02c31H
	DW	0a49H
	DW	0262aH
	DW	05b3H
	DW	036b3H
	DW	0127dH
	DW	03e19H
	DW	01893H
	DW	01886H
	DW	074eH
	DW	01ee6H
	DW	08edH
	DW	04252H
	DW	011dbH
	DW	040c0H
	DW	0f09H
	DW	03b90H
	DW	0907H
	DW	03e97H
	DW	0cacH
	DW	0387bH
	DW	04590H
	DW	02e47H
	DW	0acbH
	DW	07bdH
	DW	057fH
	DW	0578H
	DW	036cH
	DW	010efH
	DW	0ddbH
	DW	01127H
	DW	01072H
	DW	0151dH
	DW	02a8H
	DW	04435H
	DW	030dH
	DW	01965H
	DW	013feH
	DW	01f9bH
	DW	01dfdH
	DW	01cbbH
	DW	031aH
	DW	0208dH
	DW	049eH
	DW	03ac1H
	DW	0c58H
	DW	03a50H
	DW	0bdfH
	DW	04fc5H
	DW	0370H
	DW	038d1H
	DW	0354H
	DW	03031H
	DW	03974H
	DW	01af8H
	DW	0780H
	DW	01081H
	DW	03a5H
	DW	0201aH
	DW	043fH
	DW	029a3H
	DW	0ff4H
	DW	02762H
	DW	011b5H
	DW	0aafH
	DW	0348H
	DW	050b1H
	DW	0439H
	DW	04147H
	DW	0174eH
	DW	03e01H
	DW	011e2H
	DW	02a77H
	DW	0a0eH
	DW	0ebdH
	DW	048eH
	DW	038b7H
	DW	0fccH
	DW	050dbH
	DW	0a43H
	DW	03b73H
	DW	0aaeH
	DW	03baaH
	DW	088aH
	DW	01871H
	DW	0c9aH
	DW	03345H
	DW	04c18H
	DW	01c1cH
	DW	03a2H
	DW	099eH
	DW	0652H
	DW	011a3H
	DW	0c14H
	DW	0361cH
	DW	010b5H
	DW	028dcH
	DW	0341H
	DW	043bbH
	DW	032aH
	DW	041fbH
	DW	08f1H
	DW	03cbaH
	DW	02019H
	DW	03523H
	DW	0694H
	DW	0c7dH
	DW	072aH
	DW	03e4cH
	DW	0b04H
	DW	03dc4H
	DW	014cfH
	DW	0426eH
	DW	0986H
	DW	04194H
	DW	052eH
	DW	03d37H
	DW	01fdcH
	DW	02dceH
	DW	0216cH
	DW	0eb2H
	DW	0805H
	DW	0255bH
	DW	0525H
	DW	034f9H
	DW	01a86H
	DW	02fc3H
	DW	0790H
	DW	01ff4H
	DW	0ddeH
	DW	033e7H
	DW	06f2H
	DW	03fabH
	DW	019c7H
	DW	03fa3H
	DW	01e4eH
	DW	02149H
	DW	09f7H
	DW	01c39H
	DW	0a55H
	DW	0475dH
	DW	01d41H
	DW	041f5H
	DW	08c8H
	DW	045daH
	DW	0b44H
	DW	04371H
	DW	0d00H
	DW	024c9H
	DW	04ec2H
	DW	02b22H
	DW	02080H
	DW	0506H
	DW	026cH
	DW	0597H
	DW	0247H
	DW	01769H
	DW	08f1H
	DW	0f8aH
	DW	0e2aH
	DW	01418H
	DW	02f0H
	DW	03461H
	DW	033eH
	DW	015b1H
	DW	0b2cH
	DW	02df4H
	DW	01714H
	DW	029f1H
	DW	0230H
	DW	01546H
	DW	0234H
	DW	03409H
	DW	0bc0H
	DW	02eaaH
	DW	0e63H
	DW	04dafH
	DW	031eH
	DW	02661H
	DW	02d8H
	DW	0355fH
	DW	0222cH
	DW	01cdfH
	DW	0bedH
	DW	09d3H
	DW	030aH
	DW	017a2H
	DW	0341H
	DW	01945H
	DW	013d2H
	DW	02071H
	DW	099fH
	DW	017fdH
	DW	0749H
	DW	03bccH
	DW	04eeH
	DW	03848H
	DW	011c3H
	DW	0355fH
	DW	011a3H
	DW	0c41H
	DW	0ba7H
	DW	09afH
	DW	04ebH
	DW	03af0H
	DW	01227H
	DW	03c16H
	DW	0a2fH
	DW	0389cH
	DW	0958H
	DW	030aeH
	DW	09e9H
	DW	01d73H
	DW	0b85H
	DW	0326dH
	DW	02f1cH
	DW	0155cH
	DW	02acH
	DW	0c45H
	DW	02d2H
	DW	013d9H
	DW	04faH
	DW	031bcH
	DW	01068H
	DW	03bc6H
	DW	02a9H
	DW	01e8bH
	DW	0250H
	DW	01986H
	DW	07e5H
	DW	0405eH
	DW	02221H
	DW	03434H
	DW	0372H
	DW	01515H
	DW	0383H
	DW	03940H
	DW	0882H
	DW	03995H
	DW	01083H
	DW	037beH
	DW	0512H
	DW	03669H
	DW	07edH
	DW	03c75H
	DW	01d3aH
	DW	03dc7H
	DW	011dcH
	DW	09d9H
	DW	07ddH
	DW	013c6H
	DW	070cH
	DW	01427H
	DW	019b6H
	DW	01bdaH
	DW	0e0dH
	DW	02aa8H
	DW	064bH
	DW	02dd1H
	DW	06acH
	DW	04207H
	DW	0d7fH
	DW	03f8cH
	DW	019f0H
	DW	0245aH
	DW	03efH
	DW	02499H
	DW	083aH
	DW	04aeeH
	DW	013adH
	DW	03099H
	DW	010adH
	DW	03e2fH
	DW	0534H
	DW	03bfdH
	DW	0db8H
	DW	02e7aH
	DW	0373dH
	DW	03ee5H
	DW	01ac6H
	DW	07daH
	DW	02e1H
	DW	0ec3H
	DW	035dH
	DW	02cbeH
	DW	0b40H
	DW	0decH
	DW	0dd4H
	DW	02361H
	DW	04d9H
	DW	03067H
	DW	0380H
	DW	02162H
	DW	01215H
	DW	02d29H
	DW	01690H
	DW	01fc1H
	DW	024dH
	DW	0201aH
	DW	024cH
	DW	04928H
	DW	0eabH
	DW	032adH
	DW	0c4dH
	DW	03d71H
	DW	02f6H
	DW	040faH
	DW	02f2H
	DW	03b76H
	DW	02b82H
	DW	03dffH
	DW	08a0H
	DW	01241H
	DW	0262H
	DW	027eaH
	DW	02a6H
	DW	03b99H
	DW	01032H
	DW	01661H
	DW	0cffH
	DW	020b9H
	DW	0686H
	DW	04d96H
	DW	0911H
	DW	03c5aH
	DW	01587H
	DW	036e6H
	DW	01569H
	DW	01660H
	DW	0b48H
	DW	01d9cH
	DW	0542H
	DW	03830H
	DW	014cdH
	DW	03f6cH
	DW	0f6eH
	DW	03b0eH
	DW	0ea0H
	DW	03bcaH
	DW	059bH
	DW	03905H
	DW	0fe6H
	DW	0300dH
	DW	03d50H
	DW	01dc1H
	DW	06a3H
	DW	087aH
	DW	0374H
	DW	0116bH
	DW	011d7H
	DW	046aeH
	DW	0ceaH
	DW	031c6H
	DW	032fH
	DW	03a4eH
	DW	038bH
	DW	03aa8H
	DW	010b9H
	DW	03c9eH
	DW	020b0H
	DW	0464aH
	DW	043fH
	DW	0936H
	DW	0361H
	DW	03f99H
	DW	0ecbH
	DW	03d3fH
	DW	011f4H
	DW	03fe4H
	DW	05feH
	DW	040c8H
	DW	08a2H
	DW	041c1H
	DW	025e1H
	DW	03e39H
	DW	011a1H
	DW	0ccdH
	DW	043dH
	DW	025abH
	DW	088bH
	DW	02ec5H
	DW	017b4H
	DW	023efH
	DW	0116eH
	DW	022fbH
	DW	065dH
	DW	02831H
	DW	0bf6H
	DW	04061H
	DW	01423H
	DW	03c6aH
	DW	01b9aH
	DW	0356eH
	DW	09efH
	DW	01499H
	DW	08e5H
	DW	0416aH
	DW	01845H
	DW	0410fH
	DW	0d50H
	DW	04f50H
	DW	0d23H
	DW	04900H
	DW	07c1H
	DW	0375cH
	DW	03243H
	DW	03b32H
	DW	03d57H
	DW	01179H
	DW	03fcH
	DW	0691H
	DW	0376H
	DW	010d7H
	DW	010cdH
	DW	022f8H
	DW	0e49H
	DW	01705H
	DW	047bH
	DW	02d7fH
	DW	05acH
	DW	03e0eH
	DW	08b3H
	DW	011e6H
	DW	019f4H
	DW	01b11H
	DW	04b5H
	DW	0184cH
	DW	031fH
	DW	0307fH
	DW	0d51H
	DW	03e60H
	DW	0f25H
	DW	04d93H
	DW	083dH
	DW	025d9H
	DW	085dH
	DW	03996H
	DW	0227eH
	DW	03890H
	DW	0a27H
	DW	0719H
	DW	04d6H
	DW	01e5bH
	DW	032dH
	DW	04a87H
	DW	0113aH
	DW	015b2H
	DW	0810H
	DW	0e67H
	DW	0b1cH
	DW	0441bH
	DW	08d0H
	DW	04139H
	DW	01186H
	DW	03f47H
	DW	0150cH
	DW	01f5cH
	DW	0acbH
	DW	0d4dH
	DW	0847H
	DW	04412H
	DW	01565H
	DW	03582H
	DW	0ae2H
	DW	04da7H
	DW	0aa0H
	DW	0238aH
	DW	0f28H
	DW	046fcH
	DW	012e1H
	DW	043b8H
	DW	02fafH
	DW	013fcH
	DW	03e4H
	DW	01347H
	DW	03dcH
	DW	026a0H
	DW	0c09H
	DW	0177eH
	DW	014fbH
	DW	03e09H
	DW	0683H
	DW	020d5H
	DW	049fH
	DW	03aefH
	DW	093eH
	DW	04d41H
	DW	01b5aH
	DW	02ebbH
	DW	061aH
	DW	01c6fH
	DW	0468H
	DW	041dbH
	DW	05fcH
	DW	03d92H
	DW	01505H
	DW	03974H
	DW	0811H
	DW	04e89H
	DW	086bH
	DW	04306H
	DW	02035H
	DW	045f7H
	DW	018aeH
	DW	0155bH
	DW	05e0H
	DW	01004H
	DW	0a0eH
	DW	0440dH
	DW	01a9aH
	DW	01629H
	DW	0b48H
	DW	040fcH
	DW	0d36H
	DW	0230fH
	DW	0727H
	DW	04ebfH
	DW	01281H
	DW	04c5eH
	DW	01c7eH
	DW	01a02H
	DW	0addH
	DW	02cd0H
	DW	0cf9H
	DW	04bc5H
	DW	013beH
	DW	049beH
	DW	01272H
	DW	04037H
	DW	0945H
	DW	04fceH
	DW	01122H
	DW	02c59H
	DW	0679eH
	DW	02d49H
	DW	0bfcH
	DW	0b32H
	DW	061eH
	DW	013f4H
	DW	042eH
	DW	0258eH
	DW	01333H
	DW	0134bH
	DW	0dd0H
	DW	01d75H
	DW	036eH
	DW	050edH
	DW	0353H
	DW	01b1aH
	DW	0112bH
	DW	0419fH
	DW	01e35H
	DW	02799H
	DW	03fbH
	DW	02675H
	DW	03c4H
	DW	03c86H
	DW	0f73H
	DW	03c63H
	DW	0d66H
	DW	049afH
	DW	03d6H
	DW	04e98H
	DW	03c3H
	DW	041ecH
	DW	03257H
	DW	037feH
	DW	01068H
	DW	019c7H
	DW	04c4H
	DW	02406H
	DW	032eH
	DW	0422eH
	DW	0140eH
	DW	0161dH
	DW	01322H
	DW	01570H
	DW	0706H
	DW	04f22H
	DW	0f7aH
	DW	0426dH
	DW	01822H
	DW	04609H
	DW	01729H
	DW	02495H
	DW	0d5cH
	DW	01d32H
	DW	07b3H
	DW	04c51H
	DW	01439H
	DW	04a3bH
	DW	0bbeH
	DW	04046H
	DW	0eccH
	DW	03ec6H
	DW	093fH
	DW	021d8H
	DW	0ab7H
	DW	024e5H
	DW	066f6H
	DW	02a68H
	DW	0507H
	DW	0de3H
	DW	03f1H
	DW	015e6H
	DW	0e26H
	DW	04bfdH
	DW	01588H
	DW	030a5H
	DW	031dH
	DW	0509aH
	DW	038fH
	DW	03c43H
	DW	0bfaH
	DW	0428dH
	DW	02823H
	DW	049c3H
	DW	0a49H
	DW	0f49H
	DW	04f4H
	DW	04c3fH
	DW	0d2bH
	DW	04684H
	DW	0146eH
	DW	04b5bH
	DW	068eH
	DW	04c34H
	DW	0c64H
	DW	04698H
	DW	02a02H
	DW	040f1H
	DW	01abdH
	DW	0c3eH
	DW	08faH
	DW	02a75H
	DW	0985H
	DW	03cdcH
	DW	01b01H
	DW	03135H
	DW	0d35H
	DW	02b6cH
	DW	0ce1H
	DW	0417aH
	DW	0978H
	DW	049a5H
	DW	01a3bH
	DW	04313H
	DW	0269fH
	DW	031c7H
	DW	0a2dH
	DW	022e9H
	DW	0c44H
	DW	04a59H
	DW	01e54H
	DW	047abH
	DW	0f28H
	DW	04ffbH
	DW	0e62H
	DW	04c92H
	DW	0d34H
	DW	032f4H
	DW	04badH
	DW	0291eH
	DW	05a54H
_table_gain_lowrates DW 02a3dH
	DW	07051H
	DW	0b3fH
	DW	043b5H
	DW	05000H
	DW	0ae1H
	DW	0fdc6H
	DW	0f299H
	DW	04999H
	DW	019c2H
	DW	02bfH
	DW	0108bH
	DW	01851H
	DW	01cf5H
	DW	036cH
	DW	0149cH
	DW	04333H
	DW	028ccH
	DW	0567H
	DW	02085H
	DW	0547aH
	DW	04f5H
	DW	0f93dH
	DW	0d74aH
	DW	0528fH
	DW	01147H
	DW	071H
	DW	02abH
	DW	02c28H
	DW	0614H
	DW	0fa6aH
	DW	0de5fH
	DW	04a3dH
	DW	03214H
	DW	0696H
	DW	027a4H
	DW	043d7H
	DW	09c2H
	DW	0fd25H
	DW	0eed2H
	DW	045c2H
	DW	012e1H
	DW	0f4H
	DW	05c0H
	DW	0270aH
	DW	09c2H
	DW	0fd25H
	DW	0eed2H
	DW	0447aH
	DW	01eb8H
	DW	03c4H
	DW	016aaH
	DW	037aeH
	DW	075cH
	DW	0fb85H
	DW	0e505H
	DW	03e14H
	DW	0c51H
	DW	0fe7dH
	DW	0f6e9H
	DW	01a3dH
	DW	070aH
	DW	0fb43H
	DW	0e379H
	DW	0470aH
	DW	04ee1H
	DW	0935H
	DW	0376dH
	DW	04666H
	DW	0bd7H
	DW	0fe43H
	DW	0f58aH
	DW	04147H
	DW	016e1H
	DW	0210H
	DW	0c6dH
	DW	0228fH
	DW	0faeH
	DW	0ffe2H
	DW	0ff4cH
	DW	03e14H
	DW	0230aH
	DW	0486H
	DW	01b3cH
	DW	04666H
	DW	0570H
	DW	0f9c6H
	DW	0da81H
	DW	04147H
	DW	01000H
	DW	00H
	DW	00H
	DW	02000H
	DW	028fH
	DW	0f56cH
	DW	0c04fH
	DW	03b85H
	DW	03666H
	DW	0710H
	DW	02a84H
	DW	037aeH
	DW	0c28H
	DW	0fe6aH
	DW	0f674H
	DW	0370aH
	DW	0123dH
	DW	0c1H
	DW	048dH
	DW	0151eH
	DW	0a8fH
	DW	0fd9aH
	DW	0f18fH
	DW	0347aH
	DW	01999H
	DW	02b6H
	DW	01054H
	DW	030a3H
	DW	0385H
	DW	0f743H
	DW	0cb64H
	DW	030a3H
	DW	0a66H
	DW	0fd83H
	DW	0f107H
	DW	0eb8H
	DW	028fH
	DW	0f56cH
	DW	0c04fH
	DW	03999H
	DW	05bd7H
	DW	0a16H
	DW	03cb7H
	DW	04ae1H
	DW	0999H
	DW	0fd0dH
	DW	0ee3eH
	DW	04eb8H
	DW	013d7H
	DW	013eH
	DW	0779H
	DW	01ae1H
	DW	01000H
	DW	00H
	DW	00H
	DW	05000H
	DW	02170H
	DW	0441H
	DW	0199cH
	DW	04cccH
	DW	02e1H
	DW	0f61aH
	DW	0c469H
	DW	04a3dH
	DW	010a3H
	DW	03aH
	DW	015bH
	DW	01eb8H
	DW	0828H
	DW	0fc1dH
	DW	0e897H
	DW	02cccH
	DW	03000H
	DW	0657H
	DW	0262bH
	DW	03e14H
	DW	05c2H
	DW	0fa1aH
	DW	0dc7eH
	DW	03d70H
	DW	01214H
	DW	0b4H
	DW	043eH
	DW	023d7H
	DW	0599H
	DW	0f9f0H
	DW	0db83H
	DW	03eb8H
	DW	01b5cH
	DW	0319H
	DW	012a4H
	DW	039ebH
	DW	02e1H
	DW	0f61aH
	DW	0c469H
	DW	03ae1H
	DW	08ccH
	DW	0fc8cH
	DW	0eb37H
	DW	013d7H
	DW	04ccH
	DW	0f90cH
	DW	0d626H
	DW	033d7H
	DW	043aeH
	DW	0853H
	DW	0321bH
	DW	040a3H
	DW	091eH
	DW	0fcc1H
	DW	0ec76H
	DW	03ae1H
	DW	016b8H
	DW	0206H
	DW	0c2eH
	DW	0f5cH
	DW	0e66H
	DW	0ff64H
	DW	0fc56H
	DW	037aeH
	DW	02199H
	DW	0448H
	DW	019c6H
	DW	041ebH
	DW	030aH
	DW	0f66aH
	DW	0c64aH
	DW	03ae1H
	DW	0ee1H
	DW	0ff95H
	DW	0fd7aH
	DW	017aeH
	DW	0266H
	DW	0f50cH
	DW	0be11H
	DW	0247aH
	DW	02428H
	DW	04b4H
	DW	01c53H
	DW	033d7H
	DW	06e1H
	DW	0fb21H
	DW	0e2acH
	DW	033d7H
	DW	0dc2H
	DW	0ff21H
	DW	0fac1H
	DW	0999H
	DW	07aeH
	DW	0fbc4H
	DW	0e67fH
	DW	02cccH
	DW	01599H
	DW	01bbH
	DW	0a6cH
	DW	028f5H
	DW	02e1H
	DW	0f61aH
	DW	0c469H
	DW	02d70H
	DW	0c7aH
	DW	0fe91H
	DW	0f75cH
	DW	05c2H
	DW	030aH
	DW	0f66aH
	DW	0c64aH
PUBLIC	_Dec_gain
; Function compile flags: /Ogtp
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\gc_pred.c
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c
;	COMDAT _Dec_gain
_TEXT	SEGMENT
_pred_state$1$ = -20					; size = 4
_qua_ener_MR122$1$ = -16				; size = 4
_g_code$1$ = -12					; size = 4
_mode$1$ = -8						; size = 4
_frac$ = -8						; size = 2
_exp$ = -4						; size = 2
_index$ = 8						; size = 2
_code$ = 12						; size = 4
_evenSubfr$ = 16					; size = 2
_gain_pit$ = 20						; size = 4
_gain_cod$ = 24						; size = 4
_Dec_gain PROC						; COMDAT
; _pred_state$ = ecx
; _mode$ = edx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	57		 push	 edi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 298  :         result = (Word32) var1 *((Word32) 1 << var2);

  00008	66 8b 7d 08	 mov	 di, WORD PTR _index$[ebp]
  0000c	0f bf f7	 movsx	 esi, di
  0000f	c1 e6 02	 shl	 esi, 2

; 300  :         if ((var2 > 15 && var1 != 0) || (result != (Word32) ((Word16) result)))

  00012	0f bf c6	 movsx	 eax, si
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 72   : {

  00015	89 55 f8	 mov	 DWORD PTR _mode$1$[ebp], edx
  00018	89 4d ec	 mov	 DWORD PTR _pred_state$1$[ebp], ecx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 300  :         if ((var2 > 15 && var1 != 0) || (result != (Word32) ((Word16) result)))

  0001b	3b f0		 cmp	 esi, eax
  0001d	74 1f		 je	 SHORT $LN11@Dec_gain

; 301  :         {
; 302  :             Overflow = 1;
; 303  :             var_out = (var1 > 0) ? MAX_16 : MIN_16;

  0001f	66 85 ff	 test	 di, di
  00022	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
  0002c	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H
  00031	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  00036	0f 4f c1	 cmovg	 eax, ecx
  00039	0f b7 f0	 movzx	 esi, ax

; 304  :         }
; 305  :         else

  0003c	eb 03		 jmp	 SHORT $LN8@Dec_gain
$LN11@Dec_gain:

; 306  :         {
; 307  :             var_out = extract_l (result);

  0003e	0f b7 f6	 movzx	 esi, si
$LN8@Dec_gain:

; 186  :     L_diff = (Word32) var1 - var2;

  00041	0f bf ca	 movsx	 ecx, dx
  00044	53		 push	 ebx

; 79   :     if (L_var1 > 0X00007fffL)

  00045	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH

; 186  :     L_diff = (Word32) var1 - var2;

  0004a	8d 41 fa	 lea	 eax, DWORD PTR [ecx-6]

; 79   :     if (L_var1 > 0X00007fffL)

  0004d	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00052	7e 0c		 jle	 SHORT $LN30@Dec_gain

; 80   :     {
; 81   :         Overflow = 1;

  00054	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  0005e	eb 1c		 jmp	 SHORT $LN170@Dec_gain
$LN30@Dec_gain:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00060	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00065	7d 0c		 jge	 SHORT $LN28@Dec_gain

; 85   :     {
; 86   :         Overflow = 1;

  00067	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;
; 88   :     }
; 89   :     else

  00071	eb 09		 jmp	 SHORT $LN170@Dec_gain
$LN28@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 84   :          || sub (mode, MR67) == 0)

  00073	66 85 c0	 test	 ax, ax
  00076	0f 84 87 01 00
	00		 je	 $LN4@Dec_gain
$LN170@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 186  :     L_diff = (Word32) var1 - var2;

  0007c	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]

; 79   :     if (L_var1 > 0X00007fffL)

  0007f	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00084	7e 0c		 jle	 SHORT $LN40@Dec_gain

; 80   :     {
; 81   :         Overflow = 1;

  00086	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  00090	eb 1c		 jmp	 SHORT $LN171@Dec_gain
$LN40@Dec_gain:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  00092	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00097	7d 0c		 jge	 SHORT $LN38@Dec_gain

; 85   :     {
; 86   :         Overflow = 1;

  00099	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;
; 88   :     }
; 89   :     else

  000a3	eb 09		 jmp	 SHORT $LN171@Dec_gain
$LN38@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 84   :          || sub (mode, MR67) == 0)

  000a5	66 85 c0	 test	 ax, ax
  000a8	0f 84 55 01 00
	00		 je	 $LN4@Dec_gain
$LN171@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 186  :     L_diff = (Word32) var1 - var2;

  000ae	8d 41 fd	 lea	 eax, DWORD PTR [ecx-3]

; 79   :     if (L_var1 > 0X00007fffL)

  000b1	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  000b6	7e 0c		 jle	 SHORT $LN50@Dec_gain

; 80   :     {
; 81   :         Overflow = 1;

  000b8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 82   :         var_out = MAX_16;

  000c2	eb 1c		 jmp	 SHORT $LN172@Dec_gain
$LN50@Dec_gain:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  000c4	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  000c9	7d 0c		 jge	 SHORT $LN48@Dec_gain

; 85   :     {
; 86   :         Overflow = 1;

  000cb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 87   :         var_out = MIN_16;
; 88   :     }
; 89   :     else

  000d5	eb 09		 jmp	 SHORT $LN172@Dec_gain
$LN48@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 84   :          || sub (mode, MR67) == 0)

  000d7	66 85 c0	 test	 ax, ax
  000da	0f 84 23 01 00
	00		 je	 $LN4@Dec_gain
$LN172@Dec_gain:

; 92   :     }
; 93   :     else
; 94   :     {
; 95   :         test();
; 96   :         if (sub (mode, MR475) == 0)

  000e0	8b 7d f8	 mov	 edi, DWORD PTR _mode$1$[ebp]
  000e3	33 d2		 xor	 edx, edx
  000e5	8b cf		 mov	 ecx, edi
  000e7	e8 00 00 00 00	 call	 _sub
  000ec	66 85 c0	 test	 ax, ax
  000ef	0f 85 02 01 00
	00		 jne	 $LN2@Dec_gain

; 97   :         {
; 98   :             index = add (index, shl(sub(1, evenSubfr), 1));

  000f5	8b 55 10	 mov	 edx, DWORD PTR _evenSubfr$[ebp]
  000f8	b9 01 00 00 00	 mov	 ecx, 1
  000fd	e8 00 00 00 00	 call	 _sub
  00102	ba 01 00 00 00	 mov	 edx, 1
  00107	8b c8		 mov	 ecx, eax
  00109	e8 00 00 00 00	 call	 _shl
  0010e	8b d0		 mov	 edx, eax
  00110	8b ce		 mov	 ecx, esi
  00112	e8 00 00 00 00	 call	 _add

; 99   :             p = &table_gain_MR475[index];                  move16 ();

  00117	0f bf d0	 movsx	 edx, ax

; 100  :             
; 101  :             *gain_pit = *p++;                              move16 ();

  0011a	8b 45 14	 mov	 eax, DWORD PTR _gain_pit$[ebp]
  0011d	66 8b 0c 55 00
	00 00 00	 mov	 cx, WORD PTR _table_gain_MR475[edx*2]
  00125	66 89 08	 mov	 WORD PTR [eax], cx

; 103  :             
; 104  :             /*---------------------------------------------------------*
; 105  :              *  calculate predictor update values (not stored in 4.75  *
; 106  :              *  quantizer table to save space):                        *
; 107  :              *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  *
; 108  :              *                                                         *
; 109  :              *   qua_ener       = log2(g)                              *
; 110  :              *   qua_ener_MR122 = 20*log10(g)                          *
; 111  :              *---------------------------------------------------------*/
; 112  : 
; 113  :             /* Log2(x Q12) = log2(x) + 12 */
; 114  :             Log2 (L_deposit_l (g_code), &exp, &frac); 

  00128	8d 4d f8	 lea	 ecx, DWORD PTR _frac$[ebp]
  0012b	0f b7 04 55 02
	00 00 00	 movzx	 eax, WORD PTR _table_gain_MR475[edx*2+2]
  00133	8d 55 fc	 lea	 edx, DWORD PTR _exp$[ebp]
  00136	51		 push	 ecx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 1715 :     L_var_out = (Word32) var1;

  00137	0f bf c8	 movsx	 ecx, ax
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 102  :             g_code = *p++;                                 move16 ();

  0013a	89 45 f4	 mov	 DWORD PTR _g_code$1$[ebp], eax

; 103  :             
; 104  :             /*---------------------------------------------------------*
; 105  :              *  calculate predictor update values (not stored in 4.75  *
; 106  :              *  quantizer table to save space):                        *
; 107  :              *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  *
; 108  :              *                                                         *
; 109  :              *   qua_ener       = log2(g)                              *
; 110  :              *   qua_ener_MR122 = 20*log10(g)                          *
; 111  :              *---------------------------------------------------------*/
; 112  : 
; 113  :             /* Log2(x Q12) = log2(x) + 12 */
; 114  :             Log2 (L_deposit_l (g_code), &exp, &frac); 

  0013d	e8 00 00 00 00	 call	 _Log2

; 115  :             exp = sub(exp, 12);

  00142	8b 4d fc	 mov	 ecx, DWORD PTR _exp$[ebp]
  00145	83 c4 04	 add	 esp, 4
  00148	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0014d	e8 00 00 00 00	 call	 _sub
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 375  :             if (var1 < 0)

  00152	8b 4d f8	 mov	 ecx, DWORD PTR _frac$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 115  :             exp = sub(exp, 12);

  00155	0f b7 c0	 movzx	 eax, ax
  00158	89 45 fc	 mov	 DWORD PTR _exp$[ebp], eax
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 375  :             if (var1 < 0)

  0015b	66 85 c9	 test	 cx, cx
  0015e	79 0c		 jns	 SHORT $LN82@Dec_gain

; 376  :             {
; 377  :                 var_out = ~((~var1) >> var2);

  00160	0f bf c1	 movsx	 eax, cx
  00163	f7 d0		 not	 eax
  00165	c1 f8 05	 sar	 eax, 5
  00168	f7 d0		 not	 eax

; 378  :             }
; 379  :             else

  0016a	eb 07		 jmp	 SHORT $LN178@Dec_gain
$LN82@Dec_gain:

; 380  :             {
; 381  :                 var_out = var1 >> var2;

  0016c	66 8b c1	 mov	 ax, cx
  0016f	66 c1 f8 05	 sar	 ax, 5
$LN178@Dec_gain:
  00173	0f b7 c0	 movzx	 eax, ax

; 1444 :             }
; 1445 :         }
; 1446 :     }
; 1447 : #if (WMOPS)
; 1448 :     multiCounter[currCounter].L_shr++;
; 1449 : #endif
; 1450 :     return (L_var_out);
; 1451 : }
; 1452 : 
; 1453 : /*___________________________________________________________________________
; 1454 :  |                                                                           |
; 1455 :  |   Function Name : shr_r                                                   |
; 1456 :  |                                                                           |
; 1457 :  |   Purpose :                                                               |
; 1458 :  |                                                                           |
; 1459 :  |   Same as shr(var1,var2) but with rounding. Saturate the result in case of|
; 1460 :  |   underflows or overflows :                                               |
; 1461 :  |    - If var2 is greater than zero :                                       |
; 1462 :  |          if (sub(shl(shr(var1,var2),1),shr(var1,sub(var2,1))))            |
; 1463 :  |          is equal to zero                                                 |
; 1464 :  |                     then                                                  |
; 1465 :  |                     shr_r(var1,var2) = shr(var1,var2)                     |
; 1466 :  |                     else                                                  |
; 1467 :  |                     shr_r(var1,var2) = add(shr(var1,var2),1)              |
; 1468 :  |    - If var2 is less than or equal to zero :                              |
; 1469 :  |                     shr_r(var1,var2) = shr(var1,var2).                    |
; 1470 :  |                                                                           |
; 1471 :  |   Complexity weight : 2                                                   |
; 1472 :  |                                                                           |
; 1473 :  |   Inputs :                                                                |
; 1474 :  |                                                                           |
; 1475 :  |    var1                                                                   |
; 1476 :  |             16 bit short signed integer (Word16) whose value falls in the |
; 1477 :  |             range : 0xffff 8000 <= var1 <= 0x0000 7fff.                   |
; 1478 :  |                                                                           |
; 1479 :  |    var2                                                                   |
; 1480 :  |             16 bit short signed integer (Word16) whose value falls in the |
; 1481 :  |             range : 0xffff 8000 <= var1 <= 0x0000 7fff.                   |
; 1482 :  |                                                                           |
; 1483 :  |   Outputs :                                                               |
; 1484 :  |                                                                           |
; 1485 :  |    none                                                                   |
; 1486 :  |                                                                           |
; 1487 :  |   Return Value :                                                          |
; 1488 :  |                                                                           |
; 1489 :  |    var_out                                                                |
; 1490 :  |             16 bit short signed integer (Word16) whose value falls in the |
; 1491 :  |             range : 0xffff 8000 <= var_out <= 0x0000 7fff.                |
; 1492 :  |___________________________________________________________________________|
; 1493 : */
; 1494 : 
; 1495 : Word16 shr_r (Word16 var1, Word16 var2)
; 1496 : {
; 1497 :     Word16 var_out;
; 1498 : 
; 1499 :     if (var2 > 15)
; 1500 :     {
; 1501 :         var_out = 0;
; 1502 :     }
; 1503 :     else
; 1504 :     {
; 1505 :         var_out = shr (var1, var2);

  00176	0f b7 f0	 movzx	 esi, ax

; 1506 : #if (WMOPS)
; 1507 :         multiCounter[currCounter].shr--;
; 1508 : #endif
; 1509 : 
; 1510 :         if (var2 > 0)
; 1511 :         {
; 1512 :             if ((var1 & ((Word16) 1 << (var2 - 1))) != 0)

  00179	f6 c1 10	 test	 cl, 16			; 00000010H
  0017c	74 04		 je	 SHORT $LN75@Dec_gain

; 1513 :             {
; 1514 :                 var_out++;

  0017e	40		 inc	 eax
  0017f	0f b7 f0	 movzx	 esi, ax
$LN75@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 117  :             qua_ener_MR122 = add (shr_r (frac, 5), shl (exp, 10));

  00182	8b 4d fc	 mov	 ecx, DWORD PTR _exp$[ebp]
  00185	8b d3		 mov	 edx, ebx
  00187	e8 00 00 00 00	 call	 _shl
  0018c	8b d0		 mov	 edx, eax
  0018e	8b ce		 mov	 ecx, esi
  00190	e8 00 00 00 00	 call	 _add

; 118  :     
; 119  :             /* 24660 Q12 ~= 6.0206 = 20*log10(2) */
; 120  :             L_tmp = Mpy_32_16(exp, frac, 24660);

  00195	8b 55 f8	 mov	 edx, DWORD PTR _frac$[ebp]

; 121  :             qua_ener = round (L_shl (L_tmp, 13)); /* Q12 * Q0 = Q13 -> Q10 */

  00198	be 0d 00 00 00	 mov	 esi, 13			; 0000000dH
  0019d	8b 4d fc	 mov	 ecx, DWORD PTR _exp$[ebp]
  001a0	0f b7 c0	 movzx	 eax, ax
  001a3	68 54 60 00 00	 push	 24660			; 00006054H
  001a8	89 45 f0	 mov	 DWORD PTR _qua_ener_MR122$1$[ebp], eax
  001ab	e8 00 00 00 00	 call	 _Mpy_32_16
  001b0	83 c4 04	 add	 esp, 4
$LL98@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 1357 :             if (L_var1 > (Word32) 0X3fffffffL)

  001b3	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  001b8	7f 22		 jg	 SHORT $LN162@Dec_gain

; 1361 :                 break;
; 1362 :             }
; 1363 :             else
; 1364 :             {
; 1365 :                 if (L_var1 < (Word32) 0xc0000000L)

  001ba	3d 00 00 00 c0	 cmp	 eax, -1073741824	; c0000000H
  001bf	7c 14		 jl	 SHORT $LN163@Dec_gain

; 1369 :                     break;
; 1370 :                 }
; 1371 :             }
; 1372 :             L_var1 *= 2;

  001c1	4e		 dec	 esi
  001c2	03 c0		 add	 eax, eax
  001c4	66 85 f6	 test	 si, si
  001c7	7f ea		 jg	 SHORT $LL98@Dec_gain
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 121  :             qua_ener = round (L_shl (L_tmp, 13)); /* Q12 * Q0 = Q13 -> Q10 */

  001c9	8b c8		 mov	 ecx, eax
  001cb	e8 00 00 00 00	 call	 _round
  001d0	0f b7 f0	 movzx	 esi, ax

; 122  :         }
; 123  :         else

  001d3	eb 56		 jmp	 SHORT $LN118@Dec_gain
$LN163@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 1368 :                     L_var_out = MIN_32;

  001d5	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  001da	eb 05		 jmp	 SHORT $LN179@Dec_gain
$LN162@Dec_gain:

; 1360 :                 L_var_out = MAX_32;

  001dc	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
$LN179@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 121  :             qua_ener = round (L_shl (L_tmp, 13)); /* Q12 * Q0 = Q13 -> Q10 */

  001e1	8b c8		 mov	 ecx, eax
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 1359 :                 Overflow = 1;

  001e3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 121  :             qua_ener = round (L_shl (L_tmp, 13)); /* Q12 * Q0 = Q13 -> Q10 */

  001ed	e8 00 00 00 00	 call	 _round
  001f2	0f b7 f0	 movzx	 esi, ax

; 122  :         }
; 123  :         else

  001f5	eb 34		 jmp	 SHORT $LN118@Dec_gain
$LN2@Dec_gain:

; 124  :         {
; 125  :             p = &table_gain_lowrates[index];                move16 ();

  001f7	0f bf c6	 movsx	 eax, si
  001fa	8d 14 45 00 00
	00 00		 lea	 edx, DWORD PTR _table_gain_lowrates[eax*2]

; 126  :             
; 127  :             *gain_pit = *p++;                               move16 ();
; 128  :             g_code = *p++;                                  move16 ();
; 129  :             qua_ener_MR122 = *p++;                          move16 ();
; 130  :             qua_ener = *p;                                  move16 ();

  00201	eb 0d		 jmp	 SHORT $LN180@Dec_gain
$LN4@Dec_gain:
  00203	8b 7d f8	 mov	 edi, DWORD PTR _mode$1$[ebp]

; 85   :     {
; 86   :         p = &table_gain_highrates[index];                  move16 ();

  00206	0f bf c6	 movsx	 eax, si
  00209	8d 14 45 00 00
	00 00		 lea	 edx, DWORD PTR _table_gain_highrates[eax*2]
$LN180@Dec_gain:

; 87   :         
; 88   :         *gain_pit = *p++;                                  move16 ();

  00210	8b 45 14	 mov	 eax, DWORD PTR _gain_pit$[ebp]
  00213	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 89   :         g_code = *p++;                                     move16 ();
; 90   :         qua_ener_MR122 = *p++;                             move16 ();
; 91   :         qua_ener = *p;                                     move16 ();

  00216	0f b7 72 06	 movzx	 esi, WORD PTR [edx+6]
  0021a	66 89 08	 mov	 WORD PTR [eax], cx
  0021d	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  00221	89 45 f4	 mov	 DWORD PTR _g_code$1$[ebp], eax
  00224	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  00228	89 45 f0	 mov	 DWORD PTR _qua_ener_MR122$1$[ebp], eax
$LN118@Dec_gain:

; 131  :         }
; 132  :     }
; 133  :     
; 134  :     /*-------------------------------------------------------------------*
; 135  :      *  predict codebook gain                                            *
; 136  :      *  ~~~~~~~~~~~~~~~~~~~~~                                            *
; 137  :      *  gc0     = Pow2(int(d)+frac(d))                                   *
; 138  :      *          = 2^exp + 2^frac                                         *
; 139  :      *                                                                   *
; 140  :      *  gcode0 (Q14) = 2^14*2^frac = gc0 * 2^(14-exp)                    *
; 141  :      *-------------------------------------------------------------------*/
; 142  : 
; 143  :     gc_pred(pred_state, mode, code, &exp, &frac, NULL, NULL);

  0022b	6a 00		 push	 0
  0022d	6a 00		 push	 0
  0022f	8d 45 f8	 lea	 eax, DWORD PTR _frac$[ebp]
  00232	8b d7		 mov	 edx, edi
  00234	8b 7d ec	 mov	 edi, DWORD PTR _pred_state$1$[ebp]
  00237	8b cf		 mov	 ecx, edi
  00239	50		 push	 eax
  0023a	8d 45 fc	 lea	 eax, DWORD PTR _exp$[ebp]
  0023d	50		 push	 eax
  0023e	ff 75 0c	 push	 DWORD PTR _code$[ebp]
  00241	e8 00 00 00 00	 call	 _gc_pred

; 144  : 
; 145  :     gcode0 = extract_l(Pow2(14, frac));

  00246	8b 55 f8	 mov	 edx, DWORD PTR _frac$[ebp]
  00249	83 c4 14	 add	 esp, 20			; 00000014H
  0024c	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00251	e8 00 00 00 00	 call	 _Pow2
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 485  :     L_var_out = (Word32) var1 *(Word32) var2;

  00256	0f bf c8	 movsx	 ecx, ax
  00259	8b 45 f4	 mov	 eax, DWORD PTR _g_code$1$[ebp]
  0025c	98		 cwde
  0025d	0f af c8	 imul	 ecx, eax

; 486  : 
; 487  :     if (L_var_out != (Word32) 0x40000000L)

  00260	81 f9 00 00 00
	40		 cmp	 ecx, 1073741824		; 40000000H
  00266	74 04		 je	 SHORT $LN123@Dec_gain

; 488  :     {
; 489  :         L_var_out *= 2;

  00268	03 c9		 add	 ecx, ecx

; 490  :     }
; 491  :     else

  0026a	eb 0f		 jmp	 SHORT $LN122@Dec_gain
$LN123@Dec_gain:

; 492  :     {
; 493  :         Overflow = 1;

  0026c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 494  :         L_var_out = MAX_32;

  00276	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
$LN122@Dec_gain:

; 186  :     L_diff = (Word32) var1 - var2;

  0027b	0f bf 45 fc	 movsx	 eax, WORD PTR _exp$[ebp]
  0027f	2b d8		 sub	 ebx, eax

; 79   :     if (L_var1 > 0X00007fffL)

  00281	81 fb ff 7f 00
	00		 cmp	 ebx, 32767		; 00007fffH
  00287	7e 14		 jle	 SHORT $LN131@Dec_gain

; 1432 :         {
; 1433 :             L_var_out = (L_var1 < 0L) ? -1 : 0;

  00289	33 d2		 xor	 edx, edx

; 80   :     {
; 81   :         Overflow = 1;

  0028b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 1432 :         {
; 1433 :             L_var_out = (L_var1 < 0L) ? -1 : 0;

  00295	85 c9		 test	 ecx, ecx
  00297	0f 99 c2	 setns	 dl
  0029a	4a		 dec	 edx

; 1434 :         }
; 1435 :         else

  0029b	eb 62		 jmp	 SHORT $LN136@Dec_gain
$LN131@Dec_gain:

; 83   :     }
; 84   :     else if (L_var1 < (Word32) 0xffff8000L)

  0029d	81 fb 00 80 ff
	ff		 cmp	 ebx, -32768		; ffff8000H
  002a3	7d 1a		 jge	 SHORT $LN129@Dec_gain

; 1423 :             var2 = -32;

  002a5	ba e0 ff ff ff	 mov	 edx, -32		; ffffffe0H

; 85   :     {
; 86   :         Overflow = 1;

  002aa	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Overflow, 1

; 1424 :         L_var_out = L_shl (L_var1, -var2);

  002b4	f7 da		 neg	 edx
  002b6	e8 00 00 00 00	 call	 _L_shl
  002bb	8b d0		 mov	 edx, eax

; 1425 : #if (WMOPS)
; 1426 :         multiCounter[currCounter].L_shl--;
; 1427 : #endif
; 1428 :     }
; 1429 :     else

  002bd	eb 40		 jmp	 SHORT $LN136@Dec_gain
$LN129@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 157  :     L_tmp = L_shr(L_tmp, sub(10, exp));

  002bf	0f b7 d3	 movzx	 edx, bx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 1420 :     if (var2 < 0)

  002c2	66 85 db	 test	 bx, bx
  002c5	79 16		 jns	 SHORT $LN142@Dec_gain

; 1421 :     {
; 1422 :         if (var2 < -32)

  002c7	66 83 fb e0	 cmp	 bx, -32			; ffffffe0H
  002cb	7d 05		 jge	 SHORT $LN141@Dec_gain

; 1423 :             var2 = -32;

  002cd	ba e0 ff ff ff	 mov	 edx, -32		; ffffffe0H
$LN141@Dec_gain:

; 1424 :         L_var_out = L_shl (L_var1, -var2);

  002d2	f7 da		 neg	 edx
  002d4	e8 00 00 00 00	 call	 _L_shl
  002d9	8b d0		 mov	 edx, eax

; 1425 : #if (WMOPS)
; 1426 :         multiCounter[currCounter].L_shl--;
; 1427 : #endif
; 1428 :     }
; 1429 :     else

  002db	eb 22		 jmp	 SHORT $LN136@Dec_gain
$LN142@Dec_gain:

; 1430 :     {
; 1431 :         if (var2 >= 31)

  002dd	66 83 fb 1f	 cmp	 bx, 31			; 0000001fH
  002e1	7c 0a		 jl	 SHORT $LN139@Dec_gain

; 1432 :         {
; 1433 :             L_var_out = (L_var1 < 0L) ? -1 : 0;

  002e3	33 d2		 xor	 edx, edx
  002e5	85 c9		 test	 ecx, ecx
  002e7	0f 99 c2	 setns	 dl
  002ea	4a		 dec	 edx

; 1434 :         }
; 1435 :         else

  002eb	eb 12		 jmp	 SHORT $LN136@Dec_gain
$LN139@Dec_gain:

; 1436 :         {
; 1437 :             if (L_var1 < 0)
; 1438 :             {
; 1439 :                 L_var_out = ~((~L_var1) >> var2);

  002ed	8b d1		 mov	 edx, ecx
  002ef	85 c9		 test	 ecx, ecx
  002f1	8a cb		 mov	 cl, bl
  002f3	79 08		 jns	 SHORT $LN137@Dec_gain
  002f5	f7 d2		 not	 edx
  002f7	d3 fa		 sar	 edx, cl
  002f9	f7 d2		 not	 edx

; 1440 :             }
; 1441 :             else

  002fb	eb 02		 jmp	 SHORT $LN136@Dec_gain
$LN137@Dec_gain:

; 1442 :             {
; 1443 :                 L_var_out = L_var1 >> var2;

  002fd	d3 fa		 sar	 edx, cl
$LN136@Dec_gain:
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 158  :     *gain_cod = extract_h(L_tmp);

  002ff	8b 45 18	 mov	 eax, DWORD PTR _gain_cod$[ebp]
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\basicop2.c

; 575  :     var_out = (Word16) (L_var1 >> 16);

  00302	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00305	c1 fa 10	 sar	 edx, 16			; 00000010H
  00308	5b		 pop	 ebx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 158  :     *gain_cod = extract_h(L_tmp);

  00309	66 89 10	 mov	 WORD PTR [eax], dx
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\gc_pred.c

; 364  :     for (i = 3; i > 0; i--)

  0030c	ba 03 00 00 00	 mov	 edx, 3
$LL149@Dec_gain:

; 365  :     {
; 366  :         st->past_qua_en[i] = st->past_qua_en[i - 1];             move16 ();

  00311	0f b7 41 f8	 movzx	 eax, WORD PTR [ecx-8]
  00315	8d 49 fe	 lea	 ecx, DWORD PTR [ecx-2]
  00318	66 89 41 fc	 mov	 WORD PTR [ecx-4], ax
  0031c	4a		 dec	 edx

; 367  :         st->past_qua_en_MR122[i] = st->past_qua_en_MR122[i - 1]; move16 ();

  0031d	0f b7 41 02	 movzx	 eax, WORD PTR [ecx+2]
  00321	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  00325	66 85 d2	 test	 dx, dx
  00328	7f e7		 jg	 SHORT $LL149@Dec_gain

; 368  :     }
; 369  : 
; 370  :     st->past_qua_en_MR122[0] = qua_ener_MR122;  /*    log2 (qua_err), Q10 */

  0032a	8b 45 f0	 mov	 eax, DWORD PTR _qua_ener_MR122$1$[ebp]

; 371  : 	                                                             move16 ();
; 372  :     st->past_qua_en[0] = qua_ener;              /* 20*log10(qua_err), Q10 */

  0032d	66 89 37	 mov	 WORD PTR [edi], si
  00330	66 89 47 08	 mov	 WORD PTR [edi+8], ax
  00334	5f		 pop	 edi
  00335	5e		 pop	 esi
; File e:\mywork\client\pc2.0trunk\pc2.0\third_party\libamrplayer\amr\dec_gain.c

; 165  : }

  00336	8b e5		 mov	 esp, ebp
  00338	5d		 pop	 ebp
  00339	c3		 ret	 0
_Dec_gain ENDP
_TEXT	ENDS
END
